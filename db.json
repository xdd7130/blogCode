{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/stage/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/stage/source/css/stage.styl","path":"css/stage.styl","modified":0,"renderable":1},{"_id":"themes/stage/source/css/avatar-bg.css","path":"css/avatar-bg.css","modified":0,"renderable":1},{"_id":"themes/stage/source/js/header-bg.main.js","path":"js/header-bg.main.js","modified":0,"renderable":1},{"_id":"themes/stage/source/js/avatar-bg.main.js","path":"js/avatar-bg.main.js","modified":0,"renderable":1},{"_id":"themes/stage/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/stage/source/images/default-header.jpg","path":"images/default-header.jpg","modified":0,"renderable":1},{"_id":"themes/stage/source/js/toc.main.js","path":"js/toc.main.js","modified":0,"renderable":1},{"_id":"themes/stage/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/stage/source/lib/js/cav.js","path":"lib/js/cav.js","modified":0,"renderable":1},{"_id":"themes/stage/source/lib/js/waterrippleeffect.min.js","path":"lib/js/waterrippleeffect.min.js","modified":0,"renderable":1},{"_id":"themes/stage/source/lib/js/smooth-scroll.min.js","path":"lib/js/smooth-scroll.min.js","modified":0,"renderable":1},{"_id":"themes/stage/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/stage/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/stage/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/stage/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/stage/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/stage/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/stage/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/stage/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/about/audio/天地无霜.mp3","path":"about/audio/天地无霜.mp3","modified":0,"renderable":0}],"Cache":[{"_id":"themes/stage/.gitignore","hash":"b8f09b08a93345676418c0bc4cd1774e69d0395a","modified":1545814596649},{"_id":"themes/stage/webpack.config.js","hash":"fbcf889dfda68cdf76ae5991d4c033f395149741","modified":1545814596721},{"_id":"themes/stage/_config.yml","hash":"7a85bba8f91e629ac66a5de1f5f7f912b00881b0","modified":1563019566107},{"_id":"themes/stage/package.json","hash":"f572546b9882bf544455ad2f747add7f82bf0905","modified":1545814596669},{"_id":"themes/stage/README.md","hash":"9e36117d04521f74128d1e88613ebbbcffeb1bb9","modified":1545824664552},{"_id":"source/_posts/ArcGIS-API-for-JS02.md","hash":"2d14d8d486138c64c594f57a5ffd598ea5767a44","modified":1564988520894},{"_id":"source/_posts/ArcGIS-API-for-JS03.md","hash":"e181155f7c20755ba1396520ef682853dd76e003","modified":1564993523922},{"_id":"source/_posts/ArcGIS-API-for-JS01.md","hash":"11d6ba1d837cbaafbff0685694448fb00c7dff7d","modified":1564986590703},{"_id":"source/_posts/ArcGIS-API-for-JS04.md","hash":"487b528e195394d29dd4f525c2bc70894dcc3578","modified":1564995129843},{"_id":"source/_posts/ArcGIS-API-for-JS05.md","hash":"36a6c41b312c0515151ba6e4436fbb336f2c8c95","modified":1564995900621},{"_id":"source/_posts/ArcGIS-API-for-JS06.md","hash":"ac953491b2315cc73149f05fcd75c24b999e8e5b","modified":1564997357885},{"_id":"source/_posts/ArcGIS-API-for-JS07.md","hash":"6931777b9fceedddd5c9f7b296739622f576316c","modified":1564998455564},{"_id":"source/_posts/ArcGIS-API-for-JS08.md","hash":"a6ca64e5c7a2d4dde9ce228157f954f21400ef15","modified":1565000641333},{"_id":"source/_posts/ArcGIS-API-for-JS09.md","hash":"574823208a2dda1ac5d04ed340059e0ab8033b2c","modified":1565001182126},{"_id":"source/_posts/ArcGIS-API-for-JS10.md","hash":"92b5a2de38f2ffac2abbaac7e6a0e7d7ddef3a7e","modified":1565069915490},{"_id":"source/_posts/ArcGIS-API-for-JS11.md","hash":"b948f26dba43439eb92c12d355ed2e7e641ebf7b","modified":1565072029557},{"_id":"source/_posts/ArcGIS-API-for-JS13.md","hash":"8511c9b6beb9894790b83ef39e0b748e61ffd620","modified":1565076293744},{"_id":"source/_posts/ArcGIS-API-for-JS15.md","hash":"0e98f08f44a077de9e3d4192e4a273c5e774d4b7","modified":1565078236178},{"_id":"source/_posts/ArcGIS-API-for-JS14.md","hash":"4f350b7111f311901933bc4b1eb0d3ccd8522183","modified":1565077359294},{"_id":"source/_posts/ArcGIS-API-for-JS17.md","hash":"0f9bd675df24438655aa6a1b286a719e142d8128","modified":1565080345122},{"_id":"source/_posts/ArcGIS-API-for-JS12.md","hash":"b1adbac4944605ef79127e7d1fc94a406b0b536a","modified":1565073156099},{"_id":"source/_posts/ArcGIS-API-for-JS16.md","hash":"85279971c06d604947d3cf913045950f38adb4bf","modified":1565078820368},{"_id":"source/_posts/ArcGIS-API-for-JS19.md","hash":"8d9fb6a210170c926906c498a17cd514cb8006ac","modified":1565083138307},{"_id":"source/_posts/ArcGIS-API-for-JS23.md","hash":"09b12c07968e5d307e24b17cc1b73a09ea2fc840","modified":1565085675497},{"_id":"source/_posts/ArcGIS-API-for-JS18.md","hash":"2ce64a567be2af4d0043dcfef9721169973f2fd6","modified":1565082444931},{"_id":"source/_posts/ArcGIS-API-for-JS20.md","hash":"441af913d711dc4abc493c821ac74026bde51560","modified":1565083530223},{"_id":"source/_posts/ArcGIS-API-for-JS21.md","hash":"c46a67173087c7f46d544a1f6d5ca678078f5652","modified":1565084562114},{"_id":"source/_posts/ArcGIS-API-for-JS24.md","hash":"3d66ca75fa9d11c8252462137bc2b30d2d7fb72d","modified":1565086081791},{"_id":"source/_posts/ArcGIS.md","hash":"10e86aa9e077e2b74b9e4c011f8b5ec790361977","modified":1562987353128},{"_id":"source/_posts/ES6.md","hash":"60348131bfaf0a9b7d66b78a0e45e99722806f0f","modified":1546394937262},{"_id":"source/_posts/ArcGIS-API-for-JS22.md","hash":"a9d4d09ce7b3b04c4735e7f2c2617415bbe35f07","modified":1565085181788},{"_id":"source/_posts/ArcGIS-API-for-JS25.md","hash":"cd0903601306605076d4a60f699b57cdae693ba8","modified":1565086395586},{"_id":"source/_posts/WebSocket.md","hash":"103aeb3e24d3b31978764ccbd4e0ded5a7ca86e0","modified":1565318622095},{"_id":"source/_posts/git.md","hash":"1d3b28c1d98498828cf131f512d3bf407e6b98ed","modified":1564456047384},{"_id":"source/_posts/apply-and-bind.md","hash":"55c0129d8439d4a9b730d026578b4e4984497724","modified":1565492263898},{"_id":"source/_posts/http.md","hash":"260b1679902a93711ae8227225af6d851bc2e748","modified":1563363617810},{"_id":"source/_posts/login.md","hash":"4782259b1625e43f2a07595dd525870555e35f0a","modified":1572182413007},{"_id":"source/_posts/Promise.md","hash":"2e764bdbfd39eebbe14cee2958169eb362439711","modified":1563363611070},{"_id":"source/_posts/node2.md","hash":"705c8b8e18ba2d020b23724ad0591ffd2e15627d","modified":1565429976782},{"_id":"source/_posts/node1.md","hash":"39205ff385e10ec2b057579e8adc2a22bef663f4","modified":1565332692603},{"_id":"source/_posts/node3.md","hash":"db9699d642de1c28b58d34bd2f0cc6ae65e27d01","modified":1565662588470},{"_id":"source/_posts/hexo.md","hash":"993f23cf847354db97da8c8419687f138b1f6398","modified":1564496514953},{"_id":"source/_posts/node4.md","hash":"4ab9d9b0d70514f09a95079a750d74cefa030175","modified":1568087319892},{"_id":"source/_posts/node5.md","hash":"c40746da0d33ee2c2178417ef80f07227828cea9","modified":1568185893114},{"_id":"source/_posts/node6.md","hash":"65381cfea671e9e77806d73b72c9bb4ccebdb534","modified":1568171143353},{"_id":"source/_posts/node7.md","hash":"048a192575736464ef1424fa394a80cee655ec34","modified":1568287470222},{"_id":"source/_posts/python基础2.md","hash":"0579a63dfff8f7ffac14d47d4e8bada5697ea143","modified":1565175562158},{"_id":"source/_posts/python基础1.md","hash":"af386b036b97435d9508ca2753a77113193dfb97","modified":1565173460305},{"_id":"source/_posts/react.md","hash":"1730427a38efc98035d119099abb3b70d8e0b173","modified":1563363759743},{"_id":"source/_posts/tcp.md","hash":"fc24ac5cf71d7cf196635175d4669e226e2e176c","modified":1564394522916},{"_id":"source/_posts/vue.md","hash":"bec5e5afb266e96bbda480d5c276bc913dda1667","modified":1569741275957},{"_id":"source/_posts/vuex.md","hash":"06854a35d2c496157e6609fb7494789c31283ed7","modified":1565922135949},{"_id":"source/_posts/前端工作流.md","hash":"4a09077fe228d372173784097bf1ad4b9e699941","modified":1563363582530},{"_id":"source/_posts/垂直居中.md","hash":"40785da7a686f86e0159bd85e3d381e29c97c89c","modified":1563363562235},{"_id":"source/_posts/python基础4.md","hash":"93e190b4e942a9e9385bb423088a99452ad90679","modified":1565181771003},{"_id":"source/_posts/浏览器缓存.md","hash":"96b3a27d15baf67fa35af4bf8c6ac593efc1666f","modified":1563363562286},{"_id":"source/_posts/时序动画.md","hash":"60b810d03981a86946631120bdfeee1274a046db","modified":1567080002797},{"_id":"source/_posts/盒模型.md","hash":"59e9dbc3459ab6b5d07dfa173c124051dd5f2f58","modified":1563363550679},{"_id":"source/_posts/理解cookie、session、localStorage、sessionStorage之不同.md","hash":"b18df76585a3a46b216d62f0585334e6cbc18640","modified":1563363550718},{"_id":"source/_posts/类class.md","hash":"f21cf28515c82694d9a7198e2b785de92a547fe1","modified":1546847314415},{"_id":"source/_posts/跨域.md","hash":"d4cda2623039ffad099ac6ea241b41d6cdb50e6b","modified":1563363550567},{"_id":"source/_posts/遍历数组的常用方法.md","hash":"d55476c777d027da0d2073100bed6643f91e0c48","modified":1563363550743},{"_id":"source/_posts/闭包.md","hash":"ff69f0233807dd02b67a393a9289a52df940492c","modified":1563363550477},{"_id":"source/_posts/面试JS.md","hash":"598f36d35e8ffe6567e9a38212b4adcb17bad49b","modified":1563363550663},{"_id":"source/about/index.md","hash":"a48baf0aec96c4c47490d58ffef1e298e7848960","modified":1545908779537},{"_id":"source/tags/index.md","hash":"044f4b3b1c12a5d8ecafb5ffbc8330d6bf8707f2","modified":1545827089805},{"_id":"source/categories/index.md","hash":"7662b3847687270218dfb3dc3c77e30d91b2266b","modified":1545816541523},{"_id":"themes/stage/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1545814596619},{"_id":"themes/stage/.git/config","hash":"53d8169ec926355efc6e10084f87becceb4b3322","modified":1545814596629},{"_id":"themes/stage/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1545814588302},{"_id":"source/_posts/原型.md","hash":"7960cf1b1e1ceea765516695c88db8f996c3dfc5","modified":1563363582508},{"_id":"source/_posts/面试CSS.md","hash":"3cbd9f8122251e19bb51bdee1c95f002f0984031","modified":1563363550549},{"_id":"themes/stage/.git/index","hash":"84e8b7eb209a44f6a8248adfc2c4d5949b4f1b0e","modified":1569140922360},{"_id":"themes/stage/.git/packed-refs","hash":"20752f54b7a2390ed4614941f96f1f6002888dfa","modified":1545814596609},{"_id":"themes/stage/languages/en.yml","hash":"d4739dd9f472df01b4a3508dc3027e5022969d28","modified":1545827581016},{"_id":"themes/stage/languages/zh-CN.yml","hash":"24ab28cd7c8340d5bcd0bd0747ef9c5b10dffe97","modified":1545827465975},{"_id":"source/_posts/python基础3.md","hash":"c43b854069f571128b4330407e860da32cb24f14","modified":1565179496010},{"_id":"themes/stage/layout/category.ejs","hash":"a8cca2d8d37c5f56460c4b9e381f979d39b431c6","modified":1545814596649},{"_id":"themes/stage/layout/layout.ejs","hash":"53cb828c7a4d298029a82c2897bcbd04d6890731","modified":1545814596649},{"_id":"themes/stage/layout/index.ejs","hash":"dead9289f689a01412c294c6ed219a301f5c2043","modified":1545814596649},{"_id":"themes/stage/layout/page.ejs","hash":"56d5a70ed2177b115dba34c9ae4abfc87067f309","modified":1545814596649},{"_id":"themes/stage/layout/tags.ejs","hash":"07476044bbfc154a7cd49f51be1ef538481f7ec7","modified":1545827314363},{"_id":"themes/stage/layout/tag.ejs","hash":"84598e09d0529acd1dca4710b873056b767a20af","modified":1545814596669},{"_id":"themes/stage/layout/post.ejs","hash":"edfc8efae98c417eba8122947adf03654e890f8e","modified":1545814596669},{"_id":"themes/stage/src/avatar-bg.js","hash":"d4f9463fa6cca640ac3ca07904daa166f75d6964","modified":1545814596711},{"_id":"themes/stage/source/favicon.ico","hash":"0860fdf9c82b946b8fedbf94cb3276a18fc5102f","modified":1545814596687},{"_id":"themes/stage/layout/archive.ejs","hash":"60524d9a163a18175aa5208cb4c70862b3cba55c","modified":1545814596649},{"_id":"themes/stage/src/toc.js","hash":"230bf0f76140c708d23378543d6febad8b2c47fa","modified":1545814596721},{"_id":"themes/stage/src/header-bg.js","hash":"bc639b160fd24bcab326e0e48637d61aff1864c3","modified":1545814596711},{"_id":"source/_posts/ArcGIS-API-for-JS01/01.png","hash":"f65be3ed64da3762b6c94ca09cb2c460fdb0fede","modified":1564986025269},{"_id":"source/_posts/ArcGIS-API-for-JS01/02.png","hash":"d03529a9593f089152582971556aca2b0271d1f4","modified":1564986094604},{"_id":"source/_posts/ArcGIS-API-for-JS03/01.png","hash":"302e56cd0cd2e287348efebc29929783dd56d279","modified":1564992760009},{"_id":"source/_posts/ArcGIS-API-for-JS03/03.png","hash":"a92ceb51598fa2ff6c856a336458366c2b14774e","modified":1564992887115},{"_id":"source/_posts/ArcGIS-API-for-JS01/03.png","hash":"02e469fdd02647b0cc36462309a74d9c0c755c7c","modified":1564986132449},{"_id":"source/_posts/ArcGIS-API-for-JS03/05.png","hash":"bbd32da71022304d4ab5ec12e5ae405af82d1550","modified":1564993317143},{"_id":"source/_posts/ArcGIS-API-for-JS03/06.png","hash":"389494eb16d5d9bc4b6049b418f3eee8dc8d76e5","modified":1564993387792},{"_id":"source/_posts/ArcGIS-API-for-JS03/07.png","hash":"7cf14fed4093cd168df7e58403ec184b0dd4ce5a","modified":1564993407275},{"_id":"source/_posts/ArcGIS-API-for-JS03/09.png","hash":"76ed77cc0d72614e6e407b798d2cb36cec509939","modified":1564993447823},{"_id":"source/_posts/ArcGIS-API-for-JS03/04.png","hash":"f9a4e3da98231d20f039a6ad3bb9e5129f88ead5","modified":1564992952963},{"_id":"source/_posts/ArcGIS-API-for-JS04/04.png","hash":"d0d6fedacfb00fcea603d398e71d4ee1ab9734d8","modified":1564994632827},{"_id":"source/_posts/ArcGIS-API-for-JS03/10.png","hash":"e9711ad1c9efe1b448b1a6ed3feda8ae4c75bb0a","modified":1564993465547},{"_id":"source/_posts/ArcGIS-API-for-JS04/03.png","hash":"5eb4e70d22446fb647510cfccdd26ef3bcd6c285","modified":1564994277156},{"_id":"source/_posts/ArcGIS-API-for-JS04/08.png","hash":"67c298ecbaf7a61ea06d25b6851034a7d1ebe868","modified":1564994916310},{"_id":"source/_posts/ArcGIS-API-for-JS05/01.png","hash":"f73eb9e2895b927429d8a7538eb66490e1bd64f4","modified":1564995396731},{"_id":"source/_posts/ArcGIS-API-for-JS05/02.png","hash":"4e63e72e52667788b6572d2dd8e05bff11fef9bb","modified":1564995483147},{"_id":"source/_posts/ArcGIS-API-for-JS05/03.png","hash":"fc744f99e7ddd6d900c214369073f8d26b76dbd2","modified":1564995505363},{"_id":"source/_posts/ArcGIS-API-for-JS05/04.png","hash":"9ef09f2cc045e2aec43c68d9780cf2f9d68acd22","modified":1564995566242},{"_id":"source/_posts/ArcGIS-API-for-JS05/05.png","hash":"436230646200cd5a801fb678b27a02570cada1a1","modified":1564995621175},{"_id":"source/_posts/ArcGIS-API-for-JS05/06.png","hash":"0589d82e78fd813054c10f4de5b8a5e14c8335ac","modified":1564995654256},{"_id":"source/_posts/ArcGIS-API-for-JS05/07.png","hash":"e53309606ded73d3661695806cc48e73b06d4e4f","modified":1564995696043},{"_id":"source/_posts/ArcGIS-API-for-JS05/08.png","hash":"cabfd3f152b7f57aedc742b166953256f96a078a","modified":1564995725994},{"_id":"source/_posts/ArcGIS-API-for-JS05/09.png","hash":"0a83cf8b227a837f21bcbd240f0f1425fbd31592","modified":1564995793552},{"_id":"source/_posts/ArcGIS-API-for-JS06/01.png","hash":"a1326a6dc3f3a2d4661f0a05a2dda828dbc77194","modified":1564996516710},{"_id":"source/_posts/ArcGIS-API-for-JS06/06.png","hash":"9e57d543dc916883eae7d2c99542ddf253a3881b","modified":1564997249635},{"_id":"source/_posts/ArcGIS-API-for-JS06/07.png","hash":"b633e259369c58fc7112c10ed0e5aec115d2fc82","modified":1564997308202},{"_id":"source/_posts/ArcGIS-API-for-JS06/02.png","hash":"a56b577b4bdf5d71d943e97259fb6002b71a180e","modified":1564997031278},{"_id":"source/_posts/ArcGIS-API-for-JS07/05.png","hash":"7f14326691ae8acdebbb59994006c3e287143139","modified":1564998255699},{"_id":"source/_posts/ArcGIS-API-for-JS07/09.png","hash":"8bb647a8085d8779e43851a4dbb3e6a1e4adc209","modified":1564998399195},{"_id":"source/_posts/ArcGIS-API-for-JS08/04.png","hash":"86c1b8a04f601c695366c60ca392dab47e1689f4","modified":1564999994208},{"_id":"source/_posts/ArcGIS-API-for-JS08/06.png","hash":"ca9663491c56d8dee77329af7a975a1622d64aa4","modified":1565000139133},{"_id":"source/_posts/ArcGIS-API-for-JS08/07.png","hash":"8c448e590315e84835d669a7b0dabd24ec163485","modified":1565000165855},{"_id":"source/_posts/ArcGIS-API-for-JS07/10.png","hash":"7d43f0b9ea50f718d2f273c41c638ab4342817d9","modified":1564998439975},{"_id":"source/_posts/ArcGIS-API-for-JS11/01.png","hash":"66d0ae1cec3c94758cf869821f368ef879f53d06","modified":1565070293554},{"_id":"source/_posts/ArcGIS-API-for-JS11/02.png","hash":"c56930a163e2fb0bf150e479bfcabe7f1e84dd67","modified":1565071094270},{"_id":"source/_posts/ArcGIS-API-for-JS11/03.png","hash":"360d4a9ac75414b26780be6c7ba284cfeaf2179f","modified":1565071367943},{"_id":"source/_posts/ArcGIS-API-for-JS09/01.png","hash":"0ba38bbebe861e6f090923599b17a4443581a588","modified":1565001036172},{"_id":"source/_posts/ArcGIS-API-for-JS02/04.png","hash":"9433cc46b3c0baa4664c5664c4e56f9c6330ba2e","modified":1564988446433},{"_id":"source/_posts/ArcGIS-API-for-JS14/01.png","hash":"63633def4dc37371e06103e2f31ea2ac41bb9ce3","modified":1565076670459},{"_id":"source/_posts/ArcGIS-API-for-JS14/02.png","hash":"7a7690e857d1e46a8463d49da1c130300061034a","modified":1565076837882},{"_id":"source/_posts/ArcGIS-API-for-JS14/03.png","hash":"c107541a6194550580f5699323dc5deb17e176ca","modified":1565077152025},{"_id":"source/_posts/ArcGIS-API-for-JS14/05.png","hash":"5bcb5ed4419d22ec94b6765446b7cd47b541b460","modified":1565077346204},{"_id":"source/_posts/ArcGIS-API-for-JS14/04.png","hash":"80529f3f2bc7c0d6a8ab3575409b6a56a4701bdb","modified":1565077277977},{"_id":"source/_posts/ArcGIS-API-for-JS15/04.png","hash":"4da452a5c95227705d5f00c5c8c3bf450216e5cb","modified":1565078213849},{"_id":"source/_posts/ArcGIS-API-for-JS16/02.png","hash":"989af7196b2d0c84b3560b424040ffccfaaf009f","modified":1565078695687},{"_id":"source/_posts/ArcGIS-API-for-JS16/03.png","hash":"d8360608c4aa6362846fb90852f0de87dba50e9b","modified":1565078735530},{"_id":"source/_posts/ArcGIS-API-for-JS16/01.png","hash":"4cee3a7a0dc6b667447b136e955439f1f0f3ad3e","modified":1565078469884},{"_id":"source/_posts/ArcGIS-API-for-JS16/04.png","hash":"0fb8bc9856c78f04dae7197b2313e8a869a45fc8","modified":1565078810982},{"_id":"source/_posts/ArcGIS-API-for-JS17/01.png","hash":"2341ee8d0fcd33bed0e395afa80496a0de7dc28e","modified":1565080140184},{"_id":"source/_posts/ArcGIS-API-for-JS17/03.png","hash":"23a47af5fd311cf18af5ed2c25f6ea780a0ef588","modified":1565080334970},{"_id":"source/_posts/ArcGIS-API-for-JS18/02.png","hash":"eb0b835369cf87eee837a423dcf471714e9a7244","modified":1565081580092},{"_id":"source/_posts/ArcGIS-API-for-JS17/02.png","hash":"2a5a56969ace6d0c22449d9be56f7eec4795a51c","modified":1565080167730},{"_id":"source/_posts/ArcGIS-API-for-JS18/01.png","hash":"bf1d6e75b7bb73bf3bce99321cee35c15f919be2","modified":1565081498516},{"_id":"source/_posts/ArcGIS-API-for-JS18/04.png","hash":"cb384adf4c2426b3deffc20c762c55e9f3cb1658","modified":1565081620609},{"_id":"source/_posts/ArcGIS-API-for-JS06/05.png","hash":"e1f27639fea49e5e63e097dff7528152d0788ea1","modified":1564997195445},{"_id":"source/_posts/ArcGIS-API-for-JS18/05.png","hash":"1a6e433cabe596a5b76b0b04ce4165d5b30d22f8","modified":1565081662274},{"_id":"source/_posts/ArcGIS-API-for-JS18/10.png","hash":"bd944820f0a9c9bbf2839d456b36d44ef588078d","modified":1565082022105},{"_id":"source/_posts/ArcGIS-API-for-JS18/11.png","hash":"2c6712b5918a833f887a8a8e7185ba43fcfdf8e0","modified":1565082162143},{"_id":"source/_posts/ArcGIS-API-for-JS18/03.png","hash":"adbacf8a7544ea017208ec1b4db26077c3ef56ba","modified":1565081587288},{"_id":"source/_posts/ArcGIS-API-for-JS18/07.png","hash":"ac5127c05d5af883ebbb38503814d3d1058685f6","modified":1565081757061},{"_id":"source/_posts/ArcGIS-API-for-JS18/12.png","hash":"43d6593c8007446e9ab240d082e96c0131043293","modified":1565082323927},{"_id":"source/_posts/ArcGIS-API-for-JS18/13.png","hash":"95650d63914d92da3f4dce43b1c805f53cb54fec","modified":1565082354109},{"_id":"source/_posts/ArcGIS-API-for-JS18/08.png","hash":"7adcca9be3d4eb6a11f9630625babf10010b1981","modified":1565081796544},{"_id":"source/_posts/ArcGIS-API-for-JS18/09.png","hash":"d58604cc423141d891526ae264800cd4cf93cead","modified":1565081863916},{"_id":"source/_posts/ArcGIS-API-for-JS18/15.png","hash":"9ac618b087d693cca1f814a097b2fa6bbe453f88","modified":1565082402113},{"_id":"source/_posts/ArcGIS-API-for-JS18/14.png","hash":"37e768523797a341b313a2b417a2c0f881342b5e","modified":1565082377147},{"_id":"source/_posts/ArcGIS-API-for-JS19/6.png","hash":"a33ab36467d7dedf9675e20dce9caa8f245e1b9f","modified":1565082852787},{"_id":"source/_posts/ArcGIS-API-for-JS19/1.png","hash":"490eb0b56d67742cd2798f1e1a749ef186dd25be","modified":1565082787633},{"_id":"source/_posts/ArcGIS-API-for-JS19/2.png","hash":"dac1213fda0d6888b7625992e22673d5ee909c54","modified":1565082798664},{"_id":"source/_posts/ArcGIS-API-for-JS19/4.png","hash":"6c15e6242dd4b17eb267202da811aa889691dd85","modified":1565082823557},{"_id":"source/_posts/ArcGIS-API-for-JS19/5.png","hash":"a1df6f6c5f9f66440ac83a0e0c80d34c0a7ae7ca","modified":1565082835380},{"_id":"source/_posts/ArcGIS-API-for-JS19/3.png","hash":"7bd1f5b097f431ff0fd96779c6ac695aa98b3517","modified":1565082811672},{"_id":"source/_posts/ArcGIS-API-for-JS20/01.png","hash":"9ed8c136e12a7f382aa0e28b9cf5bd11a7923909","modified":1565083231696},{"_id":"source/_posts/ArcGIS-API-for-JS20/02.png","hash":"be737205bf90161858f29b1aa5481e464cfdff3b","modified":1565083279160},{"_id":"source/_posts/ArcGIS-API-for-JS21/02.png","hash":"800e222498d17184e53553cca3137d9f528ebd28","modified":1565084483154},{"_id":"source/_posts/ArcGIS-API-for-JS22/03.png","hash":"e45f9ece8a361cba05dffc8633e14a71c5fe1d31","modified":1565084761307},{"_id":"source/_posts/ArcGIS-API-for-JS22/04.png","hash":"c4444264a969acd9d6b28cea1511e08dda25c433","modified":1565084938316},{"_id":"source/_posts/ArcGIS-API-for-JS22/05.png","hash":"24e11e2e87f522904dd56be8af8da3f1461c6640","modified":1565085141783},{"_id":"source/_posts/ArcGIS-API-for-JS23/01.png","hash":"ed66011dbf7468683f3ccf46a63ea0dd9176f000","modified":1565085388369},{"_id":"source/_posts/ArcGIS-API-for-JS23/02.png","hash":"a7593b9b7276a6ea70c874b69bc4b5a761136f8e","modified":1565085417399},{"_id":"source/_posts/ArcGIS-API-for-JS23/03.png","hash":"eecce8005ee6904659429443184407ea178e635e","modified":1565085603590},{"_id":"source/_posts/ArcGIS-API-for-JS24/03.png","hash":"f244cf7159f11cf63c6227e8219e04162425934a","modified":1565086035785},{"_id":"source/_posts/ArcGIS-API-for-JS24/02.png","hash":"590f5a94e4d4f9b9843a6266abace2967e46e136","modified":1565085949420},{"_id":"source/_posts/WebSocket/03.png","hash":"1ba94745fda64ef74e68d8c215977e66d120fe3c","modified":1565315411688},{"_id":"source/_posts/git/01.png","hash":"c5f99e9f05d087b52a6cbae724b69b26a12f19cb","modified":1564390945574},{"_id":"source/_posts/node2/event_loop.jpg","hash":"bc984287892a0d688e536ef2bf41297c7fdb5deb","modified":1565342709138},{"_id":"source/_posts/WebSocket/04.png","hash":"1225c152967ce15e8a861186101b36e70a21db1c","modified":1565315722379},{"_id":"source/_posts/WebSocket/02.png","hash":"7332030709fc3471a7ef14c0be11976c02d83e74","modified":1565315302312},{"_id":"source/_posts/node6/02.png","hash":"9518e5d01ee86e30146a5aa2239e27f37c4e902a","modified":1568167202917},{"_id":"source/_posts/WebSocket/01.png","hash":"863af5021b5436fac704737946cbe76e023e3cd0","modified":1565314661548},{"_id":"source/_posts/node6/04.png","hash":"c285321f87835946db09b47a4101bab6c5b3bff5","modified":1568167588417},{"_id":"source/_posts/node6/03.png","hash":"143440491000e4bb91328e6c0a62a16f268a5d4f","modified":1568167420645},{"_id":"source/_posts/node6/01.png","hash":"23de500316570ec60b6c37990e7372dee00103e2","modified":1568167016116},{"_id":"source/_posts/node6/05.png","hash":"4ad8be65093b8dad7c53b55a9b11a023161934cc","modified":1568168299295},{"_id":"source/_posts/node6/09.png","hash":"6ada667def1727924932d7f55d4c75219e635446","modified":1568171016334},{"_id":"source/_posts/python基础1/01.png","hash":"12d46144610e8d4bcee04f60d215770d6c2b101e","modified":1565165375478},{"_id":"source/_posts/python基础1/02.png","hash":"91a37ee08cd8d67650e7ee9dfcaa7f27b8dc8f91","modified":1565165560280},{"_id":"source/_posts/python基础1/03.png","hash":"5283eaafc68cbc27fd7b0ff9bf0989028a7bf847","modified":1565165670754},{"_id":"source/_posts/python基础1/07.png","hash":"64a23b482997a7fa6f5ee7fd2b979964b55d9fb6","modified":1565173191657},{"_id":"source/_posts/python基础1/05.png","hash":"0af2d0d006ed604442c25d1f82b14c3d3c8d94a3","modified":1565173083856},{"_id":"source/_posts/python基础1/10.png","hash":"a2e49e5f5c912128042e698bb876dbde64953cfa","modified":1565173338499},{"_id":"source/_posts/python基础1/11.png","hash":"412dce5632f3c37c67f5a04cb4d99ca4f73b2941","modified":1565173412240},{"_id":"source/_posts/python基础1/09.png","hash":"3dbf9255324036df5c1a73bd47a8680abf76bab5","modified":1565173288098},{"_id":"source/_posts/python基础1/08.png","hash":"73bf81bc3968dcda935df60c218a7a9efc0b9037","modified":1565173236809},{"_id":"source/_posts/python基础1/06.png","hash":"87022f88be7ae6e3096fa7798c2f934ade386b86","modified":1565173130008},{"_id":"source/_posts/python基础2/02.png","hash":"94bec67e27db0d73dad6a584935a1481ead0e53f","modified":1565174048160},{"_id":"source/_posts/python基础2/01.png","hash":"16ac8199901e786ff6ca1a959a3058ece29623e3","modified":1565174008760},{"_id":"source/_posts/python基础3/01.png","hash":"8c69bfddea5c92517b29de60989575bcf6a5fba2","modified":1565175904713},{"_id":"source/_posts/python基础3/02.png","hash":"29add7e7159052a465d45e670c3a9020da706b6f","modified":1565176010988},{"_id":"source/_posts/python基础3/04.png","hash":"e6580131f4e52e64928b782bcbbf091fdcbfc0af","modified":1565176098878},{"_id":"source/_posts/python基础3/06.png","hash":"adbdec6d356f3a0202b1834997c104126d34d8cd","modified":1565176793529},{"_id":"source/_posts/python基础3/07.png","hash":"f3dab4b2a52ca6844c7486778da5cbf3ad7d6325","modified":1565176816558},{"_id":"source/_posts/python基础3/08.png","hash":"812d6de29fb2d12207e2c21309065f44967dbaa5","modified":1565176853546},{"_id":"source/_posts/python基础3/05.png","hash":"b12f097c74a84e9428b66b99d628171a95ee4c6c","modified":1565176135257},{"_id":"source/_posts/python基础3/09.png","hash":"2b39fa0b7ec57e5c23ea82633fc6fc75478b923d","modified":1565176961251},{"_id":"source/_posts/python基础3/03.png","hash":"f44ec2c5bea5e408fc0a6cccafa2740147550d41","modified":1565176061673},{"_id":"source/_posts/python基础3/10.png","hash":"272dd36f34e034edfb4936b6667ea7109f28ac1e","modified":1565177508194},{"_id":"source/_posts/python基础3/12.png","hash":"a9450aeaf155fe44448537c0bc122a1da78dac6b","modified":1565177648017},{"_id":"source/_posts/python基础3/14.png","hash":"8fd2262ff51b20b1d270b77c7f7e4a94b14c0e10","modified":1565178012060},{"_id":"source/_posts/python基础3/11.png","hash":"850c4efd3d009456173601f5b285cc567578d07b","modified":1565177570169},{"_id":"source/_posts/python基础3/16.png","hash":"90f73812ba56f77a04436cfe147bcacf8036e141","modified":1565178135654},{"_id":"source/_posts/python基础4/01.png","hash":"3e7c95c7f4bb27b895a52a433092066e7457c5ac","modified":1565180965427},{"_id":"source/_posts/python基础3/15.png","hash":"145e18af07475914edd53eafee911c9f8fce901b","modified":1565178063995},{"_id":"source/_posts/python基础3/13.png","hash":"63018f7c268bbcd8e1663463346f59cc6bf43606","modified":1565177687421},{"_id":"source/_posts/python基础4/02.png","hash":"8855b5522f4b4f12fdeb9a8c509e90622fe45ad4","modified":1565181006891},{"_id":"source/_posts/tcp/OSI.jpg","hash":"9805eca5d6ce4886968dd521891d0f0d776f69ad","modified":1550224031076},{"_id":"source/_posts/tcp/tcp03.jpg","hash":"3070204e48776109e91ad9a9b7f2ab78a5b95837","modified":1550232539430},{"_id":"source/_posts/tcp/OSI01.jpg","hash":"e593b0eb8f01c2b6ff5ad099edc58067e0db5491","modified":1550227947028},{"_id":"source/_posts/tcp/tcp01.jpg","hash":"325889dc9bffca9bec6c1b87b7f0e4b6ba7b45e2","modified":1550220662810},{"_id":"source/_posts/tcp/tcp02.jpg","hash":"6da54f6c427405e7a0a1e2ec6c614768004da9c2","modified":1550221981141},{"_id":"source/_posts/前端面试之CSS/css01.png","hash":"7696aff186fa92909affc7d87a51b9f8a103ee8a","modified":1546330063118},{"_id":"source/_posts/前端面试之CSS/css04.png","hash":"7f8e71c1db949e5de8d55ad34bd5e4b2c0a777b6","modified":1546332816459},{"_id":"source/_posts/前端面试之CSS/css05.png","hash":"8773472e772c507772bafe150c5817e56c89561e","modified":1546334474336},{"_id":"source/_posts/前端面试之CSS/css02.png","hash":"c48d6e1154f73e85079a1fb7f8d61aaca9c44f65","modified":1546332297264},{"_id":"source/_posts/前端面试之CSS/css03.png","hash":"89d3fc270b62fa331ce295d18c1ea1d87dc40444","modified":1546332665802},{"_id":"source/_posts/原型/proto01.png","hash":"dba81803860525c0b58350b103f3463382e93258","modified":1546072186052},{"_id":"source/_posts/原型/proto03.png","hash":"dc64269cd458cfee524a95c1f4cc7cf924c52eef","modified":1546084123849},{"_id":"source/_posts/浏览器缓存/http01.png","hash":"0867912ad4a096fabea0777019fef8536aec1fe5","modified":1545964971004},{"_id":"source/_posts/浏览器缓存/http03.png","hash":"0075d4252962b9695e719289bd618c2b6bca5205","modified":1545975588843},{"_id":"source/_posts/浏览器缓存/http04.png","hash":"18644a4a7d8913001bc27b4afb860f8c9064297b","modified":1545977251377},{"_id":"source/_posts/浏览器缓存/http05.png","hash":"295cd47d18b0e2da281d48b5ad805e91de220199","modified":1545977333099},{"_id":"source/_posts/浏览器缓存/http06.png","hash":"30a2312c91ac464bdcb51a4b317ecf2bff90a472","modified":1545977386175},{"_id":"source/_posts/浏览器缓存/http07.png","hash":"f427e8ecde0bf9388ae70242e8e44ccd71ea7708","modified":1545977444196},{"_id":"source/_posts/浏览器缓存/http08.png","hash":"3c81659ea41af1760b57904afcb68d836123900a","modified":1545977501324},{"_id":"source/_posts/浏览器缓存/http09.png","hash":"c0c7241eba2e32b005c27b20bc19c7c4711f5dbd","modified":1545977521778},{"_id":"source/_posts/闭包/1.png","hash":"0f9b94f35d270374eb96337d653575ed17995d3a","modified":1545809920667},{"_id":"source/_posts/闭包/2.png","hash":"2b30e5cfb61676ea89a8e5f490ba79ea97203326","modified":1545812792838},{"_id":"source/_posts/闭包/3.png","hash":"79521d5af27eaf2cc84a4f4d980f15fbaaf171cc","modified":1545812800807},{"_id":"source/_posts/闭包/4.png","hash":"73e55825f6a2813fb120785944e50f2e9cb8feae","modified":1545812810877},{"_id":"source/_posts/闭包/5.png","hash":"c9f00f3704a0fefa2256b866f6fb70fdb85c4961","modified":1545812818260},{"_id":"source/_posts/面试CSS/weilei01.png","hash":"ec5c5f8bdbedcb8ac9706c6406f4dd441898bb98","modified":1546697969510},{"_id":"source/_posts/面试CSS/weilei03.png","hash":"7ff8ef1fcadfb6651d0a5635360c9cbfa49a9842","modified":1546698348916},{"_id":"source/_posts/面试CSS/weilei02.png","hash":"c2d270292d3343d6aa9ec810d2b6b9b7860c616f","modified":1546698051065},{"_id":"themes/stage/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1545814588312},{"_id":"source/_posts/浏览器缓存/http10.png","hash":"f2fc23b6ff71fc0a4e2808c5dc3727fbe157ac39","modified":1545977554834},{"_id":"themes/stage/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1545814588322},{"_id":"source/_posts/理解cookie、session、localStorage、sessionStorage之不同/http12.png","hash":"84d9c254050580aabaeac8745f47ae3437373147","modified":1545989599194},{"_id":"themes/stage/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1545814588322},{"_id":"themes/stage/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1545814588322},{"_id":"themes/stage/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1545814588322},{"_id":"themes/stage/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1545814588312},{"_id":"themes/stage/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1545814588322},{"_id":"themes/stage/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1545814588322},{"_id":"themes/stage/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1545814588322},{"_id":"themes/stage/.git/logs/HEAD","hash":"7cc02dbf848e6756c8a4b2c29a76a64c3996260e","modified":1545814596619},{"_id":"themes/stage/layout/partials/categories.ejs","hash":"f0b21bbafac914b4b878f984c1358958ef01b724","modified":1545814596659},{"_id":"themes/stage/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1545814588322},{"_id":"themes/stage/layout/partials/archives.ejs","hash":"2d1b2d4e60b9a84c2f8e643b55dd47938283246d","modified":1545964109001},{"_id":"themes/stage/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1545814588322},{"_id":"themes/stage/layout/partials/content-aside.ejs","hash":"20c92565c03e2057c513b2b5375846c4697ec457","modified":1545963875647},{"_id":"themes/stage/layout/partials/head.ejs","hash":"e611198eeccaab374023413e76dabc82146d8d9b","modified":1545814596659},{"_id":"themes/stage/layout/partials/footer.ejs","hash":"176eaf8f02b058a37737365429991cd53fdf22d1","modified":1563019915431},{"_id":"themes/stage/layout/partials/owner.ejs","hash":"507407be7ede5daebaac520068f9c6261f7674ab","modified":1545814596659},{"_id":"themes/stage/layout/partials/valine.ejs","hash":"ec982c96669c4e6f4e5870bd9207e3aca4ad68f5","modified":1545814596659},{"_id":"themes/stage/layout/partials/tags.ejs","hash":"e2ddd1721e94cba42f20c2a0fd597803cda88f3d","modified":1545814596659},{"_id":"themes/stage/layout/partials/recent-posts.ejs","hash":"8d27fe64eeff19af3fe55c012d39ddf82dff2680","modified":1545814596659},{"_id":"themes/stage/layout/partials/header.ejs","hash":"c246508adf36824e1b6a2488a26ec2e50617a21a","modified":1545814596659},{"_id":"source/_posts/时序动画/02.png","hash":"8e49b967a87a51881842dac6c7c792c8eedf2e88","modified":1567079545453},{"_id":"themes/stage/source/css/stage.styl","hash":"23b4e605d2e4cdff9f2b5a87280e0e8194083d02","modified":1545814596686},{"_id":"themes/stage/source/css/avatar-bg.css","hash":"720571b576a326af835d473e655f4ed185fbf3d7","modified":1545814596685},{"_id":"themes/stage/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1545814588322},{"_id":"themes/stage/source/js/header-bg.main.js","hash":"a874a781d0ef1f39f6f5135aa6a03ea53823c1df","modified":1545814596690},{"_id":"themes/stage/source/js/avatar-bg.main.js","hash":"79c8a66c3eec35b5ef7d90df973e27d241600b39","modified":1545814596689},{"_id":"themes/stage/source/images/avatar.jpg","hash":"e88a6273cd36f67bab0a0edcea8cf25aebc39840","modified":1545821509692},{"_id":"source/_posts/ArcGIS-API-for-JS02/01.png","hash":"4d4c22d21182ae4ed210ec8e520d10c204d7888a","modified":1564987666048},{"_id":"source/_posts/ArcGIS-API-for-JS02/02.png","hash":"181c8cabb601e69e86de90d21e6e6ac5b98124e7","modified":1564988102356},{"_id":"source/_posts/ArcGIS-API-for-JS02/03.png","hash":"26f7eff79aa90df776e5ba0b77d843a14244e1ba","modified":1564988331174},{"_id":"source/_posts/ArcGIS-API-for-JS03/02.png","hash":"bdc924e56a78c8ee18fb4ee85e95bd2e1a05f9a6","modified":1564992815545},{"_id":"source/_posts/ArcGIS-API-for-JS03/08.png","hash":"b44ed1b8ab97bee8350f0699526667f7f46e87bf","modified":1564993435616},{"_id":"source/_posts/ArcGIS-API-for-JS04/01.png","hash":"72e8f3f1f297ca68c87847aacb64ca23f5b41138","modified":1564994106028},{"_id":"source/_posts/ArcGIS-API-for-JS04/05.png","hash":"c062b9bd62755f06c49c0941bf4d20cb2a901c0e","modified":1564994705658},{"_id":"source/_posts/ArcGIS-API-for-JS06/04.png","hash":"78404f29105d0f57a7d1c6bb13069408ecbf0071","modified":1564997134108},{"_id":"source/_posts/ArcGIS-API-for-JS06/03.png","hash":"a0c5168807ce7b1430c0e4fb06a555a9c1aa0452","modified":1564997089478},{"_id":"source/_posts/ArcGIS-API-for-JS07/01.png","hash":"2e2a45e5d9570ce76123ee0a307d8efc3777e91e","modified":1564998102442},{"_id":"source/_posts/ArcGIS-API-for-JS07/03.png","hash":"35464f01d9dbb36fd7f21423739c418859db0793","modified":1564998173038},{"_id":"source/_posts/ArcGIS-API-for-JS08/05.png","hash":"07ccbc23cf2761a2e9065ea7aa849b0de577abca","modified":1565000039060},{"_id":"source/_posts/ArcGIS-API-for-JS15/01.png","hash":"7bf4f765d73318a8d1a387edd9d5f24e470a25af","modified":1565077649465},{"_id":"source/_posts/ArcGIS-API-for-JS15/03.png","hash":"7e7f713162dc5e113d66b4fe65565cb340687869","modified":1565077983302},{"_id":"source/_posts/ArcGIS-API-for-JS15/02.png","hash":"6cec2c0a0194085732f64e0e83c08669c973636a","modified":1565077823283},{"_id":"source/_posts/ArcGIS-API-for-JS18/06.png","hash":"d5b43b79e9fede94e6e9ffc14c3b5084d6d761d4","modified":1565081695940},{"_id":"source/_posts/ArcGIS-API-for-JS21/03.png","hash":"395d80cf60061ee14688e5527a078e6770605e8a","modified":1565084518783},{"_id":"source/_posts/ArcGIS-API-for-JS22/01.png","hash":"9a05721c201a3aa5ebdec77dc99c711dc4eebffe","modified":1565084704183},{"_id":"source/_posts/ArcGIS-API-for-JS22/02.png","hash":"f42bd731ff7677646d04f908845e4bef2b8f8103","modified":1565084735699},{"_id":"source/_posts/ArcGIS-API-for-JS24/01.png","hash":"f0db41f5a7b41234431c4d42f2a80707d5578406","modified":1565085888918},{"_id":"source/_posts/node5/04.png","hash":"de0f3254c8fb5fffe2eb08854010178e16df6f44","modified":1568172391482},{"_id":"source/_posts/node5/03.png","hash":"1609c3f32a237dd8748700294de5c6efc0dfde0e","modified":1568171702572},{"_id":"source/_posts/node5/05.png","hash":"ce6fe143d3e6668a70d1e829e696a8e5eab3b349","modified":1568181643477},{"_id":"source/_posts/node5/06.png","hash":"bb8fd85942cb8f3d9c87dc8cc20b23f5ed8ce2ca","modified":1568181872779},{"_id":"source/_posts/node6/08.png","hash":"6e3187d08fc56f4dc0dd7d6e722cf070a2804294","modified":1568170511186},{"_id":"source/_posts/node6/06.png","hash":"452556702f0d436362676c00a431c1097c2a7401","modified":1568169932122},{"_id":"source/_posts/node6/07.png","hash":"8a9730ab2f5739f47cc4c588db1420319bd68d7b","modified":1568170341156},{"_id":"source/_posts/python基础1/04.png","hash":"204c64fb5e0450b397d8046a72e26a6e519cab37","modified":1565165770878},{"_id":"source/_posts/原型/proto02.png","hash":"8cdf6e49aab28f9aa3be60481a1d0d15aa08fce5","modified":1546083467274},{"_id":"source/_posts/原型/proto05.png","hash":"c20ac2db56b33f138221291eaacde81c68c8f90b","modified":1546086210977},{"_id":"source/_posts/原型/proto06.png","hash":"c529c2524e20395874bf8c0f8be130d3790aa152","modified":1546086285835},{"_id":"source/_posts/原型/proto04.png","hash":"81a8b8c2427be4a51a75290976dc6dc5e310bb0d","modified":1546084779015},{"_id":"source/_posts/浏览器缓存/http11.png","hash":"0b5fc1f023b3910100421af4a162db969c364edd","modified":1545979290008},{"_id":"source/_posts/浏览器缓存/http02.png","hash":"f50feaa03b4fde3434ccd79d269a170004f094af","modified":1545967590179},{"_id":"source/_posts/时序动画/01.png","hash":"05343a3ffc5db3c43cd77f0fe1529981440aad31","modified":1566567035485},{"_id":"themes/stage/source/images/default-header.jpg","hash":"e0e5cb6770d07ad17df4a5fe4160d30298316292","modified":1545814596688},{"_id":"source/_posts/ArcGIS-API-for-JS08/02.png","hash":"df212ac895f93fc62532a41ebb9cd4739460fbb5","modified":1564999885616},{"_id":"source/_posts/ArcGIS-API-for-JS08/03.png","hash":"c6a8df379fb574640a929470aeb2632944b4a81a","modified":1564999935088},{"_id":"themes/stage/source/js/toc.main.js","hash":"b9d576d46177ef68458c1994885b6b7f8157ba7f","modified":1545814596691},{"_id":"source/_posts/ArcGIS-API-for-JS04/06.png","hash":"752b6f232cdc6ff10fa371a427585c3c104fb8d4","modified":1564994816681},{"_id":"source/_posts/ArcGIS-API-for-JS05/11.png","hash":"95282e8f7f1e231c513ef14aa3c6c5b66c5c199c","modified":1564995860388},{"_id":"source/_posts/ArcGIS-API-for-JS07/07.png","hash":"53beaa2e98a229e2f83fc536c6caf88432f71e93","modified":1564998312539},{"_id":"source/_posts/ArcGIS-API-for-JS07/08.png","hash":"59eaf7187b4be94043a775331d3bab7e8b241f3d","modified":1564998349472},{"_id":"source/_posts/ArcGIS-API-for-JS21/01.png","hash":"a1eecd104660c2316ab04a070f69f56246b09a09","modified":1565084456709},{"_id":"source/_posts/ArcGIS-API-for-JS23/04.png","hash":"9463b24190dbb5768876ff80e0b533558bdb730e","modified":1565085631470},{"_id":"source/_posts/node4/01.png","hash":"d5ed0adfb63258ad3aa4e0bdc88d7d21ae9857cb","modified":1568086162590},{"_id":"source/_posts/node5/02.png","hash":"d755103243d9ce2414e06642996fce6fe525e0cc","modified":1568171519606},{"_id":"themes/stage/.git/objects/pack/pack-6b7aa4bf433bb231c239afe5767da1a5b5a8de6c.idx","hash":"e1fa2d978348f46371226aca0837dead3ee84840","modified":1545814596485},{"_id":"themes/stage/.git/refs/heads/master","hash":"2140be1f13d9ee92c776c95f5e35875634b01549","modified":1545814596619},{"_id":"themes/stage/layout/partials/post/toc.ejs","hash":"43c07c2c4614f3ac8b558b0ffdd9f7435341feac","modified":1563020092616},{"_id":"themes/stage/source/css/_common/base.styl","hash":"45a577802213a86f99838658350873021e72dc81","modified":1545814596669},{"_id":"themes/stage/source/css/_common/mobile-style.styl","hash":"33f4fc11ec70781069c81499ea9278d2809d3246","modified":1545814596669},{"_id":"themes/stage/source/css/_common/midle-style.styl","hash":"23e64945873cc9f342024252f81a5273216ca94b","modified":1545814596669},{"_id":"themes/stage/source/css/_layout/about.styl","hash":"46c2561700b33c4970f5846500365d4bc05f6f05","modified":1545814596669},{"_id":"themes/stage/source/css/_layout/categories.styl","hash":"1132eed3398929a3e5c340709d98f1f970368644","modified":1545814596669},{"_id":"themes/stage/source/css/_layout/archives.styl","hash":"a73d1c9a150ef0695eaee470135a114e6b57160c","modified":1545814596669},{"_id":"themes/stage/source/css/_layout/content-aside.styl","hash":"2fac9d46576d85390340850d6e2117795a42562c","modified":1545814596679},{"_id":"themes/stage/source/css/_layout/footer.styl","hash":"2379a4b2fa7fad140f53acdfeb028d61e75a6986","modified":1545814596680},{"_id":"themes/stage/source/css/_common/post-style.styl","hash":"542ad5c2e8d927ec3cf98ef52c1ee3094f3487a0","modified":1545814596669},{"_id":"themes/stage/source/css/_layout/header.styl","hash":"1ba1653f621bd7b7944f4bd1f73c8ba4d64a89c0","modified":1545814596680},{"_id":"themes/stage/source/css/_layout/pagination.styl","hash":"bb6a3e551dc81e0e33c4750785aff5ab6b6e2ee8","modified":1545814596682},{"_id":"themes/stage/source/css/_common/page.styl","hash":"1ce31668db4765de0f92025cdcdbe359c0479fd7","modified":1545814596669},{"_id":"themes/stage/source/css/_layout/list-detail.styl","hash":"dca4fa7606579e800293c6bca4d042bc2ecef743","modified":1545814596681},{"_id":"themes/stage/source/css/_layout/post.styl","hash":"bf5b3dc4ce2b65be439d080b72d8c816785fc2d9","modified":1545814596683},{"_id":"themes/stage/source/css/_variables/base.styl","hash":"b4fc49f2bac08c893ea27cfbe6f61d6be1f2fa2d","modified":1545814596685},{"_id":"themes/stage/source/css/_layout/tags.styl","hash":"68e2e3576903f3ff71d0e9cd62d66ec1543dcea8","modified":1545814596684},{"_id":"themes/stage/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1545814596692},{"_id":"themes/stage/source/lib/js/cav.js","hash":"d9adefaf343afea6f3f12df7a04560a621d81e36","modified":1545814596711},{"_id":"themes/stage/layout/partials/post/nav.ejs","hash":"b0146c1806b9d34a0e12394b2d2afb6035e7eb95","modified":1563020142593},{"_id":"themes/stage/source/css/_layout/post-item.styl","hash":"5020d065078819913d610c64857cfb65386b5119","modified":1545814596683},{"_id":"themes/stage/source/lib/js/waterrippleeffect.min.js","hash":"5320fc03ead31c384c4bd8c47657a45e75df0afd","modified":1545814596711},{"_id":"source/_posts/ArcGIS-API-for-JS04/02.png","hash":"16607be31f2e7775770653bfb0657aa91ff2a5c1","modified":1564994216177},{"_id":"themes/stage/source/css/_layout/owner.styl","hash":"a1a946c9a7330eadc88ea19dcffdff18fbde8eef","modified":1545814596682},{"_id":"source/_posts/ArcGIS-API-for-JS07/02.png","hash":"e044ee0cbd2279363f8f09810b3241dbbf13701e","modified":1564998140707},{"_id":"source/_posts/ArcGIS-API-for-JS11/04.png","hash":"b4d7f19f20ddbc2b8d08cb6ddc702f6439eeca7a","modified":1565072996927},{"_id":"source/_posts/ArcGIS-API-for-JS24/04.png","hash":"0c6b9254ebf06324b0536f906e2a14aea373f3b5","modified":1565086338485},{"_id":"themes/stage/source/lib/js/smooth-scroll.min.js","hash":"7e96fbd3c701c3ff646e80a2b850aa36b399b6ca","modified":1545814596711},{"_id":"source/_posts/ArcGIS-API-for-JS05/10.png","hash":"e3e152101057f801ba4e233d6d480758f56f1e0a","modified":1564995838188},{"_id":"source/_posts/ArcGIS-API-for-JS07/04.png","hash":"e57f314fed5c80d00382dc535515508bcc7670b3","modified":1564998225819},{"_id":"source/_posts/ArcGIS-API-for-JS08/01.png","hash":"ff94a98dd2f781bb07e7f49d0f00b4c837967f2c","modified":1564999344479},{"_id":"source/_posts/ArcGIS-API-for-JS07/06.png","hash":"517634f660f73a0532002151be30ba941a585f52","modified":1564998272835},{"_id":"themes/stage/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1545814596609},{"_id":"source/_posts/node5/01.png","hash":"7e99b2d8e1cf6b22fba00f0505776387b713c9ec","modified":1565748711692},{"_id":"themes/stage/.git/logs/refs/heads/master","hash":"7cc02dbf848e6756c8a4b2c29a76a64c3996260e","modified":1545814596619},{"_id":"themes/stage/source/css/_common/highlight/highlight.styl","hash":"5ff4ff5b1d3f9ea2d0cd12d8bffcc4a405936196","modified":1546829485461},{"_id":"themes/stage/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1545814596694},{"_id":"source/_posts/python基础2/01.gif","hash":"c5d91404008a5d25c1f2e7fbad5ebae1374a5bcf","modified":1565173640949},{"_id":"themes/stage/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1545814596711},{"_id":"themes/stage/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1545814596711},{"_id":"themes/stage/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1545814596693},{"_id":"themes/stage/.git/logs/refs/remotes/origin/HEAD","hash":"7cc02dbf848e6756c8a4b2c29a76a64c3996260e","modified":1545814596609},{"_id":"themes/stage/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1545814596697},{"_id":"source/_posts/ArcGIS-API-for-JS04/07.png","hash":"4a69b32a4d99f834ea9325da6d9301ba9656d8ca","modified":1564994888123},{"_id":"themes/stage/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1545814596711},{"_id":"themes/stage/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1545814596701},{"_id":"source/_posts/ArcGIS-API-for-JS11/05.png","hash":"2a3d77021f2b8e2bc3453c644457fee64bcd1aa5","modified":1565073120375},{"_id":"source/_posts/python基础2/02.gif","hash":"b2ec508322d0b1e3374d033f3926876d46e251a2","modified":1565174241152},{"_id":"source/_posts/盒模型/box2.png","hash":"14811ccfcf1d8d4606391521e6929a148d9085bd","modified":1546592551274},{"_id":"source/_posts/前端面试之CSS/css08.png","hash":"05f92c52267c04af798e09d2e771152f4e3b563e","modified":1546341862294},{"_id":"source/_posts/盒模型/box1.png","hash":"05f92c52267c04af798e09d2e771152f4e3b563e","modified":1546592541845},{"_id":"source/_posts/前端面试之CSS/css07.gif","hash":"7a062423911f3ff601da7994bdd68a4ee22c87f6","modified":1546335156699},{"_id":"themes/stage/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1545814596701},{"_id":"source/_posts/遍历数组的常用方法/array01.png","hash":"c01da9ba546159a167d396782d2c0fe431e9d465","modified":1546055491492},{"_id":"source/_posts/前端面试之CSS/css09.png","hash":"14811ccfcf1d8d4606391521e6929a148d9085bd","modified":1546342300984},{"_id":"themes/stage/.git/objects/pack/pack-6b7aa4bf433bb231c239afe5767da1a5b5a8de6c.pack","hash":"c90d55662b0cf0d8865d4939556006a61372c39c","modified":1545814596488},{"_id":"source/_posts/前端面试之CSS/css06.gif","hash":"c1dd753dca0022013f038819a6542dd2bf5475a3","modified":1546334693274},{"_id":"source/about/audio/天地无霜.mp3","hash":"f217c065c2fc8207df5954453f9bec29434aa645","modified":1545879444443},{"_id":"source/_posts/css..md","hash":"12595d3998715f5840efccb351a8f992e1d129b4","modified":1572181566707}],"Category":[{"name":"ArcGIS","_id":"ck14n5co10002t09zr2fzqdsb"},{"name":"基础前端技术","_id":"ck14n5cut002bt09zsnp0zn3o"},{"name":"git","_id":"ck14n5cv1002kt09zpj6x26yo"},{"name":"VUE","_id":"ck14n5cvd002yt09zhvzwfroc"},{"name":"Node","_id":"ck14n5cvh0035t09zrfm8pli0"},{"name":"hexo","_id":"ck14n5cw7003pt09zpriwg5zy"},{"name":"python","_id":"ck14n5cwl0046t09zs438ujzk"},{"name":"React","_id":"ck14n5cww004kt09z8mpzybzq"},{"name":"其他前端技术","_id":"ck14n5cx0004st09zxbxf46sa"}],"Data":[],"Page":[{"title":"about","date":"2018-12-27T02:36:14.000Z","_content":"### 1.音频(自定义)\n<center>\n    <audio align=\"center\" id=\"audio\" controls=\"controls\"  loop=\"loop\" preload=\"auto\" type=\"audio/mp3\">\n        <source id=\"mp3\" src=\"audio/天地无霜.mp3\"></audio>\n    </audio>\n</center>\n\n### 2.音频(引用)\n<center>\n    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" autoplay='autoplay' preload=\"auto\" marginheight=\"0\" width=320 height=86 src=\"//music.163.com/outchain/player?type=2&id=34341360&auto=1&height=66\"></iframe>\n</center>\n\n\n### 3.视频(引用爱奇艺)\n<center>\n    <iframe src=\"http://open.iqiyi.com/developer/player_js/coopPlayerIndex.html?vid=785c82b2b8949a49c6be38876fede723&tvId=1745487500&accessToken=2.f22860a2479ad60d8da7697274de9346&appKey=3955c3425820435e86d0f4cdfe56f5e7&appId=1368&height=100%&width=100%\" frameborder=\"0\" allowfullscreen=\"true\" height=\"300\" width=\"400\"></iframe>\n</center>\n\n### 4.视频(引用腾讯）\n<center>\n    <iframe frameborder=\"0\" src=\"https://v.qq.com/txp/iframe/player.html?vid=i00299gbm4b\" allowFullScreen=\"true\" height=\"300\" width=\"500\"></iframe>\n</center>\n\n### 5.插入gif\n<center>\n    <iframe height=100 width=100 src=\"http://ww4.sinaimg.cn/mw690/e75a115bgw2229v0diqv7.gif\">\n</center>\n\n\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-12-27 10:36:14\n---\n### 1.音频(自定义)\n<center>\n    <audio align=\"center\" id=\"audio\" controls=\"controls\"  loop=\"loop\" preload=\"auto\" type=\"audio/mp3\">\n        <source id=\"mp3\" src=\"audio/天地无霜.mp3\"></audio>\n    </audio>\n</center>\n\n### 2.音频(引用)\n<center>\n    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" autoplay='autoplay' preload=\"auto\" marginheight=\"0\" width=320 height=86 src=\"//music.163.com/outchain/player?type=2&id=34341360&auto=1&height=66\"></iframe>\n</center>\n\n\n### 3.视频(引用爱奇艺)\n<center>\n    <iframe src=\"http://open.iqiyi.com/developer/player_js/coopPlayerIndex.html?vid=785c82b2b8949a49c6be38876fede723&tvId=1745487500&accessToken=2.f22860a2479ad60d8da7697274de9346&appKey=3955c3425820435e86d0f4cdfe56f5e7&appId=1368&height=100%&width=100%\" frameborder=\"0\" allowfullscreen=\"true\" height=\"300\" width=\"400\"></iframe>\n</center>\n\n### 4.视频(引用腾讯）\n<center>\n    <iframe frameborder=\"0\" src=\"https://v.qq.com/txp/iframe/player.html?vid=i00299gbm4b\" allowFullScreen=\"true\" height=\"300\" width=\"500\"></iframe>\n</center>\n\n### 5.插入gif\n<center>\n    <iframe height=100 width=100 src=\"http://ww4.sinaimg.cn/mw690/e75a115bgw2229v0diqv7.gif\">\n</center>\n\n\n\n\n\n\n","updated":"2018-12-27T11:06:19.537Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck14n5cy1005zt09z5hu7qqi9","content":"<h3 id=\"1-音频-自定义\"><a href=\"#1-音频-自定义\" class=\"headerlink\" title=\"1.音频(自定义)\"></a>1.音频(自定义)</h3><center><br>    <audio align=\"center\" id=\"audio\" controls=\"controls\" loop=\"loop\" preload=\"auto\" type=\"audio/mp3\"><br>        <source id=\"mp3\" src=\"audio/天地无霜.mp3\"></audio><br>    <br></center>\n\n<h3 id=\"2-音频-引用\"><a href=\"#2-音频-引用\" class=\"headerlink\" title=\"2.音频(引用)\"></a>2.音频(引用)</h3><center><br>    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" autoplay=\"autoplay\" preload=\"auto\" marginheight=\"0\" width=\"320\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=34341360&auto=1&height=66\"></iframe><br></center>\n\n\n<h3 id=\"3-视频-引用爱奇艺\"><a href=\"#3-视频-引用爱奇艺\" class=\"headerlink\" title=\"3.视频(引用爱奇艺)\"></a>3.视频(引用爱奇艺)</h3><center><br>    <iframe src=\"http://open.iqiyi.com/developer/player_js/coopPlayerIndex.html?vid=785c82b2b8949a49c6be38876fede723&tvId=1745487500&accessToken=2.f22860a2479ad60d8da7697274de9346&appKey=3955c3425820435e86d0f4cdfe56f5e7&appId=1368&height=100%&width=100%\" frameborder=\"0\" allowfullscreen=\"true\" height=\"300\" width=\"400\"></iframe><br></center>\n\n<h3 id=\"4-视频-引用腾讯）\"><a href=\"#4-视频-引用腾讯）\" class=\"headerlink\" title=\"4.视频(引用腾讯）\"></a>4.视频(引用腾讯）</h3><center><br>    <iframe frameborder=\"0\" src=\"https://v.qq.com/txp/iframe/player.html?vid=i00299gbm4b\" allowfullscreen=\"true\" height=\"300\" width=\"500\"></iframe><br></center>\n\n<h3 id=\"5-插入gif\"><a href=\"#5-插入gif\" class=\"headerlink\" title=\"5.插入gif\"></a>5.插入gif</h3><center><br>    <iframe height=\"100\" width=\"100\" src=\"http://ww4.sinaimg.cn/mw690/e75a115bgw2229v0diqv7.gif\"><br></iframe></center>\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-音频-自定义\"><a href=\"#1-音频-自定义\" class=\"headerlink\" title=\"1.音频(自定义)\"></a>1.音频(自定义)</h3><center><br>    <audio align=\"center\" id=\"audio\" controls=\"controls\" loop=\"loop\" preload=\"auto\" type=\"audio/mp3\"><br>        <source id=\"mp3\" src=\"audio/天地无霜.mp3\"></audio><br>    <br></center>\n\n<h3 id=\"2-音频-引用\"><a href=\"#2-音频-引用\" class=\"headerlink\" title=\"2.音频(引用)\"></a>2.音频(引用)</h3><center><br>    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" autoplay=\"autoplay\" preload=\"auto\" marginheight=\"0\" width=\"320\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=34341360&auto=1&height=66\"></iframe><br></center>\n\n\n<h3 id=\"3-视频-引用爱奇艺\"><a href=\"#3-视频-引用爱奇艺\" class=\"headerlink\" title=\"3.视频(引用爱奇艺)\"></a>3.视频(引用爱奇艺)</h3><center><br>    <iframe src=\"http://open.iqiyi.com/developer/player_js/coopPlayerIndex.html?vid=785c82b2b8949a49c6be38876fede723&tvId=1745487500&accessToken=2.f22860a2479ad60d8da7697274de9346&appKey=3955c3425820435e86d0f4cdfe56f5e7&appId=1368&height=100%&width=100%\" frameborder=\"0\" allowfullscreen=\"true\" height=\"300\" width=\"400\"></iframe><br></center>\n\n<h3 id=\"4-视频-引用腾讯）\"><a href=\"#4-视频-引用腾讯）\" class=\"headerlink\" title=\"4.视频(引用腾讯）\"></a>4.视频(引用腾讯）</h3><center><br>    <iframe frameborder=\"0\" src=\"https://v.qq.com/txp/iframe/player.html?vid=i00299gbm4b\" allowfullscreen=\"true\" height=\"300\" width=\"500\"></iframe><br></center>\n\n<h3 id=\"5-插入gif\"><a href=\"#5-插入gif\" class=\"headerlink\" title=\"5.插入gif\"></a>5.插入gif</h3><center><br>    <iframe height=\"100\" width=\"100\" src=\"http://ww4.sinaimg.cn/mw690/e75a115bgw2229v0diqv7.gif\"><br></iframe></center>\n\n\n\n\n\n\n"},{"title":"分类","date":"2018-12-26T09:25:11.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-12-26 17:25:11\ntype: \"categories\"\n---\n","updated":"2018-12-26T09:29:01.523Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck14n5cy30061t09z2azab2jo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签云","date":"2018-12-26T09:28:15.000Z","layout":"tags","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签云\ndate: 2018-12-26 17:28:15\nlayout: \"tags\"\ntype: \"tags\"\n---","updated":"2018-12-26T12:24:49.805Z","path":"tags/index.html","comments":1,"_id":"ck14n5cy60064t09zydxx8vyh","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ArcGIS Server之发布切片地图服务","date":"2019-08-05T02:17:48.000Z","_content":"\n> 参考：[https://github.com/CarpenterGISer/ArcGIS-API-For-Javacsript](https://github.com/CarpenterGISer/ArcGIS-API-For-Javacsript)\n\n### 什么是切片地图服务？\n切片地图服务又叫缓存第服务区，地图缓存是使地图和图像服务更快运行的一种非常有效的方法。创建地图缓存时，服务器会在若干个不同的比例级别上绘制整个地图并存储地图图像的副本。然后，服务器可在某人请求使用地图时分发这些图像。对于服务器来说，每次请求使用地图时，返回缓存的图像要比绘制地图快得多。\n![01.png](01.png)\n>注：此图片的意思是，将同一幅地图按照不同的比例进行切片，得到相应的地图切片。\n\n#### 切片地图服务优点\n1、由于切片地图服务中的图片不需要服务器实时生成，本身存在服务器的硬盘上，所以大大提高了服务器的性能。\n2、图像的详细程度不会对服务器分发副本的速度造成显著影响。\n#### 切片地图服务缺点\n1、切片地图服务由于图片事先存在，所以该服务实现的功能有限，例如想隐藏服务中的某一个图层不可以实现。\n2、当缓存级别较高时，占用的硬盘存储量较大\n\n### 利用ArcMap发布切片地图服务\n利用ArcMap发布切片地图服务与发布动态地图服务类似，主要分为以下几步：\n\n1、用ArcMap打开我们想要发布为服务的数据\n2、符号化我们的数据（可选）\n3、利用ArcMap连接ArcGIS Server\n4、修改地图服务属性（修改为切片地图服务）\n5、发布服务到ArcGIS Server\n#### （步骤1-3略）\n#### 步骤4:修改地图服务属性\n\n>点击缓存->使用缓存中的切片->切片方案->设置缓存级别\n\n![02.png](02.png)\n>注： 这个地方设置的是5个级别，可以看到缓存的大小是小于5M，当设置的级别越多时，缓存的大小基本成几何倍数增长\n### 查看硬盘缓存\n可以去ArcGIS Server站点目录查看缓存（我的站点是在：C:\\arcgisserver）\n进入C:\\arcgisserver\\directories\\arcgiscache可以看到我们刚刚发布的服务myTile\n![03.png](03.png)\n>注：如果发布的不是切片地图服务。此目录下面是不会有相应的文件夹的\n\n去ArcGIS REST Services Directory查看服务\n\n在网址上输入http://localhost:6080/arcgis/rest/services进入服务目录，进入 Test文件夹可以看到我们发布的两个服务\n![04.png](04.png)\n>注：可以看到myTile后面也加了一个（MapServer），可以得知切片地图服务也是属于地图服务的一种。","source":"_posts/ArcGIS-API-for-JS02.md","raw":"---\n---\ntitle: ArcGIS Server之发布切片地图服务\ndate: 2019-08-05 10:17:48\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n\n> 参考：[https://github.com/CarpenterGISer/ArcGIS-API-For-Javacsript](https://github.com/CarpenterGISer/ArcGIS-API-For-Javacsript)\n\n### 什么是切片地图服务？\n切片地图服务又叫缓存第服务区，地图缓存是使地图和图像服务更快运行的一种非常有效的方法。创建地图缓存时，服务器会在若干个不同的比例级别上绘制整个地图并存储地图图像的副本。然后，服务器可在某人请求使用地图时分发这些图像。对于服务器来说，每次请求使用地图时，返回缓存的图像要比绘制地图快得多。\n![01.png](01.png)\n>注：此图片的意思是，将同一幅地图按照不同的比例进行切片，得到相应的地图切片。\n\n#### 切片地图服务优点\n1、由于切片地图服务中的图片不需要服务器实时生成，本身存在服务器的硬盘上，所以大大提高了服务器的性能。\n2、图像的详细程度不会对服务器分发副本的速度造成显著影响。\n#### 切片地图服务缺点\n1、切片地图服务由于图片事先存在，所以该服务实现的功能有限，例如想隐藏服务中的某一个图层不可以实现。\n2、当缓存级别较高时，占用的硬盘存储量较大\n\n### 利用ArcMap发布切片地图服务\n利用ArcMap发布切片地图服务与发布动态地图服务类似，主要分为以下几步：\n\n1、用ArcMap打开我们想要发布为服务的数据\n2、符号化我们的数据（可选）\n3、利用ArcMap连接ArcGIS Server\n4、修改地图服务属性（修改为切片地图服务）\n5、发布服务到ArcGIS Server\n#### （步骤1-3略）\n#### 步骤4:修改地图服务属性\n\n>点击缓存->使用缓存中的切片->切片方案->设置缓存级别\n\n![02.png](02.png)\n>注： 这个地方设置的是5个级别，可以看到缓存的大小是小于5M，当设置的级别越多时，缓存的大小基本成几何倍数增长\n### 查看硬盘缓存\n可以去ArcGIS Server站点目录查看缓存（我的站点是在：C:\\arcgisserver）\n进入C:\\arcgisserver\\directories\\arcgiscache可以看到我们刚刚发布的服务myTile\n![03.png](03.png)\n>注：如果发布的不是切片地图服务。此目录下面是不会有相应的文件夹的\n\n去ArcGIS REST Services Directory查看服务\n\n在网址上输入http://localhost:6080/arcgis/rest/services进入服务目录，进入 Test文件夹可以看到我们发布的两个服务\n![04.png](04.png)\n>注：可以看到myTile后面也加了一个（MapServer），可以得知切片地图服务也是属于地图服务的一种。","slug":"ArcGIS-API-for-JS02","published":1,"updated":"2019-08-05T07:02:00.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cnp0000t09znzshtu00","content":"<blockquote>\n<p>参考：<a href=\"https://github.com/CarpenterGISer/ArcGIS-API-For-Javacsript\" target=\"_blank\" rel=\"noopener\">https://github.com/CarpenterGISer/ArcGIS-API-For-Javacsript</a></p>\n</blockquote>\n<h3 id=\"什么是切片地图服务？\"><a href=\"#什么是切片地图服务？\" class=\"headerlink\" title=\"什么是切片地图服务？\"></a>什么是切片地图服务？</h3><p>切片地图服务又叫缓存第服务区，地图缓存是使地图和图像服务更快运行的一种非常有效的方法。创建地图缓存时，服务器会在若干个不同的比例级别上绘制整个地图并存储地图图像的副本。然后，服务器可在某人请求使用地图时分发这些图像。对于服务器来说，每次请求使用地图时，返回缓存的图像要比绘制地图快得多。<br><img src=\"/2019/08/05/ArcGIS-API-for-JS02/01.png\" alt=\"01.png\"></p>\n<blockquote>\n<p>注：此图片的意思是，将同一幅地图按照不同的比例进行切片，得到相应的地图切片。</p>\n</blockquote>\n<h4 id=\"切片地图服务优点\"><a href=\"#切片地图服务优点\" class=\"headerlink\" title=\"切片地图服务优点\"></a>切片地图服务优点</h4><p>1、由于切片地图服务中的图片不需要服务器实时生成，本身存在服务器的硬盘上，所以大大提高了服务器的性能。<br>2、图像的详细程度不会对服务器分发副本的速度造成显著影响。</p>\n<h4 id=\"切片地图服务缺点\"><a href=\"#切片地图服务缺点\" class=\"headerlink\" title=\"切片地图服务缺点\"></a>切片地图服务缺点</h4><p>1、切片地图服务由于图片事先存在，所以该服务实现的功能有限，例如想隐藏服务中的某一个图层不可以实现。<br>2、当缓存级别较高时，占用的硬盘存储量较大</p>\n<h3 id=\"利用ArcMap发布切片地图服务\"><a href=\"#利用ArcMap发布切片地图服务\" class=\"headerlink\" title=\"利用ArcMap发布切片地图服务\"></a>利用ArcMap发布切片地图服务</h3><p>利用ArcMap发布切片地图服务与发布动态地图服务类似，主要分为以下几步：</p>\n<p>1、用ArcMap打开我们想要发布为服务的数据<br>2、符号化我们的数据（可选）<br>3、利用ArcMap连接ArcGIS Server<br>4、修改地图服务属性（修改为切片地图服务）<br>5、发布服务到ArcGIS Server</p>\n<h4 id=\"（步骤1-3略）\"><a href=\"#（步骤1-3略）\" class=\"headerlink\" title=\"（步骤1-3略）\"></a>（步骤1-3略）</h4><h4 id=\"步骤4-修改地图服务属性\"><a href=\"#步骤4-修改地图服务属性\" class=\"headerlink\" title=\"步骤4:修改地图服务属性\"></a>步骤4:修改地图服务属性</h4><blockquote>\n<p>点击缓存-&gt;使用缓存中的切片-&gt;切片方案-&gt;设置缓存级别</p>\n</blockquote>\n<p><img src=\"/2019/08/05/ArcGIS-API-for-JS02/02.png\" alt=\"02.png\"></p>\n<blockquote>\n<p>注： 这个地方设置的是5个级别，可以看到缓存的大小是小于5M，当设置的级别越多时，缓存的大小基本成几何倍数增长</p>\n</blockquote>\n<h3 id=\"查看硬盘缓存\"><a href=\"#查看硬盘缓存\" class=\"headerlink\" title=\"查看硬盘缓存\"></a>查看硬盘缓存</h3><p>可以去ArcGIS Server站点目录查看缓存（我的站点是在：C:\\arcgisserver）<br>进入C:\\arcgisserver\\directories\\arcgiscache可以看到我们刚刚发布的服务myTile<br><img src=\"/2019/08/05/ArcGIS-API-for-JS02/03.png\" alt=\"03.png\"></p>\n<blockquote>\n<p>注：如果发布的不是切片地图服务。此目录下面是不会有相应的文件夹的</p>\n</blockquote>\n<p>去ArcGIS REST Services Directory查看服务</p>\n<p>在网址上输入<a href=\"http://localhost:6080/arcgis/rest/services进入服务目录，进入\" target=\"_blank\" rel=\"noopener\">http://localhost:6080/arcgis/rest/services进入服务目录，进入</a> Test文件夹可以看到我们发布的两个服务<br><img src=\"/2019/08/05/ArcGIS-API-for-JS02/04.png\" alt=\"04.png\"></p>\n<blockquote>\n<p>注：可以看到myTile后面也加了一个（MapServer），可以得知切片地图服务也是属于地图服务的一种。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>参考：<a href=\"https://github.com/CarpenterGISer/ArcGIS-API-For-Javacsript\" target=\"_blank\" rel=\"noopener\">https://github.com/CarpenterGISer/ArcGIS-API-For-Javacsript</a></p>\n</blockquote>\n<h3 id=\"什么是切片地图服务？\"><a href=\"#什么是切片地图服务？\" class=\"headerlink\" title=\"什么是切片地图服务？\"></a>什么是切片地图服务？</h3><p>切片地图服务又叫缓存第服务区，地图缓存是使地图和图像服务更快运行的一种非常有效的方法。创建地图缓存时，服务器会在若干个不同的比例级别上绘制整个地图并存储地图图像的副本。然后，服务器可在某人请求使用地图时分发这些图像。对于服务器来说，每次请求使用地图时，返回缓存的图像要比绘制地图快得多。<br><img src=\"/2019/08/05/ArcGIS-API-for-JS02/01.png\" alt=\"01.png\"></p>\n<blockquote>\n<p>注：此图片的意思是，将同一幅地图按照不同的比例进行切片，得到相应的地图切片。</p>\n</blockquote>\n<h4 id=\"切片地图服务优点\"><a href=\"#切片地图服务优点\" class=\"headerlink\" title=\"切片地图服务优点\"></a>切片地图服务优点</h4><p>1、由于切片地图服务中的图片不需要服务器实时生成，本身存在服务器的硬盘上，所以大大提高了服务器的性能。<br>2、图像的详细程度不会对服务器分发副本的速度造成显著影响。</p>\n<h4 id=\"切片地图服务缺点\"><a href=\"#切片地图服务缺点\" class=\"headerlink\" title=\"切片地图服务缺点\"></a>切片地图服务缺点</h4><p>1、切片地图服务由于图片事先存在，所以该服务实现的功能有限，例如想隐藏服务中的某一个图层不可以实现。<br>2、当缓存级别较高时，占用的硬盘存储量较大</p>\n<h3 id=\"利用ArcMap发布切片地图服务\"><a href=\"#利用ArcMap发布切片地图服务\" class=\"headerlink\" title=\"利用ArcMap发布切片地图服务\"></a>利用ArcMap发布切片地图服务</h3><p>利用ArcMap发布切片地图服务与发布动态地图服务类似，主要分为以下几步：</p>\n<p>1、用ArcMap打开我们想要发布为服务的数据<br>2、符号化我们的数据（可选）<br>3、利用ArcMap连接ArcGIS Server<br>4、修改地图服务属性（修改为切片地图服务）<br>5、发布服务到ArcGIS Server</p>\n<h4 id=\"（步骤1-3略）\"><a href=\"#（步骤1-3略）\" class=\"headerlink\" title=\"（步骤1-3略）\"></a>（步骤1-3略）</h4><h4 id=\"步骤4-修改地图服务属性\"><a href=\"#步骤4-修改地图服务属性\" class=\"headerlink\" title=\"步骤4:修改地图服务属性\"></a>步骤4:修改地图服务属性</h4><blockquote>\n<p>点击缓存-&gt;使用缓存中的切片-&gt;切片方案-&gt;设置缓存级别</p>\n</blockquote>\n<p><img src=\"/2019/08/05/ArcGIS-API-for-JS02/02.png\" alt=\"02.png\"></p>\n<blockquote>\n<p>注： 这个地方设置的是5个级别，可以看到缓存的大小是小于5M，当设置的级别越多时，缓存的大小基本成几何倍数增长</p>\n</blockquote>\n<h3 id=\"查看硬盘缓存\"><a href=\"#查看硬盘缓存\" class=\"headerlink\" title=\"查看硬盘缓存\"></a>查看硬盘缓存</h3><p>可以去ArcGIS Server站点目录查看缓存（我的站点是在：C:\\arcgisserver）<br>进入C:\\arcgisserver\\directories\\arcgiscache可以看到我们刚刚发布的服务myTile<br><img src=\"/2019/08/05/ArcGIS-API-for-JS02/03.png\" alt=\"03.png\"></p>\n<blockquote>\n<p>注：如果发布的不是切片地图服务。此目录下面是不会有相应的文件夹的</p>\n</blockquote>\n<p>去ArcGIS REST Services Directory查看服务</p>\n<p>在网址上输入<a href=\"http://localhost:6080/arcgis/rest/services进入服务目录，进入\" target=\"_blank\" rel=\"noopener\">http://localhost:6080/arcgis/rest/services进入服务目录，进入</a> Test文件夹可以看到我们发布的两个服务<br><img src=\"/2019/08/05/ArcGIS-API-for-JS02/04.png\" alt=\"04.png\"></p>\n<blockquote>\n<p>注：可以看到myTile后面也加了一个（MapServer），可以得知切片地图服务也是属于地图服务的一种。</p>\n</blockquote>\n"},{"title":"ArcGIS Server之发布要素服务","date":"2019-08-05T07:02:49.000Z","_content":"### 什么是要素服务？\n要素服务可用来通过 Internet 提供要素，并提供显示要素时所要使用的符号系统。之后，客户端可执行查询操作以获取要素，并执行相应的编辑操作。要素服务提供了可用于提高客户端编辑体验的模板。此外，要素服务也可以对关系类和非空间表中的数据进行查询和编辑。\n简单的说，要素服务的数据是通过ArcSDE将数据储存在数据库中，当客户端请求要素服务时，服务器从数据库中读取数据生成图片，将图片返还给客户端。\n#### 要素服务的优点\n\n要素服务由于数据是储存在数据库中，所以实现的功能多。例如：客户端对服务中的要素进行增删改查，要素服务可以进行渲染，改变图层的颜色\n\n#### 要素服务数据要求\n1、所有数据必须来自单个 ArcSDE 地理数据库。\n2、所有数据必须通过地理数据库注册。\n3、如果要允许编辑数据，将需要 ArcSDE 数据的写入权限。使用 OS 身份验证时，必须向 ArcGIS 4、Server 帐户授予这些权限。\n5、支持版本化和未版本化数据；但是，如果需要使用服务编辑非简单类型（例如，网络边），则需要进行版本化。\n### 发布要素服务\n发布要素服务一般分为以下几个步骤：\n\n1、准备一个 ArcSDE 地理数据库（本实例准备的是SQL Server2008 R2数据库）\n2、创建一个数据库，并将其升级为地理数据库\n3、将数据存储到SDE数据库中，并设置数据的属性\n4、将SDE数据库注册到ArcGIS Server，并发布服务。\n#### 准备一个 ArcSDE 地理数据库\n1、安装SQL Server2008 R2数据库。\n2、若服务器安装了ArcGIS Desktop,那么便不需要单独安装ArcSDE，如果服务器没有安装ArcGIS Desktop，可以选择安装ArcGIS Desktop或者ArcSDE。\n3、若Linux操作系统，只能单独安装ArcSDE软件\n#### 创建一个数据库，并将其升级为地理数据库\n安装完成后 SQL Server2008 R2后，创建一个mydb数据库\n![01.png](01.png)\n打开ArcCatalog连接mydb数据库\n![02.png](02.png)\n>注：实例名便是数据库中的Server name（一定要对应），然后输入用户名，密码，最后选择我们刚刚创建的数据库mydb\n\n点击确定，出现我们刚刚创建的数据库localhost. sde\n![03.png](03.png)\n\n将mydb数据库升级为地理数据库\n右击localhost. sde->启用地理数据库，弹出该画面\n![04.png](04.png)\n注：授权文件为ArcGIS Server授权文件（ecp文件）\n\n#### 将数据存储到SDE数据库中，并设置数据的属性\n将数据导入ArcSDE数据库:右键localhost.sde->导入->要素类（多个）\n#### 将SDE数据库注册到ArcGIS Server，并发布服务。\n1.将要发布的图层拖拽到ArcMap \n2.点击文件->共享为->服务->发布服务 \n3.注册数据库到ArcGIS Server\n\n点击功能选择Feature Access点击分析\n![05.png](05.png)\n出现错误：点击错误注册地里数据库\n![06.png](06.png)\n![07.png](07.png)\n![08.png](08.png)\n![09.png](09.png)\n![10.png](10.png)","source":"_posts/ArcGIS-API-for-JS03.md","raw":"---\ntitle: ArcGIS Server之发布要素服务\ndate: 2019-08-05 15:02:49\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n### 什么是要素服务？\n要素服务可用来通过 Internet 提供要素，并提供显示要素时所要使用的符号系统。之后，客户端可执行查询操作以获取要素，并执行相应的编辑操作。要素服务提供了可用于提高客户端编辑体验的模板。此外，要素服务也可以对关系类和非空间表中的数据进行查询和编辑。\n简单的说，要素服务的数据是通过ArcSDE将数据储存在数据库中，当客户端请求要素服务时，服务器从数据库中读取数据生成图片，将图片返还给客户端。\n#### 要素服务的优点\n\n要素服务由于数据是储存在数据库中，所以实现的功能多。例如：客户端对服务中的要素进行增删改查，要素服务可以进行渲染，改变图层的颜色\n\n#### 要素服务数据要求\n1、所有数据必须来自单个 ArcSDE 地理数据库。\n2、所有数据必须通过地理数据库注册。\n3、如果要允许编辑数据，将需要 ArcSDE 数据的写入权限。使用 OS 身份验证时，必须向 ArcGIS 4、Server 帐户授予这些权限。\n5、支持版本化和未版本化数据；但是，如果需要使用服务编辑非简单类型（例如，网络边），则需要进行版本化。\n### 发布要素服务\n发布要素服务一般分为以下几个步骤：\n\n1、准备一个 ArcSDE 地理数据库（本实例准备的是SQL Server2008 R2数据库）\n2、创建一个数据库，并将其升级为地理数据库\n3、将数据存储到SDE数据库中，并设置数据的属性\n4、将SDE数据库注册到ArcGIS Server，并发布服务。\n#### 准备一个 ArcSDE 地理数据库\n1、安装SQL Server2008 R2数据库。\n2、若服务器安装了ArcGIS Desktop,那么便不需要单独安装ArcSDE，如果服务器没有安装ArcGIS Desktop，可以选择安装ArcGIS Desktop或者ArcSDE。\n3、若Linux操作系统，只能单独安装ArcSDE软件\n#### 创建一个数据库，并将其升级为地理数据库\n安装完成后 SQL Server2008 R2后，创建一个mydb数据库\n![01.png](01.png)\n打开ArcCatalog连接mydb数据库\n![02.png](02.png)\n>注：实例名便是数据库中的Server name（一定要对应），然后输入用户名，密码，最后选择我们刚刚创建的数据库mydb\n\n点击确定，出现我们刚刚创建的数据库localhost. sde\n![03.png](03.png)\n\n将mydb数据库升级为地理数据库\n右击localhost. sde->启用地理数据库，弹出该画面\n![04.png](04.png)\n注：授权文件为ArcGIS Server授权文件（ecp文件）\n\n#### 将数据存储到SDE数据库中，并设置数据的属性\n将数据导入ArcSDE数据库:右键localhost.sde->导入->要素类（多个）\n#### 将SDE数据库注册到ArcGIS Server，并发布服务。\n1.将要发布的图层拖拽到ArcMap \n2.点击文件->共享为->服务->发布服务 \n3.注册数据库到ArcGIS Server\n\n点击功能选择Feature Access点击分析\n![05.png](05.png)\n出现错误：点击错误注册地里数据库\n![06.png](06.png)\n![07.png](07.png)\n![08.png](08.png)\n![09.png](09.png)\n![10.png](10.png)","slug":"ArcGIS-API-for-JS03","published":1,"updated":"2019-08-05T08:25:23.922Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cny0001t09zc9rw4o17","content":"<h3 id=\"什么是要素服务？\"><a href=\"#什么是要素服务？\" class=\"headerlink\" title=\"什么是要素服务？\"></a>什么是要素服务？</h3><p>要素服务可用来通过 Internet 提供要素，并提供显示要素时所要使用的符号系统。之后，客户端可执行查询操作以获取要素，并执行相应的编辑操作。要素服务提供了可用于提高客户端编辑体验的模板。此外，要素服务也可以对关系类和非空间表中的数据进行查询和编辑。<br>简单的说，要素服务的数据是通过ArcSDE将数据储存在数据库中，当客户端请求要素服务时，服务器从数据库中读取数据生成图片，将图片返还给客户端。</p>\n<h4 id=\"要素服务的优点\"><a href=\"#要素服务的优点\" class=\"headerlink\" title=\"要素服务的优点\"></a>要素服务的优点</h4><p>要素服务由于数据是储存在数据库中，所以实现的功能多。例如：客户端对服务中的要素进行增删改查，要素服务可以进行渲染，改变图层的颜色</p>\n<h4 id=\"要素服务数据要求\"><a href=\"#要素服务数据要求\" class=\"headerlink\" title=\"要素服务数据要求\"></a>要素服务数据要求</h4><p>1、所有数据必须来自单个 ArcSDE 地理数据库。<br>2、所有数据必须通过地理数据库注册。<br>3、如果要允许编辑数据，将需要 ArcSDE 数据的写入权限。使用 OS 身份验证时，必须向 ArcGIS 4、Server 帐户授予这些权限。<br>5、支持版本化和未版本化数据；但是，如果需要使用服务编辑非简单类型（例如，网络边），则需要进行版本化。</p>\n<h3 id=\"发布要素服务\"><a href=\"#发布要素服务\" class=\"headerlink\" title=\"发布要素服务\"></a>发布要素服务</h3><p>发布要素服务一般分为以下几个步骤：</p>\n<p>1、准备一个 ArcSDE 地理数据库（本实例准备的是SQL Server2008 R2数据库）<br>2、创建一个数据库，并将其升级为地理数据库<br>3、将数据存储到SDE数据库中，并设置数据的属性<br>4、将SDE数据库注册到ArcGIS Server，并发布服务。</p>\n<h4 id=\"准备一个-ArcSDE-地理数据库\"><a href=\"#准备一个-ArcSDE-地理数据库\" class=\"headerlink\" title=\"准备一个 ArcSDE 地理数据库\"></a>准备一个 ArcSDE 地理数据库</h4><p>1、安装SQL Server2008 R2数据库。<br>2、若服务器安装了ArcGIS Desktop,那么便不需要单独安装ArcSDE，如果服务器没有安装ArcGIS Desktop，可以选择安装ArcGIS Desktop或者ArcSDE。<br>3、若Linux操作系统，只能单独安装ArcSDE软件</p>\n<h4 id=\"创建一个数据库，并将其升级为地理数据库\"><a href=\"#创建一个数据库，并将其升级为地理数据库\" class=\"headerlink\" title=\"创建一个数据库，并将其升级为地理数据库\"></a>创建一个数据库，并将其升级为地理数据库</h4><p>安装完成后 SQL Server2008 R2后，创建一个mydb数据库<br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/01.png\" alt=\"01.png\"><br>打开ArcCatalog连接mydb数据库<br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/02.png\" alt=\"02.png\"></p>\n<blockquote>\n<p>注：实例名便是数据库中的Server name（一定要对应），然后输入用户名，密码，最后选择我们刚刚创建的数据库mydb</p>\n</blockquote>\n<p>点击确定，出现我们刚刚创建的数据库localhost. sde<br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/03.png\" alt=\"03.png\"></p>\n<p>将mydb数据库升级为地理数据库<br>右击localhost. sde-&gt;启用地理数据库，弹出该画面<br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/04.png\" alt=\"04.png\"><br>注：授权文件为ArcGIS Server授权文件（ecp文件）</p>\n<h4 id=\"将数据存储到SDE数据库中，并设置数据的属性\"><a href=\"#将数据存储到SDE数据库中，并设置数据的属性\" class=\"headerlink\" title=\"将数据存储到SDE数据库中，并设置数据的属性\"></a>将数据存储到SDE数据库中，并设置数据的属性</h4><p>将数据导入ArcSDE数据库:右键localhost.sde-&gt;导入-&gt;要素类（多个）</p>\n<h4 id=\"将SDE数据库注册到ArcGIS-Server，并发布服务。\"><a href=\"#将SDE数据库注册到ArcGIS-Server，并发布服务。\" class=\"headerlink\" title=\"将SDE数据库注册到ArcGIS Server，并发布服务。\"></a>将SDE数据库注册到ArcGIS Server，并发布服务。</h4><p>1.将要发布的图层拖拽到ArcMap<br>2.点击文件-&gt;共享为-&gt;服务-&gt;发布服务<br>3.注册数据库到ArcGIS Server</p>\n<p>点击功能选择Feature Access点击分析<br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/05.png\" alt=\"05.png\"><br>出现错误：点击错误注册地里数据库<br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/06.png\" alt=\"06.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/07.png\" alt=\"07.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/08.png\" alt=\"08.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/09.png\" alt=\"09.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/10.png\" alt=\"10.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是要素服务？\"><a href=\"#什么是要素服务？\" class=\"headerlink\" title=\"什么是要素服务？\"></a>什么是要素服务？</h3><p>要素服务可用来通过 Internet 提供要素，并提供显示要素时所要使用的符号系统。之后，客户端可执行查询操作以获取要素，并执行相应的编辑操作。要素服务提供了可用于提高客户端编辑体验的模板。此外，要素服务也可以对关系类和非空间表中的数据进行查询和编辑。<br>简单的说，要素服务的数据是通过ArcSDE将数据储存在数据库中，当客户端请求要素服务时，服务器从数据库中读取数据生成图片，将图片返还给客户端。</p>\n<h4 id=\"要素服务的优点\"><a href=\"#要素服务的优点\" class=\"headerlink\" title=\"要素服务的优点\"></a>要素服务的优点</h4><p>要素服务由于数据是储存在数据库中，所以实现的功能多。例如：客户端对服务中的要素进行增删改查，要素服务可以进行渲染，改变图层的颜色</p>\n<h4 id=\"要素服务数据要求\"><a href=\"#要素服务数据要求\" class=\"headerlink\" title=\"要素服务数据要求\"></a>要素服务数据要求</h4><p>1、所有数据必须来自单个 ArcSDE 地理数据库。<br>2、所有数据必须通过地理数据库注册。<br>3、如果要允许编辑数据，将需要 ArcSDE 数据的写入权限。使用 OS 身份验证时，必须向 ArcGIS 4、Server 帐户授予这些权限。<br>5、支持版本化和未版本化数据；但是，如果需要使用服务编辑非简单类型（例如，网络边），则需要进行版本化。</p>\n<h3 id=\"发布要素服务\"><a href=\"#发布要素服务\" class=\"headerlink\" title=\"发布要素服务\"></a>发布要素服务</h3><p>发布要素服务一般分为以下几个步骤：</p>\n<p>1、准备一个 ArcSDE 地理数据库（本实例准备的是SQL Server2008 R2数据库）<br>2、创建一个数据库，并将其升级为地理数据库<br>3、将数据存储到SDE数据库中，并设置数据的属性<br>4、将SDE数据库注册到ArcGIS Server，并发布服务。</p>\n<h4 id=\"准备一个-ArcSDE-地理数据库\"><a href=\"#准备一个-ArcSDE-地理数据库\" class=\"headerlink\" title=\"准备一个 ArcSDE 地理数据库\"></a>准备一个 ArcSDE 地理数据库</h4><p>1、安装SQL Server2008 R2数据库。<br>2、若服务器安装了ArcGIS Desktop,那么便不需要单独安装ArcSDE，如果服务器没有安装ArcGIS Desktop，可以选择安装ArcGIS Desktop或者ArcSDE。<br>3、若Linux操作系统，只能单独安装ArcSDE软件</p>\n<h4 id=\"创建一个数据库，并将其升级为地理数据库\"><a href=\"#创建一个数据库，并将其升级为地理数据库\" class=\"headerlink\" title=\"创建一个数据库，并将其升级为地理数据库\"></a>创建一个数据库，并将其升级为地理数据库</h4><p>安装完成后 SQL Server2008 R2后，创建一个mydb数据库<br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/01.png\" alt=\"01.png\"><br>打开ArcCatalog连接mydb数据库<br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/02.png\" alt=\"02.png\"></p>\n<blockquote>\n<p>注：实例名便是数据库中的Server name（一定要对应），然后输入用户名，密码，最后选择我们刚刚创建的数据库mydb</p>\n</blockquote>\n<p>点击确定，出现我们刚刚创建的数据库localhost. sde<br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/03.png\" alt=\"03.png\"></p>\n<p>将mydb数据库升级为地理数据库<br>右击localhost. sde-&gt;启用地理数据库，弹出该画面<br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/04.png\" alt=\"04.png\"><br>注：授权文件为ArcGIS Server授权文件（ecp文件）</p>\n<h4 id=\"将数据存储到SDE数据库中，并设置数据的属性\"><a href=\"#将数据存储到SDE数据库中，并设置数据的属性\" class=\"headerlink\" title=\"将数据存储到SDE数据库中，并设置数据的属性\"></a>将数据存储到SDE数据库中，并设置数据的属性</h4><p>将数据导入ArcSDE数据库:右键localhost.sde-&gt;导入-&gt;要素类（多个）</p>\n<h4 id=\"将SDE数据库注册到ArcGIS-Server，并发布服务。\"><a href=\"#将SDE数据库注册到ArcGIS-Server，并发布服务。\" class=\"headerlink\" title=\"将SDE数据库注册到ArcGIS Server，并发布服务。\"></a>将SDE数据库注册到ArcGIS Server，并发布服务。</h4><p>1.将要发布的图层拖拽到ArcMap<br>2.点击文件-&gt;共享为-&gt;服务-&gt;发布服务<br>3.注册数据库到ArcGIS Server</p>\n<p>点击功能选择Feature Access点击分析<br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/05.png\" alt=\"05.png\"><br>出现错误：点击错误注册地里数据库<br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/06.png\" alt=\"06.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/07.png\" alt=\"07.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/08.png\" alt=\"08.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/09.png\" alt=\"09.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS03/10.png\" alt=\"10.png\"></p>\n"},{"title":"ArcGIS Server之发布动态地图服务","date":"2019-08-05T02:17:48.000Z","_content":"\n> 参考：[https://github.com/CarpenterGISer/ArcGIS-API-For-Javacsript](https://github.com/CarpenterGISer/ArcGIS-API-For-Javacsript)\n\n在WebGIS开发过程中，我们所需要的数据不仅仅来自于ArcGIS online，有时候我们需要发布自己的数据服务,在这里主要说明一下如何利用ArcGIS Server发布自己的动态地图服务。\n\n#### 什么是地图服务?\n地图服务是一种利用 ArcGIS 使地图可通过 Web 进行访问的方法。我们首先在 ArcMap 中制作地图，然后将地图作为服务发布到 ArcGIS Server 站点上。这样，Internet 用户便可在 Web应用程序、ArcGIS for Desktop、ArcGIS Online 以及其他客户端应用程序中使用此地图服务。\n当地图服务发布成功后，我们可以通过网址（http://localhost:6080/arcgis/rest/services）来查看地图服务所支持的操作，地图服务所包含的数据，以及我们还可以通过网址来测试地图服务的功能\n#### 地图服务之动态地图服务\n我们常用的地图服务主要分为两种：动态地图服务，切片地图服务（也叫瓦片地图服务），地图服务其实可以理解为图层的集合，在本篇中主要说的是动态地图服务，\n动态地图服务的特点：\n\n1、动态地图会在用户发出请求时进行绘制。\n2、地图服务具有允许客户端（例如 ArcGIS web API）动态更改每个图层的行为和外观。\n3、可以执行属性查询，空间查询等相关功能。\n#### 利用ArcMap发布动态地图服务\n利用ArcMap发布自己的服务，主要分为以下几步：\n\n1、用ArcMap打开我们想要发布为服务的数据\n2、符号化我们的数据（可选）\n3、利用ArcMap连接ArcGIS Server发布服务\n#### 查看地图服务\n若发布到本地，打开并登录服务管理器（http://localhost:6080/arcgis/manager/）\n![01.png](01.png)\n![02.png](02.png)\n![03.png](03.png)\n![03.png](03.png)\n接下来我们可以使用ArcGIS API For js,来调用我们的服务做一些事情啦","source":"_posts/ArcGIS-API-for-JS01.md","raw":"---\n---\ntitle: ArcGIS Server之发布动态地图服务\ndate: 2019-08-05 10:17:48\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n\n> 参考：[https://github.com/CarpenterGISer/ArcGIS-API-For-Javacsript](https://github.com/CarpenterGISer/ArcGIS-API-For-Javacsript)\n\n在WebGIS开发过程中，我们所需要的数据不仅仅来自于ArcGIS online，有时候我们需要发布自己的数据服务,在这里主要说明一下如何利用ArcGIS Server发布自己的动态地图服务。\n\n#### 什么是地图服务?\n地图服务是一种利用 ArcGIS 使地图可通过 Web 进行访问的方法。我们首先在 ArcMap 中制作地图，然后将地图作为服务发布到 ArcGIS Server 站点上。这样，Internet 用户便可在 Web应用程序、ArcGIS for Desktop、ArcGIS Online 以及其他客户端应用程序中使用此地图服务。\n当地图服务发布成功后，我们可以通过网址（http://localhost:6080/arcgis/rest/services）来查看地图服务所支持的操作，地图服务所包含的数据，以及我们还可以通过网址来测试地图服务的功能\n#### 地图服务之动态地图服务\n我们常用的地图服务主要分为两种：动态地图服务，切片地图服务（也叫瓦片地图服务），地图服务其实可以理解为图层的集合，在本篇中主要说的是动态地图服务，\n动态地图服务的特点：\n\n1、动态地图会在用户发出请求时进行绘制。\n2、地图服务具有允许客户端（例如 ArcGIS web API）动态更改每个图层的行为和外观。\n3、可以执行属性查询，空间查询等相关功能。\n#### 利用ArcMap发布动态地图服务\n利用ArcMap发布自己的服务，主要分为以下几步：\n\n1、用ArcMap打开我们想要发布为服务的数据\n2、符号化我们的数据（可选）\n3、利用ArcMap连接ArcGIS Server发布服务\n#### 查看地图服务\n若发布到本地，打开并登录服务管理器（http://localhost:6080/arcgis/manager/）\n![01.png](01.png)\n![02.png](02.png)\n![03.png](03.png)\n![03.png](03.png)\n接下来我们可以使用ArcGIS API For js,来调用我们的服务做一些事情啦","slug":"ArcGIS-API-for-JS01","published":1,"updated":"2019-08-05T06:29:50.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5co50004t09zptwturjw","content":"<blockquote>\n<p>参考：<a href=\"https://github.com/CarpenterGISer/ArcGIS-API-For-Javacsript\" target=\"_blank\" rel=\"noopener\">https://github.com/CarpenterGISer/ArcGIS-API-For-Javacsript</a></p>\n</blockquote>\n<p>在WebGIS开发过程中，我们所需要的数据不仅仅来自于ArcGIS online，有时候我们需要发布自己的数据服务,在这里主要说明一下如何利用ArcGIS Server发布自己的动态地图服务。</p>\n<h4 id=\"什么是地图服务\"><a href=\"#什么是地图服务\" class=\"headerlink\" title=\"什么是地图服务?\"></a>什么是地图服务?</h4><p>地图服务是一种利用 ArcGIS 使地图可通过 Web 进行访问的方法。我们首先在 ArcMap 中制作地图，然后将地图作为服务发布到 ArcGIS Server 站点上。这样，Internet 用户便可在 Web应用程序、ArcGIS for Desktop、ArcGIS Online 以及其他客户端应用程序中使用此地图服务。<br>当地图服务发布成功后，我们可以通过网址（<a href=\"http://localhost:6080/arcgis/rest/services）来查看地图服务所支持的操作，地图服务所包含的数据，以及我们还可以通过网址来测试地图服务的功能\" target=\"_blank\" rel=\"noopener\">http://localhost:6080/arcgis/rest/services）来查看地图服务所支持的操作，地图服务所包含的数据，以及我们还可以通过网址来测试地图服务的功能</a></p>\n<h4 id=\"地图服务之动态地图服务\"><a href=\"#地图服务之动态地图服务\" class=\"headerlink\" title=\"地图服务之动态地图服务\"></a>地图服务之动态地图服务</h4><p>我们常用的地图服务主要分为两种：动态地图服务，切片地图服务（也叫瓦片地图服务），地图服务其实可以理解为图层的集合，在本篇中主要说的是动态地图服务，<br>动态地图服务的特点：</p>\n<p>1、动态地图会在用户发出请求时进行绘制。<br>2、地图服务具有允许客户端（例如 ArcGIS web API）动态更改每个图层的行为和外观。<br>3、可以执行属性查询，空间查询等相关功能。</p>\n<h4 id=\"利用ArcMap发布动态地图服务\"><a href=\"#利用ArcMap发布动态地图服务\" class=\"headerlink\" title=\"利用ArcMap发布动态地图服务\"></a>利用ArcMap发布动态地图服务</h4><p>利用ArcMap发布自己的服务，主要分为以下几步：</p>\n<p>1、用ArcMap打开我们想要发布为服务的数据<br>2、符号化我们的数据（可选）<br>3、利用ArcMap连接ArcGIS Server发布服务</p>\n<h4 id=\"查看地图服务\"><a href=\"#查看地图服务\" class=\"headerlink\" title=\"查看地图服务\"></a>查看地图服务</h4><p>若发布到本地，打开并登录服务管理器（<a href=\"http://localhost:6080/arcgis/manager/）\" target=\"_blank\" rel=\"noopener\">http://localhost:6080/arcgis/manager/）</a><br><img src=\"/2019/08/05/ArcGIS-API-for-JS01/01.png\" alt=\"01.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS01/02.png\" alt=\"02.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS01/03.png\" alt=\"03.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS01/03.png\" alt=\"03.png\"><br>接下来我们可以使用ArcGIS API For js,来调用我们的服务做一些事情啦</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>参考：<a href=\"https://github.com/CarpenterGISer/ArcGIS-API-For-Javacsript\" target=\"_blank\" rel=\"noopener\">https://github.com/CarpenterGISer/ArcGIS-API-For-Javacsript</a></p>\n</blockquote>\n<p>在WebGIS开发过程中，我们所需要的数据不仅仅来自于ArcGIS online，有时候我们需要发布自己的数据服务,在这里主要说明一下如何利用ArcGIS Server发布自己的动态地图服务。</p>\n<h4 id=\"什么是地图服务\"><a href=\"#什么是地图服务\" class=\"headerlink\" title=\"什么是地图服务?\"></a>什么是地图服务?</h4><p>地图服务是一种利用 ArcGIS 使地图可通过 Web 进行访问的方法。我们首先在 ArcMap 中制作地图，然后将地图作为服务发布到 ArcGIS Server 站点上。这样，Internet 用户便可在 Web应用程序、ArcGIS for Desktop、ArcGIS Online 以及其他客户端应用程序中使用此地图服务。<br>当地图服务发布成功后，我们可以通过网址（<a href=\"http://localhost:6080/arcgis/rest/services）来查看地图服务所支持的操作，地图服务所包含的数据，以及我们还可以通过网址来测试地图服务的功能\" target=\"_blank\" rel=\"noopener\">http://localhost:6080/arcgis/rest/services）来查看地图服务所支持的操作，地图服务所包含的数据，以及我们还可以通过网址来测试地图服务的功能</a></p>\n<h4 id=\"地图服务之动态地图服务\"><a href=\"#地图服务之动态地图服务\" class=\"headerlink\" title=\"地图服务之动态地图服务\"></a>地图服务之动态地图服务</h4><p>我们常用的地图服务主要分为两种：动态地图服务，切片地图服务（也叫瓦片地图服务），地图服务其实可以理解为图层的集合，在本篇中主要说的是动态地图服务，<br>动态地图服务的特点：</p>\n<p>1、动态地图会在用户发出请求时进行绘制。<br>2、地图服务具有允许客户端（例如 ArcGIS web API）动态更改每个图层的行为和外观。<br>3、可以执行属性查询，空间查询等相关功能。</p>\n<h4 id=\"利用ArcMap发布动态地图服务\"><a href=\"#利用ArcMap发布动态地图服务\" class=\"headerlink\" title=\"利用ArcMap发布动态地图服务\"></a>利用ArcMap发布动态地图服务</h4><p>利用ArcMap发布自己的服务，主要分为以下几步：</p>\n<p>1、用ArcMap打开我们想要发布为服务的数据<br>2、符号化我们的数据（可选）<br>3、利用ArcMap连接ArcGIS Server发布服务</p>\n<h4 id=\"查看地图服务\"><a href=\"#查看地图服务\" class=\"headerlink\" title=\"查看地图服务\"></a>查看地图服务</h4><p>若发布到本地，打开并登录服务管理器（<a href=\"http://localhost:6080/arcgis/manager/）\" target=\"_blank\" rel=\"noopener\">http://localhost:6080/arcgis/manager/）</a><br><img src=\"/2019/08/05/ArcGIS-API-for-JS01/01.png\" alt=\"01.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS01/02.png\" alt=\"02.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS01/03.png\" alt=\"03.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS01/03.png\" alt=\"03.png\"><br>接下来我们可以使用ArcGIS API For js,来调用我们的服务做一些事情啦</p>\n"},{"title":"ArcGIS Server之发布影像服务","date":"2019-08-05T08:25:58.000Z","_content":"在实际开发过程中，为了满足用户不同的需求，Esri制定了各种不同的服务类型，每一种服务类型都有着自己的优点，同时特定的服务类型可以实现特性的功能，此篇博客便说一说影像服务\n### 什么是影像服务？\n影像服务是将栅格数据和影像数据作为服务发布出去。此时客户端便可以对栅格数据的进行访问。例如：查看栅格的波段信息，查看栅格某一个像元的值等等。\n### 什么数据可以发布为影像服务？\n发布影像服务，对于原始数据是有一定的要求的，当数据出现问题时，数据是不可以发布成功的，影像服务支持的数据主要有：\n\n>栅格数据集\n>栅格图层\n>镶嵌数据集\n>镶嵌图层\n\n### 发布影像服务\n发布影像服务非常简单，与地图服务不同的是：发布影像服务需要在ArcCatalog中进行，主要分步骤为：\n\n1.在ArcCatalog找到我们要栅格数据集。\n2.通过ArcCatalog将我们的栅格共享为影像服务。\n3.查看服务是否发布成功\n#### 在ArcCatalog找到我们要栅格数据集\n发布的数据为数字高程模型（DEM）\n![01.png](01.png)\n#### 将栅格数据共享为影像服务。\n![02.png](02.png)\n到达服务编辑器，发布最简单的影像服务，直接点击发布即可->发布成功。\n![03.png](03.png)\n### 可能发生的错误（若服务发布成功，此处可略去）\n#### 错误发生\n发布服务告知我服务定义失败\n![04.png](04.png)\n#### 错误原因\n此错误发生的原因是你的DEM存放在某一个数据库中，导致数据在数据库中但是数据的格式有错误。例如，我想把dem导出来，却发现也不能导出，如图所示：\n![05.png](05.png)\n#### 如何解决错误\n1.用ArcMap打开相应的Dem\n2.从ArcMap中将相应的栅格数据导出到硬盘上\n3.重新发布，即可成功。\n##### 用ArcMap打开相应的Dem\n![06.png](06.png)\n##### 从ArcMap中将相应的栅格数据导出到硬盘上\n![07.png](07.png)\n![08.png](08.png)\n然后在catalog中重新发布。","source":"_posts/ArcGIS-API-for-JS04.md","raw":"---\ntitle: ArcGIS Server之发布影像服务\ndate: 2019-08-05 16:25:58\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n在实际开发过程中，为了满足用户不同的需求，Esri制定了各种不同的服务类型，每一种服务类型都有着自己的优点，同时特定的服务类型可以实现特性的功能，此篇博客便说一说影像服务\n### 什么是影像服务？\n影像服务是将栅格数据和影像数据作为服务发布出去。此时客户端便可以对栅格数据的进行访问。例如：查看栅格的波段信息，查看栅格某一个像元的值等等。\n### 什么数据可以发布为影像服务？\n发布影像服务，对于原始数据是有一定的要求的，当数据出现问题时，数据是不可以发布成功的，影像服务支持的数据主要有：\n\n>栅格数据集\n>栅格图层\n>镶嵌数据集\n>镶嵌图层\n\n### 发布影像服务\n发布影像服务非常简单，与地图服务不同的是：发布影像服务需要在ArcCatalog中进行，主要分步骤为：\n\n1.在ArcCatalog找到我们要栅格数据集。\n2.通过ArcCatalog将我们的栅格共享为影像服务。\n3.查看服务是否发布成功\n#### 在ArcCatalog找到我们要栅格数据集\n发布的数据为数字高程模型（DEM）\n![01.png](01.png)\n#### 将栅格数据共享为影像服务。\n![02.png](02.png)\n到达服务编辑器，发布最简单的影像服务，直接点击发布即可->发布成功。\n![03.png](03.png)\n### 可能发生的错误（若服务发布成功，此处可略去）\n#### 错误发生\n发布服务告知我服务定义失败\n![04.png](04.png)\n#### 错误原因\n此错误发生的原因是你的DEM存放在某一个数据库中，导致数据在数据库中但是数据的格式有错误。例如，我想把dem导出来，却发现也不能导出，如图所示：\n![05.png](05.png)\n#### 如何解决错误\n1.用ArcMap打开相应的Dem\n2.从ArcMap中将相应的栅格数据导出到硬盘上\n3.重新发布，即可成功。\n##### 用ArcMap打开相应的Dem\n![06.png](06.png)\n##### 从ArcMap中将相应的栅格数据导出到硬盘上\n![07.png](07.png)\n![08.png](08.png)\n然后在catalog中重新发布。","slug":"ArcGIS-API-for-JS04","published":1,"updated":"2019-08-05T08:52:09.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5co90005t09z08pmk116","content":"<p>在实际开发过程中，为了满足用户不同的需求，Esri制定了各种不同的服务类型，每一种服务类型都有着自己的优点，同时特定的服务类型可以实现特性的功能，此篇博客便说一说影像服务</p>\n<h3 id=\"什么是影像服务？\"><a href=\"#什么是影像服务？\" class=\"headerlink\" title=\"什么是影像服务？\"></a>什么是影像服务？</h3><p>影像服务是将栅格数据和影像数据作为服务发布出去。此时客户端便可以对栅格数据的进行访问。例如：查看栅格的波段信息，查看栅格某一个像元的值等等。</p>\n<h3 id=\"什么数据可以发布为影像服务？\"><a href=\"#什么数据可以发布为影像服务？\" class=\"headerlink\" title=\"什么数据可以发布为影像服务？\"></a>什么数据可以发布为影像服务？</h3><p>发布影像服务，对于原始数据是有一定的要求的，当数据出现问题时，数据是不可以发布成功的，影像服务支持的数据主要有：</p>\n<blockquote>\n<p>栅格数据集<br>栅格图层<br>镶嵌数据集<br>镶嵌图层</p>\n</blockquote>\n<h3 id=\"发布影像服务\"><a href=\"#发布影像服务\" class=\"headerlink\" title=\"发布影像服务\"></a>发布影像服务</h3><p>发布影像服务非常简单，与地图服务不同的是：发布影像服务需要在ArcCatalog中进行，主要分步骤为：</p>\n<p>1.在ArcCatalog找到我们要栅格数据集。<br>2.通过ArcCatalog将我们的栅格共享为影像服务。<br>3.查看服务是否发布成功</p>\n<h4 id=\"在ArcCatalog找到我们要栅格数据集\"><a href=\"#在ArcCatalog找到我们要栅格数据集\" class=\"headerlink\" title=\"在ArcCatalog找到我们要栅格数据集\"></a>在ArcCatalog找到我们要栅格数据集</h4><p>发布的数据为数字高程模型（DEM）<br><img src=\"/2019/08/05/ArcGIS-API-for-JS04/01.png\" alt=\"01.png\"></p>\n<h4 id=\"将栅格数据共享为影像服务。\"><a href=\"#将栅格数据共享为影像服务。\" class=\"headerlink\" title=\"将栅格数据共享为影像服务。\"></a>将栅格数据共享为影像服务。</h4><p><img src=\"/2019/08/05/ArcGIS-API-for-JS04/02.png\" alt=\"02.png\"><br>到达服务编辑器，发布最简单的影像服务，直接点击发布即可-&gt;发布成功。<br><img src=\"/2019/08/05/ArcGIS-API-for-JS04/03.png\" alt=\"03.png\"></p>\n<h3 id=\"可能发生的错误（若服务发布成功，此处可略去）\"><a href=\"#可能发生的错误（若服务发布成功，此处可略去）\" class=\"headerlink\" title=\"可能发生的错误（若服务发布成功，此处可略去）\"></a>可能发生的错误（若服务发布成功，此处可略去）</h3><h4 id=\"错误发生\"><a href=\"#错误发生\" class=\"headerlink\" title=\"错误发生\"></a>错误发生</h4><p>发布服务告知我服务定义失败<br><img src=\"/2019/08/05/ArcGIS-API-for-JS04/04.png\" alt=\"04.png\"></p>\n<h4 id=\"错误原因\"><a href=\"#错误原因\" class=\"headerlink\" title=\"错误原因\"></a>错误原因</h4><p>此错误发生的原因是你的DEM存放在某一个数据库中，导致数据在数据库中但是数据的格式有错误。例如，我想把dem导出来，却发现也不能导出，如图所示：<br><img src=\"/2019/08/05/ArcGIS-API-for-JS04/05.png\" alt=\"05.png\"></p>\n<h4 id=\"如何解决错误\"><a href=\"#如何解决错误\" class=\"headerlink\" title=\"如何解决错误\"></a>如何解决错误</h4><p>1.用ArcMap打开相应的Dem<br>2.从ArcMap中将相应的栅格数据导出到硬盘上<br>3.重新发布，即可成功。</p>\n<h5 id=\"用ArcMap打开相应的Dem\"><a href=\"#用ArcMap打开相应的Dem\" class=\"headerlink\" title=\"用ArcMap打开相应的Dem\"></a>用ArcMap打开相应的Dem</h5><p><img src=\"/2019/08/05/ArcGIS-API-for-JS04/06.png\" alt=\"06.png\"></p>\n<h5 id=\"从ArcMap中将相应的栅格数据导出到硬盘上\"><a href=\"#从ArcMap中将相应的栅格数据导出到硬盘上\" class=\"headerlink\" title=\"从ArcMap中将相应的栅格数据导出到硬盘上\"></a>从ArcMap中将相应的栅格数据导出到硬盘上</h5><p><img src=\"/2019/08/05/ArcGIS-API-for-JS04/07.png\" alt=\"07.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS04/08.png\" alt=\"08.png\"><br>然后在catalog中重新发布。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在实际开发过程中，为了满足用户不同的需求，Esri制定了各种不同的服务类型，每一种服务类型都有着自己的优点，同时特定的服务类型可以实现特性的功能，此篇博客便说一说影像服务</p>\n<h3 id=\"什么是影像服务？\"><a href=\"#什么是影像服务？\" class=\"headerlink\" title=\"什么是影像服务？\"></a>什么是影像服务？</h3><p>影像服务是将栅格数据和影像数据作为服务发布出去。此时客户端便可以对栅格数据的进行访问。例如：查看栅格的波段信息，查看栅格某一个像元的值等等。</p>\n<h3 id=\"什么数据可以发布为影像服务？\"><a href=\"#什么数据可以发布为影像服务？\" class=\"headerlink\" title=\"什么数据可以发布为影像服务？\"></a>什么数据可以发布为影像服务？</h3><p>发布影像服务，对于原始数据是有一定的要求的，当数据出现问题时，数据是不可以发布成功的，影像服务支持的数据主要有：</p>\n<blockquote>\n<p>栅格数据集<br>栅格图层<br>镶嵌数据集<br>镶嵌图层</p>\n</blockquote>\n<h3 id=\"发布影像服务\"><a href=\"#发布影像服务\" class=\"headerlink\" title=\"发布影像服务\"></a>发布影像服务</h3><p>发布影像服务非常简单，与地图服务不同的是：发布影像服务需要在ArcCatalog中进行，主要分步骤为：</p>\n<p>1.在ArcCatalog找到我们要栅格数据集。<br>2.通过ArcCatalog将我们的栅格共享为影像服务。<br>3.查看服务是否发布成功</p>\n<h4 id=\"在ArcCatalog找到我们要栅格数据集\"><a href=\"#在ArcCatalog找到我们要栅格数据集\" class=\"headerlink\" title=\"在ArcCatalog找到我们要栅格数据集\"></a>在ArcCatalog找到我们要栅格数据集</h4><p>发布的数据为数字高程模型（DEM）<br><img src=\"/2019/08/05/ArcGIS-API-for-JS04/01.png\" alt=\"01.png\"></p>\n<h4 id=\"将栅格数据共享为影像服务。\"><a href=\"#将栅格数据共享为影像服务。\" class=\"headerlink\" title=\"将栅格数据共享为影像服务。\"></a>将栅格数据共享为影像服务。</h4><p><img src=\"/2019/08/05/ArcGIS-API-for-JS04/02.png\" alt=\"02.png\"><br>到达服务编辑器，发布最简单的影像服务，直接点击发布即可-&gt;发布成功。<br><img src=\"/2019/08/05/ArcGIS-API-for-JS04/03.png\" alt=\"03.png\"></p>\n<h3 id=\"可能发生的错误（若服务发布成功，此处可略去）\"><a href=\"#可能发生的错误（若服务发布成功，此处可略去）\" class=\"headerlink\" title=\"可能发生的错误（若服务发布成功，此处可略去）\"></a>可能发生的错误（若服务发布成功，此处可略去）</h3><h4 id=\"错误发生\"><a href=\"#错误发生\" class=\"headerlink\" title=\"错误发生\"></a>错误发生</h4><p>发布服务告知我服务定义失败<br><img src=\"/2019/08/05/ArcGIS-API-for-JS04/04.png\" alt=\"04.png\"></p>\n<h4 id=\"错误原因\"><a href=\"#错误原因\" class=\"headerlink\" title=\"错误原因\"></a>错误原因</h4><p>此错误发生的原因是你的DEM存放在某一个数据库中，导致数据在数据库中但是数据的格式有错误。例如，我想把dem导出来，却发现也不能导出，如图所示：<br><img src=\"/2019/08/05/ArcGIS-API-for-JS04/05.png\" alt=\"05.png\"></p>\n<h4 id=\"如何解决错误\"><a href=\"#如何解决错误\" class=\"headerlink\" title=\"如何解决错误\"></a>如何解决错误</h4><p>1.用ArcMap打开相应的Dem<br>2.从ArcMap中将相应的栅格数据导出到硬盘上<br>3.重新发布，即可成功。</p>\n<h5 id=\"用ArcMap打开相应的Dem\"><a href=\"#用ArcMap打开相应的Dem\" class=\"headerlink\" title=\"用ArcMap打开相应的Dem\"></a>用ArcMap打开相应的Dem</h5><p><img src=\"/2019/08/05/ArcGIS-API-for-JS04/06.png\" alt=\"06.png\"></p>\n<h5 id=\"从ArcMap中将相应的栅格数据导出到硬盘上\"><a href=\"#从ArcMap中将相应的栅格数据导出到硬盘上\" class=\"headerlink\" title=\"从ArcMap中将相应的栅格数据导出到硬盘上\"></a>从ArcMap中将相应的栅格数据导出到硬盘上</h5><p><img src=\"/2019/08/05/ArcGIS-API-for-JS04/07.png\" alt=\"07.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS04/08.png\" alt=\"08.png\"><br>然后在catalog中重新发布。</p>\n"},{"title":"ArcGIS Server之发布GP服务-返回矢量数据","date":"2019-08-05T08:51:51.000Z","_content":"### 什么是GP服务\n在WebGIS开发当中，虽然ArcGIS API提供给我们很多的接口，但是现实需求总是千变万化的，很多可能部分需求在我们的API中没有实现，而GP服务就弥补了这一个缺点，我们可以将ArcGIS中的GP工具发布为服务，提供给我们前端调用。\n#### GP服务的分类\nGP服务从返回类型上可以分为：\n>返回矢量数据\n>返回栅格数据\n\n#### GP服务的参数对应\n在ArcGIS中，GP工具的参数和GP服务的参数是有一个对应参数的，在现实开发中，GP服务总是容易调用失败，这很有可能便是GP服务的参数不对应导致，因此：当我们发布GP服务时，参数便是我们高度重视的地方。以下是GP服务和GP工具参数对应表：\n![01.png](01.png)\n### 发布GP服务\n 在本实例中以缓冲区分析为例，发布一个GP服务。在ArcGIS10.1版本以后，发布GP服务之前需要将GP工具成功运行一次才可。发布GP服务的步骤大致分为以下几步：\n\n1.创建GP模型\n2.修改模型参数，运行模型\n3.在结果窗口将运行成功的GP模型共享为服务\n#### 创建GP模型\n\n新建一个工具箱并创建一个新模型取名为Mybuffer\n![02.png](02.png)\n![03.png](03.png)\n右键Mybuffer点击编辑构建缓冲区模型\n![04.png](04.png)\n#### 修改模型参数并运行模型 \n![05.png](05.png)\n修改Input变量的数据类型，改为输入要素集\n![06.png](06.png)\n设置临时命名空间，右键空白处，点击模型属性，设置环境\n![07.png](07.png)\n点击保存运行模型\n![08.png](08.png)\n运行成功\n![09.png](09.png)\n#### 在结果窗口将运行成功的GP模型共享为服务\n点击地理处理->结果打开结果窗口\n![10.png](10.png)\n右键模型共享为地理处理服务\n![11.png](11.png)","source":"_posts/ArcGIS-API-for-JS05.md","raw":"---\ntitle: ArcGIS Server之发布GP服务-返回矢量数据\ndate: 2019-08-05 16:51:51\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n### 什么是GP服务\n在WebGIS开发当中，虽然ArcGIS API提供给我们很多的接口，但是现实需求总是千变万化的，很多可能部分需求在我们的API中没有实现，而GP服务就弥补了这一个缺点，我们可以将ArcGIS中的GP工具发布为服务，提供给我们前端调用。\n#### GP服务的分类\nGP服务从返回类型上可以分为：\n>返回矢量数据\n>返回栅格数据\n\n#### GP服务的参数对应\n在ArcGIS中，GP工具的参数和GP服务的参数是有一个对应参数的，在现实开发中，GP服务总是容易调用失败，这很有可能便是GP服务的参数不对应导致，因此：当我们发布GP服务时，参数便是我们高度重视的地方。以下是GP服务和GP工具参数对应表：\n![01.png](01.png)\n### 发布GP服务\n 在本实例中以缓冲区分析为例，发布一个GP服务。在ArcGIS10.1版本以后，发布GP服务之前需要将GP工具成功运行一次才可。发布GP服务的步骤大致分为以下几步：\n\n1.创建GP模型\n2.修改模型参数，运行模型\n3.在结果窗口将运行成功的GP模型共享为服务\n#### 创建GP模型\n\n新建一个工具箱并创建一个新模型取名为Mybuffer\n![02.png](02.png)\n![03.png](03.png)\n右键Mybuffer点击编辑构建缓冲区模型\n![04.png](04.png)\n#### 修改模型参数并运行模型 \n![05.png](05.png)\n修改Input变量的数据类型，改为输入要素集\n![06.png](06.png)\n设置临时命名空间，右键空白处，点击模型属性，设置环境\n![07.png](07.png)\n点击保存运行模型\n![08.png](08.png)\n运行成功\n![09.png](09.png)\n#### 在结果窗口将运行成功的GP模型共享为服务\n点击地理处理->结果打开结果窗口\n![10.png](10.png)\n右键模型共享为地理处理服务\n![11.png](11.png)","slug":"ArcGIS-API-for-JS05","published":1,"updated":"2019-08-05T09:05:00.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cob0006t09zgks3mz65","content":"<h3 id=\"什么是GP服务\"><a href=\"#什么是GP服务\" class=\"headerlink\" title=\"什么是GP服务\"></a>什么是GP服务</h3><p>在WebGIS开发当中，虽然ArcGIS API提供给我们很多的接口，但是现实需求总是千变万化的，很多可能部分需求在我们的API中没有实现，而GP服务就弥补了这一个缺点，我们可以将ArcGIS中的GP工具发布为服务，提供给我们前端调用。</p>\n<h4 id=\"GP服务的分类\"><a href=\"#GP服务的分类\" class=\"headerlink\" title=\"GP服务的分类\"></a>GP服务的分类</h4><p>GP服务从返回类型上可以分为：</p>\n<blockquote>\n<p>返回矢量数据<br>返回栅格数据</p>\n</blockquote>\n<h4 id=\"GP服务的参数对应\"><a href=\"#GP服务的参数对应\" class=\"headerlink\" title=\"GP服务的参数对应\"></a>GP服务的参数对应</h4><p>在ArcGIS中，GP工具的参数和GP服务的参数是有一个对应参数的，在现实开发中，GP服务总是容易调用失败，这很有可能便是GP服务的参数不对应导致，因此：当我们发布GP服务时，参数便是我们高度重视的地方。以下是GP服务和GP工具参数对应表：<br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/01.png\" alt=\"01.png\"></p>\n<h3 id=\"发布GP服务\"><a href=\"#发布GP服务\" class=\"headerlink\" title=\"发布GP服务\"></a>发布GP服务</h3><p> 在本实例中以缓冲区分析为例，发布一个GP服务。在ArcGIS10.1版本以后，发布GP服务之前需要将GP工具成功运行一次才可。发布GP服务的步骤大致分为以下几步：</p>\n<p>1.创建GP模型<br>2.修改模型参数，运行模型<br>3.在结果窗口将运行成功的GP模型共享为服务</p>\n<h4 id=\"创建GP模型\"><a href=\"#创建GP模型\" class=\"headerlink\" title=\"创建GP模型\"></a>创建GP模型</h4><p>新建一个工具箱并创建一个新模型取名为Mybuffer<br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/02.png\" alt=\"02.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/03.png\" alt=\"03.png\"><br>右键Mybuffer点击编辑构建缓冲区模型<br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/04.png\" alt=\"04.png\"></p>\n<h4 id=\"修改模型参数并运行模型\"><a href=\"#修改模型参数并运行模型\" class=\"headerlink\" title=\"修改模型参数并运行模型\"></a>修改模型参数并运行模型</h4><p><img src=\"/2019/08/05/ArcGIS-API-for-JS05/05.png\" alt=\"05.png\"><br>修改Input变量的数据类型，改为输入要素集<br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/06.png\" alt=\"06.png\"><br>设置临时命名空间，右键空白处，点击模型属性，设置环境<br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/07.png\" alt=\"07.png\"><br>点击保存运行模型<br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/08.png\" alt=\"08.png\"><br>运行成功<br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/09.png\" alt=\"09.png\"></p>\n<h4 id=\"在结果窗口将运行成功的GP模型共享为服务\"><a href=\"#在结果窗口将运行成功的GP模型共享为服务\" class=\"headerlink\" title=\"在结果窗口将运行成功的GP模型共享为服务\"></a>在结果窗口将运行成功的GP模型共享为服务</h4><p>点击地理处理-&gt;结果打开结果窗口<br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/10.png\" alt=\"10.png\"><br>右键模型共享为地理处理服务<br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/11.png\" alt=\"11.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是GP服务\"><a href=\"#什么是GP服务\" class=\"headerlink\" title=\"什么是GP服务\"></a>什么是GP服务</h3><p>在WebGIS开发当中，虽然ArcGIS API提供给我们很多的接口，但是现实需求总是千变万化的，很多可能部分需求在我们的API中没有实现，而GP服务就弥补了这一个缺点，我们可以将ArcGIS中的GP工具发布为服务，提供给我们前端调用。</p>\n<h4 id=\"GP服务的分类\"><a href=\"#GP服务的分类\" class=\"headerlink\" title=\"GP服务的分类\"></a>GP服务的分类</h4><p>GP服务从返回类型上可以分为：</p>\n<blockquote>\n<p>返回矢量数据<br>返回栅格数据</p>\n</blockquote>\n<h4 id=\"GP服务的参数对应\"><a href=\"#GP服务的参数对应\" class=\"headerlink\" title=\"GP服务的参数对应\"></a>GP服务的参数对应</h4><p>在ArcGIS中，GP工具的参数和GP服务的参数是有一个对应参数的，在现实开发中，GP服务总是容易调用失败，这很有可能便是GP服务的参数不对应导致，因此：当我们发布GP服务时，参数便是我们高度重视的地方。以下是GP服务和GP工具参数对应表：<br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/01.png\" alt=\"01.png\"></p>\n<h3 id=\"发布GP服务\"><a href=\"#发布GP服务\" class=\"headerlink\" title=\"发布GP服务\"></a>发布GP服务</h3><p> 在本实例中以缓冲区分析为例，发布一个GP服务。在ArcGIS10.1版本以后，发布GP服务之前需要将GP工具成功运行一次才可。发布GP服务的步骤大致分为以下几步：</p>\n<p>1.创建GP模型<br>2.修改模型参数，运行模型<br>3.在结果窗口将运行成功的GP模型共享为服务</p>\n<h4 id=\"创建GP模型\"><a href=\"#创建GP模型\" class=\"headerlink\" title=\"创建GP模型\"></a>创建GP模型</h4><p>新建一个工具箱并创建一个新模型取名为Mybuffer<br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/02.png\" alt=\"02.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/03.png\" alt=\"03.png\"><br>右键Mybuffer点击编辑构建缓冲区模型<br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/04.png\" alt=\"04.png\"></p>\n<h4 id=\"修改模型参数并运行模型\"><a href=\"#修改模型参数并运行模型\" class=\"headerlink\" title=\"修改模型参数并运行模型\"></a>修改模型参数并运行模型</h4><p><img src=\"/2019/08/05/ArcGIS-API-for-JS05/05.png\" alt=\"05.png\"><br>修改Input变量的数据类型，改为输入要素集<br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/06.png\" alt=\"06.png\"><br>设置临时命名空间，右键空白处，点击模型属性，设置环境<br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/07.png\" alt=\"07.png\"><br>点击保存运行模型<br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/08.png\" alt=\"08.png\"><br>运行成功<br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/09.png\" alt=\"09.png\"></p>\n<h4 id=\"在结果窗口将运行成功的GP模型共享为服务\"><a href=\"#在结果窗口将运行成功的GP模型共享为服务\" class=\"headerlink\" title=\"在结果窗口将运行成功的GP模型共享为服务\"></a>在结果窗口将运行成功的GP模型共享为服务</h4><p>点击地理处理-&gt;结果打开结果窗口<br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/10.png\" alt=\"10.png\"><br>右键模型共享为地理处理服务<br><img src=\"/2019/08/05/ArcGIS-API-for-JS05/11.png\" alt=\"11.png\"></p>\n"},{"title":"ArcGIS Server之发布结果地图服务","date":"2019-08-05T09:09:57.000Z","_content":"### 什么是结果地图服务？\n在ArcGIS中空间插值应该是我们经常用到的操作，但是在ArcGIS API却并没有提供相应的功能，上篇提到用GP服务来实现我们的功能，但是又有一个问题存在，插值之后的数据时栅格数据，在客户端我们应该怎么接受插值后的栅格数据呢，接受到的栅格信息我们又要怎么显示呢？此时就用到了我们的结果地图服务！！，所谓的结果地图服务，便是为了接受GP服务返回栅格数据的情况。\n\n### 发布结果地图服务\n以空间插值为例，创建我们的结果地图服务，创建结果地图服务一般步骤如下：\n\n1.创建模型\n2.修改我们的模型参数\n3.运行新创建的模型\n4.将运行后的结果进行渲染\n5.将模型发布为服务\n#### 创建空间插值模型\n![01.png](01.png)\n注：参数一定要用英文\n#### 修改我们的模型参数\n将Input的类型改为要素集\n![02.png](02.png)\n#### 运行新创建的模型\n运行我们的模型结果\n![03.png](03.png)\n将运行后的结果进行渲染（很重要）\n![04.png](04.png)\n注：很重要，如果选择的渲染方式不好，那么Web端返回的结果变不是很好。\n#### 将模型发布为服务\n点击地理处理->结果->右键模型共享为地理处理服务，服务名称为：Myking，存放在Test文件夹下面：\n![05.png](05.png)\n修改服务参数为同步，并查看地图服务结果\n![06.png](06.png)\n注：一定要勾选查看含地图服务的结果，很重要！！很重要！！很重要！！\n修改服务属性参数\n![07.png](07.png)","source":"_posts/ArcGIS-API-for-JS06.md","raw":"---\ntitle: ArcGIS Server之发布结果地图服务\ndate: 2019-08-05 17:09:57\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n### 什么是结果地图服务？\n在ArcGIS中空间插值应该是我们经常用到的操作，但是在ArcGIS API却并没有提供相应的功能，上篇提到用GP服务来实现我们的功能，但是又有一个问题存在，插值之后的数据时栅格数据，在客户端我们应该怎么接受插值后的栅格数据呢，接受到的栅格信息我们又要怎么显示呢？此时就用到了我们的结果地图服务！！，所谓的结果地图服务，便是为了接受GP服务返回栅格数据的情况。\n\n### 发布结果地图服务\n以空间插值为例，创建我们的结果地图服务，创建结果地图服务一般步骤如下：\n\n1.创建模型\n2.修改我们的模型参数\n3.运行新创建的模型\n4.将运行后的结果进行渲染\n5.将模型发布为服务\n#### 创建空间插值模型\n![01.png](01.png)\n注：参数一定要用英文\n#### 修改我们的模型参数\n将Input的类型改为要素集\n![02.png](02.png)\n#### 运行新创建的模型\n运行我们的模型结果\n![03.png](03.png)\n将运行后的结果进行渲染（很重要）\n![04.png](04.png)\n注：很重要，如果选择的渲染方式不好，那么Web端返回的结果变不是很好。\n#### 将模型发布为服务\n点击地理处理->结果->右键模型共享为地理处理服务，服务名称为：Myking，存放在Test文件夹下面：\n![05.png](05.png)\n修改服务参数为同步，并查看地图服务结果\n![06.png](06.png)\n注：一定要勾选查看含地图服务的结果，很重要！！很重要！！很重要！！\n修改服务属性参数\n![07.png](07.png)","slug":"ArcGIS-API-for-JS06","published":1,"updated":"2019-08-05T09:29:17.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cr6000at09z8cnxzl3n","content":"<h3 id=\"什么是结果地图服务？\"><a href=\"#什么是结果地图服务？\" class=\"headerlink\" title=\"什么是结果地图服务？\"></a>什么是结果地图服务？</h3><p>在ArcGIS中空间插值应该是我们经常用到的操作，但是在ArcGIS API却并没有提供相应的功能，上篇提到用GP服务来实现我们的功能，但是又有一个问题存在，插值之后的数据时栅格数据，在客户端我们应该怎么接受插值后的栅格数据呢，接受到的栅格信息我们又要怎么显示呢？此时就用到了我们的结果地图服务！！，所谓的结果地图服务，便是为了接受GP服务返回栅格数据的情况。</p>\n<h3 id=\"发布结果地图服务\"><a href=\"#发布结果地图服务\" class=\"headerlink\" title=\"发布结果地图服务\"></a>发布结果地图服务</h3><p>以空间插值为例，创建我们的结果地图服务，创建结果地图服务一般步骤如下：</p>\n<p>1.创建模型<br>2.修改我们的模型参数<br>3.运行新创建的模型<br>4.将运行后的结果进行渲染<br>5.将模型发布为服务</p>\n<h4 id=\"创建空间插值模型\"><a href=\"#创建空间插值模型\" class=\"headerlink\" title=\"创建空间插值模型\"></a>创建空间插值模型</h4><p><img src=\"/2019/08/05/ArcGIS-API-for-JS06/01.png\" alt=\"01.png\"><br>注：参数一定要用英文</p>\n<h4 id=\"修改我们的模型参数\"><a href=\"#修改我们的模型参数\" class=\"headerlink\" title=\"修改我们的模型参数\"></a>修改我们的模型参数</h4><p>将Input的类型改为要素集<br><img src=\"/2019/08/05/ArcGIS-API-for-JS06/02.png\" alt=\"02.png\"></p>\n<h4 id=\"运行新创建的模型\"><a href=\"#运行新创建的模型\" class=\"headerlink\" title=\"运行新创建的模型\"></a>运行新创建的模型</h4><p>运行我们的模型结果<br><img src=\"/2019/08/05/ArcGIS-API-for-JS06/03.png\" alt=\"03.png\"><br>将运行后的结果进行渲染（很重要）<br><img src=\"/2019/08/05/ArcGIS-API-for-JS06/04.png\" alt=\"04.png\"><br>注：很重要，如果选择的渲染方式不好，那么Web端返回的结果变不是很好。</p>\n<h4 id=\"将模型发布为服务\"><a href=\"#将模型发布为服务\" class=\"headerlink\" title=\"将模型发布为服务\"></a>将模型发布为服务</h4><p>点击地理处理-&gt;结果-&gt;右键模型共享为地理处理服务，服务名称为：Myking，存放在Test文件夹下面：<br><img src=\"/2019/08/05/ArcGIS-API-for-JS06/05.png\" alt=\"05.png\"><br>修改服务参数为同步，并查看地图服务结果<br><img src=\"/2019/08/05/ArcGIS-API-for-JS06/06.png\" alt=\"06.png\"><br>注：一定要勾选查看含地图服务的结果，很重要！！很重要！！很重要！！<br>修改服务属性参数<br><img src=\"/2019/08/05/ArcGIS-API-for-JS06/07.png\" alt=\"07.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是结果地图服务？\"><a href=\"#什么是结果地图服务？\" class=\"headerlink\" title=\"什么是结果地图服务？\"></a>什么是结果地图服务？</h3><p>在ArcGIS中空间插值应该是我们经常用到的操作，但是在ArcGIS API却并没有提供相应的功能，上篇提到用GP服务来实现我们的功能，但是又有一个问题存在，插值之后的数据时栅格数据，在客户端我们应该怎么接受插值后的栅格数据呢，接受到的栅格信息我们又要怎么显示呢？此时就用到了我们的结果地图服务！！，所谓的结果地图服务，便是为了接受GP服务返回栅格数据的情况。</p>\n<h3 id=\"发布结果地图服务\"><a href=\"#发布结果地图服务\" class=\"headerlink\" title=\"发布结果地图服务\"></a>发布结果地图服务</h3><p>以空间插值为例，创建我们的结果地图服务，创建结果地图服务一般步骤如下：</p>\n<p>1.创建模型<br>2.修改我们的模型参数<br>3.运行新创建的模型<br>4.将运行后的结果进行渲染<br>5.将模型发布为服务</p>\n<h4 id=\"创建空间插值模型\"><a href=\"#创建空间插值模型\" class=\"headerlink\" title=\"创建空间插值模型\"></a>创建空间插值模型</h4><p><img src=\"/2019/08/05/ArcGIS-API-for-JS06/01.png\" alt=\"01.png\"><br>注：参数一定要用英文</p>\n<h4 id=\"修改我们的模型参数\"><a href=\"#修改我们的模型参数\" class=\"headerlink\" title=\"修改我们的模型参数\"></a>修改我们的模型参数</h4><p>将Input的类型改为要素集<br><img src=\"/2019/08/05/ArcGIS-API-for-JS06/02.png\" alt=\"02.png\"></p>\n<h4 id=\"运行新创建的模型\"><a href=\"#运行新创建的模型\" class=\"headerlink\" title=\"运行新创建的模型\"></a>运行新创建的模型</h4><p>运行我们的模型结果<br><img src=\"/2019/08/05/ArcGIS-API-for-JS06/03.png\" alt=\"03.png\"><br>将运行后的结果进行渲染（很重要）<br><img src=\"/2019/08/05/ArcGIS-API-for-JS06/04.png\" alt=\"04.png\"><br>注：很重要，如果选择的渲染方式不好，那么Web端返回的结果变不是很好。</p>\n<h4 id=\"将模型发布为服务\"><a href=\"#将模型发布为服务\" class=\"headerlink\" title=\"将模型发布为服务\"></a>将模型发布为服务</h4><p>点击地理处理-&gt;结果-&gt;右键模型共享为地理处理服务，服务名称为：Myking，存放在Test文件夹下面：<br><img src=\"/2019/08/05/ArcGIS-API-for-JS06/05.png\" alt=\"05.png\"><br>修改服务参数为同步，并查看地图服务结果<br><img src=\"/2019/08/05/ArcGIS-API-for-JS06/06.png\" alt=\"06.png\"><br>注：一定要勾选查看含地图服务的结果，很重要！！很重要！！很重要！！<br>修改服务属性参数<br><img src=\"/2019/08/05/ArcGIS-API-for-JS06/07.png\" alt=\"07.png\"></p>\n"},{"title":"ArcGIS Server之发布网络分析服务","date":"2019-08-05T09:30:10.000Z","_content":" ArcGIS中网络分析分为 : 最短路径分析，服务区信息等等,如果想要在Web应用程序中使用网络分析服务，需要将我们的数据发布为网络分析服务\n### 发布网络分析服务\n步骤如下：\n\n1.利用ArcMap创建网络（如何创建网络，请查看ArcGIS帮助文档）\n2.将创建的地图进行符号化\n3.开启网络分析权限,添加分析图层\n4.修改属性，将其发布为网络服务\n#### 利用ArcMap创建网络\n创建的网络为：\n![01.png](01.png)\n#### 将创建的地图进行符号化\n![02.png](02.png)\n#### 开启网络分析权限并添加分析图层\n![03.png](03.png)\n右击空白处Network Analyst\n![04.png](04.png)\n网络分析工具条\n![05.png](05.png)\n如果想要进行最短路径分析，进行新建路径\n![06.png](06.png)\n![07.png](07.png)\n注：将路径图层名称修改为英文名（此处改为Route）\n如果进行服务区分析，添加服务区图层\n![08.png](08.png)\n#### 修改属性并将其发布为网络服务\n利用ArcMap链接ArcGIS Server ，并取名为mynet**（存放在Test目录下）**，到达服务编辑器\n![09.png](09.png)\n### 查看服务是否发布成功\n从网站出输入网址http://localhost:6080/arcgis/rest/services,进入Test文件夹，可以看到我们刚刚发布的网络服务：\n![10.png](10.png)","source":"_posts/ArcGIS-API-for-JS07.md","raw":"---\ntitle: ArcGIS Server之发布网络分析服务\ndate: 2019-08-05 17:30:10\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n ArcGIS中网络分析分为 : 最短路径分析，服务区信息等等,如果想要在Web应用程序中使用网络分析服务，需要将我们的数据发布为网络分析服务\n### 发布网络分析服务\n步骤如下：\n\n1.利用ArcMap创建网络（如何创建网络，请查看ArcGIS帮助文档）\n2.将创建的地图进行符号化\n3.开启网络分析权限,添加分析图层\n4.修改属性，将其发布为网络服务\n#### 利用ArcMap创建网络\n创建的网络为：\n![01.png](01.png)\n#### 将创建的地图进行符号化\n![02.png](02.png)\n#### 开启网络分析权限并添加分析图层\n![03.png](03.png)\n右击空白处Network Analyst\n![04.png](04.png)\n网络分析工具条\n![05.png](05.png)\n如果想要进行最短路径分析，进行新建路径\n![06.png](06.png)\n![07.png](07.png)\n注：将路径图层名称修改为英文名（此处改为Route）\n如果进行服务区分析，添加服务区图层\n![08.png](08.png)\n#### 修改属性并将其发布为网络服务\n利用ArcMap链接ArcGIS Server ，并取名为mynet**（存放在Test目录下）**，到达服务编辑器\n![09.png](09.png)\n### 查看服务是否发布成功\n从网站出输入网址http://localhost:6080/arcgis/rest/services,进入Test文件夹，可以看到我们刚刚发布的网络服务：\n![10.png](10.png)","slug":"ArcGIS-API-for-JS07","published":1,"updated":"2019-08-05T09:47:35.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5crk000ct09zq3rih8t2","content":"<p> ArcGIS中网络分析分为 : 最短路径分析，服务区信息等等,如果想要在Web应用程序中使用网络分析服务，需要将我们的数据发布为网络分析服务</p>\n<h3 id=\"发布网络分析服务\"><a href=\"#发布网络分析服务\" class=\"headerlink\" title=\"发布网络分析服务\"></a>发布网络分析服务</h3><p>步骤如下：</p>\n<p>1.利用ArcMap创建网络（如何创建网络，请查看ArcGIS帮助文档）<br>2.将创建的地图进行符号化<br>3.开启网络分析权限,添加分析图层<br>4.修改属性，将其发布为网络服务</p>\n<h4 id=\"利用ArcMap创建网络\"><a href=\"#利用ArcMap创建网络\" class=\"headerlink\" title=\"利用ArcMap创建网络\"></a>利用ArcMap创建网络</h4><p>创建的网络为：<br><img src=\"/2019/08/05/ArcGIS-API-for-JS07/01.png\" alt=\"01.png\"></p>\n<h4 id=\"将创建的地图进行符号化\"><a href=\"#将创建的地图进行符号化\" class=\"headerlink\" title=\"将创建的地图进行符号化\"></a>将创建的地图进行符号化</h4><p><img src=\"/2019/08/05/ArcGIS-API-for-JS07/02.png\" alt=\"02.png\"></p>\n<h4 id=\"开启网络分析权限并添加分析图层\"><a href=\"#开启网络分析权限并添加分析图层\" class=\"headerlink\" title=\"开启网络分析权限并添加分析图层\"></a>开启网络分析权限并添加分析图层</h4><p><img src=\"/2019/08/05/ArcGIS-API-for-JS07/03.png\" alt=\"03.png\"><br>右击空白处Network Analyst<br><img src=\"/2019/08/05/ArcGIS-API-for-JS07/04.png\" alt=\"04.png\"><br>网络分析工具条<br><img src=\"/2019/08/05/ArcGIS-API-for-JS07/05.png\" alt=\"05.png\"><br>如果想要进行最短路径分析，进行新建路径<br><img src=\"/2019/08/05/ArcGIS-API-for-JS07/06.png\" alt=\"06.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS07/07.png\" alt=\"07.png\"><br>注：将路径图层名称修改为英文名（此处改为Route）<br>如果进行服务区分析，添加服务区图层<br><img src=\"/2019/08/05/ArcGIS-API-for-JS07/08.png\" alt=\"08.png\"></p>\n<h4 id=\"修改属性并将其发布为网络服务\"><a href=\"#修改属性并将其发布为网络服务\" class=\"headerlink\" title=\"修改属性并将其发布为网络服务\"></a>修改属性并将其发布为网络服务</h4><p>利用ArcMap链接ArcGIS Server ，并取名为mynet<strong>（存放在Test目录下）</strong>，到达服务编辑器<br><img src=\"/2019/08/05/ArcGIS-API-for-JS07/09.png\" alt=\"09.png\"></p>\n<h3 id=\"查看服务是否发布成功\"><a href=\"#查看服务是否发布成功\" class=\"headerlink\" title=\"查看服务是否发布成功\"></a>查看服务是否发布成功</h3><p>从网站出输入网址<a href=\"http://localhost:6080/arcgis/rest/services,进入Test文件夹，可以看到我们刚刚发布的网络服务：\" target=\"_blank\" rel=\"noopener\">http://localhost:6080/arcgis/rest/services,进入Test文件夹，可以看到我们刚刚发布的网络服务：</a><br><img src=\"/2019/08/05/ArcGIS-API-for-JS07/10.png\" alt=\"10.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p> ArcGIS中网络分析分为 : 最短路径分析，服务区信息等等,如果想要在Web应用程序中使用网络分析服务，需要将我们的数据发布为网络分析服务</p>\n<h3 id=\"发布网络分析服务\"><a href=\"#发布网络分析服务\" class=\"headerlink\" title=\"发布网络分析服务\"></a>发布网络分析服务</h3><p>步骤如下：</p>\n<p>1.利用ArcMap创建网络（如何创建网络，请查看ArcGIS帮助文档）<br>2.将创建的地图进行符号化<br>3.开启网络分析权限,添加分析图层<br>4.修改属性，将其发布为网络服务</p>\n<h4 id=\"利用ArcMap创建网络\"><a href=\"#利用ArcMap创建网络\" class=\"headerlink\" title=\"利用ArcMap创建网络\"></a>利用ArcMap创建网络</h4><p>创建的网络为：<br><img src=\"/2019/08/05/ArcGIS-API-for-JS07/01.png\" alt=\"01.png\"></p>\n<h4 id=\"将创建的地图进行符号化\"><a href=\"#将创建的地图进行符号化\" class=\"headerlink\" title=\"将创建的地图进行符号化\"></a>将创建的地图进行符号化</h4><p><img src=\"/2019/08/05/ArcGIS-API-for-JS07/02.png\" alt=\"02.png\"></p>\n<h4 id=\"开启网络分析权限并添加分析图层\"><a href=\"#开启网络分析权限并添加分析图层\" class=\"headerlink\" title=\"开启网络分析权限并添加分析图层\"></a>开启网络分析权限并添加分析图层</h4><p><img src=\"/2019/08/05/ArcGIS-API-for-JS07/03.png\" alt=\"03.png\"><br>右击空白处Network Analyst<br><img src=\"/2019/08/05/ArcGIS-API-for-JS07/04.png\" alt=\"04.png\"><br>网络分析工具条<br><img src=\"/2019/08/05/ArcGIS-API-for-JS07/05.png\" alt=\"05.png\"><br>如果想要进行最短路径分析，进行新建路径<br><img src=\"/2019/08/05/ArcGIS-API-for-JS07/06.png\" alt=\"06.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS07/07.png\" alt=\"07.png\"><br>注：将路径图层名称修改为英文名（此处改为Route）<br>如果进行服务区分析，添加服务区图层<br><img src=\"/2019/08/05/ArcGIS-API-for-JS07/08.png\" alt=\"08.png\"></p>\n<h4 id=\"修改属性并将其发布为网络服务\"><a href=\"#修改属性并将其发布为网络服务\" class=\"headerlink\" title=\"修改属性并将其发布为网络服务\"></a>修改属性并将其发布为网络服务</h4><p>利用ArcMap链接ArcGIS Server ，并取名为mynet<strong>（存放在Test目录下）</strong>，到达服务编辑器<br><img src=\"/2019/08/05/ArcGIS-API-for-JS07/09.png\" alt=\"09.png\"></p>\n<h3 id=\"查看服务是否发布成功\"><a href=\"#查看服务是否发布成功\" class=\"headerlink\" title=\"查看服务是否发布成功\"></a>查看服务是否发布成功</h3><p>从网站出输入网址<a href=\"http://localhost:6080/arcgis/rest/services,进入Test文件夹，可以看到我们刚刚发布的网络服务：\" target=\"_blank\" rel=\"noopener\">http://localhost:6080/arcgis/rest/services,进入Test文件夹，可以看到我们刚刚发布的网络服务：</a><br><img src=\"/2019/08/05/ArcGIS-API-for-JS07/10.png\" alt=\"10.png\"></p>\n"},{"title":"ArcGIS API For JavaScript本地部署（IIS）","date":"2019-08-05T10:23:24.000Z","_content":"在windows系统，我们总是将ArcGIS API For JavaScript部署在IIS中，而不是部署在Tomcat中，其实在IIS中的配置和Tomcat中的配置ArcGIS API几乎没有什么差别，在本篇文章中，主要讲解在IIS中的配置ArcGIS API。\n部署本地环境在IIS主要分为以下几个步骤： \n1. 下载ArcGIS API For JavaScript函数库 \n2. 安装IIS软件并进行配置 \n3. 修改相应的js文件（2个文件） \n4. 将修改好的函数库复制到指定位置 \n5. 测试ArcGIS API For JavaScript函数库是否安装成功。\n###　下载ArcGIS API For JavaScript函数库\nArcGIS API For JavaScript\n下载的函数库如图所示:\n![01.png](01.png)\n###　安装IIS软件并进行配置（略）\n###　修改相应的js文件（2个文件）\n修改 文件一（init.js） \n位置：arcgis_js_v317_api\\arcgis_js_api\\library\\3.17\\3.17\\init.js \n将[HOSTNAME_AND_PATH_TO_JSAPI]替换成localhost/arcgis_js_api/library/3.17/3.17/\n修改文件二（dojo.js） \n位置：arcgis_js_v317_api\\arcgis_js_api\\library\\3.17\\3.17\\dojo\\dojo.js \n将[HOSTNAME_AND_PATH_TO_JSAPI]替换成localhost/arcgis_js_api/library/3.17/3.17/\n","source":"_posts/ArcGIS-API-for-JS09.md","raw":"---\ntitle: ArcGIS API For JavaScript本地部署（IIS）\ndate: 2019-08-05 18:23:24\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n在windows系统，我们总是将ArcGIS API For JavaScript部署在IIS中，而不是部署在Tomcat中，其实在IIS中的配置和Tomcat中的配置ArcGIS API几乎没有什么差别，在本篇文章中，主要讲解在IIS中的配置ArcGIS API。\n部署本地环境在IIS主要分为以下几个步骤： \n1. 下载ArcGIS API For JavaScript函数库 \n2. 安装IIS软件并进行配置 \n3. 修改相应的js文件（2个文件） \n4. 将修改好的函数库复制到指定位置 \n5. 测试ArcGIS API For JavaScript函数库是否安装成功。\n###　下载ArcGIS API For JavaScript函数库\nArcGIS API For JavaScript\n下载的函数库如图所示:\n![01.png](01.png)\n###　安装IIS软件并进行配置（略）\n###　修改相应的js文件（2个文件）\n修改 文件一（init.js） \n位置：arcgis_js_v317_api\\arcgis_js_api\\library\\3.17\\3.17\\init.js \n将[HOSTNAME_AND_PATH_TO_JSAPI]替换成localhost/arcgis_js_api/library/3.17/3.17/\n修改文件二（dojo.js） \n位置：arcgis_js_v317_api\\arcgis_js_api\\library\\3.17\\3.17\\dojo\\dojo.js \n将[HOSTNAME_AND_PATH_TO_JSAPI]替换成localhost/arcgis_js_api/library/3.17/3.17/\n","slug":"ArcGIS-API-for-JS09","published":1,"updated":"2019-08-05T10:33:02.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5crv000ht09zfcokg9tr","content":"<p>在windows系统，我们总是将ArcGIS API For JavaScript部署在IIS中，而不是部署在Tomcat中，其实在IIS中的配置和Tomcat中的配置ArcGIS API几乎没有什么差别，在本篇文章中，主要讲解在IIS中的配置ArcGIS API。<br>部署本地环境在IIS主要分为以下几个步骤： </p>\n<ol>\n<li>下载ArcGIS API For JavaScript函数库 </li>\n<li>安装IIS软件并进行配置 </li>\n<li>修改相应的js文件（2个文件） </li>\n<li>将修改好的函数库复制到指定位置 </li>\n<li>测试ArcGIS API For JavaScript函数库是否安装成功。<br>###　下载ArcGIS API For JavaScript函数库<br>ArcGIS API For JavaScript<br>下载的函数库如图所示:<br><img src=\"/2019/08/05/ArcGIS-API-for-JS09/01.png\" alt=\"01.png\"><br>###　安装IIS软件并进行配置（略）<br>###　修改相应的js文件（2个文件）<br>修改 文件一（init.js）<br>位置：arcgis_js_v317_api\\arcgis_js_api\\library\\3.17\\3.17\\init.js<br>将[HOSTNAME_AND_PATH_TO_JSAPI]替换成localhost/arcgis_js_api/library/3.17/3.17/<br>修改文件二（dojo.js）<br>位置：arcgis_js_v317_api\\arcgis_js_api\\library\\3.17\\3.17\\dojo\\dojo.js<br>将[HOSTNAME_AND_PATH_TO_JSAPI]替换成localhost/arcgis_js_api/library/3.17/3.17/</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>在windows系统，我们总是将ArcGIS API For JavaScript部署在IIS中，而不是部署在Tomcat中，其实在IIS中的配置和Tomcat中的配置ArcGIS API几乎没有什么差别，在本篇文章中，主要讲解在IIS中的配置ArcGIS API。<br>部署本地环境在IIS主要分为以下几个步骤： </p>\n<ol>\n<li>下载ArcGIS API For JavaScript函数库 </li>\n<li>安装IIS软件并进行配置 </li>\n<li>修改相应的js文件（2个文件） </li>\n<li>将修改好的函数库复制到指定位置 </li>\n<li>测试ArcGIS API For JavaScript函数库是否安装成功。<br>###　下载ArcGIS API For JavaScript函数库<br>ArcGIS API For JavaScript<br>下载的函数库如图所示:<br><img src=\"/2019/08/05/ArcGIS-API-for-JS09/01.png\" alt=\"01.png\"><br>###　安装IIS软件并进行配置（略）<br>###　修改相应的js文件（2个文件）<br>修改 文件一（init.js）<br>位置：arcgis_js_v317_api\\arcgis_js_api\\library\\3.17\\3.17\\init.js<br>将[HOSTNAME_AND_PATH_TO_JSAPI]替换成localhost/arcgis_js_api/library/3.17/3.17/<br>修改文件二（dojo.js）<br>位置：arcgis_js_v317_api\\arcgis_js_api\\library\\3.17\\3.17\\dojo\\dojo.js<br>将[HOSTNAME_AND_PATH_TO_JSAPI]替换成localhost/arcgis_js_api/library/3.17/3.17/</li>\n</ol>\n"},{"title":"ArcGIS Server之发布地理编码服务","date":"2019-08-05T09:48:35.000Z","_content":"地理编码服务是指建立地理位置坐标与给定地址的过程，简单的说就是将一个地址的描述信息映射为地图上所对应的空间位置，地理编码服务是GIS中比较重要的一个功能。\n有的时候我们知道一个具体的地理坐标，却想知道这个地方的地址，就称作逆地理编码。\n\n### 地理编码工具（Geocoding Tools）locator制作\n\n打开arcCatalog，找到工具箱ArcToolbox中的Geocoding Tools---Create Address Locator，界面如下：\n![01.png](01.png)\n![02.png](02.png)\n### locator已经制作完成，接下来就是发布地理编码服务\n![03.png](03.png)\n右键locator工具，选择Share as---Geocode Service，界面如下：\n![04.png](04.png)\n### 到这里，地理编码服务已经结束，最后是测试一下发布的服务是否成功\n（1）测试Find Address Candidates\n![05.png](05.png)\n![06.png](06.png)\n（2）测试Reverse Geocode\n![07.png](07.png)","source":"_posts/ArcGIS-API-for-JS08.md","raw":"---\ntitle: ArcGIS Server之发布地理编码服务\ndate: 2019-08-05 17:48:35\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n地理编码服务是指建立地理位置坐标与给定地址的过程，简单的说就是将一个地址的描述信息映射为地图上所对应的空间位置，地理编码服务是GIS中比较重要的一个功能。\n有的时候我们知道一个具体的地理坐标，却想知道这个地方的地址，就称作逆地理编码。\n\n### 地理编码工具（Geocoding Tools）locator制作\n\n打开arcCatalog，找到工具箱ArcToolbox中的Geocoding Tools---Create Address Locator，界面如下：\n![01.png](01.png)\n![02.png](02.png)\n### locator已经制作完成，接下来就是发布地理编码服务\n![03.png](03.png)\n右键locator工具，选择Share as---Geocode Service，界面如下：\n![04.png](04.png)\n### 到这里，地理编码服务已经结束，最后是测试一下发布的服务是否成功\n（1）测试Find Address Candidates\n![05.png](05.png)\n![06.png](06.png)\n（2）测试Reverse Geocode\n![07.png](07.png)","slug":"ArcGIS-API-for-JS08","published":1,"updated":"2019-08-05T10:24:01.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5csv000kt09zwqgznosl","content":"<p>地理编码服务是指建立地理位置坐标与给定地址的过程，简单的说就是将一个地址的描述信息映射为地图上所对应的空间位置，地理编码服务是GIS中比较重要的一个功能。<br>有的时候我们知道一个具体的地理坐标，却想知道这个地方的地址，就称作逆地理编码。</p>\n<h3 id=\"地理编码工具（Geocoding-Tools）locator制作\"><a href=\"#地理编码工具（Geocoding-Tools）locator制作\" class=\"headerlink\" title=\"地理编码工具（Geocoding Tools）locator制作\"></a>地理编码工具（Geocoding Tools）locator制作</h3><p>打开arcCatalog，找到工具箱ArcToolbox中的Geocoding Tools—Create Address Locator，界面如下：<br><img src=\"/2019/08/05/ArcGIS-API-for-JS08/01.png\" alt=\"01.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS08/02.png\" alt=\"02.png\"></p>\n<h3 id=\"locator已经制作完成，接下来就是发布地理编码服务\"><a href=\"#locator已经制作完成，接下来就是发布地理编码服务\" class=\"headerlink\" title=\"locator已经制作完成，接下来就是发布地理编码服务\"></a>locator已经制作完成，接下来就是发布地理编码服务</h3><p><img src=\"/2019/08/05/ArcGIS-API-for-JS08/03.png\" alt=\"03.png\"><br>右键locator工具，选择Share as—Geocode Service，界面如下：<br><img src=\"/2019/08/05/ArcGIS-API-for-JS08/04.png\" alt=\"04.png\"></p>\n<h3 id=\"到这里，地理编码服务已经结束，最后是测试一下发布的服务是否成功\"><a href=\"#到这里，地理编码服务已经结束，最后是测试一下发布的服务是否成功\" class=\"headerlink\" title=\"到这里，地理编码服务已经结束，最后是测试一下发布的服务是否成功\"></a>到这里，地理编码服务已经结束，最后是测试一下发布的服务是否成功</h3><p>（1）测试Find Address Candidates<br><img src=\"/2019/08/05/ArcGIS-API-for-JS08/05.png\" alt=\"05.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS08/06.png\" alt=\"06.png\"><br>（2）测试Reverse Geocode<br><img src=\"/2019/08/05/ArcGIS-API-for-JS08/07.png\" alt=\"07.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>地理编码服务是指建立地理位置坐标与给定地址的过程，简单的说就是将一个地址的描述信息映射为地图上所对应的空间位置，地理编码服务是GIS中比较重要的一个功能。<br>有的时候我们知道一个具体的地理坐标，却想知道这个地方的地址，就称作逆地理编码。</p>\n<h3 id=\"地理编码工具（Geocoding-Tools）locator制作\"><a href=\"#地理编码工具（Geocoding-Tools）locator制作\" class=\"headerlink\" title=\"地理编码工具（Geocoding Tools）locator制作\"></a>地理编码工具（Geocoding Tools）locator制作</h3><p>打开arcCatalog，找到工具箱ArcToolbox中的Geocoding Tools—Create Address Locator，界面如下：<br><img src=\"/2019/08/05/ArcGIS-API-for-JS08/01.png\" alt=\"01.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS08/02.png\" alt=\"02.png\"></p>\n<h3 id=\"locator已经制作完成，接下来就是发布地理编码服务\"><a href=\"#locator已经制作完成，接下来就是发布地理编码服务\" class=\"headerlink\" title=\"locator已经制作完成，接下来就是发布地理编码服务\"></a>locator已经制作完成，接下来就是发布地理编码服务</h3><p><img src=\"/2019/08/05/ArcGIS-API-for-JS08/03.png\" alt=\"03.png\"><br>右键locator工具，选择Share as—Geocode Service，界面如下：<br><img src=\"/2019/08/05/ArcGIS-API-for-JS08/04.png\" alt=\"04.png\"></p>\n<h3 id=\"到这里，地理编码服务已经结束，最后是测试一下发布的服务是否成功\"><a href=\"#到这里，地理编码服务已经结束，最后是测试一下发布的服务是否成功\" class=\"headerlink\" title=\"到这里，地理编码服务已经结束，最后是测试一下发布的服务是否成功\"></a>到这里，地理编码服务已经结束，最后是测试一下发布的服务是否成功</h3><p>（1）测试Find Address Candidates<br><img src=\"/2019/08/05/ArcGIS-API-for-JS08/05.png\" alt=\"05.png\"><br><img src=\"/2019/08/05/ArcGIS-API-for-JS08/06.png\" alt=\"06.png\"><br>（2）测试Reverse Geocode<br><img src=\"/2019/08/05/ArcGIS-API-for-JS08/07.png\" alt=\"07.png\"></p>\n"},{"title":"ArcGIS API For JavaScript之添加地图","date":"2019-08-05T10:35:33.000Z","_content":" 在ArcGIS API For JS中，esri.Map类可以说是最重要的一个类，Map作为地图图层的容器，存放各种地图服务，同时Map具有一些常用的属性和事件可以帮助我们完成一些复杂的操作。接下来我们使用Map类开始我们的HelloWorld程序。\n### 步骤\n#### 首先新建一个Hello_World.html,同时引入我们的init.js,esri.css样式文件\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n<script type=\"text/javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n```\n\n#### 创建一个div作为Map的容器(div容器必须设置宽高，不然地图不会显示)\n```\n<div id=\"mapDiv\" style=\"width:900px; height:600px; border:1px solid #000;\"></div>\n```\n\n#### 创建Map容器，并且加入地图\n```\nrequire([\"esri/map\",\"dojo/domReady!\"],\n    function(Map){\n             var myMap = new Map(\"mapDiv\",{\n                  basemap:\"topo\"\n             });\n\n })\n```\n\n#### 完整代码\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script type=\"text/javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <script>\n        require([\"esri/map\",\"dojo/domReady!\"],\n                function(Map){\n                    var myMap = new Map(\"mapDiv\",{\n                        basemap:\"topo\"\n                    });\n\n        })\n    </script>\n</head>\n<body class=\"tundra\">\n    <div id=\"mapDiv\" style=\"width:900px; height:600px; border:1px solid #000;\"></div>\n</body>\n</html>\n```\n\n代码讲解：\n\n* require函数是dojo提供的一个全局函数，只要引入init.js便可使用，require函数支持AMD（异步模块定义，Asynchronous Module Definition）规范。\n* require函数有两个参数，第一个参数是一个数组（用于加载的模块），第二个参数是一个回调函数，注意前后加载的顺序一定要一致，例如require的第一个参数是esri.map,回调函数的第一个参数必须是Map\n* require加载的第二个是dojo/domReady！,dojo/domReady！是一个插件（如果加载的模块以感叹号结尾，一般都为插件），此插件的作用是，当Html的dom加载完毕后在执行此函数，类似与window.onload事件。\n* Map类中有一个比较特殊的属性叫做basemap,在arcgis api中，esri自己定义了一些底图可直接供我们使用，这些底层的调用，我们可以根据制定basemap属性直接调用已经定义好的底图。\nesri给我们定义的底图有：streets ,satellite ,hybrid, topo, gray,dark-gray, oceans, national-geographic,terrain, osm, dark-gray-vector, gray-vector,streets-vector, streets-night-vector, streets-relief-vector, streets-navigation-vector,topo-vector.terrain, dark-gray, dark-gray-vector, gray-vector, streets-vector,streets-night-vector, streets-relief-vector, streets-navigation-vector , topo-vector,注意：要使用esri定义的底图属性basemap电脑必须联网。\n\n### 需求\n在实际开发过程中，大家不喜欢logo的存在可以设置Map的属性logo：false\n在开发的过程中，对于地图的放大缩小，一般用代码来控制地图的放大，缩小，拉框放大，拉框缩小等等，所以一般隐藏地图自带的按钮，设置属性slider：false\n","source":"_posts/ArcGIS-API-for-JS10.md","raw":"---\ntitle: ArcGIS API For JavaScript之添加地图\ndate: 2019-08-05 18:35:33\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n 在ArcGIS API For JS中，esri.Map类可以说是最重要的一个类，Map作为地图图层的容器，存放各种地图服务，同时Map具有一些常用的属性和事件可以帮助我们完成一些复杂的操作。接下来我们使用Map类开始我们的HelloWorld程序。\n### 步骤\n#### 首先新建一个Hello_World.html,同时引入我们的init.js,esri.css样式文件\n```\n<link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n<script type=\"text/javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n```\n\n#### 创建一个div作为Map的容器(div容器必须设置宽高，不然地图不会显示)\n```\n<div id=\"mapDiv\" style=\"width:900px; height:600px; border:1px solid #000;\"></div>\n```\n\n#### 创建Map容器，并且加入地图\n```\nrequire([\"esri/map\",\"dojo/domReady!\"],\n    function(Map){\n             var myMap = new Map(\"mapDiv\",{\n                  basemap:\"topo\"\n             });\n\n })\n```\n\n#### 完整代码\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script type=\"text/javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <script>\n        require([\"esri/map\",\"dojo/domReady!\"],\n                function(Map){\n                    var myMap = new Map(\"mapDiv\",{\n                        basemap:\"topo\"\n                    });\n\n        })\n    </script>\n</head>\n<body class=\"tundra\">\n    <div id=\"mapDiv\" style=\"width:900px; height:600px; border:1px solid #000;\"></div>\n</body>\n</html>\n```\n\n代码讲解：\n\n* require函数是dojo提供的一个全局函数，只要引入init.js便可使用，require函数支持AMD（异步模块定义，Asynchronous Module Definition）规范。\n* require函数有两个参数，第一个参数是一个数组（用于加载的模块），第二个参数是一个回调函数，注意前后加载的顺序一定要一致，例如require的第一个参数是esri.map,回调函数的第一个参数必须是Map\n* require加载的第二个是dojo/domReady！,dojo/domReady！是一个插件（如果加载的模块以感叹号结尾，一般都为插件），此插件的作用是，当Html的dom加载完毕后在执行此函数，类似与window.onload事件。\n* Map类中有一个比较特殊的属性叫做basemap,在arcgis api中，esri自己定义了一些底图可直接供我们使用，这些底层的调用，我们可以根据制定basemap属性直接调用已经定义好的底图。\nesri给我们定义的底图有：streets ,satellite ,hybrid, topo, gray,dark-gray, oceans, national-geographic,terrain, osm, dark-gray-vector, gray-vector,streets-vector, streets-night-vector, streets-relief-vector, streets-navigation-vector,topo-vector.terrain, dark-gray, dark-gray-vector, gray-vector, streets-vector,streets-night-vector, streets-relief-vector, streets-navigation-vector , topo-vector,注意：要使用esri定义的底图属性basemap电脑必须联网。\n\n### 需求\n在实际开发过程中，大家不喜欢logo的存在可以设置Map的属性logo：false\n在开发的过程中，对于地图的放大缩小，一般用代码来控制地图的放大，缩小，拉框放大，拉框缩小等等，所以一般隐藏地图自带的按钮，设置属性slider：false\n","slug":"ArcGIS-API-for-JS10","published":1,"updated":"2019-08-06T05:38:35.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5ct0000nt09znuk90bo8","content":"<p> 在ArcGIS API For JS中，esri.Map类可以说是最重要的一个类，Map作为地图图层的容器，存放各种地图服务，同时Map具有一些常用的属性和事件可以帮助我们完成一些复杂的操作。接下来我们使用Map类开始我们的HelloWorld程序。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><h4 id=\"首先新建一个Hello-World-html-同时引入我们的init-js-esri-css样式文件\"><a href=\"#首先新建一个Hello-World-html-同时引入我们的init-js-esri-css样式文件\" class=\"headerlink\" title=\"首先新建一个Hello_World.html,同时引入我们的init.js,esri.css样式文件\"></a>首先新建一个Hello_World.html,同时引入我们的init.js,esri.css样式文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建一个div作为Map的容器-div容器必须设置宽高，不然地图不会显示\"><a href=\"#创建一个div作为Map的容器-div容器必须设置宽高，不然地图不会显示\" class=\"headerlink\" title=\"创建一个div作为Map的容器(div容器必须设置宽高，不然地图不会显示)\"></a>创建一个div作为Map的容器(div容器必须设置宽高，不然地图不会显示)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;mapDiv&quot; style=&quot;width:900px; height:600px; border:1px solid #000;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建Map容器，并且加入地图\"><a href=\"#创建Map容器，并且加入地图\" class=\"headerlink\" title=\"创建Map容器，并且加入地图\"></a>创建Map容器，并且加入地图</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require([&quot;esri/map&quot;,&quot;dojo/domReady!&quot;],</span><br><span class=\"line\">    function(Map)&#123;</span><br><span class=\"line\">             var myMap = new Map(&quot;mapDiv&quot;,&#123;</span><br><span class=\"line\">                  basemap:&quot;topo&quot;</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function(Map)&#123;</span><br><span class=\"line\">                    var myMap = new Map(&quot;mapDiv&quot;,&#123;</span><br><span class=\"line\">                        basemap:&quot;topo&quot;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body class=&quot;tundra&quot;&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; style=&quot;width:900px; height:600px; border:1px solid #000;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>代码讲解：</p>\n<ul>\n<li>require函数是dojo提供的一个全局函数，只要引入init.js便可使用，require函数支持AMD（异步模块定义，Asynchronous Module Definition）规范。</li>\n<li>require函数有两个参数，第一个参数是一个数组（用于加载的模块），第二个参数是一个回调函数，注意前后加载的顺序一定要一致，例如require的第一个参数是esri.map,回调函数的第一个参数必须是Map</li>\n<li>require加载的第二个是dojo/domReady！,dojo/domReady！是一个插件（如果加载的模块以感叹号结尾，一般都为插件），此插件的作用是，当Html的dom加载完毕后在执行此函数，类似与window.onload事件。</li>\n<li>Map类中有一个比较特殊的属性叫做basemap,在arcgis api中，esri自己定义了一些底图可直接供我们使用，这些底层的调用，我们可以根据制定basemap属性直接调用已经定义好的底图。<br>esri给我们定义的底图有：streets ,satellite ,hybrid, topo, gray,dark-gray, oceans, national-geographic,terrain, osm, dark-gray-vector, gray-vector,streets-vector, streets-night-vector, streets-relief-vector, streets-navigation-vector,topo-vector.terrain, dark-gray, dark-gray-vector, gray-vector, streets-vector,streets-night-vector, streets-relief-vector, streets-navigation-vector , topo-vector,注意：要使用esri定义的底图属性basemap电脑必须联网。</li>\n</ul>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>在实际开发过程中，大家不喜欢logo的存在可以设置Map的属性logo：false<br>在开发的过程中，对于地图的放大缩小，一般用代码来控制地图的放大，缩小，拉框放大，拉框缩小等等，所以一般隐藏地图自带的按钮，设置属性slider：false</p>\n","site":{"data":{}},"excerpt":"","more":"<p> 在ArcGIS API For JS中，esri.Map类可以说是最重要的一个类，Map作为地图图层的容器，存放各种地图服务，同时Map具有一些常用的属性和事件可以帮助我们完成一些复杂的操作。接下来我们使用Map类开始我们的HelloWorld程序。</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><h4 id=\"首先新建一个Hello-World-html-同时引入我们的init-js-esri-css样式文件\"><a href=\"#首先新建一个Hello-World-html-同时引入我们的init-js-esri-css样式文件\" class=\"headerlink\" title=\"首先新建一个Hello_World.html,同时引入我们的init.js,esri.css样式文件\"></a>首先新建一个Hello_World.html,同时引入我们的init.js,esri.css样式文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建一个div作为Map的容器-div容器必须设置宽高，不然地图不会显示\"><a href=\"#创建一个div作为Map的容器-div容器必须设置宽高，不然地图不会显示\" class=\"headerlink\" title=\"创建一个div作为Map的容器(div容器必须设置宽高，不然地图不会显示)\"></a>创建一个div作为Map的容器(div容器必须设置宽高，不然地图不会显示)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;mapDiv&quot; style=&quot;width:900px; height:600px; border:1px solid #000;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建Map容器，并且加入地图\"><a href=\"#创建Map容器，并且加入地图\" class=\"headerlink\" title=\"创建Map容器，并且加入地图\"></a>创建Map容器，并且加入地图</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require([&quot;esri/map&quot;,&quot;dojo/domReady!&quot;],</span><br><span class=\"line\">    function(Map)&#123;</span><br><span class=\"line\">             var myMap = new Map(&quot;mapDiv&quot;,&#123;</span><br><span class=\"line\">                  basemap:&quot;topo&quot;</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function(Map)&#123;</span><br><span class=\"line\">                    var myMap = new Map(&quot;mapDiv&quot;,&#123;</span><br><span class=\"line\">                        basemap:&quot;topo&quot;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body class=&quot;tundra&quot;&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; style=&quot;width:900px; height:600px; border:1px solid #000;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>代码讲解：</p>\n<ul>\n<li>require函数是dojo提供的一个全局函数，只要引入init.js便可使用，require函数支持AMD（异步模块定义，Asynchronous Module Definition）规范。</li>\n<li>require函数有两个参数，第一个参数是一个数组（用于加载的模块），第二个参数是一个回调函数，注意前后加载的顺序一定要一致，例如require的第一个参数是esri.map,回调函数的第一个参数必须是Map</li>\n<li>require加载的第二个是dojo/domReady！,dojo/domReady！是一个插件（如果加载的模块以感叹号结尾，一般都为插件），此插件的作用是，当Html的dom加载完毕后在执行此函数，类似与window.onload事件。</li>\n<li>Map类中有一个比较特殊的属性叫做basemap,在arcgis api中，esri自己定义了一些底图可直接供我们使用，这些底层的调用，我们可以根据制定basemap属性直接调用已经定义好的底图。<br>esri给我们定义的底图有：streets ,satellite ,hybrid, topo, gray,dark-gray, oceans, national-geographic,terrain, osm, dark-gray-vector, gray-vector,streets-vector, streets-night-vector, streets-relief-vector, streets-navigation-vector,topo-vector.terrain, dark-gray, dark-gray-vector, gray-vector, streets-vector,streets-night-vector, streets-relief-vector, streets-navigation-vector , topo-vector,注意：要使用esri定义的底图属性basemap电脑必须联网。</li>\n</ul>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>在实际开发过程中，大家不喜欢logo的存在可以设置Map的属性logo：false<br>在开发的过程中，对于地图的放大缩小，一般用代码来控制地图的放大，缩小，拉框放大，拉框缩小等等，所以一般隐藏地图自带的按钮，设置属性slider：false</p>\n"},{"title":"ArcGIS API For Javascript之调用动态地图服务","date":"2019-08-06T05:40:02.000Z","_content":"主要记录一下在ArcGIS API如何调用自己发布的动态地图服务,利用动态地图服务我们可以完成哪一些需求等等。\n### 调用动态地图服务\n  在ArcGIS API 中给我们提供了一个类叫做ArcGISDynamicMapServiceLayer利用这个类，我们可以获得发布的地图服务。调用动态地图服务一般只需要两步：\n\n通过地图服务的URL创建一个ArcGISDynamicMapServiceLayer对象将动态地图服务的对象添加到地图容器中\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script type=\"text/javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <script>\n        require([\"esri/map\",\"esri/layers/ArcGISDynamicMapServiceLayer\",\n                    \"dojo/domReady!\"],\n                function(Map,ArcGISDynamicMapServiceLayer){\n                    var map = new Map(\"mapDiv\");\n                    //利用url创建一个动态地图服务对象\n                    var layer=new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer\");\n                    //将地图服务对象添加到地图容器中\n                    map.addLayer(layer);\n                })\n    </script>\n</head>\n<body class=\"tundra\">\n<div id=\"mapDiv\" style=\"width:900px; height:600px; border:1px solid #000;\"></div>\n</body>\n</html>\n```\n在ArcGIS API中与ArcMap不同的是：一个服务图层相当于一组图层的集合（即多个图层）\n### 需求\n在真实开发过程中，动态地图服务可以帮助我们完成很多的功能需求，例如：\n\n* 根据需求隐藏服务中的某一个图层（动态地图服务可以实现，但是切片地图服务就不能实现）\n* 通过属性查询地图服务中的信息\n* 通过空间查询地图服务中的信息（包括点查询，线查询，面查询等等）\n\n#### 根据需求隐藏服务中的某一个图层\n我们发布的地图服务中有四个图层\n![01.png](01.png)\n在本需求中,我们主要是给页面添加一个按钮，然后将地图服务中的road2隐藏,代码如下\n```\n require([\"esri/map\",\"dojo/dom\",\"dojo/on\",\"esri/layers/ArcGISDynamicMapServiceLayer\",\n                    \"dojo/domReady!\"],\n                function(Map,dom,on,ArcGISDynamicMapServiceLayer){\n                    var map = new Map(\"mapDiv\");\n                    var layer=new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer\");\n                    map.addLayer(layer);\n                    //给id为btn的按钮绑定click事件\n                    on(dom.byId(\"btn\"),\"click\",function()\n                    {\n                        layer.setVisibleLayers([1,2,3]);\n                    })\n                })\n```\n代码解释：\n* 此代码功能的实现非常简单，只利用了setVisibleLayers方法，告诉服务，我要显示图层编号为1，2，3的图层。\n* 在require中加载了一个新的模块dojo/dom模块，此模块给我们提供了一个方法dom.byId(id),我们可以通过id获得dom对象，类似于document.getElementById()方法。\n* 在require中加载了一个新的模块dojo/on模块，在dojo中on是用来绑定事件的,on(target,type,listener)的第一个参数是给哪一个对象绑定事件，第二个参数是事件的类型，第三个是参数是回调函数。\n#### 通过属性查询地图服务中的信息\n根据属性查询出我们想要的要素图形，然后将该图形高亮（在本事例中查询教学楼的信息，例如根据教学楼的名称将该楼层成高亮）\n![02.png](02.png)\n在实现这个功能的时候我们分几步开始考虑：\n\n* 在网页上新建一个文本框\n* 将文本框中的教学楼名称获取，并创建属性查询对象\n* 将查询到的楼层信息（几何信息）获取，利用graphics高亮显示\n\n##### 创建一个文本框\n```\nName:<input class=\"nm\" type=\"text\">\n<input type=\"button\" value=\"查询\">\n```\n##### 将文本框中的教学楼名称获取，并创建属性查询对象\n```\nquery(\"#btn\").on(\"click\",function(){\n                        //获得教学楼的名称\n                        var name=query(\".nm\")[0].value;\n                        //实例化查询参数\n                        var findParams = new esri.tasks.FindParameters();\n                        findParams.returnGeometry = true;\n                        findParams.layerIds = [3];\n                        findParams.searchFields = [\"name\"];\n                        findParams.searchText = name;\n                        //实例化查询对象\n                        var FindTask = new esri.tasks.FindTask(\"http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer\");\n                        //进行查询\n                        FindTask.execute(findParams,ShowFindResult)\n                    })\n```\n##### 将查询到的楼层信息（几何信息）获取，利用graphics高亮显示\n```\nfunction showFindResult(queryResult)\n                    {\n                        if (queryResult.length == 0) {\n                            alert(\"没有该元素\");\n                            return;\n                        }\n                        for (var i = 0; i < queryResult.length; i++) {\n                                //获得该图形的形状\n                                var graphic = queryResult[i].feature;\n                                var geometry = graphic.geometry;\n                                //定义高亮图形的符号\n                                //1.定义面的边界线符号\n                                var outline= new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT,new Color([255, 0, 0]), 1);\n                                //2.定义面符号\n                                var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, outline,new Color([0, 255, 0, 1]));\n                                //创建客户端图形\n                                var graphic = new Graphic(geometry, PolygonSymbol);\n                                //将客户端图形添加到map中\n                                map.graphics.add(graphic);\n                        }\n                    }       \n```\n![03.png](03.png)\n\n##### 完整代码\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script type=\"text/javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <script>\n\n\n        require([\"esri/map\",\"dojo/query\",\"dojo/on\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/tasks/FindTask\",\n            \"esri/tasks/FindParameters\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/symbols/SimpleFillSymbol\",\n            \"esri/Color\",\n            \"esri/graphic\",\n            \"dojo/domReady!\"],\n                function(Map,query,on,ArcGISDynamicMapServiceLayer,FindTask,FindParameters,SimpleLineSymbol,SimpleFillSymbol,Color,Graphic){\n                    var map = new Map(\"mapDiv\");\n                    var layer=new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer\");\n                    map.addLayer(layer);\n                    query(\"#btn\").on(\"click\",function(){\n                        //获得教学楼的名称\n                        var name=query(\".nm\")[0].value;\n                        //实例化查询参数\n                        var findParams = new FindParameters();\n                        findParams.returnGeometry = true;\n                        findParams.layerIds = [3];\n                        findParams.searchFields = [\"name\"];\n                        findParams.searchText = name;\n                        //实例化查询对象\n                        var findTask = new FindTask(\"http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer\");\n                        //进行查询\n                        findTask.execute(findParams,showFindResult)\n                    });\n                    function showFindResult(queryResult)\n                    {\n                        if (queryResult.length == 0) {\n                            alert(\"没有该元素\");\n                            return;\n                        }\n                        for (var i = 0; i < queryResult.length; i++) {\n                                //获得该图形的形状\n                                var feature= queryResult[i].feature;\n                                var geometry = feature.geometry;\n                                //定义高亮图形的符号\n                                //1.定义面的边界线符号\n                                var outline= new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT,new Color([255, 0, 0]), 1);\n                                //2.定义面符号\n                                var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, outline,new Color([0, 255, 0, 1]));\n                                //创建客户端图形\n                                var graphic = new Graphic(geometry, PolygonSymbol);\n                                //将客户端图形添加到map中\n                                map.graphics.add(graphic);\n                        }\n                    }\n\n\n\n                })\n    </script>\n</head>\n<body class=\"tundra\">\n<div id=\"mapDiv\" style=\"width:900px; height:580px; border:1px solid #000;\"></div>\n    Name:<input class=\"nm\" type=\"text\">\n    <input id=\"btn\" type=\"button\" value=\"查询\">\n</body>\n</html>\n```\n\n##### 代码解释\n* FindTask 是Esri提供的一个属性查询的类，他所对应的参数为：FindParameters，FindTask只能用于属性查询，不能用于空间查询\n* FindTask类中有一个方法叫做execute,execute的第一个参数是属性查询的参数，第二个参数是一个回调函数（即是一个异步函数），当服务器返回数据时，此函数才会被触发。\n* dojo/query是dojo提供的一个DOM选择器，他的功能非常强大，与JQuery中的$符一样强大，可以根据id选择query（\"#id\"）,也可以根据类名选择query（\".classname\"），query方法还有很多强大的地方，具体可以参考官方文档\n* query(\"#btn\").on()是dojo提供给我们第二种绑定事件的方式。\n* graphicesri提供给我们使用的客户端图层，利用graphic，我们可以完成很多操作，graphic具体的使用，将在Draw工具时说明。\n\n#### 通过空间查询地图服务中的信息\n相信大家都遇到过这种问题，当我点击地图时，将我点击的图形进行高亮显示，此时就用到了空间查询。为了实现该功能我们可以分为以下几步：\n\n* 因为要点击地图，所以首先我们给地图绑定点击事件\n* 获得点击的地图坐标(点坐标)，并创建空间查询参数对象\n* 将教学楼与点相交的楼层查询出来，然后利用graphic进行高亮显示\n\n##### 给地图绑定点击事件\n```\nmap.on(\"click\",mapClick);\n```\n##### 获得点击的地图坐标(点坐标)，并创建空间查询参数对象\n```\nfunction mapClick(e){\n                        //获得用户点击的地图坐标\n                        var point=e.mapPoint;\n                        //实例化查询参数\n                        query=new Query();\n                        query.geometry = point;\n                        query.outFields = [\"*\"];\n                        query.outSpatialReference = map.spatialReference;\n                        query.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;\n                        query.returnGeometry = true;\n                        //实例化查询对象\n                        var queryTask = new QueryTask(\"http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer/3\");\n                        //进行查询\n                        queryTask.execute(query,showFindResult)\n                    }\n```\n##### 将教学楼与点相交的楼层查询出来，然后利用graphic进行高亮显示\n```\nfunction showFindResult(queryResult)\n                    {\n                        if (queryResult.features == 0) {\n                            alert(\"没有该元素\");\n                            return;\n                        }\n                        for (var i = 0; i < queryResult.features.length; i++) {\n                            //获得该图形的形状\n                            var feature = queryResult.features[i];\n                            var geometry = feature.geometry;\n                            //定义高亮图形的符号\n                            //1.定义面的边界线符号\n                            var outline= new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT,new Color([255, 0, 0]), 1);\n                            //2.定义面符号\n                            var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, outline,new Color([0, 255, 0, 1]));\n                            //创建客户端图形\n                            var graphic = new Graphic(geometry, PolygonSymbol);\n                            //将客户端图形添加到map中\n                            map.graphics.add(graphic);\n                        }\n                    }\n```\n##### 完整代码\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script type=\"text/javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <script>\n        require([\"esri/map\",\"dojo/query\",\"dojo/on\",\n                    \"esri/layers/ArcGISDynamicMapServiceLayer\",\n                    \"esri/tasks/QueryTask\",\n                    \"esri/tasks/query\",\n                    \"esri/symbols/SimpleLineSymbol\",\n                    \"esri/symbols/SimpleFillSymbol\",\n                    \"esri/Color\",\n                    \"esri/graphic\",\n                    \"dojo/domReady!\"],\n                function(Map,query,on,ArcGISDynamicMapServiceLayer,QueryTask,Query,SimpleLineSymbol,SimpleFillSymbol,Color,Graphic){\n                    var map = new Map(\"mapDiv\");\n                    var layer=new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer\");\n                    map.addLayer(layer);\n                    map.on(\"click\",mapClick);\n                    function mapClick(e){\n                        //获得用户点击的地图坐标\n                        var point=e.mapPoint;\n                        //实例化查询参数\n                        query=new Query();\n                        query.geometry = point;\n                        query.outFields = [\"*\"];\n                        query.outSpatialReference = map.spatialReference;\n                        query.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;\n                        query.returnGeometry = true;\n                        //实例化查询对象\n                        var queryTask = new QueryTask(\"http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer/3\");\n                        //进行查询\n                        queryTask.execute(query,showFindResult)\n\n                    }\n                    function showFindResult(queryResult)\n                    {\n                        if (queryResult.features == 0) {\n                            alert(\"没有该元素\");\n                            return;\n                        }\n                        for (var i = 0; i < queryResult.features.length; i++) {\n                            //获得该图形的形状\n                            var feature = queryResult.features[i];\n                            var geometry = feature.geometry;\n                            //定义高亮图形的符号\n                            //1.定义面的边界线符号\n                            var outline= new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT,new Color([255, 0, 0]), 1);\n                            //2.定义面符号\n                            var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, outline,new Color([0, 255, 0, 1]));\n                            //创建客户端图形\n                            var graphic = new Graphic(geometry, PolygonSymbol);\n                            //将客户端图形添加到map中\n                            map.graphics.add(graphic);\n                        }\n                    }\n                })\n    </script>\n</head>\n<body class=\"tundra\">\n<div id=\"mapDiv\" style=\"width:900px; height:580px; border:1px solid #000;\"></div>\n</body>\n</html>\n```\n##### 代码解释\n* QueryTask是esri提供给我们的一个工具类，可用于属性查询，也可用于空间查询，QueryTask只能作用于地图服务的某一个图层，而不能作用于一整个地图服务（IdentifyTask类可作用于一整个地图服务）\n* Query类是QueryTask参数类，用于设定空间查询的参数。\n* QueryTask类中有一个方法叫做execute,execute的第一个参数是查询的参数，第二个参数是一个回调函数（即是一个异步函数），当服务器返回数据时，此函数才会被触发\n\n##### 补充\n绑定事件之后，在某些情况下也解除事件的绑定，下面提供几种方法解除事件绑定\n直接通过事件句柄解除（dojo新版本）\n```\n//绑定事件\nvar handle=map.on(\"click\",mapClick);\n//解除事件\nhandle.remove();\n```\n\n通过老版本的方法解除\n```\n//绑定事件\nvar handle=map.on(\"click\",mapClick);\n//解除事件\ndojo.disconnect(handle)\n```\n\n\n\n","source":"_posts/ArcGIS-API-for-JS11.md","raw":"---\ntitle: ArcGIS API For Javascript之调用动态地图服务\ndate: 2019-08-06 13:40:02\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n主要记录一下在ArcGIS API如何调用自己发布的动态地图服务,利用动态地图服务我们可以完成哪一些需求等等。\n### 调用动态地图服务\n  在ArcGIS API 中给我们提供了一个类叫做ArcGISDynamicMapServiceLayer利用这个类，我们可以获得发布的地图服务。调用动态地图服务一般只需要两步：\n\n通过地图服务的URL创建一个ArcGISDynamicMapServiceLayer对象将动态地图服务的对象添加到地图容器中\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script type=\"text/javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <script>\n        require([\"esri/map\",\"esri/layers/ArcGISDynamicMapServiceLayer\",\n                    \"dojo/domReady!\"],\n                function(Map,ArcGISDynamicMapServiceLayer){\n                    var map = new Map(\"mapDiv\");\n                    //利用url创建一个动态地图服务对象\n                    var layer=new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer\");\n                    //将地图服务对象添加到地图容器中\n                    map.addLayer(layer);\n                })\n    </script>\n</head>\n<body class=\"tundra\">\n<div id=\"mapDiv\" style=\"width:900px; height:600px; border:1px solid #000;\"></div>\n</body>\n</html>\n```\n在ArcGIS API中与ArcMap不同的是：一个服务图层相当于一组图层的集合（即多个图层）\n### 需求\n在真实开发过程中，动态地图服务可以帮助我们完成很多的功能需求，例如：\n\n* 根据需求隐藏服务中的某一个图层（动态地图服务可以实现，但是切片地图服务就不能实现）\n* 通过属性查询地图服务中的信息\n* 通过空间查询地图服务中的信息（包括点查询，线查询，面查询等等）\n\n#### 根据需求隐藏服务中的某一个图层\n我们发布的地图服务中有四个图层\n![01.png](01.png)\n在本需求中,我们主要是给页面添加一个按钮，然后将地图服务中的road2隐藏,代码如下\n```\n require([\"esri/map\",\"dojo/dom\",\"dojo/on\",\"esri/layers/ArcGISDynamicMapServiceLayer\",\n                    \"dojo/domReady!\"],\n                function(Map,dom,on,ArcGISDynamicMapServiceLayer){\n                    var map = new Map(\"mapDiv\");\n                    var layer=new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer\");\n                    map.addLayer(layer);\n                    //给id为btn的按钮绑定click事件\n                    on(dom.byId(\"btn\"),\"click\",function()\n                    {\n                        layer.setVisibleLayers([1,2,3]);\n                    })\n                })\n```\n代码解释：\n* 此代码功能的实现非常简单，只利用了setVisibleLayers方法，告诉服务，我要显示图层编号为1，2，3的图层。\n* 在require中加载了一个新的模块dojo/dom模块，此模块给我们提供了一个方法dom.byId(id),我们可以通过id获得dom对象，类似于document.getElementById()方法。\n* 在require中加载了一个新的模块dojo/on模块，在dojo中on是用来绑定事件的,on(target,type,listener)的第一个参数是给哪一个对象绑定事件，第二个参数是事件的类型，第三个是参数是回调函数。\n#### 通过属性查询地图服务中的信息\n根据属性查询出我们想要的要素图形，然后将该图形高亮（在本事例中查询教学楼的信息，例如根据教学楼的名称将该楼层成高亮）\n![02.png](02.png)\n在实现这个功能的时候我们分几步开始考虑：\n\n* 在网页上新建一个文本框\n* 将文本框中的教学楼名称获取，并创建属性查询对象\n* 将查询到的楼层信息（几何信息）获取，利用graphics高亮显示\n\n##### 创建一个文本框\n```\nName:<input class=\"nm\" type=\"text\">\n<input type=\"button\" value=\"查询\">\n```\n##### 将文本框中的教学楼名称获取，并创建属性查询对象\n```\nquery(\"#btn\").on(\"click\",function(){\n                        //获得教学楼的名称\n                        var name=query(\".nm\")[0].value;\n                        //实例化查询参数\n                        var findParams = new esri.tasks.FindParameters();\n                        findParams.returnGeometry = true;\n                        findParams.layerIds = [3];\n                        findParams.searchFields = [\"name\"];\n                        findParams.searchText = name;\n                        //实例化查询对象\n                        var FindTask = new esri.tasks.FindTask(\"http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer\");\n                        //进行查询\n                        FindTask.execute(findParams,ShowFindResult)\n                    })\n```\n##### 将查询到的楼层信息（几何信息）获取，利用graphics高亮显示\n```\nfunction showFindResult(queryResult)\n                    {\n                        if (queryResult.length == 0) {\n                            alert(\"没有该元素\");\n                            return;\n                        }\n                        for (var i = 0; i < queryResult.length; i++) {\n                                //获得该图形的形状\n                                var graphic = queryResult[i].feature;\n                                var geometry = graphic.geometry;\n                                //定义高亮图形的符号\n                                //1.定义面的边界线符号\n                                var outline= new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT,new Color([255, 0, 0]), 1);\n                                //2.定义面符号\n                                var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, outline,new Color([0, 255, 0, 1]));\n                                //创建客户端图形\n                                var graphic = new Graphic(geometry, PolygonSymbol);\n                                //将客户端图形添加到map中\n                                map.graphics.add(graphic);\n                        }\n                    }       \n```\n![03.png](03.png)\n\n##### 完整代码\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script type=\"text/javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <script>\n\n\n        require([\"esri/map\",\"dojo/query\",\"dojo/on\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/tasks/FindTask\",\n            \"esri/tasks/FindParameters\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/symbols/SimpleFillSymbol\",\n            \"esri/Color\",\n            \"esri/graphic\",\n            \"dojo/domReady!\"],\n                function(Map,query,on,ArcGISDynamicMapServiceLayer,FindTask,FindParameters,SimpleLineSymbol,SimpleFillSymbol,Color,Graphic){\n                    var map = new Map(\"mapDiv\");\n                    var layer=new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer\");\n                    map.addLayer(layer);\n                    query(\"#btn\").on(\"click\",function(){\n                        //获得教学楼的名称\n                        var name=query(\".nm\")[0].value;\n                        //实例化查询参数\n                        var findParams = new FindParameters();\n                        findParams.returnGeometry = true;\n                        findParams.layerIds = [3];\n                        findParams.searchFields = [\"name\"];\n                        findParams.searchText = name;\n                        //实例化查询对象\n                        var findTask = new FindTask(\"http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer\");\n                        //进行查询\n                        findTask.execute(findParams,showFindResult)\n                    });\n                    function showFindResult(queryResult)\n                    {\n                        if (queryResult.length == 0) {\n                            alert(\"没有该元素\");\n                            return;\n                        }\n                        for (var i = 0; i < queryResult.length; i++) {\n                                //获得该图形的形状\n                                var feature= queryResult[i].feature;\n                                var geometry = feature.geometry;\n                                //定义高亮图形的符号\n                                //1.定义面的边界线符号\n                                var outline= new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT,new Color([255, 0, 0]), 1);\n                                //2.定义面符号\n                                var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, outline,new Color([0, 255, 0, 1]));\n                                //创建客户端图形\n                                var graphic = new Graphic(geometry, PolygonSymbol);\n                                //将客户端图形添加到map中\n                                map.graphics.add(graphic);\n                        }\n                    }\n\n\n\n                })\n    </script>\n</head>\n<body class=\"tundra\">\n<div id=\"mapDiv\" style=\"width:900px; height:580px; border:1px solid #000;\"></div>\n    Name:<input class=\"nm\" type=\"text\">\n    <input id=\"btn\" type=\"button\" value=\"查询\">\n</body>\n</html>\n```\n\n##### 代码解释\n* FindTask 是Esri提供的一个属性查询的类，他所对应的参数为：FindParameters，FindTask只能用于属性查询，不能用于空间查询\n* FindTask类中有一个方法叫做execute,execute的第一个参数是属性查询的参数，第二个参数是一个回调函数（即是一个异步函数），当服务器返回数据时，此函数才会被触发。\n* dojo/query是dojo提供的一个DOM选择器，他的功能非常强大，与JQuery中的$符一样强大，可以根据id选择query（\"#id\"）,也可以根据类名选择query（\".classname\"），query方法还有很多强大的地方，具体可以参考官方文档\n* query(\"#btn\").on()是dojo提供给我们第二种绑定事件的方式。\n* graphicesri提供给我们使用的客户端图层，利用graphic，我们可以完成很多操作，graphic具体的使用，将在Draw工具时说明。\n\n#### 通过空间查询地图服务中的信息\n相信大家都遇到过这种问题，当我点击地图时，将我点击的图形进行高亮显示，此时就用到了空间查询。为了实现该功能我们可以分为以下几步：\n\n* 因为要点击地图，所以首先我们给地图绑定点击事件\n* 获得点击的地图坐标(点坐标)，并创建空间查询参数对象\n* 将教学楼与点相交的楼层查询出来，然后利用graphic进行高亮显示\n\n##### 给地图绑定点击事件\n```\nmap.on(\"click\",mapClick);\n```\n##### 获得点击的地图坐标(点坐标)，并创建空间查询参数对象\n```\nfunction mapClick(e){\n                        //获得用户点击的地图坐标\n                        var point=e.mapPoint;\n                        //实例化查询参数\n                        query=new Query();\n                        query.geometry = point;\n                        query.outFields = [\"*\"];\n                        query.outSpatialReference = map.spatialReference;\n                        query.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;\n                        query.returnGeometry = true;\n                        //实例化查询对象\n                        var queryTask = new QueryTask(\"http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer/3\");\n                        //进行查询\n                        queryTask.execute(query,showFindResult)\n                    }\n```\n##### 将教学楼与点相交的楼层查询出来，然后利用graphic进行高亮显示\n```\nfunction showFindResult(queryResult)\n                    {\n                        if (queryResult.features == 0) {\n                            alert(\"没有该元素\");\n                            return;\n                        }\n                        for (var i = 0; i < queryResult.features.length; i++) {\n                            //获得该图形的形状\n                            var feature = queryResult.features[i];\n                            var geometry = feature.geometry;\n                            //定义高亮图形的符号\n                            //1.定义面的边界线符号\n                            var outline= new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT,new Color([255, 0, 0]), 1);\n                            //2.定义面符号\n                            var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, outline,new Color([0, 255, 0, 1]));\n                            //创建客户端图形\n                            var graphic = new Graphic(geometry, PolygonSymbol);\n                            //将客户端图形添加到map中\n                            map.graphics.add(graphic);\n                        }\n                    }\n```\n##### 完整代码\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script type=\"text/javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <script>\n        require([\"esri/map\",\"dojo/query\",\"dojo/on\",\n                    \"esri/layers/ArcGISDynamicMapServiceLayer\",\n                    \"esri/tasks/QueryTask\",\n                    \"esri/tasks/query\",\n                    \"esri/symbols/SimpleLineSymbol\",\n                    \"esri/symbols/SimpleFillSymbol\",\n                    \"esri/Color\",\n                    \"esri/graphic\",\n                    \"dojo/domReady!\"],\n                function(Map,query,on,ArcGISDynamicMapServiceLayer,QueryTask,Query,SimpleLineSymbol,SimpleFillSymbol,Color,Graphic){\n                    var map = new Map(\"mapDiv\");\n                    var layer=new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer\");\n                    map.addLayer(layer);\n                    map.on(\"click\",mapClick);\n                    function mapClick(e){\n                        //获得用户点击的地图坐标\n                        var point=e.mapPoint;\n                        //实例化查询参数\n                        query=new Query();\n                        query.geometry = point;\n                        query.outFields = [\"*\"];\n                        query.outSpatialReference = map.spatialReference;\n                        query.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;\n                        query.returnGeometry = true;\n                        //实例化查询对象\n                        var queryTask = new QueryTask(\"http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer/3\");\n                        //进行查询\n                        queryTask.execute(query,showFindResult)\n\n                    }\n                    function showFindResult(queryResult)\n                    {\n                        if (queryResult.features == 0) {\n                            alert(\"没有该元素\");\n                            return;\n                        }\n                        for (var i = 0; i < queryResult.features.length; i++) {\n                            //获得该图形的形状\n                            var feature = queryResult.features[i];\n                            var geometry = feature.geometry;\n                            //定义高亮图形的符号\n                            //1.定义面的边界线符号\n                            var outline= new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT,new Color([255, 0, 0]), 1);\n                            //2.定义面符号\n                            var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, outline,new Color([0, 255, 0, 1]));\n                            //创建客户端图形\n                            var graphic = new Graphic(geometry, PolygonSymbol);\n                            //将客户端图形添加到map中\n                            map.graphics.add(graphic);\n                        }\n                    }\n                })\n    </script>\n</head>\n<body class=\"tundra\">\n<div id=\"mapDiv\" style=\"width:900px; height:580px; border:1px solid #000;\"></div>\n</body>\n</html>\n```\n##### 代码解释\n* QueryTask是esri提供给我们的一个工具类，可用于属性查询，也可用于空间查询，QueryTask只能作用于地图服务的某一个图层，而不能作用于一整个地图服务（IdentifyTask类可作用于一整个地图服务）\n* Query类是QueryTask参数类，用于设定空间查询的参数。\n* QueryTask类中有一个方法叫做execute,execute的第一个参数是查询的参数，第二个参数是一个回调函数（即是一个异步函数），当服务器返回数据时，此函数才会被触发\n\n##### 补充\n绑定事件之后，在某些情况下也解除事件的绑定，下面提供几种方法解除事件绑定\n直接通过事件句柄解除（dojo新版本）\n```\n//绑定事件\nvar handle=map.on(\"click\",mapClick);\n//解除事件\nhandle.remove();\n```\n\n通过老版本的方法解除\n```\n//绑定事件\nvar handle=map.on(\"click\",mapClick);\n//解除事件\ndojo.disconnect(handle)\n```\n\n\n\n","slug":"ArcGIS-API-for-JS11","published":1,"updated":"2019-08-06T06:13:49.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5ct6000qt09zd3g8zpni","content":"<p>主要记录一下在ArcGIS API如何调用自己发布的动态地图服务,利用动态地图服务我们可以完成哪一些需求等等。</p>\n<h3 id=\"调用动态地图服务\"><a href=\"#调用动态地图服务\" class=\"headerlink\" title=\"调用动态地图服务\"></a>调用动态地图服务</h3><p>  在ArcGIS API 中给我们提供了一个类叫做ArcGISDynamicMapServiceLayer利用这个类，我们可以获得发布的地图服务。调用动态地图服务一般只需要两步：</p>\n<p>通过地图服务的URL创建一个ArcGISDynamicMapServiceLayer对象将动态地图服务的对象添加到地图容器中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">                    &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function(Map,ArcGISDynamicMapServiceLayer)&#123;</span><br><span class=\"line\">                    var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                    //利用url创建一个动态地图服务对象</span><br><span class=\"line\">                    var layer=new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer&quot;);</span><br><span class=\"line\">                    //将地图服务对象添加到地图容器中</span><br><span class=\"line\">                    map.addLayer(layer);</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body class=&quot;tundra&quot;&gt;</span><br><span class=\"line\">&lt;div id=&quot;mapDiv&quot; style=&quot;width:900px; height:600px; border:1px solid #000;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在ArcGIS API中与ArcMap不同的是：一个服务图层相当于一组图层的集合（即多个图层）</p>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>在真实开发过程中，动态地图服务可以帮助我们完成很多的功能需求，例如：</p>\n<ul>\n<li>根据需求隐藏服务中的某一个图层（动态地图服务可以实现，但是切片地图服务就不能实现）</li>\n<li>通过属性查询地图服务中的信息</li>\n<li>通过空间查询地图服务中的信息（包括点查询，线查询，面查询等等）</li>\n</ul>\n<h4 id=\"根据需求隐藏服务中的某一个图层\"><a href=\"#根据需求隐藏服务中的某一个图层\" class=\"headerlink\" title=\"根据需求隐藏服务中的某一个图层\"></a>根据需求隐藏服务中的某一个图层</h4><p>我们发布的地图服务中有四个图层<br><img src=\"/2019/08/06/ArcGIS-API-for-JS11/01.png\" alt=\"01.png\"><br>在本需求中,我们主要是给页面添加一个按钮，然后将地图服务中的road2隐藏,代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require([&quot;esri/map&quot;,&quot;dojo/dom&quot;,&quot;dojo/on&quot;,&quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">                   &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">               function(Map,dom,on,ArcGISDynamicMapServiceLayer)&#123;</span><br><span class=\"line\">                   var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                   var layer=new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer&quot;);</span><br><span class=\"line\">                   map.addLayer(layer);</span><br><span class=\"line\">                   //给id为btn的按钮绑定click事件</span><br><span class=\"line\">                   on(dom.byId(&quot;btn&quot;),&quot;click&quot;,function()</span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       layer.setVisibleLayers([1,2,3]);</span><br><span class=\"line\">                   &#125;)</span><br><span class=\"line\">               &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>代码解释：</p>\n<ul>\n<li>此代码功能的实现非常简单，只利用了setVisibleLayers方法，告诉服务，我要显示图层编号为1，2，3的图层。</li>\n<li>在require中加载了一个新的模块dojo/dom模块，此模块给我们提供了一个方法dom.byId(id),我们可以通过id获得dom对象，类似于document.getElementById()方法。</li>\n<li><p>在require中加载了一个新的模块dojo/on模块，在dojo中on是用来绑定事件的,on(target,type,listener)的第一个参数是给哪一个对象绑定事件，第二个参数是事件的类型，第三个是参数是回调函数。</p>\n<h4 id=\"通过属性查询地图服务中的信息\"><a href=\"#通过属性查询地图服务中的信息\" class=\"headerlink\" title=\"通过属性查询地图服务中的信息\"></a>通过属性查询地图服务中的信息</h4><p>根据属性查询出我们想要的要素图形，然后将该图形高亮（在本事例中查询教学楼的信息，例如根据教学楼的名称将该楼层成高亮）<br><img src=\"/2019/08/06/ArcGIS-API-for-JS11/02.png\" alt=\"02.png\"><br>在实现这个功能的时候我们分几步开始考虑：</p>\n</li>\n<li><p>在网页上新建一个文本框</p>\n</li>\n<li>将文本框中的教学楼名称获取，并创建属性查询对象</li>\n<li>将查询到的楼层信息（几何信息）获取，利用graphics高亮显示</li>\n</ul>\n<h5 id=\"创建一个文本框\"><a href=\"#创建一个文本框\" class=\"headerlink\" title=\"创建一个文本框\"></a>创建一个文本框</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name:&lt;input class=&quot;nm&quot; type=&quot;text&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;查询&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"将文本框中的教学楼名称获取，并创建属性查询对象\"><a href=\"#将文本框中的教学楼名称获取，并创建属性查询对象\" class=\"headerlink\" title=\"将文本框中的教学楼名称获取，并创建属性查询对象\"></a>将文本框中的教学楼名称获取，并创建属性查询对象</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query(&quot;#btn&quot;).on(&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                        //获得教学楼的名称</span><br><span class=\"line\">                        var name=query(&quot;.nm&quot;)[0].value;</span><br><span class=\"line\">                        //实例化查询参数</span><br><span class=\"line\">                        var findParams = new esri.tasks.FindParameters();</span><br><span class=\"line\">                        findParams.returnGeometry = true;</span><br><span class=\"line\">                        findParams.layerIds = [3];</span><br><span class=\"line\">                        findParams.searchFields = [&quot;name&quot;];</span><br><span class=\"line\">                        findParams.searchText = name;</span><br><span class=\"line\">                        //实例化查询对象</span><br><span class=\"line\">                        var FindTask = new esri.tasks.FindTask(&quot;http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer&quot;);</span><br><span class=\"line\">                        //进行查询</span><br><span class=\"line\">                        FindTask.execute(findParams,ShowFindResult)</span><br><span class=\"line\">                    &#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"将查询到的楼层信息（几何信息）获取，利用graphics高亮显示\"><a href=\"#将查询到的楼层信息（几何信息）获取，利用graphics高亮显示\" class=\"headerlink\" title=\"将查询到的楼层信息（几何信息）获取，利用graphics高亮显示\"></a>将查询到的楼层信息（几何信息）获取，利用graphics高亮显示</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function showFindResult(queryResult)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (queryResult.length == 0) &#123;</span><br><span class=\"line\">                            alert(&quot;没有该元素&quot;);</span><br><span class=\"line\">                            return;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        for (var i = 0; i &lt; queryResult.length; i++) &#123;</span><br><span class=\"line\">                                //获得该图形的形状</span><br><span class=\"line\">                                var graphic = queryResult[i].feature;</span><br><span class=\"line\">                                var geometry = graphic.geometry;</span><br><span class=\"line\">                                //定义高亮图形的符号</span><br><span class=\"line\">                                //1.定义面的边界线符号</span><br><span class=\"line\">                                var outline= new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT,new Color([255, 0, 0]), 1);</span><br><span class=\"line\">                                //2.定义面符号</span><br><span class=\"line\">                                var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, outline,new Color([0, 255, 0, 1]));</span><br><span class=\"line\">                                //创建客户端图形</span><br><span class=\"line\">                                var graphic = new Graphic(geometry, PolygonSymbol);</span><br><span class=\"line\">                                //将客户端图形添加到map中</span><br><span class=\"line\">                                map.graphics.add(graphic);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/08/06/ArcGIS-API-for-JS11/03.png\" alt=\"03.png\"></p>\n<h5 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;dojo/query&quot;,&quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/FindTask&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/FindParameters&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/Color&quot;,</span><br><span class=\"line\">            &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function(Map,query,on,ArcGISDynamicMapServiceLayer,FindTask,FindParameters,SimpleLineSymbol,SimpleFillSymbol,Color,Graphic)&#123;</span><br><span class=\"line\">                    var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                    var layer=new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer&quot;);</span><br><span class=\"line\">                    map.addLayer(layer);</span><br><span class=\"line\">                    query(&quot;#btn&quot;).on(&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                        //获得教学楼的名称</span><br><span class=\"line\">                        var name=query(&quot;.nm&quot;)[0].value;</span><br><span class=\"line\">                        //实例化查询参数</span><br><span class=\"line\">                        var findParams = new FindParameters();</span><br><span class=\"line\">                        findParams.returnGeometry = true;</span><br><span class=\"line\">                        findParams.layerIds = [3];</span><br><span class=\"line\">                        findParams.searchFields = [&quot;name&quot;];</span><br><span class=\"line\">                        findParams.searchText = name;</span><br><span class=\"line\">                        //实例化查询对象</span><br><span class=\"line\">                        var findTask = new FindTask(&quot;http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer&quot;);</span><br><span class=\"line\">                        //进行查询</span><br><span class=\"line\">                        findTask.execute(findParams,showFindResult)</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    function showFindResult(queryResult)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (queryResult.length == 0) &#123;</span><br><span class=\"line\">                            alert(&quot;没有该元素&quot;);</span><br><span class=\"line\">                            return;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        for (var i = 0; i &lt; queryResult.length; i++) &#123;</span><br><span class=\"line\">                                //获得该图形的形状</span><br><span class=\"line\">                                var feature= queryResult[i].feature;</span><br><span class=\"line\">                                var geometry = feature.geometry;</span><br><span class=\"line\">                                //定义高亮图形的符号</span><br><span class=\"line\">                                //1.定义面的边界线符号</span><br><span class=\"line\">                                var outline= new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT,new Color([255, 0, 0]), 1);</span><br><span class=\"line\">                                //2.定义面符号</span><br><span class=\"line\">                                var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, outline,new Color([0, 255, 0, 1]));</span><br><span class=\"line\">                                //创建客户端图形</span><br><span class=\"line\">                                var graphic = new Graphic(geometry, PolygonSymbol);</span><br><span class=\"line\">                                //将客户端图形添加到map中</span><br><span class=\"line\">                                map.graphics.add(graphic);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body class=&quot;tundra&quot;&gt;</span><br><span class=\"line\">&lt;div id=&quot;mapDiv&quot; style=&quot;width:900px; height:580px; border:1px solid #000;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    Name:&lt;input class=&quot;nm&quot; type=&quot;text&quot;&gt;</span><br><span class=\"line\">    &lt;input id=&quot;btn&quot; type=&quot;button&quot; value=&quot;查询&quot;&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h5><ul>\n<li>FindTask 是Esri提供的一个属性查询的类，他所对应的参数为：FindParameters，FindTask只能用于属性查询，不能用于空间查询</li>\n<li>FindTask类中有一个方法叫做execute,execute的第一个参数是属性查询的参数，第二个参数是一个回调函数（即是一个异步函数），当服务器返回数据时，此函数才会被触发。</li>\n<li>dojo/query是dojo提供的一个DOM选择器，他的功能非常强大，与JQuery中的$符一样强大，可以根据id选择query（”#id”）,也可以根据类名选择query（”.classname”），query方法还有很多强大的地方，具体可以参考官方文档</li>\n<li>query(“#btn”).on()是dojo提供给我们第二种绑定事件的方式。</li>\n<li>graphicesri提供给我们使用的客户端图层，利用graphic，我们可以完成很多操作，graphic具体的使用，将在Draw工具时说明。</li>\n</ul>\n<h4 id=\"通过空间查询地图服务中的信息\"><a href=\"#通过空间查询地图服务中的信息\" class=\"headerlink\" title=\"通过空间查询地图服务中的信息\"></a>通过空间查询地图服务中的信息</h4><p>相信大家都遇到过这种问题，当我点击地图时，将我点击的图形进行高亮显示，此时就用到了空间查询。为了实现该功能我们可以分为以下几步：</p>\n<ul>\n<li>因为要点击地图，所以首先我们给地图绑定点击事件</li>\n<li>获得点击的地图坐标(点坐标)，并创建空间查询参数对象</li>\n<li>将教学楼与点相交的楼层查询出来，然后利用graphic进行高亮显示</li>\n</ul>\n<h5 id=\"给地图绑定点击事件\"><a href=\"#给地图绑定点击事件\" class=\"headerlink\" title=\"给地图绑定点击事件\"></a>给地图绑定点击事件</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.on(&quot;click&quot;,mapClick);</span><br></pre></td></tr></table></figure>\n<h5 id=\"获得点击的地图坐标-点坐标-，并创建空间查询参数对象\"><a href=\"#获得点击的地图坐标-点坐标-，并创建空间查询参数对象\" class=\"headerlink\" title=\"获得点击的地图坐标(点坐标)，并创建空间查询参数对象\"></a>获得点击的地图坐标(点坐标)，并创建空间查询参数对象</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function mapClick(e)&#123;</span><br><span class=\"line\">                        //获得用户点击的地图坐标</span><br><span class=\"line\">                        var point=e.mapPoint;</span><br><span class=\"line\">                        //实例化查询参数</span><br><span class=\"line\">                        query=new Query();</span><br><span class=\"line\">                        query.geometry = point;</span><br><span class=\"line\">                        query.outFields = [&quot;*&quot;];</span><br><span class=\"line\">                        query.outSpatialReference = map.spatialReference;</span><br><span class=\"line\">                        query.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;</span><br><span class=\"line\">                        query.returnGeometry = true;</span><br><span class=\"line\">                        //实例化查询对象</span><br><span class=\"line\">                        var queryTask = new QueryTask(&quot;http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer/3&quot;);</span><br><span class=\"line\">                        //进行查询</span><br><span class=\"line\">                        queryTask.execute(query,showFindResult)</span><br><span class=\"line\">                    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"将教学楼与点相交的楼层查询出来，然后利用graphic进行高亮显示\"><a href=\"#将教学楼与点相交的楼层查询出来，然后利用graphic进行高亮显示\" class=\"headerlink\" title=\"将教学楼与点相交的楼层查询出来，然后利用graphic进行高亮显示\"></a>将教学楼与点相交的楼层查询出来，然后利用graphic进行高亮显示</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function showFindResult(queryResult)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (queryResult.features == 0) &#123;</span><br><span class=\"line\">                            alert(&quot;没有该元素&quot;);</span><br><span class=\"line\">                            return;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        for (var i = 0; i &lt; queryResult.features.length; i++) &#123;</span><br><span class=\"line\">                            //获得该图形的形状</span><br><span class=\"line\">                            var feature = queryResult.features[i];</span><br><span class=\"line\">                            var geometry = feature.geometry;</span><br><span class=\"line\">                            //定义高亮图形的符号</span><br><span class=\"line\">                            //1.定义面的边界线符号</span><br><span class=\"line\">                            var outline= new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT,new Color([255, 0, 0]), 1);</span><br><span class=\"line\">                            //2.定义面符号</span><br><span class=\"line\">                            var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, outline,new Color([0, 255, 0, 1]));</span><br><span class=\"line\">                            //创建客户端图形</span><br><span class=\"line\">                            var graphic = new Graphic(geometry, PolygonSymbol);</span><br><span class=\"line\">                            //将客户端图形添加到map中</span><br><span class=\"line\">                            map.graphics.add(graphic);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"完整代码-1\"><a href=\"#完整代码-1\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;dojo/query&quot;,&quot;dojo/on&quot;,</span><br><span class=\"line\">                    &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">                    &quot;esri/tasks/QueryTask&quot;,</span><br><span class=\"line\">                    &quot;esri/tasks/query&quot;,</span><br><span class=\"line\">                    &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">                    &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">                    &quot;esri/Color&quot;,</span><br><span class=\"line\">                    &quot;esri/graphic&quot;,</span><br><span class=\"line\">                    &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function(Map,query,on,ArcGISDynamicMapServiceLayer,QueryTask,Query,SimpleLineSymbol,SimpleFillSymbol,Color,Graphic)&#123;</span><br><span class=\"line\">                    var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                    var layer=new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer&quot;);</span><br><span class=\"line\">                    map.addLayer(layer);</span><br><span class=\"line\">                    map.on(&quot;click&quot;,mapClick);</span><br><span class=\"line\">                    function mapClick(e)&#123;</span><br><span class=\"line\">                        //获得用户点击的地图坐标</span><br><span class=\"line\">                        var point=e.mapPoint;</span><br><span class=\"line\">                        //实例化查询参数</span><br><span class=\"line\">                        query=new Query();</span><br><span class=\"line\">                        query.geometry = point;</span><br><span class=\"line\">                        query.outFields = [&quot;*&quot;];</span><br><span class=\"line\">                        query.outSpatialReference = map.spatialReference;</span><br><span class=\"line\">                        query.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;</span><br><span class=\"line\">                        query.returnGeometry = true;</span><br><span class=\"line\">                        //实例化查询对象</span><br><span class=\"line\">                        var queryTask = new QueryTask(&quot;http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer/3&quot;);</span><br><span class=\"line\">                        //进行查询</span><br><span class=\"line\">                        queryTask.execute(query,showFindResult)</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    function showFindResult(queryResult)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (queryResult.features == 0) &#123;</span><br><span class=\"line\">                            alert(&quot;没有该元素&quot;);</span><br><span class=\"line\">                            return;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        for (var i = 0; i &lt; queryResult.features.length; i++) &#123;</span><br><span class=\"line\">                            //获得该图形的形状</span><br><span class=\"line\">                            var feature = queryResult.features[i];</span><br><span class=\"line\">                            var geometry = feature.geometry;</span><br><span class=\"line\">                            //定义高亮图形的符号</span><br><span class=\"line\">                            //1.定义面的边界线符号</span><br><span class=\"line\">                            var outline= new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT,new Color([255, 0, 0]), 1);</span><br><span class=\"line\">                            //2.定义面符号</span><br><span class=\"line\">                            var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, outline,new Color([0, 255, 0, 1]));</span><br><span class=\"line\">                            //创建客户端图形</span><br><span class=\"line\">                            var graphic = new Graphic(geometry, PolygonSymbol);</span><br><span class=\"line\">                            //将客户端图形添加到map中</span><br><span class=\"line\">                            map.graphics.add(graphic);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body class=&quot;tundra&quot;&gt;</span><br><span class=\"line\">&lt;div id=&quot;mapDiv&quot; style=&quot;width:900px; height:580px; border:1px solid #000;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"代码解释-1\"><a href=\"#代码解释-1\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h5><ul>\n<li>QueryTask是esri提供给我们的一个工具类，可用于属性查询，也可用于空间查询，QueryTask只能作用于地图服务的某一个图层，而不能作用于一整个地图服务（IdentifyTask类可作用于一整个地图服务）</li>\n<li>Query类是QueryTask参数类，用于设定空间查询的参数。</li>\n<li>QueryTask类中有一个方法叫做execute,execute的第一个参数是查询的参数，第二个参数是一个回调函数（即是一个异步函数），当服务器返回数据时，此函数才会被触发</li>\n</ul>\n<h5 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h5><p>绑定事件之后，在某些情况下也解除事件的绑定，下面提供几种方法解除事件绑定<br>直接通过事件句柄解除（dojo新版本）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//绑定事件</span><br><span class=\"line\">var handle=map.on(&quot;click&quot;,mapClick);</span><br><span class=\"line\">//解除事件</span><br><span class=\"line\">handle.remove();</span><br></pre></td></tr></table></figure></p>\n<p>通过老版本的方法解除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//绑定事件</span><br><span class=\"line\">var handle=map.on(&quot;click&quot;,mapClick);</span><br><span class=\"line\">//解除事件</span><br><span class=\"line\">dojo.disconnect(handle)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>主要记录一下在ArcGIS API如何调用自己发布的动态地图服务,利用动态地图服务我们可以完成哪一些需求等等。</p>\n<h3 id=\"调用动态地图服务\"><a href=\"#调用动态地图服务\" class=\"headerlink\" title=\"调用动态地图服务\"></a>调用动态地图服务</h3><p>  在ArcGIS API 中给我们提供了一个类叫做ArcGISDynamicMapServiceLayer利用这个类，我们可以获得发布的地图服务。调用动态地图服务一般只需要两步：</p>\n<p>通过地图服务的URL创建一个ArcGISDynamicMapServiceLayer对象将动态地图服务的对象添加到地图容器中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">                    &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function(Map,ArcGISDynamicMapServiceLayer)&#123;</span><br><span class=\"line\">                    var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                    //利用url创建一个动态地图服务对象</span><br><span class=\"line\">                    var layer=new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer&quot;);</span><br><span class=\"line\">                    //将地图服务对象添加到地图容器中</span><br><span class=\"line\">                    map.addLayer(layer);</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body class=&quot;tundra&quot;&gt;</span><br><span class=\"line\">&lt;div id=&quot;mapDiv&quot; style=&quot;width:900px; height:600px; border:1px solid #000;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在ArcGIS API中与ArcMap不同的是：一个服务图层相当于一组图层的集合（即多个图层）</p>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>在真实开发过程中，动态地图服务可以帮助我们完成很多的功能需求，例如：</p>\n<ul>\n<li>根据需求隐藏服务中的某一个图层（动态地图服务可以实现，但是切片地图服务就不能实现）</li>\n<li>通过属性查询地图服务中的信息</li>\n<li>通过空间查询地图服务中的信息（包括点查询，线查询，面查询等等）</li>\n</ul>\n<h4 id=\"根据需求隐藏服务中的某一个图层\"><a href=\"#根据需求隐藏服务中的某一个图层\" class=\"headerlink\" title=\"根据需求隐藏服务中的某一个图层\"></a>根据需求隐藏服务中的某一个图层</h4><p>我们发布的地图服务中有四个图层<br><img src=\"/2019/08/06/ArcGIS-API-for-JS11/01.png\" alt=\"01.png\"><br>在本需求中,我们主要是给页面添加一个按钮，然后将地图服务中的road2隐藏,代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require([&quot;esri/map&quot;,&quot;dojo/dom&quot;,&quot;dojo/on&quot;,&quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">                   &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">               function(Map,dom,on,ArcGISDynamicMapServiceLayer)&#123;</span><br><span class=\"line\">                   var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                   var layer=new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer&quot;);</span><br><span class=\"line\">                   map.addLayer(layer);</span><br><span class=\"line\">                   //给id为btn的按钮绑定click事件</span><br><span class=\"line\">                   on(dom.byId(&quot;btn&quot;),&quot;click&quot;,function()</span><br><span class=\"line\">                   &#123;</span><br><span class=\"line\">                       layer.setVisibleLayers([1,2,3]);</span><br><span class=\"line\">                   &#125;)</span><br><span class=\"line\">               &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>代码解释：</p>\n<ul>\n<li>此代码功能的实现非常简单，只利用了setVisibleLayers方法，告诉服务，我要显示图层编号为1，2，3的图层。</li>\n<li>在require中加载了一个新的模块dojo/dom模块，此模块给我们提供了一个方法dom.byId(id),我们可以通过id获得dom对象，类似于document.getElementById()方法。</li>\n<li><p>在require中加载了一个新的模块dojo/on模块，在dojo中on是用来绑定事件的,on(target,type,listener)的第一个参数是给哪一个对象绑定事件，第二个参数是事件的类型，第三个是参数是回调函数。</p>\n<h4 id=\"通过属性查询地图服务中的信息\"><a href=\"#通过属性查询地图服务中的信息\" class=\"headerlink\" title=\"通过属性查询地图服务中的信息\"></a>通过属性查询地图服务中的信息</h4><p>根据属性查询出我们想要的要素图形，然后将该图形高亮（在本事例中查询教学楼的信息，例如根据教学楼的名称将该楼层成高亮）<br><img src=\"/2019/08/06/ArcGIS-API-for-JS11/02.png\" alt=\"02.png\"><br>在实现这个功能的时候我们分几步开始考虑：</p>\n</li>\n<li><p>在网页上新建一个文本框</p>\n</li>\n<li>将文本框中的教学楼名称获取，并创建属性查询对象</li>\n<li>将查询到的楼层信息（几何信息）获取，利用graphics高亮显示</li>\n</ul>\n<h5 id=\"创建一个文本框\"><a href=\"#创建一个文本框\" class=\"headerlink\" title=\"创建一个文本框\"></a>创建一个文本框</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name:&lt;input class=&quot;nm&quot; type=&quot;text&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;查询&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"将文本框中的教学楼名称获取，并创建属性查询对象\"><a href=\"#将文本框中的教学楼名称获取，并创建属性查询对象\" class=\"headerlink\" title=\"将文本框中的教学楼名称获取，并创建属性查询对象\"></a>将文本框中的教学楼名称获取，并创建属性查询对象</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query(&quot;#btn&quot;).on(&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                        //获得教学楼的名称</span><br><span class=\"line\">                        var name=query(&quot;.nm&quot;)[0].value;</span><br><span class=\"line\">                        //实例化查询参数</span><br><span class=\"line\">                        var findParams = new esri.tasks.FindParameters();</span><br><span class=\"line\">                        findParams.returnGeometry = true;</span><br><span class=\"line\">                        findParams.layerIds = [3];</span><br><span class=\"line\">                        findParams.searchFields = [&quot;name&quot;];</span><br><span class=\"line\">                        findParams.searchText = name;</span><br><span class=\"line\">                        //实例化查询对象</span><br><span class=\"line\">                        var FindTask = new esri.tasks.FindTask(&quot;http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer&quot;);</span><br><span class=\"line\">                        //进行查询</span><br><span class=\"line\">                        FindTask.execute(findParams,ShowFindResult)</span><br><span class=\"line\">                    &#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"将查询到的楼层信息（几何信息）获取，利用graphics高亮显示\"><a href=\"#将查询到的楼层信息（几何信息）获取，利用graphics高亮显示\" class=\"headerlink\" title=\"将查询到的楼层信息（几何信息）获取，利用graphics高亮显示\"></a>将查询到的楼层信息（几何信息）获取，利用graphics高亮显示</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function showFindResult(queryResult)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (queryResult.length == 0) &#123;</span><br><span class=\"line\">                            alert(&quot;没有该元素&quot;);</span><br><span class=\"line\">                            return;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        for (var i = 0; i &lt; queryResult.length; i++) &#123;</span><br><span class=\"line\">                                //获得该图形的形状</span><br><span class=\"line\">                                var graphic = queryResult[i].feature;</span><br><span class=\"line\">                                var geometry = graphic.geometry;</span><br><span class=\"line\">                                //定义高亮图形的符号</span><br><span class=\"line\">                                //1.定义面的边界线符号</span><br><span class=\"line\">                                var outline= new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT,new Color([255, 0, 0]), 1);</span><br><span class=\"line\">                                //2.定义面符号</span><br><span class=\"line\">                                var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, outline,new Color([0, 255, 0, 1]));</span><br><span class=\"line\">                                //创建客户端图形</span><br><span class=\"line\">                                var graphic = new Graphic(geometry, PolygonSymbol);</span><br><span class=\"line\">                                //将客户端图形添加到map中</span><br><span class=\"line\">                                map.graphics.add(graphic);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/08/06/ArcGIS-API-for-JS11/03.png\" alt=\"03.png\"></p>\n<h5 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;dojo/query&quot;,&quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/FindTask&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/FindParameters&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/Color&quot;,</span><br><span class=\"line\">            &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function(Map,query,on,ArcGISDynamicMapServiceLayer,FindTask,FindParameters,SimpleLineSymbol,SimpleFillSymbol,Color,Graphic)&#123;</span><br><span class=\"line\">                    var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                    var layer=new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer&quot;);</span><br><span class=\"line\">                    map.addLayer(layer);</span><br><span class=\"line\">                    query(&quot;#btn&quot;).on(&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                        //获得教学楼的名称</span><br><span class=\"line\">                        var name=query(&quot;.nm&quot;)[0].value;</span><br><span class=\"line\">                        //实例化查询参数</span><br><span class=\"line\">                        var findParams = new FindParameters();</span><br><span class=\"line\">                        findParams.returnGeometry = true;</span><br><span class=\"line\">                        findParams.layerIds = [3];</span><br><span class=\"line\">                        findParams.searchFields = [&quot;name&quot;];</span><br><span class=\"line\">                        findParams.searchText = name;</span><br><span class=\"line\">                        //实例化查询对象</span><br><span class=\"line\">                        var findTask = new FindTask(&quot;http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer&quot;);</span><br><span class=\"line\">                        //进行查询</span><br><span class=\"line\">                        findTask.execute(findParams,showFindResult)</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    function showFindResult(queryResult)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (queryResult.length == 0) &#123;</span><br><span class=\"line\">                            alert(&quot;没有该元素&quot;);</span><br><span class=\"line\">                            return;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        for (var i = 0; i &lt; queryResult.length; i++) &#123;</span><br><span class=\"line\">                                //获得该图形的形状</span><br><span class=\"line\">                                var feature= queryResult[i].feature;</span><br><span class=\"line\">                                var geometry = feature.geometry;</span><br><span class=\"line\">                                //定义高亮图形的符号</span><br><span class=\"line\">                                //1.定义面的边界线符号</span><br><span class=\"line\">                                var outline= new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT,new Color([255, 0, 0]), 1);</span><br><span class=\"line\">                                //2.定义面符号</span><br><span class=\"line\">                                var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, outline,new Color([0, 255, 0, 1]));</span><br><span class=\"line\">                                //创建客户端图形</span><br><span class=\"line\">                                var graphic = new Graphic(geometry, PolygonSymbol);</span><br><span class=\"line\">                                //将客户端图形添加到map中</span><br><span class=\"line\">                                map.graphics.add(graphic);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body class=&quot;tundra&quot;&gt;</span><br><span class=\"line\">&lt;div id=&quot;mapDiv&quot; style=&quot;width:900px; height:580px; border:1px solid #000;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    Name:&lt;input class=&quot;nm&quot; type=&quot;text&quot;&gt;</span><br><span class=\"line\">    &lt;input id=&quot;btn&quot; type=&quot;button&quot; value=&quot;查询&quot;&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h5><ul>\n<li>FindTask 是Esri提供的一个属性查询的类，他所对应的参数为：FindParameters，FindTask只能用于属性查询，不能用于空间查询</li>\n<li>FindTask类中有一个方法叫做execute,execute的第一个参数是属性查询的参数，第二个参数是一个回调函数（即是一个异步函数），当服务器返回数据时，此函数才会被触发。</li>\n<li>dojo/query是dojo提供的一个DOM选择器，他的功能非常强大，与JQuery中的$符一样强大，可以根据id选择query（”#id”）,也可以根据类名选择query（”.classname”），query方法还有很多强大的地方，具体可以参考官方文档</li>\n<li>query(“#btn”).on()是dojo提供给我们第二种绑定事件的方式。</li>\n<li>graphicesri提供给我们使用的客户端图层，利用graphic，我们可以完成很多操作，graphic具体的使用，将在Draw工具时说明。</li>\n</ul>\n<h4 id=\"通过空间查询地图服务中的信息\"><a href=\"#通过空间查询地图服务中的信息\" class=\"headerlink\" title=\"通过空间查询地图服务中的信息\"></a>通过空间查询地图服务中的信息</h4><p>相信大家都遇到过这种问题，当我点击地图时，将我点击的图形进行高亮显示，此时就用到了空间查询。为了实现该功能我们可以分为以下几步：</p>\n<ul>\n<li>因为要点击地图，所以首先我们给地图绑定点击事件</li>\n<li>获得点击的地图坐标(点坐标)，并创建空间查询参数对象</li>\n<li>将教学楼与点相交的楼层查询出来，然后利用graphic进行高亮显示</li>\n</ul>\n<h5 id=\"给地图绑定点击事件\"><a href=\"#给地图绑定点击事件\" class=\"headerlink\" title=\"给地图绑定点击事件\"></a>给地图绑定点击事件</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.on(&quot;click&quot;,mapClick);</span><br></pre></td></tr></table></figure>\n<h5 id=\"获得点击的地图坐标-点坐标-，并创建空间查询参数对象\"><a href=\"#获得点击的地图坐标-点坐标-，并创建空间查询参数对象\" class=\"headerlink\" title=\"获得点击的地图坐标(点坐标)，并创建空间查询参数对象\"></a>获得点击的地图坐标(点坐标)，并创建空间查询参数对象</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function mapClick(e)&#123;</span><br><span class=\"line\">                        //获得用户点击的地图坐标</span><br><span class=\"line\">                        var point=e.mapPoint;</span><br><span class=\"line\">                        //实例化查询参数</span><br><span class=\"line\">                        query=new Query();</span><br><span class=\"line\">                        query.geometry = point;</span><br><span class=\"line\">                        query.outFields = [&quot;*&quot;];</span><br><span class=\"line\">                        query.outSpatialReference = map.spatialReference;</span><br><span class=\"line\">                        query.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;</span><br><span class=\"line\">                        query.returnGeometry = true;</span><br><span class=\"line\">                        //实例化查询对象</span><br><span class=\"line\">                        var queryTask = new QueryTask(&quot;http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer/3&quot;);</span><br><span class=\"line\">                        //进行查询</span><br><span class=\"line\">                        queryTask.execute(query,showFindResult)</span><br><span class=\"line\">                    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"将教学楼与点相交的楼层查询出来，然后利用graphic进行高亮显示\"><a href=\"#将教学楼与点相交的楼层查询出来，然后利用graphic进行高亮显示\" class=\"headerlink\" title=\"将教学楼与点相交的楼层查询出来，然后利用graphic进行高亮显示\"></a>将教学楼与点相交的楼层查询出来，然后利用graphic进行高亮显示</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function showFindResult(queryResult)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (queryResult.features == 0) &#123;</span><br><span class=\"line\">                            alert(&quot;没有该元素&quot;);</span><br><span class=\"line\">                            return;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        for (var i = 0; i &lt; queryResult.features.length; i++) &#123;</span><br><span class=\"line\">                            //获得该图形的形状</span><br><span class=\"line\">                            var feature = queryResult.features[i];</span><br><span class=\"line\">                            var geometry = feature.geometry;</span><br><span class=\"line\">                            //定义高亮图形的符号</span><br><span class=\"line\">                            //1.定义面的边界线符号</span><br><span class=\"line\">                            var outline= new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT,new Color([255, 0, 0]), 1);</span><br><span class=\"line\">                            //2.定义面符号</span><br><span class=\"line\">                            var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, outline,new Color([0, 255, 0, 1]));</span><br><span class=\"line\">                            //创建客户端图形</span><br><span class=\"line\">                            var graphic = new Graphic(geometry, PolygonSymbol);</span><br><span class=\"line\">                            //将客户端图形添加到map中</span><br><span class=\"line\">                            map.graphics.add(graphic);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"完整代码-1\"><a href=\"#完整代码-1\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;dojo/query&quot;,&quot;dojo/on&quot;,</span><br><span class=\"line\">                    &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">                    &quot;esri/tasks/QueryTask&quot;,</span><br><span class=\"line\">                    &quot;esri/tasks/query&quot;,</span><br><span class=\"line\">                    &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">                    &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">                    &quot;esri/Color&quot;,</span><br><span class=\"line\">                    &quot;esri/graphic&quot;,</span><br><span class=\"line\">                    &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function(Map,query,on,ArcGISDynamicMapServiceLayer,QueryTask,Query,SimpleLineSymbol,SimpleFillSymbol,Color,Graphic)&#123;</span><br><span class=\"line\">                    var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                    var layer=new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer&quot;);</span><br><span class=\"line\">                    map.addLayer(layer);</span><br><span class=\"line\">                    map.on(&quot;click&quot;,mapClick);</span><br><span class=\"line\">                    function mapClick(e)&#123;</span><br><span class=\"line\">                        //获得用户点击的地图坐标</span><br><span class=\"line\">                        var point=e.mapPoint;</span><br><span class=\"line\">                        //实例化查询参数</span><br><span class=\"line\">                        query=new Query();</span><br><span class=\"line\">                        query.geometry = point;</span><br><span class=\"line\">                        query.outFields = [&quot;*&quot;];</span><br><span class=\"line\">                        query.outSpatialReference = map.spatialReference;</span><br><span class=\"line\">                        query.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;</span><br><span class=\"line\">                        query.returnGeometry = true;</span><br><span class=\"line\">                        //实例化查询对象</span><br><span class=\"line\">                        var queryTask = new QueryTask(&quot;http://localhost:6080/arcgis/rest/services/Test/MyServer/MapServer/3&quot;);</span><br><span class=\"line\">                        //进行查询</span><br><span class=\"line\">                        queryTask.execute(query,showFindResult)</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    function showFindResult(queryResult)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        if (queryResult.features == 0) &#123;</span><br><span class=\"line\">                            alert(&quot;没有该元素&quot;);</span><br><span class=\"line\">                            return;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        for (var i = 0; i &lt; queryResult.features.length; i++) &#123;</span><br><span class=\"line\">                            //获得该图形的形状</span><br><span class=\"line\">                            var feature = queryResult.features[i];</span><br><span class=\"line\">                            var geometry = feature.geometry;</span><br><span class=\"line\">                            //定义高亮图形的符号</span><br><span class=\"line\">                            //1.定义面的边界线符号</span><br><span class=\"line\">                            var outline= new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT,new Color([255, 0, 0]), 1);</span><br><span class=\"line\">                            //2.定义面符号</span><br><span class=\"line\">                            var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, outline,new Color([0, 255, 0, 1]));</span><br><span class=\"line\">                            //创建客户端图形</span><br><span class=\"line\">                            var graphic = new Graphic(geometry, PolygonSymbol);</span><br><span class=\"line\">                            //将客户端图形添加到map中</span><br><span class=\"line\">                            map.graphics.add(graphic);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body class=&quot;tundra&quot;&gt;</span><br><span class=\"line\">&lt;div id=&quot;mapDiv&quot; style=&quot;width:900px; height:580px; border:1px solid #000;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"代码解释-1\"><a href=\"#代码解释-1\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h5><ul>\n<li>QueryTask是esri提供给我们的一个工具类，可用于属性查询，也可用于空间查询，QueryTask只能作用于地图服务的某一个图层，而不能作用于一整个地图服务（IdentifyTask类可作用于一整个地图服务）</li>\n<li>Query类是QueryTask参数类，用于设定空间查询的参数。</li>\n<li>QueryTask类中有一个方法叫做execute,execute的第一个参数是查询的参数，第二个参数是一个回调函数（即是一个异步函数），当服务器返回数据时，此函数才会被触发</li>\n</ul>\n<h5 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h5><p>绑定事件之后，在某些情况下也解除事件的绑定，下面提供几种方法解除事件绑定<br>直接通过事件句柄解除（dojo新版本）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//绑定事件</span><br><span class=\"line\">var handle=map.on(&quot;click&quot;,mapClick);</span><br><span class=\"line\">//解除事件</span><br><span class=\"line\">handle.remove();</span><br></pre></td></tr></table></figure></p>\n<p>通过老版本的方法解除<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//绑定事件</span><br><span class=\"line\">var handle=map.on(&quot;click&quot;,mapClick);</span><br><span class=\"line\">//解除事件</span><br><span class=\"line\">dojo.disconnect(handle)</span><br></pre></td></tr></table></figure></p>\n"},{"title":"ArcGIS API For Javascript之GraphicsLayer","date":"2019-08-06T07:10:35.000Z","_content":"在ArcGIS API中有一种图层叫做GraphicsLayer，GraphicsLayer是一种客户端图层，GraphicsLayer中的图形我们称作Graphic，它对应着 esri/graphic，一个Graphic对象由四部分组成：geometry,symbol,attribute,infoTemplate组成，Graphic对象在我们开发中用到的非常多。例如：利用Graphic实现图形的高亮显示等等。\n### 需求\n#### 根据具体坐标生成Graphic\n在我们的实际开发当中可能会存在这样的需求：根据坐标以及形状生成相应的图形然后在地图显示出来\n在上面说过一个Graphic由四部分组成，在需求中我们已经知道坐标形状，即已经知道了geometry,因此我们可以直接根据坐标生成相应的geometry，从而创建Graphic，然后添加到地图中来。\n##### 代码实现\n我们首先创建一个html页面，引入相应的文件将地图加载进来\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Graphic</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style>\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script>\n        require([\"esri/map\",\"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"dojo/domReady!\"],function(Map,ArcGISDynamicMapServiceLayer){\n            var map = new Map(\"mapDiv\");\n            var layer = new ArcGISDynamicMapServiceLayer\n            (\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\");\n            map.addLayer(layer);\n        })\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n</body>\n</html>\n```\n创建四个按钮，将四类不同的Graphic添加到GraphicsLayer中\n```\n<button>添加点</button>\n<button>添加线</button>\n<button>添加面</button>\n<button>添加圆</button>\n```\n引入相应的模块，其中包括：\ndojo/on（用于绑定事件的模块）\nesri/symbols/SimpleMarkerSymbol（点符号类）\nesri/symbols/SimpleLineSymbol（线符号类）\nesri/symbols/SimpleFillSymbol（面符号类）\nesri/geometry/Point（点类）\nesri/geometry/Polyline（折线类）\nesri/geometry/Polygon（面类）\nesri/geometry/Circle（圆类）\ndojo/query（dojo的选择器，用于选择DOM元素）\nesri/graphic（图形类）\nesri/layers/GraphicsLayer（客户端图层类）\n为相应的按钮添加绑定事件\n```\n            //创建客户端图层\n            var graphicsLayer=new GraphicsLayer();\n            //将客户端图层添加到地图中\n            map.addLayer(graphicsLayer);\n            //通过query查询到button对象\n            var btns=query(\"button\");\n\n            on(btns,\"click\",function(event){\n                //获得按钮的文本\n                var text=this.innerHTML;\n                //定义线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //定义点符号l\n                var pSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new Color([255, 0, 0]));\n                //定义面符号\n                var fill=SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new Color([255, 0, 0]));\n                //声明一个类型和图形\n                var geometry;\n                var graphic;\n                //根据文本定义相应的geometry\n                switch(text)\n                {\n                    case \"添加点\":\n                        geometry=new Point({\n                            \"x\":510706,\n                            \"y\":3986100,\n                            \"spatialReference\":map.spatialReference\n                        });\n                        graphic=new Graphic(geometry,pSymbol);\n                        break;\n                    case \"添加线\":\n                        //点的坐标对\n                         var  paths=[];\n                         paths[0]=[\n                            [510326,3985702],\n                            [510994, 3985676],\n                            [511078, 3985903],\n                            [510433, 3985928]\n                        ];\n                        geometry=new Polyline({\n                            \"paths\":paths,\n                            \"spatialReference\":map.spatialReference\n                        })\n                        graphic=new Graphic(geometry,lineSymbol);\n                        break;\n                    case \"添加面\":\n                        //点的坐标对\n                        var ring=[];\n                        ring[0]=[\n                            [510275, 3986100],\n                            [510508, 3986162],\n                            [510596, 3986032],\n                            [510271, 3985847],\n                            [510275, 3986100]\n                        ];\n                        geometry=new Polygon({\n                            \"rings\":ring,\n                            \"spatialReference\":map.spatialReference\n                        });\n                        graphic=new Graphic(geometry,fill);\n                        break;\n                    case \"添加圆\":\n                        //圆心\n                        var p=new Point({\n                            \"x\":510706,\n                            \"y\":3986100,\n                            \"spatialReference\":map.spatialReference\n                        });\n                        //半径\n                        var r=20;\n                        geometry=new Circle(p,{\n                            \"radius\":r\n                        });\n                        graphic=new Graphic(geometry,fill);\n                        break;\n                }\n                //将图形添加到图层中\n                graphicsLayer.add(graphic);\n```\n##### 全部代码\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Graphic</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style>\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script>\n        require([\"esri/map\",\"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/layers/GraphicsLayer\",\n            \"dojo/on\",\"dojo/query\",\"dojo/colors\",\n            \"esri/graphic\",\"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/symbols/SimpleFillSymbol\",\n            \"esri/geometry/Point\",\n            \"esri/geometry/Polyline\",\"esri/geometry/Polygon\",\n            \"esri/geometry/Circle\",\n            \"dojo/domReady!\"],\n                function(Map,ArcGISDynamicMapServiceLayer,\n                         GraphicsLayer,on,query,Color,Graphic,\n                         SimpleMarkerSymbol,SimpleLineSymbol,\n                         SimpleFillSymbol,Point,Polyline,Polygon,Circle){\n            var map = new Map(\"mapDiv\");\n            var layer = new ArcGISDynamicMapServiceLayer\n            (\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\");\n            map.addLayer(layer);\n            //创建客户端图层\n            var graphicsLayer=new GraphicsLayer();\n            //将客户端图层添加到地图中\n            map.addLayer(graphicsLayer);\n            //通过query查询到button对象\n            var btns=query(\"button\");\n\n            on(btns,\"click\",function(event){\n                //获得按钮的文本\n                var text=this.innerHTML;\n                //定义线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //定义点符号l\n                var pSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new Color([255, 0, 0]));\n                //定义面符号\n                var fill=SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new Color([255, 0, 0]));\n                //声明一个类型和图形\n                var geometry;\n                var graphic;\n                //根据文本定义相应的geometry\n                switch(text)\n                {\n                    case \"添加点\":\n                        geometry=new Point({\n                            \"x\":510706,\n                            \"y\":3986100,\n                            \"spatialReference\":map.spatialReference\n                        });\n                        graphic=new Graphic(geometry,pSymbol);\n                        break;\n                    case \"添加线\":\n                        //点的坐标对\n                         var  paths=[];\n                         paths[0]=[\n                            [510326,3985702],\n                            [510994, 3985676],\n                            [511078, 3985903],\n                            [510433, 3985928]\n                        ];\n                        geometry=new Polyline({\n                            \"paths\":paths,\n                            \"spatialReference\":map.spatialReference\n                        })\n                        graphic=new Graphic(geometry,lineSymbol);\n                        break;\n                    case \"添加面\":\n                        //点的坐标对\n                        var ring=[];\n                        ring[0]=[\n                            [510275, 3986100],\n                            [510508, 3986162],\n                            [510596, 3986032],\n                            [510271, 3985847],\n                            [510275, 3986100]\n                        ];\n                        geometry=new Polygon({\n                            \"rings\":ring,\n                            \"spatialReference\":map.spatialReference\n                        });\n                        graphic=new Graphic(geometry,fill);\n                        break;\n                    case \"添加圆\":\n                        //圆心\n                        var p=new Point({\n                            \"x\":510706,\n                            \"y\":3986100,\n                            \"spatialReference\":map.spatialReference\n                        });\n                        //半径\n                        var r=20;\n                        geometry=new Circle(p,{\n                            \"radius\":r\n                        });\n                        graphic=new Graphic(geometry,fill);\n                        break;\n                }\n                //将图形添加到图层中\n                graphicsLayer.add(graphic);\n            })\n        })\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n    <button>添加点</button>\n    <button>添加线</button>\n    <button>添加面</button>\n    <button>添加圆</button>\n</body>\n</html>\n```\n##### 代码解释\n* 我们利用dojo/query查询到所有的button对象，利用dojo/on模块给所有的button对象绑定事件。\n* 在此例子中，有一个缺点：便是将点的坐标写死了，因此我们可以将点的坐标存放在一个json文件中，从而读取文件生成相应的点坐标\n\n#### GraphicsLayer的属性查询\n在前面我们提到过，Graphic是可以存在属性的，在实际开发当中，有时我们需要将相应的属性查询出来，在此时我提供一个简单的方法，便是根据 GraphicsLayer的点击事件来查询Graphic的属性。\n##### 代码实现\n首先我们添加一系列带有属性的Graphic（此处我们只用点图形便可以）\n```\n//创建客户端图层\n            var graphicsLayer=new GraphicsLayer();\n            //将客户端图层添加到地图中\n            map.addLayer(graphicsLayer);\n            //添加点图形的函数\n            function addGraphic()\n            {\n                //定义线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //定义点符号l\n                var pSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new Color([255, 0, 0]));\n                //声明形状\n                var geometry;\n                //声明和图形\n                var graphic;\n                //添加第一个点图形\n                geometry=new Point({\n                    \"x\":510706,\n                    \"y\":3986100,\n                    \"spatialReference\":map.spatialReference,\n                    attributes:{\n                        \"h\":100\n                    }\n                });\n                graphic=new Graphic(geometry,pSymbol);\n                graphicsLayer.add(graphic);\n                //添加第二个点图形\n                geometry=new Point({\n                    \"x\":510326,\n                    \"y\":3985702,\n                    \"spatialReference\":map.spatialReference,\n                    attributes:{\n                        \"h\":200\n                    }\n                });\n                graphic=new Graphic(geometry,pSymbol);\n                graphicsLayer.add(graphic);\n                //添加第三个点图形\n                geometry=new Point({\n                    \"x\":510275,\n                    \"y\":3986100,\n                    \"spatialReference\":map.spatialReference,\n                    attributes:{\n                        \"h\":300\n                    }\n                });\n                graphic=new Graphic(geometry,pSymbol);\n                graphicsLayer.add(graphic);\n            }\n            //调用添加点图形的函数\n            addGraphic();\n```\n给GraphicsLayer绑定相应的事件\n```\n    //绑定事件\n            on(graphicsLayer,\"click\",function(event){\n                var graphic=event.graphic;\n                alert(graphic.attributes[\"h\"]);\n            })\n```\n##### 全部代码\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Graphic</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style>\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script>\n        require([\"esri/map\",\"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/layers/GraphicsLayer\",\n            \"dojo/on\",\"dojo/query\",\"dojo/colors\",\n            \"esri/graphic\",\"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/geometry/Point\",\n                    \"dojo/domReady!\"],\n                function(Map,ArcGISDynamicMapServiceLayer,\n                         GraphicsLayer,on,query,Color,Graphic,\n                         SimpleMarkerSymbol,SimpleLineSymbol,Point){\n            var map = new Map(\"mapDiv\");\n            var layer = new ArcGISDynamicMapServiceLayer\n            (\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\");\n            map.addLayer(layer);\n            //创建客户端图层\n            var graphicsLayer=new GraphicsLayer();\n            //将客户端图层添加到地图中\n            map.addLayer(graphicsLayer);\n            //添加点图形的函数\n            function addGraphic()\n            {\n                //定义线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //定义点符号l\n                var pSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new Color([255, 0, 0]));\n                //声明形状\n                var geometry;\n                //声明和图形\n                var graphic;\n                //添加第一个点图形\n                geometry=new Point({\n                    \"x\":510706,\n                    \"y\":3986100,\n                    \"spatialReference\":map.spatialReference,\n                    attributes:{\n                        \"h\":100\n                    }\n                });\n                graphic=new Graphic(geometry,pSymbol);\n                graphicsLayer.add(graphic);\n                //添加第二个点图形\n                geometry=new Point({\n                    \"x\":510326,\n                    \"y\":3985702,\n                    \"spatialReference\":map.spatialReference,\n                    attributes:{\n                        \"h\":200\n                    }\n                });\n                graphic=new Graphic(geometry,pSymbol);\n                graphicsLayer.add(graphic);\n                //添加第三个点图形\n                geometry=new Point({\n                    \"x\":510275,\n                    \"y\":3986100,\n                    \"spatialReference\":map.spatialReference,\n                    attributes:{\n                        \"h\":300\n                    }\n                });\n                graphic=new Graphic(geometry,pSymbol);\n                graphicsLayer.add(graphic);\n            }\n            //调用添加点图形的函数\n            addGraphic();\n            //绑定事件\n            on(graphicsLayer,\"click\",function(event){\n                var graphic=event.graphic;\n                alert(graphic.attributes[\"h\"]);\n            })\n\n\n        })\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n</body>\n</html>\n```\n##### 代码解释\n* 需要注意的是graphicsLayer的事件机制是针对于graphic图形的,也就是当图形graphic被点击时被触发，此时回调函数也会将那个图形被点击传给我们，从而得到图形的属性\n* 有的同学不太喜欢新建一个graphicsLayer,而是使用map.graphics.add()方法添加一个图形graphic，其实原理是一样的，因为map本身有一个默认的graphicsLayer即：map.graphics返回的便是一个graphicsLayer对象\n* 在此代码当中我们只是将获得到的属性信息alert了一下，在真实需求当中我们可能会利用相应的属性信息做很多的事情。\n\n#### 实现用户交互画图（Draw工具）\n在部分项目中，有这么一个需求：让用户在地图上自己绘制一个图形，然后将图形添加到地图当中，要实现这个功能我们需要借助esri提供给我们的工具条实现：esri/toolbars/draw，利用该工具条我们可以得到用户交互画出来的geometry,从而根据geometry生成相应的graphic，使用该工具的一般步骤为：\n\n1.创建绘图对象\n2.激活绘图工具\n3.得到图形Geometry\n4.创建Graphic\n5.添加到地图\n##### 代码实现\n创建5个button（和第一个例子一样）\n创建绘图对象\n```\nvar toolbar = new Draw(map, { showTooltips: true });\n```\n给每一个button绑定相应的事件（激活绘图工具）\n```\nquery(\"button\").on(\"click\",function(event){\n            var value=this.innerHTML;\n            switch(value){\n                case \"绘制点\":{\n                    //激活绘图工具（画点）\n                    toolbar.activate(Draw.POINT, {\n                        showTooltips:true\n                    })\n                    break;\n\n                }\n                case \"绘制折线\":{\n                     //激活绘图工具（画折线）\n                    toolbar.activate(Draw.POLYLINE, {\n                        showTooltips:true\n                    })\n                    break;\n                }\n                case \"绘制面\":{\n                    //激活绘图工具（绘制面）\n                    toolbar.activate(Draw.POLYGON, {\n                        showTooltips:true\n                    })\n                    break;\n                }\n                case \"徒手线\":{\n                    //激活绘图工具（徒手线）\n                    toolbar.activate(Draw.FREEHAND_POLYLINE, {\n                        showTooltips:true\n                    })\n                    break;\n                }\n                case \"徒手面\":{\n                    //激活绘图工具（徒手面）\n                    toolbar.activate(Draw.FREEHAND_POLYGON, {\n                        showTooltips:true\n                    })\n                    break;\n                }\n\n            }\n    });\n```\n给绘图工具绑定绘图完成事件\n```\non(toolbar,\"draw-complete\", function (result) {\n                //获得几何形状\n                var geometry=result.geometry;\n                //获得形状的类型\n                var type=geometry.type;\n                //声明图形对象\n                var graphic;\n                //通过几何形状的类型，创建不同的图形\n                switch (type) {\n                    case \"point\":\n                        graphic= new Graphic(geometry, marker);\n                        break;\n                    case \"polyline\":\n                        graphic= new Graphic(geometry, lineSymbol);\n                        break;\n                    case \"polygon\":\n                        graphic= new Graphic(geometry, fill);\n                        break;\n                }\n\n                map.graphics.add(graphic);\n                //关掉绘图工具\n                toolbar.deactivate();\n});\n```\n##### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>WebGIS</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\"dojo/dom\",\"dojo/on\",\n                    \"esri/layers/ArcGISDynamicMapServiceLayer\",\n                    \"dojo/query\",\"esri/toolbars/draw\",\n                    \"esri/symbols/SimpleLineSymbol\",\"esri/graphic\",\"esri/symbols/SimpleMarkerSymbol\", \"esri/symbols/SimpleFillSymbol\",\"dojo/domReady!\"],\n            function (Map,dom,on, ArcGISDynamicMapServiceLayer,query, Draw, SimpleLineSymbol,Graphic,SimpleMarkerSymbol,SimpleFillSymbol) {\n            var map = new esri.Map(\"MyMapDiv\");\n            var layer = new ArcGISDynamicMapServiceLayer\n            (\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\");\n            map.addLayer(layer)\n            var toolbar = new Draw(map, { showTooltips: true });\n\n            var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n            var marker= new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new dojo.Color([255, 0, 0]));\n            var fill= new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new dojo.Color([255, 0, 0]));\n            on(toolbar,\"draw-complete\", function (result) {\n                var geometry=result.geometry;\n                var type=geometry.type;\n                var graphic;\n                switch (type) {\n                    case \"point\":\n                        graphic= new Graphic(geometry, marker);\n                        break;\n                    case \"polyline\":\n                        graphic= new Graphic(geometry, lineSymbol);\n                        break;\n                    case \"polygon\":\n                        graphic= new Graphic(geometry, fill);\n                        break;\n                }\n\n                map.graphics.add(graphic);\n                toolbar.deactivate();\n            });\n           query(\"button\").on(\"click\",function(event){\n            var value=this.innerHTML;\n            switch(value){\n                case \"绘制点\":{\n                    toolbar.activate(Draw.POINT, {\n                        showTooltips:true\n                    })\n                    break;\n\n                }\n                case \"绘制折线\":{\n                    toolbar.activate(Draw.POLYLINE, {\n                        showTooltips:true\n                    })\n                    break;\n                }\n                case \"绘制面\":{\n                    toolbar.activate(Draw.POLYGON, {\n                        showTooltips:true\n                    })\n                    break;\n                }\n                case \"徒手线\":{\n                    toolbar.activate(Draw.FREEHAND_POLYLINE, {\n                        showTooltips:true\n                    })\n                    break;\n                }\n                case \"徒手面\":{\n                    toolbar.activate(Draw.FREEHAND_POLYGON, {\n                        showTooltips:true\n                    })\n                    break;\n                }\n\n            }\n           });\n        });\n\n\n    </script>\n</head>\n<body>\n    <div id=\"MyMapDiv\" class=\"MapClass\"></div>\n    <button>绘制点</button>\n    <button>绘制折线</button>\n    <button>绘制面</button>\n    <button>徒手线</button>\n    <button>徒手面</button>\n</body>\n</html>\n```\n##### 代码解释\n* 在使用绘图工具时，最主要的不同为：在激活绘图工具时的赋予的参数的不同。\n* graphic只是客户端图形，并不改变服务本身，如果想要改变服务本身的数据，需要使用要素服务，用到esri/toolbars/Edit工具。\n\n### 总结\n通过上面几个需求得知，在生成graphic时，最主要是有用这个图形的几何信息，几何信息可以通过多方面获得，例如：\n\n* 通过具体的坐标生成geometry（实现）\n* 通过draw工具动态获得geometry（实现）\n* 我们还可以通过map的点击事件获得点的geometry（可以尝试自己实现）。\n* 一旦拥有了图形的几何信息，我们就可以直接创建graphic，从而添加到地图中来\n","source":"_posts/ArcGIS-API-for-JS13.md","raw":"---\ntitle: ArcGIS API For Javascript之GraphicsLayer\ndate: 2019-08-06 15:10:35\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n在ArcGIS API中有一种图层叫做GraphicsLayer，GraphicsLayer是一种客户端图层，GraphicsLayer中的图形我们称作Graphic，它对应着 esri/graphic，一个Graphic对象由四部分组成：geometry,symbol,attribute,infoTemplate组成，Graphic对象在我们开发中用到的非常多。例如：利用Graphic实现图形的高亮显示等等。\n### 需求\n#### 根据具体坐标生成Graphic\n在我们的实际开发当中可能会存在这样的需求：根据坐标以及形状生成相应的图形然后在地图显示出来\n在上面说过一个Graphic由四部分组成，在需求中我们已经知道坐标形状，即已经知道了geometry,因此我们可以直接根据坐标生成相应的geometry，从而创建Graphic，然后添加到地图中来。\n##### 代码实现\n我们首先创建一个html页面，引入相应的文件将地图加载进来\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Graphic</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style>\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script>\n        require([\"esri/map\",\"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"dojo/domReady!\"],function(Map,ArcGISDynamicMapServiceLayer){\n            var map = new Map(\"mapDiv\");\n            var layer = new ArcGISDynamicMapServiceLayer\n            (\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\");\n            map.addLayer(layer);\n        })\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n</body>\n</html>\n```\n创建四个按钮，将四类不同的Graphic添加到GraphicsLayer中\n```\n<button>添加点</button>\n<button>添加线</button>\n<button>添加面</button>\n<button>添加圆</button>\n```\n引入相应的模块，其中包括：\ndojo/on（用于绑定事件的模块）\nesri/symbols/SimpleMarkerSymbol（点符号类）\nesri/symbols/SimpleLineSymbol（线符号类）\nesri/symbols/SimpleFillSymbol（面符号类）\nesri/geometry/Point（点类）\nesri/geometry/Polyline（折线类）\nesri/geometry/Polygon（面类）\nesri/geometry/Circle（圆类）\ndojo/query（dojo的选择器，用于选择DOM元素）\nesri/graphic（图形类）\nesri/layers/GraphicsLayer（客户端图层类）\n为相应的按钮添加绑定事件\n```\n            //创建客户端图层\n            var graphicsLayer=new GraphicsLayer();\n            //将客户端图层添加到地图中\n            map.addLayer(graphicsLayer);\n            //通过query查询到button对象\n            var btns=query(\"button\");\n\n            on(btns,\"click\",function(event){\n                //获得按钮的文本\n                var text=this.innerHTML;\n                //定义线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //定义点符号l\n                var pSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new Color([255, 0, 0]));\n                //定义面符号\n                var fill=SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new Color([255, 0, 0]));\n                //声明一个类型和图形\n                var geometry;\n                var graphic;\n                //根据文本定义相应的geometry\n                switch(text)\n                {\n                    case \"添加点\":\n                        geometry=new Point({\n                            \"x\":510706,\n                            \"y\":3986100,\n                            \"spatialReference\":map.spatialReference\n                        });\n                        graphic=new Graphic(geometry,pSymbol);\n                        break;\n                    case \"添加线\":\n                        //点的坐标对\n                         var  paths=[];\n                         paths[0]=[\n                            [510326,3985702],\n                            [510994, 3985676],\n                            [511078, 3985903],\n                            [510433, 3985928]\n                        ];\n                        geometry=new Polyline({\n                            \"paths\":paths,\n                            \"spatialReference\":map.spatialReference\n                        })\n                        graphic=new Graphic(geometry,lineSymbol);\n                        break;\n                    case \"添加面\":\n                        //点的坐标对\n                        var ring=[];\n                        ring[0]=[\n                            [510275, 3986100],\n                            [510508, 3986162],\n                            [510596, 3986032],\n                            [510271, 3985847],\n                            [510275, 3986100]\n                        ];\n                        geometry=new Polygon({\n                            \"rings\":ring,\n                            \"spatialReference\":map.spatialReference\n                        });\n                        graphic=new Graphic(geometry,fill);\n                        break;\n                    case \"添加圆\":\n                        //圆心\n                        var p=new Point({\n                            \"x\":510706,\n                            \"y\":3986100,\n                            \"spatialReference\":map.spatialReference\n                        });\n                        //半径\n                        var r=20;\n                        geometry=new Circle(p,{\n                            \"radius\":r\n                        });\n                        graphic=new Graphic(geometry,fill);\n                        break;\n                }\n                //将图形添加到图层中\n                graphicsLayer.add(graphic);\n```\n##### 全部代码\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Graphic</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style>\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script>\n        require([\"esri/map\",\"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/layers/GraphicsLayer\",\n            \"dojo/on\",\"dojo/query\",\"dojo/colors\",\n            \"esri/graphic\",\"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/symbols/SimpleFillSymbol\",\n            \"esri/geometry/Point\",\n            \"esri/geometry/Polyline\",\"esri/geometry/Polygon\",\n            \"esri/geometry/Circle\",\n            \"dojo/domReady!\"],\n                function(Map,ArcGISDynamicMapServiceLayer,\n                         GraphicsLayer,on,query,Color,Graphic,\n                         SimpleMarkerSymbol,SimpleLineSymbol,\n                         SimpleFillSymbol,Point,Polyline,Polygon,Circle){\n            var map = new Map(\"mapDiv\");\n            var layer = new ArcGISDynamicMapServiceLayer\n            (\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\");\n            map.addLayer(layer);\n            //创建客户端图层\n            var graphicsLayer=new GraphicsLayer();\n            //将客户端图层添加到地图中\n            map.addLayer(graphicsLayer);\n            //通过query查询到button对象\n            var btns=query(\"button\");\n\n            on(btns,\"click\",function(event){\n                //获得按钮的文本\n                var text=this.innerHTML;\n                //定义线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //定义点符号l\n                var pSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new Color([255, 0, 0]));\n                //定义面符号\n                var fill=SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new Color([255, 0, 0]));\n                //声明一个类型和图形\n                var geometry;\n                var graphic;\n                //根据文本定义相应的geometry\n                switch(text)\n                {\n                    case \"添加点\":\n                        geometry=new Point({\n                            \"x\":510706,\n                            \"y\":3986100,\n                            \"spatialReference\":map.spatialReference\n                        });\n                        graphic=new Graphic(geometry,pSymbol);\n                        break;\n                    case \"添加线\":\n                        //点的坐标对\n                         var  paths=[];\n                         paths[0]=[\n                            [510326,3985702],\n                            [510994, 3985676],\n                            [511078, 3985903],\n                            [510433, 3985928]\n                        ];\n                        geometry=new Polyline({\n                            \"paths\":paths,\n                            \"spatialReference\":map.spatialReference\n                        })\n                        graphic=new Graphic(geometry,lineSymbol);\n                        break;\n                    case \"添加面\":\n                        //点的坐标对\n                        var ring=[];\n                        ring[0]=[\n                            [510275, 3986100],\n                            [510508, 3986162],\n                            [510596, 3986032],\n                            [510271, 3985847],\n                            [510275, 3986100]\n                        ];\n                        geometry=new Polygon({\n                            \"rings\":ring,\n                            \"spatialReference\":map.spatialReference\n                        });\n                        graphic=new Graphic(geometry,fill);\n                        break;\n                    case \"添加圆\":\n                        //圆心\n                        var p=new Point({\n                            \"x\":510706,\n                            \"y\":3986100,\n                            \"spatialReference\":map.spatialReference\n                        });\n                        //半径\n                        var r=20;\n                        geometry=new Circle(p,{\n                            \"radius\":r\n                        });\n                        graphic=new Graphic(geometry,fill);\n                        break;\n                }\n                //将图形添加到图层中\n                graphicsLayer.add(graphic);\n            })\n        })\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n    <button>添加点</button>\n    <button>添加线</button>\n    <button>添加面</button>\n    <button>添加圆</button>\n</body>\n</html>\n```\n##### 代码解释\n* 我们利用dojo/query查询到所有的button对象，利用dojo/on模块给所有的button对象绑定事件。\n* 在此例子中，有一个缺点：便是将点的坐标写死了，因此我们可以将点的坐标存放在一个json文件中，从而读取文件生成相应的点坐标\n\n#### GraphicsLayer的属性查询\n在前面我们提到过，Graphic是可以存在属性的，在实际开发当中，有时我们需要将相应的属性查询出来，在此时我提供一个简单的方法，便是根据 GraphicsLayer的点击事件来查询Graphic的属性。\n##### 代码实现\n首先我们添加一系列带有属性的Graphic（此处我们只用点图形便可以）\n```\n//创建客户端图层\n            var graphicsLayer=new GraphicsLayer();\n            //将客户端图层添加到地图中\n            map.addLayer(graphicsLayer);\n            //添加点图形的函数\n            function addGraphic()\n            {\n                //定义线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //定义点符号l\n                var pSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new Color([255, 0, 0]));\n                //声明形状\n                var geometry;\n                //声明和图形\n                var graphic;\n                //添加第一个点图形\n                geometry=new Point({\n                    \"x\":510706,\n                    \"y\":3986100,\n                    \"spatialReference\":map.spatialReference,\n                    attributes:{\n                        \"h\":100\n                    }\n                });\n                graphic=new Graphic(geometry,pSymbol);\n                graphicsLayer.add(graphic);\n                //添加第二个点图形\n                geometry=new Point({\n                    \"x\":510326,\n                    \"y\":3985702,\n                    \"spatialReference\":map.spatialReference,\n                    attributes:{\n                        \"h\":200\n                    }\n                });\n                graphic=new Graphic(geometry,pSymbol);\n                graphicsLayer.add(graphic);\n                //添加第三个点图形\n                geometry=new Point({\n                    \"x\":510275,\n                    \"y\":3986100,\n                    \"spatialReference\":map.spatialReference,\n                    attributes:{\n                        \"h\":300\n                    }\n                });\n                graphic=new Graphic(geometry,pSymbol);\n                graphicsLayer.add(graphic);\n            }\n            //调用添加点图形的函数\n            addGraphic();\n```\n给GraphicsLayer绑定相应的事件\n```\n    //绑定事件\n            on(graphicsLayer,\"click\",function(event){\n                var graphic=event.graphic;\n                alert(graphic.attributes[\"h\"]);\n            })\n```\n##### 全部代码\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Graphic</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style>\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script>\n        require([\"esri/map\",\"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/layers/GraphicsLayer\",\n            \"dojo/on\",\"dojo/query\",\"dojo/colors\",\n            \"esri/graphic\",\"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/geometry/Point\",\n                    \"dojo/domReady!\"],\n                function(Map,ArcGISDynamicMapServiceLayer,\n                         GraphicsLayer,on,query,Color,Graphic,\n                         SimpleMarkerSymbol,SimpleLineSymbol,Point){\n            var map = new Map(\"mapDiv\");\n            var layer = new ArcGISDynamicMapServiceLayer\n            (\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\");\n            map.addLayer(layer);\n            //创建客户端图层\n            var graphicsLayer=new GraphicsLayer();\n            //将客户端图层添加到地图中\n            map.addLayer(graphicsLayer);\n            //添加点图形的函数\n            function addGraphic()\n            {\n                //定义线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //定义点符号l\n                var pSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new Color([255, 0, 0]));\n                //声明形状\n                var geometry;\n                //声明和图形\n                var graphic;\n                //添加第一个点图形\n                geometry=new Point({\n                    \"x\":510706,\n                    \"y\":3986100,\n                    \"spatialReference\":map.spatialReference,\n                    attributes:{\n                        \"h\":100\n                    }\n                });\n                graphic=new Graphic(geometry,pSymbol);\n                graphicsLayer.add(graphic);\n                //添加第二个点图形\n                geometry=new Point({\n                    \"x\":510326,\n                    \"y\":3985702,\n                    \"spatialReference\":map.spatialReference,\n                    attributes:{\n                        \"h\":200\n                    }\n                });\n                graphic=new Graphic(geometry,pSymbol);\n                graphicsLayer.add(graphic);\n                //添加第三个点图形\n                geometry=new Point({\n                    \"x\":510275,\n                    \"y\":3986100,\n                    \"spatialReference\":map.spatialReference,\n                    attributes:{\n                        \"h\":300\n                    }\n                });\n                graphic=new Graphic(geometry,pSymbol);\n                graphicsLayer.add(graphic);\n            }\n            //调用添加点图形的函数\n            addGraphic();\n            //绑定事件\n            on(graphicsLayer,\"click\",function(event){\n                var graphic=event.graphic;\n                alert(graphic.attributes[\"h\"]);\n            })\n\n\n        })\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n</body>\n</html>\n```\n##### 代码解释\n* 需要注意的是graphicsLayer的事件机制是针对于graphic图形的,也就是当图形graphic被点击时被触发，此时回调函数也会将那个图形被点击传给我们，从而得到图形的属性\n* 有的同学不太喜欢新建一个graphicsLayer,而是使用map.graphics.add()方法添加一个图形graphic，其实原理是一样的，因为map本身有一个默认的graphicsLayer即：map.graphics返回的便是一个graphicsLayer对象\n* 在此代码当中我们只是将获得到的属性信息alert了一下，在真实需求当中我们可能会利用相应的属性信息做很多的事情。\n\n#### 实现用户交互画图（Draw工具）\n在部分项目中，有这么一个需求：让用户在地图上自己绘制一个图形，然后将图形添加到地图当中，要实现这个功能我们需要借助esri提供给我们的工具条实现：esri/toolbars/draw，利用该工具条我们可以得到用户交互画出来的geometry,从而根据geometry生成相应的graphic，使用该工具的一般步骤为：\n\n1.创建绘图对象\n2.激活绘图工具\n3.得到图形Geometry\n4.创建Graphic\n5.添加到地图\n##### 代码实现\n创建5个button（和第一个例子一样）\n创建绘图对象\n```\nvar toolbar = new Draw(map, { showTooltips: true });\n```\n给每一个button绑定相应的事件（激活绘图工具）\n```\nquery(\"button\").on(\"click\",function(event){\n            var value=this.innerHTML;\n            switch(value){\n                case \"绘制点\":{\n                    //激活绘图工具（画点）\n                    toolbar.activate(Draw.POINT, {\n                        showTooltips:true\n                    })\n                    break;\n\n                }\n                case \"绘制折线\":{\n                     //激活绘图工具（画折线）\n                    toolbar.activate(Draw.POLYLINE, {\n                        showTooltips:true\n                    })\n                    break;\n                }\n                case \"绘制面\":{\n                    //激活绘图工具（绘制面）\n                    toolbar.activate(Draw.POLYGON, {\n                        showTooltips:true\n                    })\n                    break;\n                }\n                case \"徒手线\":{\n                    //激活绘图工具（徒手线）\n                    toolbar.activate(Draw.FREEHAND_POLYLINE, {\n                        showTooltips:true\n                    })\n                    break;\n                }\n                case \"徒手面\":{\n                    //激活绘图工具（徒手面）\n                    toolbar.activate(Draw.FREEHAND_POLYGON, {\n                        showTooltips:true\n                    })\n                    break;\n                }\n\n            }\n    });\n```\n给绘图工具绑定绘图完成事件\n```\non(toolbar,\"draw-complete\", function (result) {\n                //获得几何形状\n                var geometry=result.geometry;\n                //获得形状的类型\n                var type=geometry.type;\n                //声明图形对象\n                var graphic;\n                //通过几何形状的类型，创建不同的图形\n                switch (type) {\n                    case \"point\":\n                        graphic= new Graphic(geometry, marker);\n                        break;\n                    case \"polyline\":\n                        graphic= new Graphic(geometry, lineSymbol);\n                        break;\n                    case \"polygon\":\n                        graphic= new Graphic(geometry, fill);\n                        break;\n                }\n\n                map.graphics.add(graphic);\n                //关掉绘图工具\n                toolbar.deactivate();\n});\n```\n##### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>WebGIS</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\"dojo/dom\",\"dojo/on\",\n                    \"esri/layers/ArcGISDynamicMapServiceLayer\",\n                    \"dojo/query\",\"esri/toolbars/draw\",\n                    \"esri/symbols/SimpleLineSymbol\",\"esri/graphic\",\"esri/symbols/SimpleMarkerSymbol\", \"esri/symbols/SimpleFillSymbol\",\"dojo/domReady!\"],\n            function (Map,dom,on, ArcGISDynamicMapServiceLayer,query, Draw, SimpleLineSymbol,Graphic,SimpleMarkerSymbol,SimpleFillSymbol) {\n            var map = new esri.Map(\"MyMapDiv\");\n            var layer = new ArcGISDynamicMapServiceLayer\n            (\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\");\n            map.addLayer(layer)\n            var toolbar = new Draw(map, { showTooltips: true });\n\n            var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n            var marker= new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new dojo.Color([255, 0, 0]));\n            var fill= new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new dojo.Color([255, 0, 0]));\n            on(toolbar,\"draw-complete\", function (result) {\n                var geometry=result.geometry;\n                var type=geometry.type;\n                var graphic;\n                switch (type) {\n                    case \"point\":\n                        graphic= new Graphic(geometry, marker);\n                        break;\n                    case \"polyline\":\n                        graphic= new Graphic(geometry, lineSymbol);\n                        break;\n                    case \"polygon\":\n                        graphic= new Graphic(geometry, fill);\n                        break;\n                }\n\n                map.graphics.add(graphic);\n                toolbar.deactivate();\n            });\n           query(\"button\").on(\"click\",function(event){\n            var value=this.innerHTML;\n            switch(value){\n                case \"绘制点\":{\n                    toolbar.activate(Draw.POINT, {\n                        showTooltips:true\n                    })\n                    break;\n\n                }\n                case \"绘制折线\":{\n                    toolbar.activate(Draw.POLYLINE, {\n                        showTooltips:true\n                    })\n                    break;\n                }\n                case \"绘制面\":{\n                    toolbar.activate(Draw.POLYGON, {\n                        showTooltips:true\n                    })\n                    break;\n                }\n                case \"徒手线\":{\n                    toolbar.activate(Draw.FREEHAND_POLYLINE, {\n                        showTooltips:true\n                    })\n                    break;\n                }\n                case \"徒手面\":{\n                    toolbar.activate(Draw.FREEHAND_POLYGON, {\n                        showTooltips:true\n                    })\n                    break;\n                }\n\n            }\n           });\n        });\n\n\n    </script>\n</head>\n<body>\n    <div id=\"MyMapDiv\" class=\"MapClass\"></div>\n    <button>绘制点</button>\n    <button>绘制折线</button>\n    <button>绘制面</button>\n    <button>徒手线</button>\n    <button>徒手面</button>\n</body>\n</html>\n```\n##### 代码解释\n* 在使用绘图工具时，最主要的不同为：在激活绘图工具时的赋予的参数的不同。\n* graphic只是客户端图形，并不改变服务本身，如果想要改变服务本身的数据，需要使用要素服务，用到esri/toolbars/Edit工具。\n\n### 总结\n通过上面几个需求得知，在生成graphic时，最主要是有用这个图形的几何信息，几何信息可以通过多方面获得，例如：\n\n* 通过具体的坐标生成geometry（实现）\n* 通过draw工具动态获得geometry（实现）\n* 我们还可以通过map的点击事件获得点的geometry（可以尝试自己实现）。\n* 一旦拥有了图形的几何信息，我们就可以直接创建graphic，从而添加到地图中来\n","slug":"ArcGIS-API-for-JS13","published":1,"updated":"2019-08-06T07:24:53.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5ctd000tt09z5tm7vv51","content":"<p>在ArcGIS API中有一种图层叫做GraphicsLayer，GraphicsLayer是一种客户端图层，GraphicsLayer中的图形我们称作Graphic，它对应着 esri/graphic，一个Graphic对象由四部分组成：geometry,symbol,attribute,infoTemplate组成，Graphic对象在我们开发中用到的非常多。例如：利用Graphic实现图形的高亮显示等等。</p>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><h4 id=\"根据具体坐标生成Graphic\"><a href=\"#根据具体坐标生成Graphic\" class=\"headerlink\" title=\"根据具体坐标生成Graphic\"></a>根据具体坐标生成Graphic</h4><p>在我们的实际开发当中可能会存在这样的需求：根据坐标以及形状生成相应的图形然后在地图显示出来<br>在上面说过一个Graphic由四部分组成，在需求中我们已经知道坐标形状，即已经知道了geometry,因此我们可以直接根据坐标生成相应的geometry，从而创建Graphic，然后添加到地图中来。</p>\n<h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><p>我们首先创建一个html页面，引入相应的文件将地图加载进来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Graphic&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],function(Map,ArcGISDynamicMapServiceLayer)&#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">            var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">            (&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;);</span><br><span class=\"line\">            map.addLayer(layer);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建四个按钮，将四类不同的Graphic添加到GraphicsLayer中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button&gt;添加点&lt;/button&gt;</span><br><span class=\"line\">&lt;button&gt;添加线&lt;/button&gt;</span><br><span class=\"line\">&lt;button&gt;添加面&lt;/button&gt;</span><br><span class=\"line\">&lt;button&gt;添加圆&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>引入相应的模块，其中包括：<br>dojo/on（用于绑定事件的模块）<br>esri/symbols/SimpleMarkerSymbol（点符号类）<br>esri/symbols/SimpleLineSymbol（线符号类）<br>esri/symbols/SimpleFillSymbol（面符号类）<br>esri/geometry/Point（点类）<br>esri/geometry/Polyline（折线类）<br>esri/geometry/Polygon（面类）<br>esri/geometry/Circle（圆类）<br>dojo/query（dojo的选择器，用于选择DOM元素）<br>esri/graphic（图形类）<br>esri/layers/GraphicsLayer（客户端图层类）<br>为相应的按钮添加绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建客户端图层</span><br><span class=\"line\">var graphicsLayer=new GraphicsLayer();</span><br><span class=\"line\">//将客户端图层添加到地图中</span><br><span class=\"line\">map.addLayer(graphicsLayer);</span><br><span class=\"line\">//通过query查询到button对象</span><br><span class=\"line\">var btns=query(&quot;button&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">on(btns,&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">    //获得按钮的文本</span><br><span class=\"line\">    var text=this.innerHTML;</span><br><span class=\"line\">    //定义线符号</span><br><span class=\"line\">    var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">    //定义点符号l</span><br><span class=\"line\">    var pSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new Color([255, 0, 0]));</span><br><span class=\"line\">    //定义面符号</span><br><span class=\"line\">    var fill=SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new Color([255, 0, 0]));</span><br><span class=\"line\">    //声明一个类型和图形</span><br><span class=\"line\">    var geometry;</span><br><span class=\"line\">    var graphic;</span><br><span class=\"line\">    //根据文本定义相应的geometry</span><br><span class=\"line\">    switch(text)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        case &quot;添加点&quot;:</span><br><span class=\"line\">            geometry=new Point(&#123;</span><br><span class=\"line\">                &quot;x&quot;:510706,</span><br><span class=\"line\">                &quot;y&quot;:3986100,</span><br><span class=\"line\">                &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            graphic=new Graphic(geometry,pSymbol);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case &quot;添加线&quot;:</span><br><span class=\"line\">            //点的坐标对</span><br><span class=\"line\">             var  paths=[];</span><br><span class=\"line\">             paths[0]=[</span><br><span class=\"line\">                [510326,3985702],</span><br><span class=\"line\">                [510994, 3985676],</span><br><span class=\"line\">                [511078, 3985903],</span><br><span class=\"line\">                [510433, 3985928]</span><br><span class=\"line\">            ];</span><br><span class=\"line\">            geometry=new Polyline(&#123;</span><br><span class=\"line\">                &quot;paths&quot;:paths,</span><br><span class=\"line\">                &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            graphic=new Graphic(geometry,lineSymbol);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case &quot;添加面&quot;:</span><br><span class=\"line\">            //点的坐标对</span><br><span class=\"line\">            var ring=[];</span><br><span class=\"line\">            ring[0]=[</span><br><span class=\"line\">                [510275, 3986100],</span><br><span class=\"line\">                [510508, 3986162],</span><br><span class=\"line\">                [510596, 3986032],</span><br><span class=\"line\">                [510271, 3985847],</span><br><span class=\"line\">                [510275, 3986100]</span><br><span class=\"line\">            ];</span><br><span class=\"line\">            geometry=new Polygon(&#123;</span><br><span class=\"line\">                &quot;rings&quot;:ring,</span><br><span class=\"line\">                &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            graphic=new Graphic(geometry,fill);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case &quot;添加圆&quot;:</span><br><span class=\"line\">            //圆心</span><br><span class=\"line\">            var p=new Point(&#123;</span><br><span class=\"line\">                &quot;x&quot;:510706,</span><br><span class=\"line\">                &quot;y&quot;:3986100,</span><br><span class=\"line\">                &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            //半径</span><br><span class=\"line\">            var r=20;</span><br><span class=\"line\">            geometry=new Circle(p,&#123;</span><br><span class=\"line\">                &quot;radius&quot;:r</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            graphic=new Graphic(geometry,fill);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //将图形添加到图层中</span><br><span class=\"line\">    graphicsLayer.add(graphic);</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Graphic&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/GraphicsLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,&quot;dojo/query&quot;,&quot;dojo/colors&quot;,</span><br><span class=\"line\">            &quot;esri/graphic&quot;,&quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/geometry/Point&quot;,</span><br><span class=\"line\">            &quot;esri/geometry/Polyline&quot;,&quot;esri/geometry/Polygon&quot;,</span><br><span class=\"line\">            &quot;esri/geometry/Circle&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function(Map,ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                         GraphicsLayer,on,query,Color,Graphic,</span><br><span class=\"line\">                         SimpleMarkerSymbol,SimpleLineSymbol,</span><br><span class=\"line\">                         SimpleFillSymbol,Point,Polyline,Polygon,Circle)&#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">            var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">            (&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;);</span><br><span class=\"line\">            map.addLayer(layer);</span><br><span class=\"line\">            //创建客户端图层</span><br><span class=\"line\">            var graphicsLayer=new GraphicsLayer();</span><br><span class=\"line\">            //将客户端图层添加到地图中</span><br><span class=\"line\">            map.addLayer(graphicsLayer);</span><br><span class=\"line\">            //通过query查询到button对象</span><br><span class=\"line\">            var btns=query(&quot;button&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            on(btns,&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                //获得按钮的文本</span><br><span class=\"line\">                var text=this.innerHTML;</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义点符号l</span><br><span class=\"line\">                var pSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new Color([255, 0, 0]));</span><br><span class=\"line\">                //定义面符号</span><br><span class=\"line\">                var fill=SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new Color([255, 0, 0]));</span><br><span class=\"line\">                //声明一个类型和图形</span><br><span class=\"line\">                var geometry;</span><br><span class=\"line\">                var graphic;</span><br><span class=\"line\">                //根据文本定义相应的geometry</span><br><span class=\"line\">                switch(text)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    case &quot;添加点&quot;:</span><br><span class=\"line\">                        geometry=new Point(&#123;</span><br><span class=\"line\">                            &quot;x&quot;:510706,</span><br><span class=\"line\">                            &quot;y&quot;:3986100,</span><br><span class=\"line\">                            &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        graphic=new Graphic(geometry,pSymbol);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;添加线&quot;:</span><br><span class=\"line\">                        //点的坐标对</span><br><span class=\"line\">                         var  paths=[];</span><br><span class=\"line\">                         paths[0]=[</span><br><span class=\"line\">                            [510326,3985702],</span><br><span class=\"line\">                            [510994, 3985676],</span><br><span class=\"line\">                            [511078, 3985903],</span><br><span class=\"line\">                            [510433, 3985928]</span><br><span class=\"line\">                        ];</span><br><span class=\"line\">                        geometry=new Polyline(&#123;</span><br><span class=\"line\">                            &quot;paths&quot;:paths,</span><br><span class=\"line\">                            &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        graphic=new Graphic(geometry,lineSymbol);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;添加面&quot;:</span><br><span class=\"line\">                        //点的坐标对</span><br><span class=\"line\">                        var ring=[];</span><br><span class=\"line\">                        ring[0]=[</span><br><span class=\"line\">                            [510275, 3986100],</span><br><span class=\"line\">                            [510508, 3986162],</span><br><span class=\"line\">                            [510596, 3986032],</span><br><span class=\"line\">                            [510271, 3985847],</span><br><span class=\"line\">                            [510275, 3986100]</span><br><span class=\"line\">                        ];</span><br><span class=\"line\">                        geometry=new Polygon(&#123;</span><br><span class=\"line\">                            &quot;rings&quot;:ring,</span><br><span class=\"line\">                            &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        graphic=new Graphic(geometry,fill);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;添加圆&quot;:</span><br><span class=\"line\">                        //圆心</span><br><span class=\"line\">                        var p=new Point(&#123;</span><br><span class=\"line\">                            &quot;x&quot;:510706,</span><br><span class=\"line\">                            &quot;y&quot;:3986100,</span><br><span class=\"line\">                            &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        //半径</span><br><span class=\"line\">                        var r=20;</span><br><span class=\"line\">                        geometry=new Circle(p,&#123;</span><br><span class=\"line\">                            &quot;radius&quot;:r</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        graphic=new Graphic(geometry,fill);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //将图形添加到图层中</span><br><span class=\"line\">                graphicsLayer.add(graphic);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;button&gt;添加点&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;添加线&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;添加面&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;添加圆&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h5><ul>\n<li>我们利用dojo/query查询到所有的button对象，利用dojo/on模块给所有的button对象绑定事件。</li>\n<li>在此例子中，有一个缺点：便是将点的坐标写死了，因此我们可以将点的坐标存放在一个json文件中，从而读取文件生成相应的点坐标</li>\n</ul>\n<h4 id=\"GraphicsLayer的属性查询\"><a href=\"#GraphicsLayer的属性查询\" class=\"headerlink\" title=\"GraphicsLayer的属性查询\"></a>GraphicsLayer的属性查询</h4><p>在前面我们提到过，Graphic是可以存在属性的，在实际开发当中，有时我们需要将相应的属性查询出来，在此时我提供一个简单的方法，便是根据 GraphicsLayer的点击事件来查询Graphic的属性。</p>\n<h5 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><p>首先我们添加一系列带有属性的Graphic（此处我们只用点图形便可以）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建客户端图层</span><br><span class=\"line\">            var graphicsLayer=new GraphicsLayer();</span><br><span class=\"line\">            //将客户端图层添加到地图中</span><br><span class=\"line\">            map.addLayer(graphicsLayer);</span><br><span class=\"line\">            //添加点图形的函数</span><br><span class=\"line\">            function addGraphic()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义点符号l</span><br><span class=\"line\">                var pSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new Color([255, 0, 0]));</span><br><span class=\"line\">                //声明形状</span><br><span class=\"line\">                var geometry;</span><br><span class=\"line\">                //声明和图形</span><br><span class=\"line\">                var graphic;</span><br><span class=\"line\">                //添加第一个点图形</span><br><span class=\"line\">                geometry=new Point(&#123;</span><br><span class=\"line\">                    &quot;x&quot;:510706,</span><br><span class=\"line\">                    &quot;y&quot;:3986100,</span><br><span class=\"line\">                    &quot;spatialReference&quot;:map.spatialReference,</span><br><span class=\"line\">                    attributes:&#123;</span><br><span class=\"line\">                        &quot;h&quot;:100</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                graphic=new Graphic(geometry,pSymbol);</span><br><span class=\"line\">                graphicsLayer.add(graphic);</span><br><span class=\"line\">                //添加第二个点图形</span><br><span class=\"line\">                geometry=new Point(&#123;</span><br><span class=\"line\">                    &quot;x&quot;:510326,</span><br><span class=\"line\">                    &quot;y&quot;:3985702,</span><br><span class=\"line\">                    &quot;spatialReference&quot;:map.spatialReference,</span><br><span class=\"line\">                    attributes:&#123;</span><br><span class=\"line\">                        &quot;h&quot;:200</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                graphic=new Graphic(geometry,pSymbol);</span><br><span class=\"line\">                graphicsLayer.add(graphic);</span><br><span class=\"line\">                //添加第三个点图形</span><br><span class=\"line\">                geometry=new Point(&#123;</span><br><span class=\"line\">                    &quot;x&quot;:510275,</span><br><span class=\"line\">                    &quot;y&quot;:3986100,</span><br><span class=\"line\">                    &quot;spatialReference&quot;:map.spatialReference,</span><br><span class=\"line\">                    attributes:&#123;</span><br><span class=\"line\">                        &quot;h&quot;:300</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                graphic=new Graphic(geometry,pSymbol);</span><br><span class=\"line\">                graphicsLayer.add(graphic);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //调用添加点图形的函数</span><br><span class=\"line\">            addGraphic();</span><br></pre></td></tr></table></figure></p>\n<p>给GraphicsLayer绑定相应的事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//绑定事件</span><br><span class=\"line\">        on(graphicsLayer,&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">            var graphic=event.graphic;</span><br><span class=\"line\">            alert(graphic.attributes[&quot;h&quot;]);</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"全部代码-1\"><a href=\"#全部代码-1\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Graphic&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/GraphicsLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,&quot;dojo/query&quot;,&quot;dojo/colors&quot;,</span><br><span class=\"line\">            &quot;esri/graphic&quot;,&quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/geometry/Point&quot;,</span><br><span class=\"line\">                    &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function(Map,ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                         GraphicsLayer,on,query,Color,Graphic,</span><br><span class=\"line\">                         SimpleMarkerSymbol,SimpleLineSymbol,Point)&#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">            var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">            (&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;);</span><br><span class=\"line\">            map.addLayer(layer);</span><br><span class=\"line\">            //创建客户端图层</span><br><span class=\"line\">            var graphicsLayer=new GraphicsLayer();</span><br><span class=\"line\">            //将客户端图层添加到地图中</span><br><span class=\"line\">            map.addLayer(graphicsLayer);</span><br><span class=\"line\">            //添加点图形的函数</span><br><span class=\"line\">            function addGraphic()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义点符号l</span><br><span class=\"line\">                var pSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new Color([255, 0, 0]));</span><br><span class=\"line\">                //声明形状</span><br><span class=\"line\">                var geometry;</span><br><span class=\"line\">                //声明和图形</span><br><span class=\"line\">                var graphic;</span><br><span class=\"line\">                //添加第一个点图形</span><br><span class=\"line\">                geometry=new Point(&#123;</span><br><span class=\"line\">                    &quot;x&quot;:510706,</span><br><span class=\"line\">                    &quot;y&quot;:3986100,</span><br><span class=\"line\">                    &quot;spatialReference&quot;:map.spatialReference,</span><br><span class=\"line\">                    attributes:&#123;</span><br><span class=\"line\">                        &quot;h&quot;:100</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                graphic=new Graphic(geometry,pSymbol);</span><br><span class=\"line\">                graphicsLayer.add(graphic);</span><br><span class=\"line\">                //添加第二个点图形</span><br><span class=\"line\">                geometry=new Point(&#123;</span><br><span class=\"line\">                    &quot;x&quot;:510326,</span><br><span class=\"line\">                    &quot;y&quot;:3985702,</span><br><span class=\"line\">                    &quot;spatialReference&quot;:map.spatialReference,</span><br><span class=\"line\">                    attributes:&#123;</span><br><span class=\"line\">                        &quot;h&quot;:200</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                graphic=new Graphic(geometry,pSymbol);</span><br><span class=\"line\">                graphicsLayer.add(graphic);</span><br><span class=\"line\">                //添加第三个点图形</span><br><span class=\"line\">                geometry=new Point(&#123;</span><br><span class=\"line\">                    &quot;x&quot;:510275,</span><br><span class=\"line\">                    &quot;y&quot;:3986100,</span><br><span class=\"line\">                    &quot;spatialReference&quot;:map.spatialReference,</span><br><span class=\"line\">                    attributes:&#123;</span><br><span class=\"line\">                        &quot;h&quot;:300</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                graphic=new Graphic(geometry,pSymbol);</span><br><span class=\"line\">                graphicsLayer.add(graphic);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //调用添加点图形的函数</span><br><span class=\"line\">            addGraphic();</span><br><span class=\"line\">            //绑定事件</span><br><span class=\"line\">            on(graphicsLayer,&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                var graphic=event.graphic;</span><br><span class=\"line\">                alert(graphic.attributes[&quot;h&quot;]);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"代码解释-1\"><a href=\"#代码解释-1\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h5><ul>\n<li>需要注意的是graphicsLayer的事件机制是针对于graphic图形的,也就是当图形graphic被点击时被触发，此时回调函数也会将那个图形被点击传给我们，从而得到图形的属性</li>\n<li>有的同学不太喜欢新建一个graphicsLayer,而是使用map.graphics.add()方法添加一个图形graphic，其实原理是一样的，因为map本身有一个默认的graphicsLayer即：map.graphics返回的便是一个graphicsLayer对象</li>\n<li>在此代码当中我们只是将获得到的属性信息alert了一下，在真实需求当中我们可能会利用相应的属性信息做很多的事情。</li>\n</ul>\n<h4 id=\"实现用户交互画图（Draw工具）\"><a href=\"#实现用户交互画图（Draw工具）\" class=\"headerlink\" title=\"实现用户交互画图（Draw工具）\"></a>实现用户交互画图（Draw工具）</h4><p>在部分项目中，有这么一个需求：让用户在地图上自己绘制一个图形，然后将图形添加到地图当中，要实现这个功能我们需要借助esri提供给我们的工具条实现：esri/toolbars/draw，利用该工具条我们可以得到用户交互画出来的geometry,从而根据geometry生成相应的graphic，使用该工具的一般步骤为：</p>\n<p>1.创建绘图对象<br>2.激活绘图工具<br>3.得到图形Geometry<br>4.创建Graphic<br>5.添加到地图</p>\n<h5 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><p>创建5个button（和第一个例子一样）<br>创建绘图对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var toolbar = new Draw(map, &#123; showTooltips: true &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>给每一个button绑定相应的事件（激活绘图工具）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query(&quot;button&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">            var value=this.innerHTML;</span><br><span class=\"line\">            switch(value)&#123;</span><br><span class=\"line\">                case &quot;绘制点&quot;:&#123;</span><br><span class=\"line\">                    //激活绘图工具（画点）</span><br><span class=\"line\">                    toolbar.activate(Draw.POINT, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                case &quot;绘制折线&quot;:&#123;</span><br><span class=\"line\">                     //激活绘图工具（画折线）</span><br><span class=\"line\">                    toolbar.activate(Draw.POLYLINE, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                case &quot;绘制面&quot;:&#123;</span><br><span class=\"line\">                    //激活绘图工具（绘制面）</span><br><span class=\"line\">                    toolbar.activate(Draw.POLYGON, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                case &quot;徒手线&quot;:&#123;</span><br><span class=\"line\">                    //激活绘图工具（徒手线）</span><br><span class=\"line\">                    toolbar.activate(Draw.FREEHAND_POLYLINE, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                case &quot;徒手面&quot;:&#123;</span><br><span class=\"line\">                    //激活绘图工具（徒手面）</span><br><span class=\"line\">                    toolbar.activate(Draw.FREEHAND_POLYGON, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>给绘图工具绑定绘图完成事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(toolbar,&quot;draw-complete&quot;, function (result) &#123;</span><br><span class=\"line\">                //获得几何形状</span><br><span class=\"line\">                var geometry=result.geometry;</span><br><span class=\"line\">                //获得形状的类型</span><br><span class=\"line\">                var type=geometry.type;</span><br><span class=\"line\">                //声明图形对象</span><br><span class=\"line\">                var graphic;</span><br><span class=\"line\">                //通过几何形状的类型，创建不同的图形</span><br><span class=\"line\">                switch (type) &#123;</span><br><span class=\"line\">                    case &quot;point&quot;:</span><br><span class=\"line\">                        graphic= new Graphic(geometry, marker);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;polyline&quot;:</span><br><span class=\"line\">                        graphic= new Graphic(geometry, lineSymbol);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;polygon&quot;:</span><br><span class=\"line\">                        graphic= new Graphic(geometry, fill);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                map.graphics.add(graphic);</span><br><span class=\"line\">                //关掉绘图工具</span><br><span class=\"line\">                toolbar.deactivate();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"全部代码-2\"><a href=\"#全部代码-2\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;WebGIS&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;dojo/dom&quot;,&quot;dojo/on&quot;,</span><br><span class=\"line\">                    &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">                    &quot;dojo/query&quot;,&quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">                    &quot;esri/symbols/SimpleLineSymbol&quot;,&quot;esri/graphic&quot;,&quot;esri/symbols/SimpleMarkerSymbol&quot;, &quot;esri/symbols/SimpleFillSymbol&quot;,&quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map,dom,on, ArcGISDynamicMapServiceLayer,query, Draw, SimpleLineSymbol,Graphic,SimpleMarkerSymbol,SimpleFillSymbol) &#123;</span><br><span class=\"line\">            var map = new esri.Map(&quot;MyMapDiv&quot;);</span><br><span class=\"line\">            var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">            (&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;);</span><br><span class=\"line\">            map.addLayer(layer)</span><br><span class=\"line\">            var toolbar = new Draw(map, &#123; showTooltips: true &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">            var marker= new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new dojo.Color([255, 0, 0]));</span><br><span class=\"line\">            var fill= new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new dojo.Color([255, 0, 0]));</span><br><span class=\"line\">            on(toolbar,&quot;draw-complete&quot;, function (result) &#123;</span><br><span class=\"line\">                var geometry=result.geometry;</span><br><span class=\"line\">                var type=geometry.type;</span><br><span class=\"line\">                var graphic;</span><br><span class=\"line\">                switch (type) &#123;</span><br><span class=\"line\">                    case &quot;point&quot;:</span><br><span class=\"line\">                        graphic= new Graphic(geometry, marker);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;polyline&quot;:</span><br><span class=\"line\">                        graphic= new Graphic(geometry, lineSymbol);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;polygon&quot;:</span><br><span class=\"line\">                        graphic= new Graphic(geometry, fill);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                map.graphics.add(graphic);</span><br><span class=\"line\">                toolbar.deactivate();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">           query(&quot;button&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">            var value=this.innerHTML;</span><br><span class=\"line\">            switch(value)&#123;</span><br><span class=\"line\">                case &quot;绘制点&quot;:&#123;</span><br><span class=\"line\">                    toolbar.activate(Draw.POINT, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                case &quot;绘制折线&quot;:&#123;</span><br><span class=\"line\">                    toolbar.activate(Draw.POLYLINE, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                case &quot;绘制面&quot;:&#123;</span><br><span class=\"line\">                    toolbar.activate(Draw.POLYGON, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                case &quot;徒手线&quot;:&#123;</span><br><span class=\"line\">                    toolbar.activate(Draw.FREEHAND_POLYLINE, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                case &quot;徒手面&quot;:&#123;</span><br><span class=\"line\">                    toolbar.activate(Draw.FREEHAND_POLYGON, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;MyMapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;button&gt;绘制点&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;绘制折线&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;绘制面&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;徒手线&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;徒手面&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"代码解释-2\"><a href=\"#代码解释-2\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h5><ul>\n<li>在使用绘图工具时，最主要的不同为：在激活绘图工具时的赋予的参数的不同。</li>\n<li>graphic只是客户端图形，并不改变服务本身，如果想要改变服务本身的数据，需要使用要素服务，用到esri/toolbars/Edit工具。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过上面几个需求得知，在生成graphic时，最主要是有用这个图形的几何信息，几何信息可以通过多方面获得，例如：</p>\n<ul>\n<li>通过具体的坐标生成geometry（实现）</li>\n<li>通过draw工具动态获得geometry（实现）</li>\n<li>我们还可以通过map的点击事件获得点的geometry（可以尝试自己实现）。</li>\n<li>一旦拥有了图形的几何信息，我们就可以直接创建graphic，从而添加到地图中来</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>在ArcGIS API中有一种图层叫做GraphicsLayer，GraphicsLayer是一种客户端图层，GraphicsLayer中的图形我们称作Graphic，它对应着 esri/graphic，一个Graphic对象由四部分组成：geometry,symbol,attribute,infoTemplate组成，Graphic对象在我们开发中用到的非常多。例如：利用Graphic实现图形的高亮显示等等。</p>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><h4 id=\"根据具体坐标生成Graphic\"><a href=\"#根据具体坐标生成Graphic\" class=\"headerlink\" title=\"根据具体坐标生成Graphic\"></a>根据具体坐标生成Graphic</h4><p>在我们的实际开发当中可能会存在这样的需求：根据坐标以及形状生成相应的图形然后在地图显示出来<br>在上面说过一个Graphic由四部分组成，在需求中我们已经知道坐标形状，即已经知道了geometry,因此我们可以直接根据坐标生成相应的geometry，从而创建Graphic，然后添加到地图中来。</p>\n<h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><p>我们首先创建一个html页面，引入相应的文件将地图加载进来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Graphic&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],function(Map,ArcGISDynamicMapServiceLayer)&#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">            var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">            (&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;);</span><br><span class=\"line\">            map.addLayer(layer);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建四个按钮，将四类不同的Graphic添加到GraphicsLayer中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button&gt;添加点&lt;/button&gt;</span><br><span class=\"line\">&lt;button&gt;添加线&lt;/button&gt;</span><br><span class=\"line\">&lt;button&gt;添加面&lt;/button&gt;</span><br><span class=\"line\">&lt;button&gt;添加圆&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>引入相应的模块，其中包括：<br>dojo/on（用于绑定事件的模块）<br>esri/symbols/SimpleMarkerSymbol（点符号类）<br>esri/symbols/SimpleLineSymbol（线符号类）<br>esri/symbols/SimpleFillSymbol（面符号类）<br>esri/geometry/Point（点类）<br>esri/geometry/Polyline（折线类）<br>esri/geometry/Polygon（面类）<br>esri/geometry/Circle（圆类）<br>dojo/query（dojo的选择器，用于选择DOM元素）<br>esri/graphic（图形类）<br>esri/layers/GraphicsLayer（客户端图层类）<br>为相应的按钮添加绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建客户端图层</span><br><span class=\"line\">var graphicsLayer=new GraphicsLayer();</span><br><span class=\"line\">//将客户端图层添加到地图中</span><br><span class=\"line\">map.addLayer(graphicsLayer);</span><br><span class=\"line\">//通过query查询到button对象</span><br><span class=\"line\">var btns=query(&quot;button&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">on(btns,&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">    //获得按钮的文本</span><br><span class=\"line\">    var text=this.innerHTML;</span><br><span class=\"line\">    //定义线符号</span><br><span class=\"line\">    var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">    //定义点符号l</span><br><span class=\"line\">    var pSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new Color([255, 0, 0]));</span><br><span class=\"line\">    //定义面符号</span><br><span class=\"line\">    var fill=SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new Color([255, 0, 0]));</span><br><span class=\"line\">    //声明一个类型和图形</span><br><span class=\"line\">    var geometry;</span><br><span class=\"line\">    var graphic;</span><br><span class=\"line\">    //根据文本定义相应的geometry</span><br><span class=\"line\">    switch(text)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        case &quot;添加点&quot;:</span><br><span class=\"line\">            geometry=new Point(&#123;</span><br><span class=\"line\">                &quot;x&quot;:510706,</span><br><span class=\"line\">                &quot;y&quot;:3986100,</span><br><span class=\"line\">                &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            graphic=new Graphic(geometry,pSymbol);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case &quot;添加线&quot;:</span><br><span class=\"line\">            //点的坐标对</span><br><span class=\"line\">             var  paths=[];</span><br><span class=\"line\">             paths[0]=[</span><br><span class=\"line\">                [510326,3985702],</span><br><span class=\"line\">                [510994, 3985676],</span><br><span class=\"line\">                [511078, 3985903],</span><br><span class=\"line\">                [510433, 3985928]</span><br><span class=\"line\">            ];</span><br><span class=\"line\">            geometry=new Polyline(&#123;</span><br><span class=\"line\">                &quot;paths&quot;:paths,</span><br><span class=\"line\">                &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            graphic=new Graphic(geometry,lineSymbol);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case &quot;添加面&quot;:</span><br><span class=\"line\">            //点的坐标对</span><br><span class=\"line\">            var ring=[];</span><br><span class=\"line\">            ring[0]=[</span><br><span class=\"line\">                [510275, 3986100],</span><br><span class=\"line\">                [510508, 3986162],</span><br><span class=\"line\">                [510596, 3986032],</span><br><span class=\"line\">                [510271, 3985847],</span><br><span class=\"line\">                [510275, 3986100]</span><br><span class=\"line\">            ];</span><br><span class=\"line\">            geometry=new Polygon(&#123;</span><br><span class=\"line\">                &quot;rings&quot;:ring,</span><br><span class=\"line\">                &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            graphic=new Graphic(geometry,fill);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case &quot;添加圆&quot;:</span><br><span class=\"line\">            //圆心</span><br><span class=\"line\">            var p=new Point(&#123;</span><br><span class=\"line\">                &quot;x&quot;:510706,</span><br><span class=\"line\">                &quot;y&quot;:3986100,</span><br><span class=\"line\">                &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            //半径</span><br><span class=\"line\">            var r=20;</span><br><span class=\"line\">            geometry=new Circle(p,&#123;</span><br><span class=\"line\">                &quot;radius&quot;:r</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            graphic=new Graphic(geometry,fill);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //将图形添加到图层中</span><br><span class=\"line\">    graphicsLayer.add(graphic);</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Graphic&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/GraphicsLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,&quot;dojo/query&quot;,&quot;dojo/colors&quot;,</span><br><span class=\"line\">            &quot;esri/graphic&quot;,&quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/geometry/Point&quot;,</span><br><span class=\"line\">            &quot;esri/geometry/Polyline&quot;,&quot;esri/geometry/Polygon&quot;,</span><br><span class=\"line\">            &quot;esri/geometry/Circle&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function(Map,ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                         GraphicsLayer,on,query,Color,Graphic,</span><br><span class=\"line\">                         SimpleMarkerSymbol,SimpleLineSymbol,</span><br><span class=\"line\">                         SimpleFillSymbol,Point,Polyline,Polygon,Circle)&#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">            var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">            (&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;);</span><br><span class=\"line\">            map.addLayer(layer);</span><br><span class=\"line\">            //创建客户端图层</span><br><span class=\"line\">            var graphicsLayer=new GraphicsLayer();</span><br><span class=\"line\">            //将客户端图层添加到地图中</span><br><span class=\"line\">            map.addLayer(graphicsLayer);</span><br><span class=\"line\">            //通过query查询到button对象</span><br><span class=\"line\">            var btns=query(&quot;button&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">            on(btns,&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                //获得按钮的文本</span><br><span class=\"line\">                var text=this.innerHTML;</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义点符号l</span><br><span class=\"line\">                var pSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new Color([255, 0, 0]));</span><br><span class=\"line\">                //定义面符号</span><br><span class=\"line\">                var fill=SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new Color([255, 0, 0]));</span><br><span class=\"line\">                //声明一个类型和图形</span><br><span class=\"line\">                var geometry;</span><br><span class=\"line\">                var graphic;</span><br><span class=\"line\">                //根据文本定义相应的geometry</span><br><span class=\"line\">                switch(text)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    case &quot;添加点&quot;:</span><br><span class=\"line\">                        geometry=new Point(&#123;</span><br><span class=\"line\">                            &quot;x&quot;:510706,</span><br><span class=\"line\">                            &quot;y&quot;:3986100,</span><br><span class=\"line\">                            &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        graphic=new Graphic(geometry,pSymbol);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;添加线&quot;:</span><br><span class=\"line\">                        //点的坐标对</span><br><span class=\"line\">                         var  paths=[];</span><br><span class=\"line\">                         paths[0]=[</span><br><span class=\"line\">                            [510326,3985702],</span><br><span class=\"line\">                            [510994, 3985676],</span><br><span class=\"line\">                            [511078, 3985903],</span><br><span class=\"line\">                            [510433, 3985928]</span><br><span class=\"line\">                        ];</span><br><span class=\"line\">                        geometry=new Polyline(&#123;</span><br><span class=\"line\">                            &quot;paths&quot;:paths,</span><br><span class=\"line\">                            &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        graphic=new Graphic(geometry,lineSymbol);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;添加面&quot;:</span><br><span class=\"line\">                        //点的坐标对</span><br><span class=\"line\">                        var ring=[];</span><br><span class=\"line\">                        ring[0]=[</span><br><span class=\"line\">                            [510275, 3986100],</span><br><span class=\"line\">                            [510508, 3986162],</span><br><span class=\"line\">                            [510596, 3986032],</span><br><span class=\"line\">                            [510271, 3985847],</span><br><span class=\"line\">                            [510275, 3986100]</span><br><span class=\"line\">                        ];</span><br><span class=\"line\">                        geometry=new Polygon(&#123;</span><br><span class=\"line\">                            &quot;rings&quot;:ring,</span><br><span class=\"line\">                            &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        graphic=new Graphic(geometry,fill);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;添加圆&quot;:</span><br><span class=\"line\">                        //圆心</span><br><span class=\"line\">                        var p=new Point(&#123;</span><br><span class=\"line\">                            &quot;x&quot;:510706,</span><br><span class=\"line\">                            &quot;y&quot;:3986100,</span><br><span class=\"line\">                            &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        //半径</span><br><span class=\"line\">                        var r=20;</span><br><span class=\"line\">                        geometry=new Circle(p,&#123;</span><br><span class=\"line\">                            &quot;radius&quot;:r</span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                        graphic=new Graphic(geometry,fill);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //将图形添加到图层中</span><br><span class=\"line\">                graphicsLayer.add(graphic);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;button&gt;添加点&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;添加线&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;添加面&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;添加圆&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"代码解释\"><a href=\"#代码解释\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h5><ul>\n<li>我们利用dojo/query查询到所有的button对象，利用dojo/on模块给所有的button对象绑定事件。</li>\n<li>在此例子中，有一个缺点：便是将点的坐标写死了，因此我们可以将点的坐标存放在一个json文件中，从而读取文件生成相应的点坐标</li>\n</ul>\n<h4 id=\"GraphicsLayer的属性查询\"><a href=\"#GraphicsLayer的属性查询\" class=\"headerlink\" title=\"GraphicsLayer的属性查询\"></a>GraphicsLayer的属性查询</h4><p>在前面我们提到过，Graphic是可以存在属性的，在实际开发当中，有时我们需要将相应的属性查询出来，在此时我提供一个简单的方法，便是根据 GraphicsLayer的点击事件来查询Graphic的属性。</p>\n<h5 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><p>首先我们添加一系列带有属性的Graphic（此处我们只用点图形便可以）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建客户端图层</span><br><span class=\"line\">            var graphicsLayer=new GraphicsLayer();</span><br><span class=\"line\">            //将客户端图层添加到地图中</span><br><span class=\"line\">            map.addLayer(graphicsLayer);</span><br><span class=\"line\">            //添加点图形的函数</span><br><span class=\"line\">            function addGraphic()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义点符号l</span><br><span class=\"line\">                var pSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new Color([255, 0, 0]));</span><br><span class=\"line\">                //声明形状</span><br><span class=\"line\">                var geometry;</span><br><span class=\"line\">                //声明和图形</span><br><span class=\"line\">                var graphic;</span><br><span class=\"line\">                //添加第一个点图形</span><br><span class=\"line\">                geometry=new Point(&#123;</span><br><span class=\"line\">                    &quot;x&quot;:510706,</span><br><span class=\"line\">                    &quot;y&quot;:3986100,</span><br><span class=\"line\">                    &quot;spatialReference&quot;:map.spatialReference,</span><br><span class=\"line\">                    attributes:&#123;</span><br><span class=\"line\">                        &quot;h&quot;:100</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                graphic=new Graphic(geometry,pSymbol);</span><br><span class=\"line\">                graphicsLayer.add(graphic);</span><br><span class=\"line\">                //添加第二个点图形</span><br><span class=\"line\">                geometry=new Point(&#123;</span><br><span class=\"line\">                    &quot;x&quot;:510326,</span><br><span class=\"line\">                    &quot;y&quot;:3985702,</span><br><span class=\"line\">                    &quot;spatialReference&quot;:map.spatialReference,</span><br><span class=\"line\">                    attributes:&#123;</span><br><span class=\"line\">                        &quot;h&quot;:200</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                graphic=new Graphic(geometry,pSymbol);</span><br><span class=\"line\">                graphicsLayer.add(graphic);</span><br><span class=\"line\">                //添加第三个点图形</span><br><span class=\"line\">                geometry=new Point(&#123;</span><br><span class=\"line\">                    &quot;x&quot;:510275,</span><br><span class=\"line\">                    &quot;y&quot;:3986100,</span><br><span class=\"line\">                    &quot;spatialReference&quot;:map.spatialReference,</span><br><span class=\"line\">                    attributes:&#123;</span><br><span class=\"line\">                        &quot;h&quot;:300</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                graphic=new Graphic(geometry,pSymbol);</span><br><span class=\"line\">                graphicsLayer.add(graphic);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //调用添加点图形的函数</span><br><span class=\"line\">            addGraphic();</span><br></pre></td></tr></table></figure></p>\n<p>给GraphicsLayer绑定相应的事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//绑定事件</span><br><span class=\"line\">        on(graphicsLayer,&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">            var graphic=event.graphic;</span><br><span class=\"line\">            alert(graphic.attributes[&quot;h&quot;]);</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"全部代码-1\"><a href=\"#全部代码-1\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Graphic&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/GraphicsLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,&quot;dojo/query&quot;,&quot;dojo/colors&quot;,</span><br><span class=\"line\">            &quot;esri/graphic&quot;,&quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/geometry/Point&quot;,</span><br><span class=\"line\">                    &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function(Map,ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                         GraphicsLayer,on,query,Color,Graphic,</span><br><span class=\"line\">                         SimpleMarkerSymbol,SimpleLineSymbol,Point)&#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">            var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">            (&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;);</span><br><span class=\"line\">            map.addLayer(layer);</span><br><span class=\"line\">            //创建客户端图层</span><br><span class=\"line\">            var graphicsLayer=new GraphicsLayer();</span><br><span class=\"line\">            //将客户端图层添加到地图中</span><br><span class=\"line\">            map.addLayer(graphicsLayer);</span><br><span class=\"line\">            //添加点图形的函数</span><br><span class=\"line\">            function addGraphic()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义点符号l</span><br><span class=\"line\">                var pSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new Color([255, 0, 0]));</span><br><span class=\"line\">                //声明形状</span><br><span class=\"line\">                var geometry;</span><br><span class=\"line\">                //声明和图形</span><br><span class=\"line\">                var graphic;</span><br><span class=\"line\">                //添加第一个点图形</span><br><span class=\"line\">                geometry=new Point(&#123;</span><br><span class=\"line\">                    &quot;x&quot;:510706,</span><br><span class=\"line\">                    &quot;y&quot;:3986100,</span><br><span class=\"line\">                    &quot;spatialReference&quot;:map.spatialReference,</span><br><span class=\"line\">                    attributes:&#123;</span><br><span class=\"line\">                        &quot;h&quot;:100</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                graphic=new Graphic(geometry,pSymbol);</span><br><span class=\"line\">                graphicsLayer.add(graphic);</span><br><span class=\"line\">                //添加第二个点图形</span><br><span class=\"line\">                geometry=new Point(&#123;</span><br><span class=\"line\">                    &quot;x&quot;:510326,</span><br><span class=\"line\">                    &quot;y&quot;:3985702,</span><br><span class=\"line\">                    &quot;spatialReference&quot;:map.spatialReference,</span><br><span class=\"line\">                    attributes:&#123;</span><br><span class=\"line\">                        &quot;h&quot;:200</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                graphic=new Graphic(geometry,pSymbol);</span><br><span class=\"line\">                graphicsLayer.add(graphic);</span><br><span class=\"line\">                //添加第三个点图形</span><br><span class=\"line\">                geometry=new Point(&#123;</span><br><span class=\"line\">                    &quot;x&quot;:510275,</span><br><span class=\"line\">                    &quot;y&quot;:3986100,</span><br><span class=\"line\">                    &quot;spatialReference&quot;:map.spatialReference,</span><br><span class=\"line\">                    attributes:&#123;</span><br><span class=\"line\">                        &quot;h&quot;:300</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                graphic=new Graphic(geometry,pSymbol);</span><br><span class=\"line\">                graphicsLayer.add(graphic);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //调用添加点图形的函数</span><br><span class=\"line\">            addGraphic();</span><br><span class=\"line\">            //绑定事件</span><br><span class=\"line\">            on(graphicsLayer,&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                var graphic=event.graphic;</span><br><span class=\"line\">                alert(graphic.attributes[&quot;h&quot;]);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"代码解释-1\"><a href=\"#代码解释-1\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h5><ul>\n<li>需要注意的是graphicsLayer的事件机制是针对于graphic图形的,也就是当图形graphic被点击时被触发，此时回调函数也会将那个图形被点击传给我们，从而得到图形的属性</li>\n<li>有的同学不太喜欢新建一个graphicsLayer,而是使用map.graphics.add()方法添加一个图形graphic，其实原理是一样的，因为map本身有一个默认的graphicsLayer即：map.graphics返回的便是一个graphicsLayer对象</li>\n<li>在此代码当中我们只是将获得到的属性信息alert了一下，在真实需求当中我们可能会利用相应的属性信息做很多的事情。</li>\n</ul>\n<h4 id=\"实现用户交互画图（Draw工具）\"><a href=\"#实现用户交互画图（Draw工具）\" class=\"headerlink\" title=\"实现用户交互画图（Draw工具）\"></a>实现用户交互画图（Draw工具）</h4><p>在部分项目中，有这么一个需求：让用户在地图上自己绘制一个图形，然后将图形添加到地图当中，要实现这个功能我们需要借助esri提供给我们的工具条实现：esri/toolbars/draw，利用该工具条我们可以得到用户交互画出来的geometry,从而根据geometry生成相应的graphic，使用该工具的一般步骤为：</p>\n<p>1.创建绘图对象<br>2.激活绘图工具<br>3.得到图形Geometry<br>4.创建Graphic<br>5.添加到地图</p>\n<h5 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><p>创建5个button（和第一个例子一样）<br>创建绘图对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var toolbar = new Draw(map, &#123; showTooltips: true &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>给每一个button绑定相应的事件（激活绘图工具）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query(&quot;button&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">            var value=this.innerHTML;</span><br><span class=\"line\">            switch(value)&#123;</span><br><span class=\"line\">                case &quot;绘制点&quot;:&#123;</span><br><span class=\"line\">                    //激活绘图工具（画点）</span><br><span class=\"line\">                    toolbar.activate(Draw.POINT, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                case &quot;绘制折线&quot;:&#123;</span><br><span class=\"line\">                     //激活绘图工具（画折线）</span><br><span class=\"line\">                    toolbar.activate(Draw.POLYLINE, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                case &quot;绘制面&quot;:&#123;</span><br><span class=\"line\">                    //激活绘图工具（绘制面）</span><br><span class=\"line\">                    toolbar.activate(Draw.POLYGON, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                case &quot;徒手线&quot;:&#123;</span><br><span class=\"line\">                    //激活绘图工具（徒手线）</span><br><span class=\"line\">                    toolbar.activate(Draw.FREEHAND_POLYLINE, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                case &quot;徒手面&quot;:&#123;</span><br><span class=\"line\">                    //激活绘图工具（徒手面）</span><br><span class=\"line\">                    toolbar.activate(Draw.FREEHAND_POLYGON, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>给绘图工具绑定绘图完成事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(toolbar,&quot;draw-complete&quot;, function (result) &#123;</span><br><span class=\"line\">                //获得几何形状</span><br><span class=\"line\">                var geometry=result.geometry;</span><br><span class=\"line\">                //获得形状的类型</span><br><span class=\"line\">                var type=geometry.type;</span><br><span class=\"line\">                //声明图形对象</span><br><span class=\"line\">                var graphic;</span><br><span class=\"line\">                //通过几何形状的类型，创建不同的图形</span><br><span class=\"line\">                switch (type) &#123;</span><br><span class=\"line\">                    case &quot;point&quot;:</span><br><span class=\"line\">                        graphic= new Graphic(geometry, marker);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;polyline&quot;:</span><br><span class=\"line\">                        graphic= new Graphic(geometry, lineSymbol);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;polygon&quot;:</span><br><span class=\"line\">                        graphic= new Graphic(geometry, fill);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                map.graphics.add(graphic);</span><br><span class=\"line\">                //关掉绘图工具</span><br><span class=\"line\">                toolbar.deactivate();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"全部代码-2\"><a href=\"#全部代码-2\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;WebGIS&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;dojo/dom&quot;,&quot;dojo/on&quot;,</span><br><span class=\"line\">                    &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">                    &quot;dojo/query&quot;,&quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">                    &quot;esri/symbols/SimpleLineSymbol&quot;,&quot;esri/graphic&quot;,&quot;esri/symbols/SimpleMarkerSymbol&quot;, &quot;esri/symbols/SimpleFillSymbol&quot;,&quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map,dom,on, ArcGISDynamicMapServiceLayer,query, Draw, SimpleLineSymbol,Graphic,SimpleMarkerSymbol,SimpleFillSymbol) &#123;</span><br><span class=\"line\">            var map = new esri.Map(&quot;MyMapDiv&quot;);</span><br><span class=\"line\">            var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">            (&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;);</span><br><span class=\"line\">            map.addLayer(layer)</span><br><span class=\"line\">            var toolbar = new Draw(map, &#123; showTooltips: true &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">            var marker= new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new dojo.Color([255, 0, 0]));</span><br><span class=\"line\">            var fill= new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new dojo.Color([255, 0, 0]));</span><br><span class=\"line\">            on(toolbar,&quot;draw-complete&quot;, function (result) &#123;</span><br><span class=\"line\">                var geometry=result.geometry;</span><br><span class=\"line\">                var type=geometry.type;</span><br><span class=\"line\">                var graphic;</span><br><span class=\"line\">                switch (type) &#123;</span><br><span class=\"line\">                    case &quot;point&quot;:</span><br><span class=\"line\">                        graphic= new Graphic(geometry, marker);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;polyline&quot;:</span><br><span class=\"line\">                        graphic= new Graphic(geometry, lineSymbol);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;polygon&quot;:</span><br><span class=\"line\">                        graphic= new Graphic(geometry, fill);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                map.graphics.add(graphic);</span><br><span class=\"line\">                toolbar.deactivate();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">           query(&quot;button&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">            var value=this.innerHTML;</span><br><span class=\"line\">            switch(value)&#123;</span><br><span class=\"line\">                case &quot;绘制点&quot;:&#123;</span><br><span class=\"line\">                    toolbar.activate(Draw.POINT, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                case &quot;绘制折线&quot;:&#123;</span><br><span class=\"line\">                    toolbar.activate(Draw.POLYLINE, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                case &quot;绘制面&quot;:&#123;</span><br><span class=\"line\">                    toolbar.activate(Draw.POLYGON, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                case &quot;徒手线&quot;:&#123;</span><br><span class=\"line\">                    toolbar.activate(Draw.FREEHAND_POLYLINE, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                case &quot;徒手面&quot;:&#123;</span><br><span class=\"line\">                    toolbar.activate(Draw.FREEHAND_POLYGON, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;MyMapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;button&gt;绘制点&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;绘制折线&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;绘制面&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;徒手线&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;徒手面&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h5 id=\"代码解释-2\"><a href=\"#代码解释-2\" class=\"headerlink\" title=\"代码解释\"></a>代码解释</h5><ul>\n<li>在使用绘图工具时，最主要的不同为：在激活绘图工具时的赋予的参数的不同。</li>\n<li>graphic只是客户端图形，并不改变服务本身，如果想要改变服务本身的数据，需要使用要素服务，用到esri/toolbars/Edit工具。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过上面几个需求得知，在生成graphic时，最主要是有用这个图形的几何信息，几何信息可以通过多方面获得，例如：</p>\n<ul>\n<li>通过具体的坐标生成geometry（实现）</li>\n<li>通过draw工具动态获得geometry（实现）</li>\n<li>我们还可以通过map的点击事件获得点的geometry（可以尝试自己实现）。</li>\n<li>一旦拥有了图形的几何信息，我们就可以直接创建graphic，从而添加到地图中来</li>\n</ul>\n"},{"title":"ArcGIS API For Javascript之渲染实现","date":"2019-08-06T07:43:25.000Z","_content":"在 GIS当中，总要时不时的制作几张专题图，制作专题图的过程中，不可避免的就要涉及到图层的渲染问题（即改变图层的颜色信息），渲染分为客户端渲染，服务器渲染，客户端渲染要求我们的服务必须是要素服务，或者是可以使用FeatureLayer接收的服务图层\n### 需求\n首先我们查看一下数据（宿舍楼信息）\n![01.png](01.png)\n#### 需求一（唯一值渲染）\n根据alias属性进行唯一值渲染\n##### 代码实现\n首先我们先将地图加载进来\n```\nvar map = new esri.Map(\"MyMapDiv\");\nvar layer = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/my/fea/MapServer\");\nmap.addLayer(layer);\n```\n定义一个渲染按钮\n```\n<button id=\"btn\">渲染</button>\n```\n给按钮绑定相应的事件\n```\non(btn,\"click\",function(){\n                        //定义一个要素图层\n                        var featureLayer = new FeatureLayer(\n                        \"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1\",\n                         {\n                            mode:FeatureLayer.MODE_SNAPSHOT,\n                            outFields: [\"*\"]\n                         });\n                        //定义线符号\n                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                        //定义面符号\n                        var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color(\"#FFFFCC\"));\n                        //定义唯一值渲染器，对字段alias进行渲染，fill是默认的渲染符号\n                        var renderer = new UniqueValueRenderer(fill, \"alias\");\n                        //设置渲染的方式\n                        renderer.addValue(\"C区宿舍\", new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 255, 0, 0.5])));\n                        renderer.addValue(\"B区宿舍\", new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 0, 255, 0.5])));\n                        renderer.addValue(\"A区宿舍\",new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 0, 255, 0.5])));\n                        renderer.addValue(\"公共出口\", new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 255, 255, 0.75])));\n                        featureLayer.setRenderer(renderer);\n                        map.addLayer(featureLayer);              \n                    })  \n```\n##### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>UniqueValueRenderer</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n                    \"esri/layers/ArcGISDynamicMapServiceLayer\",\n                    \"dojo/on\",\n                    \"dojo/dom\",\n                    \"dojo/colors\",\n                    \"esri/symbols/SimpleFillSymbol\",\n                    \"esri/layers/FeatureLayer\",\n                    \"esri/symbols/SimpleLineSymbol\",\n                    \"esri/renderers/UniqueValueRenderer\",\n                    \"dojo/domReady!\"],\n                function (Map, ArcGISDynamicMapServiceLayer,on,dom,Color,SimpleFillSymbol, FeatureLayer, SimpleLineSymbol,UniqueValueRenderer) {\n                    var map = new esri.Map(\"MyMapDiv\");\n                    var layer = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer\");\n                    map.addLayer(layer);\n                    //获得id为btn的DOM元素\n                    var btn=dom.byId(\"btn\");\n                    //绑定相应的事件\n                    on(btn,\"click\",function(){\n                        //定义一个要素图层\n                        var featureLayer = new FeatureLayer(\n                        \"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1\",\n                         {\n                            mode:FeatureLayer.MODE_SNAPSHOT,\n                            outFields: [\"*\"]\n                         });\n                        //定义线符号\n                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                        //定义面符号\n                        var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color(\"#FFFFCC\"));\n                        //定义唯一值渲染器，对字段alias进行渲染，fill是默认的渲染符号\n                        var renderer = new UniqueValueRenderer(fill, \"alias\");\n                        //设置渲染的方式\n                        renderer.addValue(\"C区宿舍\", new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 255, 0, 0.5])));\n                        renderer.addValue(\"B区宿舍\", new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 0, 255, 0.5])));\n                        renderer.addValue(\"A区宿舍\",new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 0, 255, 0.5])));\n                        renderer.addValue(\"公共出口\", new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 255, 255, 0.75])));\n                        featureLayer.setRenderer(renderer);\n                        map.addLayer(featureLayer);              \n                    })  \n                });\n\n\n    </script>\n</head>\n<body>\n<div id=\"MyMapDiv\" class=\"MapClass\"></div>\n<button id=\"btn\">渲染</button>\n</body>\n</html>\n```\n运行结果之后：\n![02.png](02.png)\n#### 需求二（分类渲染）\n根据面积字段实现分类渲染，由于代码只是修改了渲染器，所以直接将代码贴出来\n##### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>UniqueValueRenderer</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n                    \"esri/layers/ArcGISDynamicMapServiceLayer\",\n                    \"dojo/on\",\n                    \"dojo/dom\",\n                    \"dojo/colors\",\n                    \"esri/symbols/SimpleFillSymbol\",\n                    \"esri/layers/FeatureLayer\",\n                    \"esri/symbols/SimpleLineSymbol\",\n                    \"esri/renderers/ClassBreaksRenderer\",\n                    \"dojo/domReady!\"],\n                function (Map, ArcGISDynamicMapServiceLayer,on,dom,Color,SimpleFillSymbol, FeatureLayer, SimpleLineSymbol,ClassBreaksRenderer) {\n                    var map = new esri.Map(\"MyMapDiv\");\n                    var layer = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer\");\n                    map.addLayer(layer);\n                    //获得id为btn的DOM元素\n                    var btn=dom.byId(\"btn\");\n                    //绑定相应的事件\n                    on(btn,\"click\",function(){\n                        //定义一个要素图层\n                        var featureLayer = new FeatureLayer(\n                        \"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1\",\n                         {\n                            mode:FeatureLayer.MODE_SNAPSHOT,\n                            outFields: [\"*\"]\n                         });\n                        //定义线符号\n                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                        //定义面符号\n                        var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color(\"#FFFFCC\"));\n                        //定义唯一值渲染器，对字段alias进行渲染，fill是默认的渲染符号\n                        var renderer = new ClassBreaksRenderer(fill, \"OBJECTID\");\n                        //设置渲染间隔\n                        renderer.addBreak(0,20, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 255, 0, 0.5])));\n                        renderer.addBreak(20,30, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 0, 255, 0.5])));\n                        renderer.addBreak(30,40,new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 0, 255, 0.5])));\n                        renderer.addBreak(40,60, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 255, 255, 0.75])));\n                        featureLayer.setRenderer(renderer);\n                        map.addLayer(featureLayer);              \n                    })  \n                });\n\n\n    </script>\n</head>\n<body>\n<div id=\"MyMapDiv\" class=\"MapClass\"></div>\n<button id=\"btn\">渲染</button>\n</body>\n</html>\n```\n运行结果后：\n![03.png](03.png)\n#### 需求三（服务器渲染）\n当数据量过大时，客户端渲染变显得有些慢了，此时可以使用服务器渲染，服务器渲染提供了两种渲染的方式：唯一值渲染，分类渲染，在此处我们用到的为分类渲染。\n\n注意：服务器渲染不需要要素服务。\n\n创建一个按钮（用于触发服务器渲染）\n```\n<input type=\"button\" id=\"Btn\" value=\"服务器渲染\" />\n```\n给按钮绑定点击事件\n```\non(btn,\"click\",function(e){\n                //定义线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                //定义面符号\n                var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new dojo.Color(\"#FFFFCC\"));\n                //创建服务器渲染对象\n                var RenderAnalyst = new GenerateRendererTask(\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1\");\n                //创建服务器渲染参数对象\n                var params = new GenerateRendererParameters();   \n                //创建颜色坡道对象\n                var colorRamp = new AlgorithmicColorRamp();\n                //颜色的起始位置\n                colorRamp.fromColor = dojo.colorFromHex(\"#998ec3\");\n                //颜色的终止位置\n                colorRamp.toColor = dojo.colorFromHex(\"#f1a340\");\n                //颜色的类型\n                colorRamp.algorithm = \"hsv\";\n                //告诉服务器我们需要什么样子的渲染器\n                var unidef = new ClassBreaksDefinition();\n                //分类的字段\n                unidef.classificationField = \"Shape.STArea()\";\n                //如何分类\n                unidef.classificationMethod=\"natural-breaks\";\n                //分为几类？\n                unidef.breakCount = 3;\n                //默认的符号\n                unidef.baseSymbol=fill;\n                //将自定义的颜色坡道告诉服务器\n                unidef.colorRamp=colorRamp;\n                //给渲染参数对象赋值\n                params.classificationDefinition = unidef;\n                //进行服务器渲染\n                RenderAnalyst.execute(params, showRender);\n                \n                \n            });\n```\n处理服务器返回的结果\n```\n//处理服务器返回来的结果\n            function showRender(renderer) {\n                \n                if (renderer != null) {\n                    //定义要素图层，注意：这个地方我们用到并不是要素服务，而是地图服务\n                    var featureLayer = new FeatureLayer(\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1\",{\n                        mode:  FeatureLayer.MODE_SNAPSHOT,\n                        outFields: [\"*\"]\n                    });     \n                    //赋予渲染器\n                    featureLayer.setRenderer(renderer);\n                    featureLayer.refresh();\n                    MyMap.addLayer(featureLayer);\n                }\n            }\n```\n#### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>GenerateRendererTask</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"dojo/dom\",\n            \"dojo/on\",\n            \"esri/tasks/GenerateRendererTask\",\n            \"esri/layers/FeatureLayer\",\n            \"esri/symbols/SimpleFillSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/tasks/GenerateRendererParameters\",\n            \"esri/tasks/ClassBreaksDefinition\",\n            \"esri/tasks/AlgorithmicColorRamp\",\n            \"dojo/domReady!\"], function\n                (Map,\n                 ArcGISDynamicMapServiceLayer,\n                 dom,on,\n                 GenerateRendererTask,\n                 FeatureLayer,\n                 SimpleFillSymbol,\n                 SimpleLineSymbol,\n                 GenerateRendererParameters,\n                 ClassBreaksDefinition,\n                 AlgorithmicColorRamp\n                ) {\n            //服务器端渲染\n            var MyMap = new Map(\"MyMapDiv\");\n            var layer = new ArcGISDynamicMapServiceLayer\n            (\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/\");\n            MyMap.addLayer(layer)\n            //获得id为Btn的DOM对象\n            var btn=dom.byId(\"Btn\");\n            //给btn绑定点击事件\n            on(btn,\"click\",function(e){\n                //定义线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                //定义面符号\n                var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new dojo.Color(\"#FFFFCC\"));\n                //创建服务器渲染对象\n                var RenderAnalyst = new GenerateRendererTask(\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1\");\n                //创建服务器渲染参数对象\n                var params = new GenerateRendererParameters();   \n                //创建颜色坡道对象\n                var colorRamp = new AlgorithmicColorRamp();\n                //颜色的起始位置\n                colorRamp.fromColor = dojo.colorFromHex(\"#998ec3\");\n                //颜色的终止位置\n                colorRamp.toColor = dojo.colorFromHex(\"#f1a340\");\n                //颜色的类型\n                colorRamp.algorithm = \"hsv\";\n                //告诉服务器我们需要什么样子的渲染器\n                var unidef = new ClassBreaksDefinition();\n                //分类的字段\n                unidef.classificationField = \"Shape.STArea()\";\n                //如何分类\n                unidef.classificationMethod=\"natural-breaks\";\n                //分为几类？\n                unidef.breakCount = 3;\n                //默认的符号\n                unidef.baseSymbol=fill;\n                //将自定义的颜色坡道告诉服务器\n                unidef.colorRamp=colorRamp;\n                //给渲染参数对象赋值\n                params.classificationDefinition = unidef;\n                //进行服务器渲染\n                RenderAnalyst.execute(params, showRender);\n                \n                \n            });\n            //处理服务器返回来的结果\n            function showRender(renderer) {\n                \n                if (renderer != null) {\n                    //定义要素图层，注意：这个地方我们用到并不是要素服务，而是地图服务\n                    var featureLayer = new FeatureLayer(\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1\",{\n                        mode:  FeatureLayer.MODE_SNAPSHOT,\n                        outFields: [\"*\"]\n                    });     \n                    //赋予渲染器\n                    featureLayer.setRenderer(renderer);\n                    featureLayer.refresh();\n                    MyMap.addLayer(featureLayer);\n                }\n            }\n        });\n    </script>\n</head>\n<body>\n<div id=\"MyMapDiv\" class=\"MapClass\"></div>\n<input type=\"button\" id=\"Btn\" value=\"服务器渲染\" />\n</body>\n</html>\n```\n![04.png](04.png)","source":"_posts/ArcGIS-API-for-JS15.md","raw":"---\ntitle: ArcGIS API For Javascript之渲染实现\ndate: 2019-08-06 15:43:25\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n在 GIS当中，总要时不时的制作几张专题图，制作专题图的过程中，不可避免的就要涉及到图层的渲染问题（即改变图层的颜色信息），渲染分为客户端渲染，服务器渲染，客户端渲染要求我们的服务必须是要素服务，或者是可以使用FeatureLayer接收的服务图层\n### 需求\n首先我们查看一下数据（宿舍楼信息）\n![01.png](01.png)\n#### 需求一（唯一值渲染）\n根据alias属性进行唯一值渲染\n##### 代码实现\n首先我们先将地图加载进来\n```\nvar map = new esri.Map(\"MyMapDiv\");\nvar layer = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/my/fea/MapServer\");\nmap.addLayer(layer);\n```\n定义一个渲染按钮\n```\n<button id=\"btn\">渲染</button>\n```\n给按钮绑定相应的事件\n```\non(btn,\"click\",function(){\n                        //定义一个要素图层\n                        var featureLayer = new FeatureLayer(\n                        \"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1\",\n                         {\n                            mode:FeatureLayer.MODE_SNAPSHOT,\n                            outFields: [\"*\"]\n                         });\n                        //定义线符号\n                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                        //定义面符号\n                        var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color(\"#FFFFCC\"));\n                        //定义唯一值渲染器，对字段alias进行渲染，fill是默认的渲染符号\n                        var renderer = new UniqueValueRenderer(fill, \"alias\");\n                        //设置渲染的方式\n                        renderer.addValue(\"C区宿舍\", new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 255, 0, 0.5])));\n                        renderer.addValue(\"B区宿舍\", new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 0, 255, 0.5])));\n                        renderer.addValue(\"A区宿舍\",new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 0, 255, 0.5])));\n                        renderer.addValue(\"公共出口\", new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 255, 255, 0.75])));\n                        featureLayer.setRenderer(renderer);\n                        map.addLayer(featureLayer);              \n                    })  \n```\n##### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>UniqueValueRenderer</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n                    \"esri/layers/ArcGISDynamicMapServiceLayer\",\n                    \"dojo/on\",\n                    \"dojo/dom\",\n                    \"dojo/colors\",\n                    \"esri/symbols/SimpleFillSymbol\",\n                    \"esri/layers/FeatureLayer\",\n                    \"esri/symbols/SimpleLineSymbol\",\n                    \"esri/renderers/UniqueValueRenderer\",\n                    \"dojo/domReady!\"],\n                function (Map, ArcGISDynamicMapServiceLayer,on,dom,Color,SimpleFillSymbol, FeatureLayer, SimpleLineSymbol,UniqueValueRenderer) {\n                    var map = new esri.Map(\"MyMapDiv\");\n                    var layer = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer\");\n                    map.addLayer(layer);\n                    //获得id为btn的DOM元素\n                    var btn=dom.byId(\"btn\");\n                    //绑定相应的事件\n                    on(btn,\"click\",function(){\n                        //定义一个要素图层\n                        var featureLayer = new FeatureLayer(\n                        \"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1\",\n                         {\n                            mode:FeatureLayer.MODE_SNAPSHOT,\n                            outFields: [\"*\"]\n                         });\n                        //定义线符号\n                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                        //定义面符号\n                        var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color(\"#FFFFCC\"));\n                        //定义唯一值渲染器，对字段alias进行渲染，fill是默认的渲染符号\n                        var renderer = new UniqueValueRenderer(fill, \"alias\");\n                        //设置渲染的方式\n                        renderer.addValue(\"C区宿舍\", new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 255, 0, 0.5])));\n                        renderer.addValue(\"B区宿舍\", new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 0, 255, 0.5])));\n                        renderer.addValue(\"A区宿舍\",new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 0, 255, 0.5])));\n                        renderer.addValue(\"公共出口\", new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 255, 255, 0.75])));\n                        featureLayer.setRenderer(renderer);\n                        map.addLayer(featureLayer);              \n                    })  \n                });\n\n\n    </script>\n</head>\n<body>\n<div id=\"MyMapDiv\" class=\"MapClass\"></div>\n<button id=\"btn\">渲染</button>\n</body>\n</html>\n```\n运行结果之后：\n![02.png](02.png)\n#### 需求二（分类渲染）\n根据面积字段实现分类渲染，由于代码只是修改了渲染器，所以直接将代码贴出来\n##### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>UniqueValueRenderer</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n                    \"esri/layers/ArcGISDynamicMapServiceLayer\",\n                    \"dojo/on\",\n                    \"dojo/dom\",\n                    \"dojo/colors\",\n                    \"esri/symbols/SimpleFillSymbol\",\n                    \"esri/layers/FeatureLayer\",\n                    \"esri/symbols/SimpleLineSymbol\",\n                    \"esri/renderers/ClassBreaksRenderer\",\n                    \"dojo/domReady!\"],\n                function (Map, ArcGISDynamicMapServiceLayer,on,dom,Color,SimpleFillSymbol, FeatureLayer, SimpleLineSymbol,ClassBreaksRenderer) {\n                    var map = new esri.Map(\"MyMapDiv\");\n                    var layer = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer\");\n                    map.addLayer(layer);\n                    //获得id为btn的DOM元素\n                    var btn=dom.byId(\"btn\");\n                    //绑定相应的事件\n                    on(btn,\"click\",function(){\n                        //定义一个要素图层\n                        var featureLayer = new FeatureLayer(\n                        \"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1\",\n                         {\n                            mode:FeatureLayer.MODE_SNAPSHOT,\n                            outFields: [\"*\"]\n                         });\n                        //定义线符号\n                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                        //定义面符号\n                        var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color(\"#FFFFCC\"));\n                        //定义唯一值渲染器，对字段alias进行渲染，fill是默认的渲染符号\n                        var renderer = new ClassBreaksRenderer(fill, \"OBJECTID\");\n                        //设置渲染间隔\n                        renderer.addBreak(0,20, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 255, 0, 0.5])));\n                        renderer.addBreak(20,30, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 0, 255, 0.5])));\n                        renderer.addBreak(30,40,new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 0, 255, 0.5])));\n                        renderer.addBreak(40,60, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 255, 255, 0.75])));\n                        featureLayer.setRenderer(renderer);\n                        map.addLayer(featureLayer);              \n                    })  \n                });\n\n\n    </script>\n</head>\n<body>\n<div id=\"MyMapDiv\" class=\"MapClass\"></div>\n<button id=\"btn\">渲染</button>\n</body>\n</html>\n```\n运行结果后：\n![03.png](03.png)\n#### 需求三（服务器渲染）\n当数据量过大时，客户端渲染变显得有些慢了，此时可以使用服务器渲染，服务器渲染提供了两种渲染的方式：唯一值渲染，分类渲染，在此处我们用到的为分类渲染。\n\n注意：服务器渲染不需要要素服务。\n\n创建一个按钮（用于触发服务器渲染）\n```\n<input type=\"button\" id=\"Btn\" value=\"服务器渲染\" />\n```\n给按钮绑定点击事件\n```\non(btn,\"click\",function(e){\n                //定义线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                //定义面符号\n                var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new dojo.Color(\"#FFFFCC\"));\n                //创建服务器渲染对象\n                var RenderAnalyst = new GenerateRendererTask(\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1\");\n                //创建服务器渲染参数对象\n                var params = new GenerateRendererParameters();   \n                //创建颜色坡道对象\n                var colorRamp = new AlgorithmicColorRamp();\n                //颜色的起始位置\n                colorRamp.fromColor = dojo.colorFromHex(\"#998ec3\");\n                //颜色的终止位置\n                colorRamp.toColor = dojo.colorFromHex(\"#f1a340\");\n                //颜色的类型\n                colorRamp.algorithm = \"hsv\";\n                //告诉服务器我们需要什么样子的渲染器\n                var unidef = new ClassBreaksDefinition();\n                //分类的字段\n                unidef.classificationField = \"Shape.STArea()\";\n                //如何分类\n                unidef.classificationMethod=\"natural-breaks\";\n                //分为几类？\n                unidef.breakCount = 3;\n                //默认的符号\n                unidef.baseSymbol=fill;\n                //将自定义的颜色坡道告诉服务器\n                unidef.colorRamp=colorRamp;\n                //给渲染参数对象赋值\n                params.classificationDefinition = unidef;\n                //进行服务器渲染\n                RenderAnalyst.execute(params, showRender);\n                \n                \n            });\n```\n处理服务器返回的结果\n```\n//处理服务器返回来的结果\n            function showRender(renderer) {\n                \n                if (renderer != null) {\n                    //定义要素图层，注意：这个地方我们用到并不是要素服务，而是地图服务\n                    var featureLayer = new FeatureLayer(\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1\",{\n                        mode:  FeatureLayer.MODE_SNAPSHOT,\n                        outFields: [\"*\"]\n                    });     \n                    //赋予渲染器\n                    featureLayer.setRenderer(renderer);\n                    featureLayer.refresh();\n                    MyMap.addLayer(featureLayer);\n                }\n            }\n```\n#### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>GenerateRendererTask</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"dojo/dom\",\n            \"dojo/on\",\n            \"esri/tasks/GenerateRendererTask\",\n            \"esri/layers/FeatureLayer\",\n            \"esri/symbols/SimpleFillSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/tasks/GenerateRendererParameters\",\n            \"esri/tasks/ClassBreaksDefinition\",\n            \"esri/tasks/AlgorithmicColorRamp\",\n            \"dojo/domReady!\"], function\n                (Map,\n                 ArcGISDynamicMapServiceLayer,\n                 dom,on,\n                 GenerateRendererTask,\n                 FeatureLayer,\n                 SimpleFillSymbol,\n                 SimpleLineSymbol,\n                 GenerateRendererParameters,\n                 ClassBreaksDefinition,\n                 AlgorithmicColorRamp\n                ) {\n            //服务器端渲染\n            var MyMap = new Map(\"MyMapDiv\");\n            var layer = new ArcGISDynamicMapServiceLayer\n            (\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/\");\n            MyMap.addLayer(layer)\n            //获得id为Btn的DOM对象\n            var btn=dom.byId(\"Btn\");\n            //给btn绑定点击事件\n            on(btn,\"click\",function(e){\n                //定义线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                //定义面符号\n                var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new dojo.Color(\"#FFFFCC\"));\n                //创建服务器渲染对象\n                var RenderAnalyst = new GenerateRendererTask(\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1\");\n                //创建服务器渲染参数对象\n                var params = new GenerateRendererParameters();   \n                //创建颜色坡道对象\n                var colorRamp = new AlgorithmicColorRamp();\n                //颜色的起始位置\n                colorRamp.fromColor = dojo.colorFromHex(\"#998ec3\");\n                //颜色的终止位置\n                colorRamp.toColor = dojo.colorFromHex(\"#f1a340\");\n                //颜色的类型\n                colorRamp.algorithm = \"hsv\";\n                //告诉服务器我们需要什么样子的渲染器\n                var unidef = new ClassBreaksDefinition();\n                //分类的字段\n                unidef.classificationField = \"Shape.STArea()\";\n                //如何分类\n                unidef.classificationMethod=\"natural-breaks\";\n                //分为几类？\n                unidef.breakCount = 3;\n                //默认的符号\n                unidef.baseSymbol=fill;\n                //将自定义的颜色坡道告诉服务器\n                unidef.colorRamp=colorRamp;\n                //给渲染参数对象赋值\n                params.classificationDefinition = unidef;\n                //进行服务器渲染\n                RenderAnalyst.execute(params, showRender);\n                \n                \n            });\n            //处理服务器返回来的结果\n            function showRender(renderer) {\n                \n                if (renderer != null) {\n                    //定义要素图层，注意：这个地方我们用到并不是要素服务，而是地图服务\n                    var featureLayer = new FeatureLayer(\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1\",{\n                        mode:  FeatureLayer.MODE_SNAPSHOT,\n                        outFields: [\"*\"]\n                    });     \n                    //赋予渲染器\n                    featureLayer.setRenderer(renderer);\n                    featureLayer.refresh();\n                    MyMap.addLayer(featureLayer);\n                }\n            }\n        });\n    </script>\n</head>\n<body>\n<div id=\"MyMapDiv\" class=\"MapClass\"></div>\n<input type=\"button\" id=\"Btn\" value=\"服务器渲染\" />\n</body>\n</html>\n```\n![04.png](04.png)","slug":"ArcGIS-API-for-JS15","published":1,"updated":"2019-08-06T07:57:16.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5ctk000wt09zfld3bd64","content":"<p>在 GIS当中，总要时不时的制作几张专题图，制作专题图的过程中，不可避免的就要涉及到图层的渲染问题（即改变图层的颜色信息），渲染分为客户端渲染，服务器渲染，客户端渲染要求我们的服务必须是要素服务，或者是可以使用FeatureLayer接收的服务图层</p>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>首先我们查看一下数据（宿舍楼信息）<br><img src=\"/2019/08/06/ArcGIS-API-for-JS15/01.png\" alt=\"01.png\"></p>\n<h4 id=\"需求一（唯一值渲染）\"><a href=\"#需求一（唯一值渲染）\" class=\"headerlink\" title=\"需求一（唯一值渲染）\"></a>需求一（唯一值渲染）</h4><p>根据alias属性进行唯一值渲染</p>\n<h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><p>首先我们先将地图加载进来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var map = new esri.Map(&quot;MyMapDiv&quot;);</span><br><span class=\"line\">var layer = new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/my/fea/MapServer&quot;);</span><br><span class=\"line\">map.addLayer(layer);</span><br></pre></td></tr></table></figure></p>\n<p>定义一个渲染按钮<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;渲染&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>给按钮绑定相应的事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(btn,&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                        //定义一个要素图层</span><br><span class=\"line\">                        var featureLayer = new FeatureLayer(</span><br><span class=\"line\">                        &quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1&quot;,</span><br><span class=\"line\">                         &#123;</span><br><span class=\"line\">                            mode:FeatureLayer.MODE_SNAPSHOT,</span><br><span class=\"line\">                            outFields: [&quot;*&quot;]</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">                        //定义线符号</span><br><span class=\"line\">                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                        //定义面符号</span><br><span class=\"line\">                        var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color(&quot;#FFFFCC&quot;));</span><br><span class=\"line\">                        //定义唯一值渲染器，对字段alias进行渲染，fill是默认的渲染符号</span><br><span class=\"line\">                        var renderer = new UniqueValueRenderer(fill, &quot;alias&quot;);</span><br><span class=\"line\">                        //设置渲染的方式</span><br><span class=\"line\">                        renderer.addValue(&quot;C区宿舍&quot;, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 255, 0, 0.5])));</span><br><span class=\"line\">                        renderer.addValue(&quot;B区宿舍&quot;, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 0, 255, 0.5])));</span><br><span class=\"line\">                        renderer.addValue(&quot;A区宿舍&quot;,new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 0, 255, 0.5])));</span><br><span class=\"line\">                        renderer.addValue(&quot;公共出口&quot;, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 255, 255, 0.75])));</span><br><span class=\"line\">                        featureLayer.setRenderer(renderer);</span><br><span class=\"line\">                        map.addLayer(featureLayer);              </span><br><span class=\"line\">                    &#125;)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;UniqueValueRenderer&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">                    &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">                    &quot;dojo/on&quot;,</span><br><span class=\"line\">                    &quot;dojo/dom&quot;,</span><br><span class=\"line\">                    &quot;dojo/colors&quot;,</span><br><span class=\"line\">                    &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">                    &quot;esri/layers/FeatureLayer&quot;,</span><br><span class=\"line\">                    &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">                    &quot;esri/renderers/UniqueValueRenderer&quot;,</span><br><span class=\"line\">                    &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function (Map, ArcGISDynamicMapServiceLayer,on,dom,Color,SimpleFillSymbol, FeatureLayer, SimpleLineSymbol,UniqueValueRenderer) &#123;</span><br><span class=\"line\">                    var map = new esri.Map(&quot;MyMapDiv&quot;);</span><br><span class=\"line\">                    var layer = new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer&quot;);</span><br><span class=\"line\">                    map.addLayer(layer);</span><br><span class=\"line\">                    //获得id为btn的DOM元素</span><br><span class=\"line\">                    var btn=dom.byId(&quot;btn&quot;);</span><br><span class=\"line\">                    //绑定相应的事件</span><br><span class=\"line\">                    on(btn,&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                        //定义一个要素图层</span><br><span class=\"line\">                        var featureLayer = new FeatureLayer(</span><br><span class=\"line\">                        &quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1&quot;,</span><br><span class=\"line\">                         &#123;</span><br><span class=\"line\">                            mode:FeatureLayer.MODE_SNAPSHOT,</span><br><span class=\"line\">                            outFields: [&quot;*&quot;]</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">                        //定义线符号</span><br><span class=\"line\">                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                        //定义面符号</span><br><span class=\"line\">                        var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color(&quot;#FFFFCC&quot;));</span><br><span class=\"line\">                        //定义唯一值渲染器，对字段alias进行渲染，fill是默认的渲染符号</span><br><span class=\"line\">                        var renderer = new UniqueValueRenderer(fill, &quot;alias&quot;);</span><br><span class=\"line\">                        //设置渲染的方式</span><br><span class=\"line\">                        renderer.addValue(&quot;C区宿舍&quot;, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 255, 0, 0.5])));</span><br><span class=\"line\">                        renderer.addValue(&quot;B区宿舍&quot;, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 0, 255, 0.5])));</span><br><span class=\"line\">                        renderer.addValue(&quot;A区宿舍&quot;,new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 0, 255, 0.5])));</span><br><span class=\"line\">                        renderer.addValue(&quot;公共出口&quot;, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 255, 255, 0.75])));</span><br><span class=\"line\">                        featureLayer.setRenderer(renderer);</span><br><span class=\"line\">                        map.addLayer(featureLayer);              </span><br><span class=\"line\">                    &#125;)  </span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;MyMapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;渲染&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>运行结果之后：<br><img src=\"/2019/08/06/ArcGIS-API-for-JS15/02.png\" alt=\"02.png\"></p>\n<h4 id=\"需求二（分类渲染）\"><a href=\"#需求二（分类渲染）\" class=\"headerlink\" title=\"需求二（分类渲染）\"></a>需求二（分类渲染）</h4><p>根据面积字段实现分类渲染，由于代码只是修改了渲染器，所以直接将代码贴出来</p>\n<h5 id=\"全部代码-1\"><a href=\"#全部代码-1\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;UniqueValueRenderer&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">                    &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">                    &quot;dojo/on&quot;,</span><br><span class=\"line\">                    &quot;dojo/dom&quot;,</span><br><span class=\"line\">                    &quot;dojo/colors&quot;,</span><br><span class=\"line\">                    &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">                    &quot;esri/layers/FeatureLayer&quot;,</span><br><span class=\"line\">                    &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">                    &quot;esri/renderers/ClassBreaksRenderer&quot;,</span><br><span class=\"line\">                    &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function (Map, ArcGISDynamicMapServiceLayer,on,dom,Color,SimpleFillSymbol, FeatureLayer, SimpleLineSymbol,ClassBreaksRenderer) &#123;</span><br><span class=\"line\">                    var map = new esri.Map(&quot;MyMapDiv&quot;);</span><br><span class=\"line\">                    var layer = new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer&quot;);</span><br><span class=\"line\">                    map.addLayer(layer);</span><br><span class=\"line\">                    //获得id为btn的DOM元素</span><br><span class=\"line\">                    var btn=dom.byId(&quot;btn&quot;);</span><br><span class=\"line\">                    //绑定相应的事件</span><br><span class=\"line\">                    on(btn,&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                        //定义一个要素图层</span><br><span class=\"line\">                        var featureLayer = new FeatureLayer(</span><br><span class=\"line\">                        &quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1&quot;,</span><br><span class=\"line\">                         &#123;</span><br><span class=\"line\">                            mode:FeatureLayer.MODE_SNAPSHOT,</span><br><span class=\"line\">                            outFields: [&quot;*&quot;]</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">                        //定义线符号</span><br><span class=\"line\">                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                        //定义面符号</span><br><span class=\"line\">                        var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color(&quot;#FFFFCC&quot;));</span><br><span class=\"line\">                        //定义唯一值渲染器，对字段alias进行渲染，fill是默认的渲染符号</span><br><span class=\"line\">                        var renderer = new ClassBreaksRenderer(fill, &quot;OBJECTID&quot;);</span><br><span class=\"line\">                        //设置渲染间隔</span><br><span class=\"line\">                        renderer.addBreak(0,20, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 255, 0, 0.5])));</span><br><span class=\"line\">                        renderer.addBreak(20,30, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 0, 255, 0.5])));</span><br><span class=\"line\">                        renderer.addBreak(30,40,new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 0, 255, 0.5])));</span><br><span class=\"line\">                        renderer.addBreak(40,60, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 255, 255, 0.75])));</span><br><span class=\"line\">                        featureLayer.setRenderer(renderer);</span><br><span class=\"line\">                        map.addLayer(featureLayer);              </span><br><span class=\"line\">                    &#125;)  </span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;MyMapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;渲染&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>运行结果后：<br><img src=\"/2019/08/06/ArcGIS-API-for-JS15/03.png\" alt=\"03.png\"></p>\n<h4 id=\"需求三（服务器渲染）\"><a href=\"#需求三（服务器渲染）\" class=\"headerlink\" title=\"需求三（服务器渲染）\"></a>需求三（服务器渲染）</h4><p>当数据量过大时，客户端渲染变显得有些慢了，此时可以使用服务器渲染，服务器渲染提供了两种渲染的方式：唯一值渲染，分类渲染，在此处我们用到的为分类渲染。</p>\n<p>注意：服务器渲染不需要要素服务。</p>\n<p>创建一个按钮（用于触发服务器渲染）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;button&quot; id=&quot;Btn&quot; value=&quot;服务器渲染&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>给按钮绑定点击事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(btn,&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义面符号</span><br><span class=\"line\">                var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new dojo.Color(&quot;#FFFFCC&quot;));</span><br><span class=\"line\">                //创建服务器渲染对象</span><br><span class=\"line\">                var RenderAnalyst = new GenerateRendererTask(&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1&quot;);</span><br><span class=\"line\">                //创建服务器渲染参数对象</span><br><span class=\"line\">                var params = new GenerateRendererParameters();   </span><br><span class=\"line\">                //创建颜色坡道对象</span><br><span class=\"line\">                var colorRamp = new AlgorithmicColorRamp();</span><br><span class=\"line\">                //颜色的起始位置</span><br><span class=\"line\">                colorRamp.fromColor = dojo.colorFromHex(&quot;#998ec3&quot;);</span><br><span class=\"line\">                //颜色的终止位置</span><br><span class=\"line\">                colorRamp.toColor = dojo.colorFromHex(&quot;#f1a340&quot;);</span><br><span class=\"line\">                //颜色的类型</span><br><span class=\"line\">                colorRamp.algorithm = &quot;hsv&quot;;</span><br><span class=\"line\">                //告诉服务器我们需要什么样子的渲染器</span><br><span class=\"line\">                var unidef = new ClassBreaksDefinition();</span><br><span class=\"line\">                //分类的字段</span><br><span class=\"line\">                unidef.classificationField = &quot;Shape.STArea()&quot;;</span><br><span class=\"line\">                //如何分类</span><br><span class=\"line\">                unidef.classificationMethod=&quot;natural-breaks&quot;;</span><br><span class=\"line\">                //分为几类？</span><br><span class=\"line\">                unidef.breakCount = 3;</span><br><span class=\"line\">                //默认的符号</span><br><span class=\"line\">                unidef.baseSymbol=fill;</span><br><span class=\"line\">                //将自定义的颜色坡道告诉服务器</span><br><span class=\"line\">                unidef.colorRamp=colorRamp;</span><br><span class=\"line\">                //给渲染参数对象赋值</span><br><span class=\"line\">                params.classificationDefinition = unidef;</span><br><span class=\"line\">                //进行服务器渲染</span><br><span class=\"line\">                RenderAnalyst.execute(params, showRender);</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>处理服务器返回的结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//处理服务器返回来的结果</span><br><span class=\"line\">            function showRender(renderer) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                if (renderer != null) &#123;</span><br><span class=\"line\">                    //定义要素图层，注意：这个地方我们用到并不是要素服务，而是地图服务</span><br><span class=\"line\">                    var featureLayer = new FeatureLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1&quot;,&#123;</span><br><span class=\"line\">                        mode:  FeatureLayer.MODE_SNAPSHOT,</span><br><span class=\"line\">                        outFields: [&quot;*&quot;]</span><br><span class=\"line\">                    &#125;);     </span><br><span class=\"line\">                    //赋予渲染器</span><br><span class=\"line\">                    featureLayer.setRenderer(renderer);</span><br><span class=\"line\">                    featureLayer.refresh();</span><br><span class=\"line\">                    MyMap.addLayer(featureLayer);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"全部代码-2\"><a href=\"#全部代码-2\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;GenerateRendererTask&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/GenerateRendererTask&quot;,</span><br><span class=\"line\">            &quot;esri/layers/FeatureLayer&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/GenerateRendererParameters&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/ClassBreaksDefinition&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/AlgorithmicColorRamp&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;], function</span><br><span class=\"line\">                (Map,</span><br><span class=\"line\">                 ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                 dom,on,</span><br><span class=\"line\">                 GenerateRendererTask,</span><br><span class=\"line\">                 FeatureLayer,</span><br><span class=\"line\">                 SimpleFillSymbol,</span><br><span class=\"line\">                 SimpleLineSymbol,</span><br><span class=\"line\">                 GenerateRendererParameters,</span><br><span class=\"line\">                 ClassBreaksDefinition,</span><br><span class=\"line\">                 AlgorithmicColorRamp</span><br><span class=\"line\">                ) &#123;</span><br><span class=\"line\">            //服务器端渲染</span><br><span class=\"line\">            var MyMap = new Map(&quot;MyMapDiv&quot;);</span><br><span class=\"line\">            var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">            (&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/&quot;);</span><br><span class=\"line\">            MyMap.addLayer(layer)</span><br><span class=\"line\">            //获得id为Btn的DOM对象</span><br><span class=\"line\">            var btn=dom.byId(&quot;Btn&quot;);</span><br><span class=\"line\">            //给btn绑定点击事件</span><br><span class=\"line\">            on(btn,&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义面符号</span><br><span class=\"line\">                var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new dojo.Color(&quot;#FFFFCC&quot;));</span><br><span class=\"line\">                //创建服务器渲染对象</span><br><span class=\"line\">                var RenderAnalyst = new GenerateRendererTask(&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1&quot;);</span><br><span class=\"line\">                //创建服务器渲染参数对象</span><br><span class=\"line\">                var params = new GenerateRendererParameters();   </span><br><span class=\"line\">                //创建颜色坡道对象</span><br><span class=\"line\">                var colorRamp = new AlgorithmicColorRamp();</span><br><span class=\"line\">                //颜色的起始位置</span><br><span class=\"line\">                colorRamp.fromColor = dojo.colorFromHex(&quot;#998ec3&quot;);</span><br><span class=\"line\">                //颜色的终止位置</span><br><span class=\"line\">                colorRamp.toColor = dojo.colorFromHex(&quot;#f1a340&quot;);</span><br><span class=\"line\">                //颜色的类型</span><br><span class=\"line\">                colorRamp.algorithm = &quot;hsv&quot;;</span><br><span class=\"line\">                //告诉服务器我们需要什么样子的渲染器</span><br><span class=\"line\">                var unidef = new ClassBreaksDefinition();</span><br><span class=\"line\">                //分类的字段</span><br><span class=\"line\">                unidef.classificationField = &quot;Shape.STArea()&quot;;</span><br><span class=\"line\">                //如何分类</span><br><span class=\"line\">                unidef.classificationMethod=&quot;natural-breaks&quot;;</span><br><span class=\"line\">                //分为几类？</span><br><span class=\"line\">                unidef.breakCount = 3;</span><br><span class=\"line\">                //默认的符号</span><br><span class=\"line\">                unidef.baseSymbol=fill;</span><br><span class=\"line\">                //将自定义的颜色坡道告诉服务器</span><br><span class=\"line\">                unidef.colorRamp=colorRamp;</span><br><span class=\"line\">                //给渲染参数对象赋值</span><br><span class=\"line\">                params.classificationDefinition = unidef;</span><br><span class=\"line\">                //进行服务器渲染</span><br><span class=\"line\">                RenderAnalyst.execute(params, showRender);</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            //处理服务器返回来的结果</span><br><span class=\"line\">            function showRender(renderer) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                if (renderer != null) &#123;</span><br><span class=\"line\">                    //定义要素图层，注意：这个地方我们用到并不是要素服务，而是地图服务</span><br><span class=\"line\">                    var featureLayer = new FeatureLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1&quot;,&#123;</span><br><span class=\"line\">                        mode:  FeatureLayer.MODE_SNAPSHOT,</span><br><span class=\"line\">                        outFields: [&quot;*&quot;]</span><br><span class=\"line\">                    &#125;);     </span><br><span class=\"line\">                    //赋予渲染器</span><br><span class=\"line\">                    featureLayer.setRenderer(renderer);</span><br><span class=\"line\">                    featureLayer.refresh();</span><br><span class=\"line\">                    MyMap.addLayer(featureLayer);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;MyMapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; id=&quot;Btn&quot; value=&quot;服务器渲染&quot; /&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/08/06/ArcGIS-API-for-JS15/04.png\" alt=\"04.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 GIS当中，总要时不时的制作几张专题图，制作专题图的过程中，不可避免的就要涉及到图层的渲染问题（即改变图层的颜色信息），渲染分为客户端渲染，服务器渲染，客户端渲染要求我们的服务必须是要素服务，或者是可以使用FeatureLayer接收的服务图层</p>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>首先我们查看一下数据（宿舍楼信息）<br><img src=\"/2019/08/06/ArcGIS-API-for-JS15/01.png\" alt=\"01.png\"></p>\n<h4 id=\"需求一（唯一值渲染）\"><a href=\"#需求一（唯一值渲染）\" class=\"headerlink\" title=\"需求一（唯一值渲染）\"></a>需求一（唯一值渲染）</h4><p>根据alias属性进行唯一值渲染</p>\n<h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><p>首先我们先将地图加载进来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var map = new esri.Map(&quot;MyMapDiv&quot;);</span><br><span class=\"line\">var layer = new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/my/fea/MapServer&quot;);</span><br><span class=\"line\">map.addLayer(layer);</span><br></pre></td></tr></table></figure></p>\n<p>定义一个渲染按钮<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;渲染&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>给按钮绑定相应的事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(btn,&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                        //定义一个要素图层</span><br><span class=\"line\">                        var featureLayer = new FeatureLayer(</span><br><span class=\"line\">                        &quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1&quot;,</span><br><span class=\"line\">                         &#123;</span><br><span class=\"line\">                            mode:FeatureLayer.MODE_SNAPSHOT,</span><br><span class=\"line\">                            outFields: [&quot;*&quot;]</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">                        //定义线符号</span><br><span class=\"line\">                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                        //定义面符号</span><br><span class=\"line\">                        var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color(&quot;#FFFFCC&quot;));</span><br><span class=\"line\">                        //定义唯一值渲染器，对字段alias进行渲染，fill是默认的渲染符号</span><br><span class=\"line\">                        var renderer = new UniqueValueRenderer(fill, &quot;alias&quot;);</span><br><span class=\"line\">                        //设置渲染的方式</span><br><span class=\"line\">                        renderer.addValue(&quot;C区宿舍&quot;, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 255, 0, 0.5])));</span><br><span class=\"line\">                        renderer.addValue(&quot;B区宿舍&quot;, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 0, 255, 0.5])));</span><br><span class=\"line\">                        renderer.addValue(&quot;A区宿舍&quot;,new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 0, 255, 0.5])));</span><br><span class=\"line\">                        renderer.addValue(&quot;公共出口&quot;, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 255, 255, 0.75])));</span><br><span class=\"line\">                        featureLayer.setRenderer(renderer);</span><br><span class=\"line\">                        map.addLayer(featureLayer);              </span><br><span class=\"line\">                    &#125;)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;UniqueValueRenderer&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">                    &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">                    &quot;dojo/on&quot;,</span><br><span class=\"line\">                    &quot;dojo/dom&quot;,</span><br><span class=\"line\">                    &quot;dojo/colors&quot;,</span><br><span class=\"line\">                    &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">                    &quot;esri/layers/FeatureLayer&quot;,</span><br><span class=\"line\">                    &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">                    &quot;esri/renderers/UniqueValueRenderer&quot;,</span><br><span class=\"line\">                    &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function (Map, ArcGISDynamicMapServiceLayer,on,dom,Color,SimpleFillSymbol, FeatureLayer, SimpleLineSymbol,UniqueValueRenderer) &#123;</span><br><span class=\"line\">                    var map = new esri.Map(&quot;MyMapDiv&quot;);</span><br><span class=\"line\">                    var layer = new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer&quot;);</span><br><span class=\"line\">                    map.addLayer(layer);</span><br><span class=\"line\">                    //获得id为btn的DOM元素</span><br><span class=\"line\">                    var btn=dom.byId(&quot;btn&quot;);</span><br><span class=\"line\">                    //绑定相应的事件</span><br><span class=\"line\">                    on(btn,&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                        //定义一个要素图层</span><br><span class=\"line\">                        var featureLayer = new FeatureLayer(</span><br><span class=\"line\">                        &quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1&quot;,</span><br><span class=\"line\">                         &#123;</span><br><span class=\"line\">                            mode:FeatureLayer.MODE_SNAPSHOT,</span><br><span class=\"line\">                            outFields: [&quot;*&quot;]</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">                        //定义线符号</span><br><span class=\"line\">                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                        //定义面符号</span><br><span class=\"line\">                        var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color(&quot;#FFFFCC&quot;));</span><br><span class=\"line\">                        //定义唯一值渲染器，对字段alias进行渲染，fill是默认的渲染符号</span><br><span class=\"line\">                        var renderer = new UniqueValueRenderer(fill, &quot;alias&quot;);</span><br><span class=\"line\">                        //设置渲染的方式</span><br><span class=\"line\">                        renderer.addValue(&quot;C区宿舍&quot;, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 255, 0, 0.5])));</span><br><span class=\"line\">                        renderer.addValue(&quot;B区宿舍&quot;, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 0, 255, 0.5])));</span><br><span class=\"line\">                        renderer.addValue(&quot;A区宿舍&quot;,new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 0, 255, 0.5])));</span><br><span class=\"line\">                        renderer.addValue(&quot;公共出口&quot;, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 255, 255, 0.75])));</span><br><span class=\"line\">                        featureLayer.setRenderer(renderer);</span><br><span class=\"line\">                        map.addLayer(featureLayer);              </span><br><span class=\"line\">                    &#125;)  </span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;MyMapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;渲染&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>运行结果之后：<br><img src=\"/2019/08/06/ArcGIS-API-for-JS15/02.png\" alt=\"02.png\"></p>\n<h4 id=\"需求二（分类渲染）\"><a href=\"#需求二（分类渲染）\" class=\"headerlink\" title=\"需求二（分类渲染）\"></a>需求二（分类渲染）</h4><p>根据面积字段实现分类渲染，由于代码只是修改了渲染器，所以直接将代码贴出来</p>\n<h5 id=\"全部代码-1\"><a href=\"#全部代码-1\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;UniqueValueRenderer&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">                    &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">                    &quot;dojo/on&quot;,</span><br><span class=\"line\">                    &quot;dojo/dom&quot;,</span><br><span class=\"line\">                    &quot;dojo/colors&quot;,</span><br><span class=\"line\">                    &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">                    &quot;esri/layers/FeatureLayer&quot;,</span><br><span class=\"line\">                    &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">                    &quot;esri/renderers/ClassBreaksRenderer&quot;,</span><br><span class=\"line\">                    &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function (Map, ArcGISDynamicMapServiceLayer,on,dom,Color,SimpleFillSymbol, FeatureLayer, SimpleLineSymbol,ClassBreaksRenderer) &#123;</span><br><span class=\"line\">                    var map = new esri.Map(&quot;MyMapDiv&quot;);</span><br><span class=\"line\">                    var layer = new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer&quot;);</span><br><span class=\"line\">                    map.addLayer(layer);</span><br><span class=\"line\">                    //获得id为btn的DOM元素</span><br><span class=\"line\">                    var btn=dom.byId(&quot;btn&quot;);</span><br><span class=\"line\">                    //绑定相应的事件</span><br><span class=\"line\">                    on(btn,&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                        //定义一个要素图层</span><br><span class=\"line\">                        var featureLayer = new FeatureLayer(</span><br><span class=\"line\">                        &quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1&quot;,</span><br><span class=\"line\">                         &#123;</span><br><span class=\"line\">                            mode:FeatureLayer.MODE_SNAPSHOT,</span><br><span class=\"line\">                            outFields: [&quot;*&quot;]</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">                        //定义线符号</span><br><span class=\"line\">                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                        //定义面符号</span><br><span class=\"line\">                        var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color(&quot;#FFFFCC&quot;));</span><br><span class=\"line\">                        //定义唯一值渲染器，对字段alias进行渲染，fill是默认的渲染符号</span><br><span class=\"line\">                        var renderer = new ClassBreaksRenderer(fill, &quot;OBJECTID&quot;);</span><br><span class=\"line\">                        //设置渲染间隔</span><br><span class=\"line\">                        renderer.addBreak(0,20, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 255, 0, 0.5])));</span><br><span class=\"line\">                        renderer.addBreak(20,30, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([0, 0, 255, 0.5])));</span><br><span class=\"line\">                        renderer.addBreak(30,40,new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 0, 255, 0.5])));</span><br><span class=\"line\">                        renderer.addBreak(40,60, new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new Color([255, 255, 255, 0.75])));</span><br><span class=\"line\">                        featureLayer.setRenderer(renderer);</span><br><span class=\"line\">                        map.addLayer(featureLayer);              </span><br><span class=\"line\">                    &#125;)  </span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;MyMapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;渲染&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>运行结果后：<br><img src=\"/2019/08/06/ArcGIS-API-for-JS15/03.png\" alt=\"03.png\"></p>\n<h4 id=\"需求三（服务器渲染）\"><a href=\"#需求三（服务器渲染）\" class=\"headerlink\" title=\"需求三（服务器渲染）\"></a>需求三（服务器渲染）</h4><p>当数据量过大时，客户端渲染变显得有些慢了，此时可以使用服务器渲染，服务器渲染提供了两种渲染的方式：唯一值渲染，分类渲染，在此处我们用到的为分类渲染。</p>\n<p>注意：服务器渲染不需要要素服务。</p>\n<p>创建一个按钮（用于触发服务器渲染）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;button&quot; id=&quot;Btn&quot; value=&quot;服务器渲染&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>给按钮绑定点击事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(btn,&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义面符号</span><br><span class=\"line\">                var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new dojo.Color(&quot;#FFFFCC&quot;));</span><br><span class=\"line\">                //创建服务器渲染对象</span><br><span class=\"line\">                var RenderAnalyst = new GenerateRendererTask(&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1&quot;);</span><br><span class=\"line\">                //创建服务器渲染参数对象</span><br><span class=\"line\">                var params = new GenerateRendererParameters();   </span><br><span class=\"line\">                //创建颜色坡道对象</span><br><span class=\"line\">                var colorRamp = new AlgorithmicColorRamp();</span><br><span class=\"line\">                //颜色的起始位置</span><br><span class=\"line\">                colorRamp.fromColor = dojo.colorFromHex(&quot;#998ec3&quot;);</span><br><span class=\"line\">                //颜色的终止位置</span><br><span class=\"line\">                colorRamp.toColor = dojo.colorFromHex(&quot;#f1a340&quot;);</span><br><span class=\"line\">                //颜色的类型</span><br><span class=\"line\">                colorRamp.algorithm = &quot;hsv&quot;;</span><br><span class=\"line\">                //告诉服务器我们需要什么样子的渲染器</span><br><span class=\"line\">                var unidef = new ClassBreaksDefinition();</span><br><span class=\"line\">                //分类的字段</span><br><span class=\"line\">                unidef.classificationField = &quot;Shape.STArea()&quot;;</span><br><span class=\"line\">                //如何分类</span><br><span class=\"line\">                unidef.classificationMethod=&quot;natural-breaks&quot;;</span><br><span class=\"line\">                //分为几类？</span><br><span class=\"line\">                unidef.breakCount = 3;</span><br><span class=\"line\">                //默认的符号</span><br><span class=\"line\">                unidef.baseSymbol=fill;</span><br><span class=\"line\">                //将自定义的颜色坡道告诉服务器</span><br><span class=\"line\">                unidef.colorRamp=colorRamp;</span><br><span class=\"line\">                //给渲染参数对象赋值</span><br><span class=\"line\">                params.classificationDefinition = unidef;</span><br><span class=\"line\">                //进行服务器渲染</span><br><span class=\"line\">                RenderAnalyst.execute(params, showRender);</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>处理服务器返回的结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//处理服务器返回来的结果</span><br><span class=\"line\">            function showRender(renderer) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                if (renderer != null) &#123;</span><br><span class=\"line\">                    //定义要素图层，注意：这个地方我们用到并不是要素服务，而是地图服务</span><br><span class=\"line\">                    var featureLayer = new FeatureLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1&quot;,&#123;</span><br><span class=\"line\">                        mode:  FeatureLayer.MODE_SNAPSHOT,</span><br><span class=\"line\">                        outFields: [&quot;*&quot;]</span><br><span class=\"line\">                    &#125;);     </span><br><span class=\"line\">                    //赋予渲染器</span><br><span class=\"line\">                    featureLayer.setRenderer(renderer);</span><br><span class=\"line\">                    featureLayer.refresh();</span><br><span class=\"line\">                    MyMap.addLayer(featureLayer);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"全部代码-2\"><a href=\"#全部代码-2\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;GenerateRendererTask&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/GenerateRendererTask&quot;,</span><br><span class=\"line\">            &quot;esri/layers/FeatureLayer&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/GenerateRendererParameters&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/ClassBreaksDefinition&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/AlgorithmicColorRamp&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;], function</span><br><span class=\"line\">                (Map,</span><br><span class=\"line\">                 ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                 dom,on,</span><br><span class=\"line\">                 GenerateRendererTask,</span><br><span class=\"line\">                 FeatureLayer,</span><br><span class=\"line\">                 SimpleFillSymbol,</span><br><span class=\"line\">                 SimpleLineSymbol,</span><br><span class=\"line\">                 GenerateRendererParameters,</span><br><span class=\"line\">                 ClassBreaksDefinition,</span><br><span class=\"line\">                 AlgorithmicColorRamp</span><br><span class=\"line\">                ) &#123;</span><br><span class=\"line\">            //服务器端渲染</span><br><span class=\"line\">            var MyMap = new Map(&quot;MyMapDiv&quot;);</span><br><span class=\"line\">            var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">            (&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/&quot;);</span><br><span class=\"line\">            MyMap.addLayer(layer)</span><br><span class=\"line\">            //获得id为Btn的DOM对象</span><br><span class=\"line\">            var btn=dom.byId(&quot;Btn&quot;);</span><br><span class=\"line\">            //给btn绑定点击事件</span><br><span class=\"line\">            on(btn,&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义面符号</span><br><span class=\"line\">                var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,new dojo.Color(&quot;#FFFFCC&quot;));</span><br><span class=\"line\">                //创建服务器渲染对象</span><br><span class=\"line\">                var RenderAnalyst = new GenerateRendererTask(&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1&quot;);</span><br><span class=\"line\">                //创建服务器渲染参数对象</span><br><span class=\"line\">                var params = new GenerateRendererParameters();   </span><br><span class=\"line\">                //创建颜色坡道对象</span><br><span class=\"line\">                var colorRamp = new AlgorithmicColorRamp();</span><br><span class=\"line\">                //颜色的起始位置</span><br><span class=\"line\">                colorRamp.fromColor = dojo.colorFromHex(&quot;#998ec3&quot;);</span><br><span class=\"line\">                //颜色的终止位置</span><br><span class=\"line\">                colorRamp.toColor = dojo.colorFromHex(&quot;#f1a340&quot;);</span><br><span class=\"line\">                //颜色的类型</span><br><span class=\"line\">                colorRamp.algorithm = &quot;hsv&quot;;</span><br><span class=\"line\">                //告诉服务器我们需要什么样子的渲染器</span><br><span class=\"line\">                var unidef = new ClassBreaksDefinition();</span><br><span class=\"line\">                //分类的字段</span><br><span class=\"line\">                unidef.classificationField = &quot;Shape.STArea()&quot;;</span><br><span class=\"line\">                //如何分类</span><br><span class=\"line\">                unidef.classificationMethod=&quot;natural-breaks&quot;;</span><br><span class=\"line\">                //分为几类？</span><br><span class=\"line\">                unidef.breakCount = 3;</span><br><span class=\"line\">                //默认的符号</span><br><span class=\"line\">                unidef.baseSymbol=fill;</span><br><span class=\"line\">                //将自定义的颜色坡道告诉服务器</span><br><span class=\"line\">                unidef.colorRamp=colorRamp;</span><br><span class=\"line\">                //给渲染参数对象赋值</span><br><span class=\"line\">                params.classificationDefinition = unidef;</span><br><span class=\"line\">                //进行服务器渲染</span><br><span class=\"line\">                RenderAnalyst.execute(params, showRender);</span><br><span class=\"line\">                </span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            //处理服务器返回来的结果</span><br><span class=\"line\">            function showRender(renderer) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                if (renderer != null) &#123;</span><br><span class=\"line\">                    //定义要素图层，注意：这个地方我们用到并不是要素服务，而是地图服务</span><br><span class=\"line\">                    var featureLayer = new FeatureLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer/1&quot;,&#123;</span><br><span class=\"line\">                        mode:  FeatureLayer.MODE_SNAPSHOT,</span><br><span class=\"line\">                        outFields: [&quot;*&quot;]</span><br><span class=\"line\">                    &#125;);     </span><br><span class=\"line\">                    //赋予渲染器</span><br><span class=\"line\">                    featureLayer.setRenderer(renderer);</span><br><span class=\"line\">                    featureLayer.refresh();</span><br><span class=\"line\">                    MyMap.addLayer(featureLayer);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;MyMapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; id=&quot;Btn&quot; value=&quot;服务器渲染&quot; /&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/08/06/ArcGIS-API-for-JS15/04.png\" alt=\"04.png\"></p>\n"},{"title":"ArcGIS API For Javascript之查询功能","date":"2019-08-06T07:26:24.000Z","_content":"在ArcGIS API中查询功能是非常常用的，Esri给我们提供了三个类用于实现矢量数据查询功能。FindTask,QueryTask,IdentifyTask，他们之间的区别为：\n\n* FindTask只能进行属性查询，QueryTask,IdentifyTask两个类既可以进行属性查询也可以进行空间查询。\n* 对于QueryTask,IdentifyTask两个类，QueryTask只可应用于一个单独的图层，IdentifyTask可应用于地图服务和多个图层\n* QueryTask可以进行简单的统计功能。\n\n### 需求\n#### 利用FindTask实现简单的属性查询\n![01.png](01.png)\n我们将name属性为J4的教学楼查询出来，在页面上显示J4是哪一个学院？（机电学院），并且将J4的楼高亮显示\n代码实现\n\n在页面加入一个地图（略）\n在页面添加一个button和一个div（button用于属性查询，div用于显示楼层的名字）\n```\n    <input type=\"button\" value=\"属性查询\" id=\"Btn\"/>\n    <div id=\"divShowResult\"></div>\n```\n创建属性查询对象并给button绑定点击事件\n```\n//地图服务的URL\n                var MapServer = \"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\";\n                //创建属性查询对象\n                var findTask = new FindTask(MapServer);\n                //创建属性查询参数\n                var findParams = new FindParameters();\n                on(dom.byId(\"Btn\"),\"click\",function(){\n                    //是否返回给我们几何信息\n                    findParams.returnGeometry = true;\n                    //对哪一个图层进行属性查询\n                    findParams.layerIds = [1];\n                    //查询的字段\n                    findParams.searchFields = [\"name\"];\n                    //searchText和searchFields结合使用，即查询name=J4\n                    findParams.searchText = \"J4\";\n                    //执行查询对象\n                    findTask.execute(findParams, ShowFindResult);\n                })\n```\n处理属性查询返回给我们的数据\n```\nfunction ShowFindResult(queryResult) {\n                    //创建线符号\n                    var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                    //创建面符号\n                    var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);\n                    if (queryResult.length == 0) {\n                        dom.byId(\"divShowResult\").innerHTML = \"\";\n                        return;\n                    }\n                    var htmls = \"\";\n                    if (queryResult.length >= 1) {\n                        htmls = htmls + \"<table style=\\\"width: 100%\\\">\";\n                        htmls = htmls + \"<tr><td>名称</td></tr>\";\n                        for (var i = 0; i < queryResult.length; i++) {\n                            //获得图形graphic\n                            var graphic = queryResult[i].feature;\n                            //赋予相应的符号\n                            graphic.setSymbol(fill);\n                            //将graphic添加到地图中，从而实现高亮效果\n                            map.graphics.add(graphic);\n                            //获得教学楼名称（此处是和shp属性表对应的）\n                            var ptName = graphic.attributes[\"alias\"];\n                            if (i % 2 == 0)\n                                htmls = htmls + \"<tr>\";\n                            else\n                                htmls = htmls + \"<tr bgcolor=\\\"#F0F0F0\\\">\";\n                            htmls = htmls + \"<td><a href=\\\"#\\\" \\\">\" + ptName + \"</a></td>\";\n                            htmls = htmls + \"</tr>\";\n                        }\n                        htmls = htmls + \"</table>\";\n                        //将属性绑定在divShowResult上面\n                        dom.byId(\"divShowResult\").innerHTML = htmls;\n                    }\n                }\n```\n##### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>FindTask</title>\n     <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"dojo/on\",\n            \"dojo/dom\",\n            \"esri/tasks/FindTask\",\n            \"esri/tasks/FindParameters\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/symbols/SimpleFillSymbol\", \n            \"esri/graphic\",\n            \"dojo/domReady!\"],\n            function (Map, ArcGISDynamicMapServiceLayer,on,dom,\n            FindTask, FindParameters, \n            SimpleLineSymbol,SimpleFillSymbol,Graphic) {   \n                var map = new esri.Map(\"mapDiv\");\n                //地图服务的URL\n                var MapServer = \"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\";\n                var layer = new esri.layers.ArcGISDynamicMapServiceLayer(MapServer);\n                map.addLayer(layer)\n                //创建属性查询对象\n                var findTask = new FindTask(MapServer);\n                //创建属性查询参数\n                var findParams = new FindParameters();\n                on(dom.byId(\"Btn\"),\"click\",function(){\n                    //是否返回给我们几何信息\n                    findParams.returnGeometry = true;\n                    //对哪一个图层进行属性查询\n                    findParams.layerIds = [1];\n                    //查询的字段\n                    findParams.searchFields = [\"name\"];\n                    //searchText和searchFields结合使用，即查询name=J4\n                    findParams.searchText = \"J4\";\n                    //执行查询对象\n                    findTask.execute(findParams, ShowFindResult);\n                })\n                function ShowFindResult(queryResult) {\n                    //创建线符号\n                    var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                    //创建面符号\n                    var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);\n                    if (queryResult.length == 0) {\n                        dom.byId(\"divShowResult\").innerHTML = \"\";\n                        return;\n                    }\n                    var htmls = \"\";\n                    if (queryResult.length >= 1) {\n                        htmls = htmls + \"<table style=\\\"width: 100%\\\">\";\n                        htmls = htmls + \"<tr><td>名称</td></tr>\";\n                        for (var i = 0; i < queryResult.length; i++) {\n                            //获得图形graphic\n                            var graphic = queryResult[i].feature;\n                            //赋予相应的符号\n                            graphic.setSymbol(fill);\n                            //将graphic添加到地图中，从而实现高亮效果\n                            map.graphics.add(graphic);\n                            //获得教学楼名称（此处是和shp属性表对应的）\n                            var ptName = graphic.attributes[\"alias\"];\n                            if (i % 2 == 0)\n                                htmls = htmls + \"<tr>\";\n                            else\n                                htmls = htmls + \"<tr bgcolor=\\\"#F0F0F0\\\">\";\n                            htmls = htmls + \"<td><a href=\\\"#\\\" \\\">\" + ptName + \"</a></td>\";\n                            htmls = htmls + \"</tr>\";\n                        }\n                        htmls = htmls + \"</table>\";\n                        //将属性绑定在divShowResult上面\n                        dom.byId(\"divShowResult\").innerHTML = htmls;\n                    }\n                }\n            \n        });\n\n\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div> \n    <input type=\"button\" value=\"属性查询\" id=\"Btn\"/>\n    <div id=\"divShowResult\"></div>\n</body>\n</html>\n```\n运行之后的结果为：\n![01.png](01.png)\n#### 利用QueryTask实现空间查询\n此时的的需求是：我们在地图上画一个图形，然后和图形相交的教学楼选择出来。\n```\n1.使用draw交互绘制几何形状\n2.根据geometry形状构建空间查询参数\n3.执行空间分析对象\n4.处理空间分析的结果\n```\n创建一个button和一个div（button用于激活绘图工具，div用户显示用户选择的教学楼的名称）\n```\n<input type=\"button\" value=\"空间查询\" id=\"Btn\"/>\n<div id=\"divShowResult\"></div>\n```\n给button绑定事件（激活绘图工具）\n```\n            //定义一个绘图工具\n            var toolBar = new Draw(map);\n            //给button绑定事件\n            on(dom.byId(\"Btn\"),\"click\",function(){  \n                //激活绘图工具，我要绘制一个面图形\n                toolBar.activate(Draw.POLYGON);\n            })\n```\n给绘图工具绑定绘图完成事件，绘图完成执行queryGraphic函数,并将绘制的geometry传入函数\n```\n        on(toolBar, \"draw-complete\", function (result) {\n                //获得绘图得到的面\n                var geometry=result.geometry;\n                //关闭绘图工具\n                toolBar.deactivate();\n                queryGraphic(geometry);\n            });\n```\n编写queryGraphic函数\n```\nfunction queryGraphic(geometry) {\n                //创建查询对象，注意：服务的后面有一个编号，代表对那一个图层进行查询\n                var queryTask = new QueryTask(\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/1\");\n                //创建查询参数对象\n                var query = new Query();\n                //空间查询的几何对象\n                query.geometry = geometry;\n                //服务器给我们返回的字段信息，*代表返回所有字段\n                query.outFields = [\"*\"];\n                //空间参考信息\n                query.outSpatialReference = map.spatialReference;\n                //查询的标准，此处代表和geometry相交的图形都要返回\n                query.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;\n                //是否返回几何信息\n                query.returnGeometry = true;\n                //执行空间查询\n                queryTask.execute(query, showQueryResult);\n            }\n```\n处理返回的结果信息\n```\nfunction showQueryResult(queryResult) {\n                //创建线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                //创建面符号\n                var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);\n                if (queryResult.features.length == 0) {\n                    dom.byId(\"divShowResult\").innerHTML = \"\";\n                    return;\n                }\n                var htmls = \"\";\n                if (queryResult.features.length >= 1) {\n                    htmls = htmls + \"<table style=\\\"width: 100%\\\">\";\n                    htmls = htmls + \"<tr><td>名称</td></tr>\";\n                    for (var i = 0; i < queryResult.features.length; i++) {\n                        //得到graphic\n                        var graphic = queryResult.features[i];\n                        //给图形赋予符号\n                        graphic.setSymbol(fill);\n                        //添加到地图从而实现高亮效果\n                        map.graphics.add(graphic);\n                        //获得教学楼的名称信息，此处应和shp的属性表对应\n                        var ptName = graphic.attributes[\"alias\"];\n                        if (i % 2 == 0)\n                            htmls = htmls + \"<tr>\";\n                        else\n                            htmls = htmls + \"<tr bgcolor=\\\"#F0F0F0\\\">\";\n                        htmls = htmls + \"<td><a href=\\\"#\\\"\\\">\" + ptName + \"</a></td>\";\n                        htmls = htmls + \"</tr>\";\n                    }\n                    htmls = htmls + \"</table>\";\n                    //将教学楼的名称信息和divShowResult绑定\n                    dom.byId(\"divShowResult\").innerHTML = htmls;\n                }\n            }\n```\n##### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>QueryTask</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"dojo/dom\",\n            \"dojo/on\",\n            \"esri/tasks/QueryTask\",\n            \"esri/toolbars/draw\",\n            \"esri/tasks/query\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/symbols/SimpleFillSymbol\", \n            \"esri/graphic\",\n            \"dojo/domReady!\"],\n            function (Map, ArcGISDynamicMapServiceLayer,dom, on,\n            QueryTask, Draw, Query,\n            SimpleLineSymbol,SimpleFillSymbol,Graphic) {\n            var map = new Map(\"mapdiv\");\n            var layer = new ArcGISDynamicMapServiceLayer\n            (\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\");\n            map.addLayer(layer)\n            //定义一个绘图工具\n            var toolBar = new Draw(map);\n            //给button绑定事件\n            on(dom.byId(\"Btn\"),\"click\",function(){  \n                //激活绘图工具，我要绘制一个面图形\n                toolBar.activate(Draw.POLYGON);\n            })\n            on(toolBar, \"draw-complete\", function (result) {\n                //获得绘图得到的面\n                var geometry=result.geometry;\n                //关闭绘图工具\n                toolBar.deactivate();\n                queryGraphic(geometry);\n            });\n            \n            function queryGraphic(geometry) {\n                //创建查询对象，注意：服务的后面有一个编号，代表对那一个图层进行查询\n                var queryTask = new QueryTask(\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/1\");\n                //创建查询参数对象\n                var query = new Query();\n                //空间查询的几何对象\n                query.geometry = geometry;\n                //服务器给我们返回的字段信息，*代表返回所有字段\n                query.outFields = [\"*\"];\n                //空间参考信息\n                query.outSpatialReference = map.spatialReference;\n                //查询的标准，此处代表和geometry相交的图形都要返回\n                query.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;\n                //是否返回几何信息\n                query.returnGeometry = true;\n                //执行空间查询\n                queryTask.execute(query, showQueryResult);\n            }\n\n            function showQueryResult(queryResult) {\n                //创建线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                //创建面符号\n                var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);\n                if (queryResult.features.length == 0) {\n                    dom.byId(\"divShowResult\").innerHTML = \"\";\n                    return;\n                }\n                var htmls = \"\";\n                if (queryResult.features.length >= 1) {\n                    htmls = htmls + \"<table style=\\\"width: 100%\\\">\";\n                    htmls = htmls + \"<tr><td>名称</td></tr>\";\n                    for (var i = 0; i < queryResult.features.length; i++) {\n                        //得到graphic\n                        var graphic = queryResult.features[i];\n                        //给图形赋予符号\n                        graphic.setSymbol(fill);\n                        //添加到地图从而实现高亮效果\n                        map.graphics.add(graphic);\n                        //获得教学楼的名称信息，此处应和shp的属性表对应\n                        var ptName = graphic.attributes[\"alias\"];\n                        if (i % 2 == 0)\n                            htmls = htmls + \"<tr>\";\n                        else\n                            htmls = htmls + \"<tr bgcolor=\\\"#F0F0F0\\\">\";\n                        htmls = htmls + \"<td><a href=\\\"#\\\"\\\">\" + ptName + \"</a></td>\";\n                        htmls = htmls + \"</tr>\";\n                    }\n                    htmls = htmls + \"</table>\";\n                    //将教学楼的名称信息和divShowResult绑定\n                    dom.byId(\"divShowResult\").innerHTML = htmls;\n                }\n            }\n\n           \n\n            \n        });\n\n\n    </script>\n</head>\n<body>\n    <div id=\"mapdiv\" class=\"MapClass\"></div>\n    <input type=\"button\" value=\"空间查询\" id=\"Btn\"/>\n    <div id=\"divShowResult\"></div>\n</body>\n</html>\n```\n运行之后的结果为：\n![03.png](03.png)\n#### 利用QueryTask进行属性查询\n利用QueryTask进行属性查询和空间查询代码差不多。\n#####全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>QueryTask</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"dojo/dom\",\n            \"dojo/on\",\n            \"esri/tasks/QueryTask\",\n            \"esri/tasks/query\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/symbols/SimpleFillSymbol\", \n            \"esri/graphic\",\n            \"dojo/domReady!\"],\n            function (Map, ArcGISDynamicMapServiceLayer,dom, on,\n            QueryTask, Query,\n            SimpleLineSymbol,SimpleFillSymbol,Graphic) {\n                //根据div的id属性创建地图\n                var map = new Map(\"mapDiv\");\n                //定义一个动态地图服务\n                var layer = new ArcGISDynamicMapServiceLayer\n                (\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\");\n                //将图层添加到地图\n                map.addLayer(layer)\n                //给属性查询按钮添加click事件\n                on(dom.byId(\"Btn\"),\"click\",function(e){\n                    //定义查询对象\n                    var queryTask = new QueryTask\n                    (\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/1\");\n                    //定义查询参数对象\n                    var query = new Query();\n                    //查询条件，类似于sql语句的where子句\n                    query.where = \"name = 'J4'\";;\n                    //返回的字段信息：*代表返回全部字段\n                    query.outFields = [\"*\"];\n                    //是否返回几何形状\n                    query.returnGeometry = true;\n                    //执行属性查询\n                    queryTask.execute(query, showQueryResult);\n                })\n                //属性查询完成之后，用showQueryResult来处理返回的结果\n                function showQueryResult(queryResult)\n                {\n                    //创建线符号\n                    var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                    //创建面符号\n                    var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);\n                    if (queryResult.features.length == 0) {\n                        dom.byId(\"divShowResult\").innerHTML = \"\";\n                        return;\n                    }\n                    var htmls = \"\";\n                    if (queryResult.features.length >= 1) {\n                        htmls = htmls + \"<table style=\\\"width: 100%\\\">\";\n                        htmls = htmls + \"<tr><td>名称</td></tr>\";\n                        for (var i = 0; i < queryResult.features.length; i++) {\n                            //获得图形graphic\n                            var graphic = queryResult.features[i];\n                            //赋予相应的符号\n                            graphic.setSymbol(fill);\n                            //将graphic添加到地图中，从而实现高亮效果\n                            map.graphics.add(graphic);\n                            //获得教学楼名称（此处是和shp属性表对应的）\n                            var ptName = graphic.attributes[\"alias\"];\n                            if (i % 2 == 0)\n                                htmls = htmls + \"<tr>\";\n                            else\n                                htmls = htmls + \"<tr bgcolor=\\\"#F0F0F0\\\">\";\n                            htmls = htmls + \"<td><a href=\\\"#\\\" \\\">\" + ptName + \"</a></td>\";\n                            htmls = htmls + \"</tr>\";\n                        }\n                        htmls = htmls + \"</table>\";\n                        //将属性绑定在divShowResult上面\n                        dom.byId(\"divShowResult\").innerHTML = htmls;\n                    }\n                }\n                \n              \n         \n\n            });\n\n\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n    <input type=\"button\" value=\"属性查询\" id=\"Btn\"/>\n    <div id=\"divShowResult\"></div>\n</body>\n</html>\n```\n运行之后的结果：\n![04.png](04.png)\n#### 利用IdentifyTask实现空间查询\nIdentifyTask的使用与QueryTask十分类似，唯一不同的是IdentifyTask可以作用于多个图层，而QueryTask是作用于一个图层的。\n##### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>WebGIS</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"dojo/on\",\n            \"dojo/dom\",\n            \"esri/tasks/IdentifyTask\",\n            \"esri/tasks/IdentifyParameters\",\n            \"esri/toolbars/draw\",\n            \"esri/symbols/SimpleFillSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/graphic\",\n            \"dojo/domReady!\"],\n            function (Map,\n                ArcGISDynamicMapServiceLayer,\n                on,\n                dom,\n                IdentifyTask,\n                IdentifyParameters,\n                Draw,\n                SimpleFillSymbol,\n                SimpleLineSymbol,\n                Graphic\n                ) {\n                    var map = new Map(\"mapDiv\");\n                    //地图服务的url\n                    MapServer = \"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\";\n                    //定义一个动态地图服务\n                    var layer = new ArcGISDynamicMapServiceLayer(MapServer);    \n                    map.addLayer(layer)\n                    //定义绘图对象\n                    var toolBar = new Draw(map);\n                    //绑定点击事件\n                    on(dom.byId(\"Btn\"),\"click\",function(e){\n                        //激活绘图工具：绘制面\n                        toolBar.activate(esri.toolbars.Draw.POLYGON);\n                        \n                    })\n                    //给绘图工具绑定绘图完成事件\n                    on(toolBar, \"draw-complete\", function (result)\n                    {\n                        //获得绘图得到的面\n                        var geometry=result.geometry;\n                        //关闭绘图工具\n                        toolBar.deactivate();\n                        //执行空间查询\n                        identifyQuery(geometry);\n                    });                   \n                    function identifyQuery(geometry) {\n                        //定义空间查询对象，注意他的参数是整个地图服务，而不是单个图层\n                        var identifyTask = new IdentifyTask(MapServer);\n                        //定义空间查询参数对象\n                        var params = new IdentifyParameters();\n                        //容差\n                        params.tolerance = 5;\n                        //是否返回几何信息\n                        params.returnGeometry = true;\n                        //空间查询的图层，此时是两个图层\n                        params.layerIds = [1,3];\n                        //空间查询的条件\n                        params.layerOption = IdentifyParameters.LAYER_OPTION_ALL;\n                        params.width = map.width;\n                        params.height = map.height;\n                        //空间查询的几何对象\n                        params.geometry = geometry;\n                        params.mapExtent = map.extent;\n                        //执行空间查询\n                        identifyTask.execute(params,showQueryResult);\n                    }\n                    //通过此函数处理查询之后的信息\n                    function showQueryResult(idResults) {\n                        //创建线符号\n                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                        //创建面符号\n                        var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);\n                        if (idResults.length > 0) {\n                                var htmls = \"<table style=\\\"width: 100%\\\">\";\n                                htmls = htmls + \"<tr bgcolor=\\\"#E0E0E0\\\"><td> 图层 </td><td> 名 称</td></tr>\";\n                                for (var i = 0; i < idResults.length; i++) {\n                                    var result = idResults[i];\n                                    //获得图形graphic\n                                    var graphic = result.feature;\n                                    //设置图形的符号\n                                    graphic.setSymbol(fill);\n                                    //获得教学楼的名称信息\n                                    var namevalue = result.feature.attributes.alias;\n                                    if (i % 2 == 1) {\n                                        htmls = htmls + \"<tr  bgcolor=\\\"#E0E0E0\\\"><td>\" +\n                                        result.layerName + \"</td><td>\" + namevalue + \"</td></tr>\";\n                                    }\n                                    else {\n                                        htmls = htmls + \"<tr><td>\" + result.layerName + \"</td><td>\"\n                                        + namevalue + \"</td></tr>\";\n                                    }\n                                    \n                                    map.graphics.add(graphic);\n                                }\n                                htmls = htmls + \"</table>\";\n                                document.getElementById(\"divShowResult\").innerHTML = htmls;\n                            }\n                            else {\n                                document.getElementById(\"divShowResult\").innerHTML = \"\";\n                            }\n                        }\n                        \n        });\n\n\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n    <input type=\"button\" value=\"空间查询---多边形\" id=\"Btn\"/>\n    <div id=\"divShowResult\"></div>\n</body>\n</html>\n```\n运行之后的结果：\n![05.png](05.png)","source":"_posts/ArcGIS-API-for-JS14.md","raw":"---\ntitle: ArcGIS API For Javascript之查询功能\ndate: 2019-08-06 15:26:24\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n在ArcGIS API中查询功能是非常常用的，Esri给我们提供了三个类用于实现矢量数据查询功能。FindTask,QueryTask,IdentifyTask，他们之间的区别为：\n\n* FindTask只能进行属性查询，QueryTask,IdentifyTask两个类既可以进行属性查询也可以进行空间查询。\n* 对于QueryTask,IdentifyTask两个类，QueryTask只可应用于一个单独的图层，IdentifyTask可应用于地图服务和多个图层\n* QueryTask可以进行简单的统计功能。\n\n### 需求\n#### 利用FindTask实现简单的属性查询\n![01.png](01.png)\n我们将name属性为J4的教学楼查询出来，在页面上显示J4是哪一个学院？（机电学院），并且将J4的楼高亮显示\n代码实现\n\n在页面加入一个地图（略）\n在页面添加一个button和一个div（button用于属性查询，div用于显示楼层的名字）\n```\n    <input type=\"button\" value=\"属性查询\" id=\"Btn\"/>\n    <div id=\"divShowResult\"></div>\n```\n创建属性查询对象并给button绑定点击事件\n```\n//地图服务的URL\n                var MapServer = \"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\";\n                //创建属性查询对象\n                var findTask = new FindTask(MapServer);\n                //创建属性查询参数\n                var findParams = new FindParameters();\n                on(dom.byId(\"Btn\"),\"click\",function(){\n                    //是否返回给我们几何信息\n                    findParams.returnGeometry = true;\n                    //对哪一个图层进行属性查询\n                    findParams.layerIds = [1];\n                    //查询的字段\n                    findParams.searchFields = [\"name\"];\n                    //searchText和searchFields结合使用，即查询name=J4\n                    findParams.searchText = \"J4\";\n                    //执行查询对象\n                    findTask.execute(findParams, ShowFindResult);\n                })\n```\n处理属性查询返回给我们的数据\n```\nfunction ShowFindResult(queryResult) {\n                    //创建线符号\n                    var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                    //创建面符号\n                    var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);\n                    if (queryResult.length == 0) {\n                        dom.byId(\"divShowResult\").innerHTML = \"\";\n                        return;\n                    }\n                    var htmls = \"\";\n                    if (queryResult.length >= 1) {\n                        htmls = htmls + \"<table style=\\\"width: 100%\\\">\";\n                        htmls = htmls + \"<tr><td>名称</td></tr>\";\n                        for (var i = 0; i < queryResult.length; i++) {\n                            //获得图形graphic\n                            var graphic = queryResult[i].feature;\n                            //赋予相应的符号\n                            graphic.setSymbol(fill);\n                            //将graphic添加到地图中，从而实现高亮效果\n                            map.graphics.add(graphic);\n                            //获得教学楼名称（此处是和shp属性表对应的）\n                            var ptName = graphic.attributes[\"alias\"];\n                            if (i % 2 == 0)\n                                htmls = htmls + \"<tr>\";\n                            else\n                                htmls = htmls + \"<tr bgcolor=\\\"#F0F0F0\\\">\";\n                            htmls = htmls + \"<td><a href=\\\"#\\\" \\\">\" + ptName + \"</a></td>\";\n                            htmls = htmls + \"</tr>\";\n                        }\n                        htmls = htmls + \"</table>\";\n                        //将属性绑定在divShowResult上面\n                        dom.byId(\"divShowResult\").innerHTML = htmls;\n                    }\n                }\n```\n##### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>FindTask</title>\n     <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"dojo/on\",\n            \"dojo/dom\",\n            \"esri/tasks/FindTask\",\n            \"esri/tasks/FindParameters\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/symbols/SimpleFillSymbol\", \n            \"esri/graphic\",\n            \"dojo/domReady!\"],\n            function (Map, ArcGISDynamicMapServiceLayer,on,dom,\n            FindTask, FindParameters, \n            SimpleLineSymbol,SimpleFillSymbol,Graphic) {   \n                var map = new esri.Map(\"mapDiv\");\n                //地图服务的URL\n                var MapServer = \"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\";\n                var layer = new esri.layers.ArcGISDynamicMapServiceLayer(MapServer);\n                map.addLayer(layer)\n                //创建属性查询对象\n                var findTask = new FindTask(MapServer);\n                //创建属性查询参数\n                var findParams = new FindParameters();\n                on(dom.byId(\"Btn\"),\"click\",function(){\n                    //是否返回给我们几何信息\n                    findParams.returnGeometry = true;\n                    //对哪一个图层进行属性查询\n                    findParams.layerIds = [1];\n                    //查询的字段\n                    findParams.searchFields = [\"name\"];\n                    //searchText和searchFields结合使用，即查询name=J4\n                    findParams.searchText = \"J4\";\n                    //执行查询对象\n                    findTask.execute(findParams, ShowFindResult);\n                })\n                function ShowFindResult(queryResult) {\n                    //创建线符号\n                    var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                    //创建面符号\n                    var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);\n                    if (queryResult.length == 0) {\n                        dom.byId(\"divShowResult\").innerHTML = \"\";\n                        return;\n                    }\n                    var htmls = \"\";\n                    if (queryResult.length >= 1) {\n                        htmls = htmls + \"<table style=\\\"width: 100%\\\">\";\n                        htmls = htmls + \"<tr><td>名称</td></tr>\";\n                        for (var i = 0; i < queryResult.length; i++) {\n                            //获得图形graphic\n                            var graphic = queryResult[i].feature;\n                            //赋予相应的符号\n                            graphic.setSymbol(fill);\n                            //将graphic添加到地图中，从而实现高亮效果\n                            map.graphics.add(graphic);\n                            //获得教学楼名称（此处是和shp属性表对应的）\n                            var ptName = graphic.attributes[\"alias\"];\n                            if (i % 2 == 0)\n                                htmls = htmls + \"<tr>\";\n                            else\n                                htmls = htmls + \"<tr bgcolor=\\\"#F0F0F0\\\">\";\n                            htmls = htmls + \"<td><a href=\\\"#\\\" \\\">\" + ptName + \"</a></td>\";\n                            htmls = htmls + \"</tr>\";\n                        }\n                        htmls = htmls + \"</table>\";\n                        //将属性绑定在divShowResult上面\n                        dom.byId(\"divShowResult\").innerHTML = htmls;\n                    }\n                }\n            \n        });\n\n\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div> \n    <input type=\"button\" value=\"属性查询\" id=\"Btn\"/>\n    <div id=\"divShowResult\"></div>\n</body>\n</html>\n```\n运行之后的结果为：\n![01.png](01.png)\n#### 利用QueryTask实现空间查询\n此时的的需求是：我们在地图上画一个图形，然后和图形相交的教学楼选择出来。\n```\n1.使用draw交互绘制几何形状\n2.根据geometry形状构建空间查询参数\n3.执行空间分析对象\n4.处理空间分析的结果\n```\n创建一个button和一个div（button用于激活绘图工具，div用户显示用户选择的教学楼的名称）\n```\n<input type=\"button\" value=\"空间查询\" id=\"Btn\"/>\n<div id=\"divShowResult\"></div>\n```\n给button绑定事件（激活绘图工具）\n```\n            //定义一个绘图工具\n            var toolBar = new Draw(map);\n            //给button绑定事件\n            on(dom.byId(\"Btn\"),\"click\",function(){  \n                //激活绘图工具，我要绘制一个面图形\n                toolBar.activate(Draw.POLYGON);\n            })\n```\n给绘图工具绑定绘图完成事件，绘图完成执行queryGraphic函数,并将绘制的geometry传入函数\n```\n        on(toolBar, \"draw-complete\", function (result) {\n                //获得绘图得到的面\n                var geometry=result.geometry;\n                //关闭绘图工具\n                toolBar.deactivate();\n                queryGraphic(geometry);\n            });\n```\n编写queryGraphic函数\n```\nfunction queryGraphic(geometry) {\n                //创建查询对象，注意：服务的后面有一个编号，代表对那一个图层进行查询\n                var queryTask = new QueryTask(\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/1\");\n                //创建查询参数对象\n                var query = new Query();\n                //空间查询的几何对象\n                query.geometry = geometry;\n                //服务器给我们返回的字段信息，*代表返回所有字段\n                query.outFields = [\"*\"];\n                //空间参考信息\n                query.outSpatialReference = map.spatialReference;\n                //查询的标准，此处代表和geometry相交的图形都要返回\n                query.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;\n                //是否返回几何信息\n                query.returnGeometry = true;\n                //执行空间查询\n                queryTask.execute(query, showQueryResult);\n            }\n```\n处理返回的结果信息\n```\nfunction showQueryResult(queryResult) {\n                //创建线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                //创建面符号\n                var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);\n                if (queryResult.features.length == 0) {\n                    dom.byId(\"divShowResult\").innerHTML = \"\";\n                    return;\n                }\n                var htmls = \"\";\n                if (queryResult.features.length >= 1) {\n                    htmls = htmls + \"<table style=\\\"width: 100%\\\">\";\n                    htmls = htmls + \"<tr><td>名称</td></tr>\";\n                    for (var i = 0; i < queryResult.features.length; i++) {\n                        //得到graphic\n                        var graphic = queryResult.features[i];\n                        //给图形赋予符号\n                        graphic.setSymbol(fill);\n                        //添加到地图从而实现高亮效果\n                        map.graphics.add(graphic);\n                        //获得教学楼的名称信息，此处应和shp的属性表对应\n                        var ptName = graphic.attributes[\"alias\"];\n                        if (i % 2 == 0)\n                            htmls = htmls + \"<tr>\";\n                        else\n                            htmls = htmls + \"<tr bgcolor=\\\"#F0F0F0\\\">\";\n                        htmls = htmls + \"<td><a href=\\\"#\\\"\\\">\" + ptName + \"</a></td>\";\n                        htmls = htmls + \"</tr>\";\n                    }\n                    htmls = htmls + \"</table>\";\n                    //将教学楼的名称信息和divShowResult绑定\n                    dom.byId(\"divShowResult\").innerHTML = htmls;\n                }\n            }\n```\n##### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>QueryTask</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"dojo/dom\",\n            \"dojo/on\",\n            \"esri/tasks/QueryTask\",\n            \"esri/toolbars/draw\",\n            \"esri/tasks/query\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/symbols/SimpleFillSymbol\", \n            \"esri/graphic\",\n            \"dojo/domReady!\"],\n            function (Map, ArcGISDynamicMapServiceLayer,dom, on,\n            QueryTask, Draw, Query,\n            SimpleLineSymbol,SimpleFillSymbol,Graphic) {\n            var map = new Map(\"mapdiv\");\n            var layer = new ArcGISDynamicMapServiceLayer\n            (\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\");\n            map.addLayer(layer)\n            //定义一个绘图工具\n            var toolBar = new Draw(map);\n            //给button绑定事件\n            on(dom.byId(\"Btn\"),\"click\",function(){  \n                //激活绘图工具，我要绘制一个面图形\n                toolBar.activate(Draw.POLYGON);\n            })\n            on(toolBar, \"draw-complete\", function (result) {\n                //获得绘图得到的面\n                var geometry=result.geometry;\n                //关闭绘图工具\n                toolBar.deactivate();\n                queryGraphic(geometry);\n            });\n            \n            function queryGraphic(geometry) {\n                //创建查询对象，注意：服务的后面有一个编号，代表对那一个图层进行查询\n                var queryTask = new QueryTask(\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/1\");\n                //创建查询参数对象\n                var query = new Query();\n                //空间查询的几何对象\n                query.geometry = geometry;\n                //服务器给我们返回的字段信息，*代表返回所有字段\n                query.outFields = [\"*\"];\n                //空间参考信息\n                query.outSpatialReference = map.spatialReference;\n                //查询的标准，此处代表和geometry相交的图形都要返回\n                query.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;\n                //是否返回几何信息\n                query.returnGeometry = true;\n                //执行空间查询\n                queryTask.execute(query, showQueryResult);\n            }\n\n            function showQueryResult(queryResult) {\n                //创建线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                //创建面符号\n                var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);\n                if (queryResult.features.length == 0) {\n                    dom.byId(\"divShowResult\").innerHTML = \"\";\n                    return;\n                }\n                var htmls = \"\";\n                if (queryResult.features.length >= 1) {\n                    htmls = htmls + \"<table style=\\\"width: 100%\\\">\";\n                    htmls = htmls + \"<tr><td>名称</td></tr>\";\n                    for (var i = 0; i < queryResult.features.length; i++) {\n                        //得到graphic\n                        var graphic = queryResult.features[i];\n                        //给图形赋予符号\n                        graphic.setSymbol(fill);\n                        //添加到地图从而实现高亮效果\n                        map.graphics.add(graphic);\n                        //获得教学楼的名称信息，此处应和shp的属性表对应\n                        var ptName = graphic.attributes[\"alias\"];\n                        if (i % 2 == 0)\n                            htmls = htmls + \"<tr>\";\n                        else\n                            htmls = htmls + \"<tr bgcolor=\\\"#F0F0F0\\\">\";\n                        htmls = htmls + \"<td><a href=\\\"#\\\"\\\">\" + ptName + \"</a></td>\";\n                        htmls = htmls + \"</tr>\";\n                    }\n                    htmls = htmls + \"</table>\";\n                    //将教学楼的名称信息和divShowResult绑定\n                    dom.byId(\"divShowResult\").innerHTML = htmls;\n                }\n            }\n\n           \n\n            \n        });\n\n\n    </script>\n</head>\n<body>\n    <div id=\"mapdiv\" class=\"MapClass\"></div>\n    <input type=\"button\" value=\"空间查询\" id=\"Btn\"/>\n    <div id=\"divShowResult\"></div>\n</body>\n</html>\n```\n运行之后的结果为：\n![03.png](03.png)\n#### 利用QueryTask进行属性查询\n利用QueryTask进行属性查询和空间查询代码差不多。\n#####全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>QueryTask</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"dojo/dom\",\n            \"dojo/on\",\n            \"esri/tasks/QueryTask\",\n            \"esri/tasks/query\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/symbols/SimpleFillSymbol\", \n            \"esri/graphic\",\n            \"dojo/domReady!\"],\n            function (Map, ArcGISDynamicMapServiceLayer,dom, on,\n            QueryTask, Query,\n            SimpleLineSymbol,SimpleFillSymbol,Graphic) {\n                //根据div的id属性创建地图\n                var map = new Map(\"mapDiv\");\n                //定义一个动态地图服务\n                var layer = new ArcGISDynamicMapServiceLayer\n                (\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\");\n                //将图层添加到地图\n                map.addLayer(layer)\n                //给属性查询按钮添加click事件\n                on(dom.byId(\"Btn\"),\"click\",function(e){\n                    //定义查询对象\n                    var queryTask = new QueryTask\n                    (\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/1\");\n                    //定义查询参数对象\n                    var query = new Query();\n                    //查询条件，类似于sql语句的where子句\n                    query.where = \"name = 'J4'\";;\n                    //返回的字段信息：*代表返回全部字段\n                    query.outFields = [\"*\"];\n                    //是否返回几何形状\n                    query.returnGeometry = true;\n                    //执行属性查询\n                    queryTask.execute(query, showQueryResult);\n                })\n                //属性查询完成之后，用showQueryResult来处理返回的结果\n                function showQueryResult(queryResult)\n                {\n                    //创建线符号\n                    var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                    //创建面符号\n                    var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);\n                    if (queryResult.features.length == 0) {\n                        dom.byId(\"divShowResult\").innerHTML = \"\";\n                        return;\n                    }\n                    var htmls = \"\";\n                    if (queryResult.features.length >= 1) {\n                        htmls = htmls + \"<table style=\\\"width: 100%\\\">\";\n                        htmls = htmls + \"<tr><td>名称</td></tr>\";\n                        for (var i = 0; i < queryResult.features.length; i++) {\n                            //获得图形graphic\n                            var graphic = queryResult.features[i];\n                            //赋予相应的符号\n                            graphic.setSymbol(fill);\n                            //将graphic添加到地图中，从而实现高亮效果\n                            map.graphics.add(graphic);\n                            //获得教学楼名称（此处是和shp属性表对应的）\n                            var ptName = graphic.attributes[\"alias\"];\n                            if (i % 2 == 0)\n                                htmls = htmls + \"<tr>\";\n                            else\n                                htmls = htmls + \"<tr bgcolor=\\\"#F0F0F0\\\">\";\n                            htmls = htmls + \"<td><a href=\\\"#\\\" \\\">\" + ptName + \"</a></td>\";\n                            htmls = htmls + \"</tr>\";\n                        }\n                        htmls = htmls + \"</table>\";\n                        //将属性绑定在divShowResult上面\n                        dom.byId(\"divShowResult\").innerHTML = htmls;\n                    }\n                }\n                \n              \n         \n\n            });\n\n\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n    <input type=\"button\" value=\"属性查询\" id=\"Btn\"/>\n    <div id=\"divShowResult\"></div>\n</body>\n</html>\n```\n运行之后的结果：\n![04.png](04.png)\n#### 利用IdentifyTask实现空间查询\nIdentifyTask的使用与QueryTask十分类似，唯一不同的是IdentifyTask可以作用于多个图层，而QueryTask是作用于一个图层的。\n##### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>WebGIS</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"dojo/on\",\n            \"dojo/dom\",\n            \"esri/tasks/IdentifyTask\",\n            \"esri/tasks/IdentifyParameters\",\n            \"esri/toolbars/draw\",\n            \"esri/symbols/SimpleFillSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/graphic\",\n            \"dojo/domReady!\"],\n            function (Map,\n                ArcGISDynamicMapServiceLayer,\n                on,\n                dom,\n                IdentifyTask,\n                IdentifyParameters,\n                Draw,\n                SimpleFillSymbol,\n                SimpleLineSymbol,\n                Graphic\n                ) {\n                    var map = new Map(\"mapDiv\");\n                    //地图服务的url\n                    MapServer = \"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\";\n                    //定义一个动态地图服务\n                    var layer = new ArcGISDynamicMapServiceLayer(MapServer);    \n                    map.addLayer(layer)\n                    //定义绘图对象\n                    var toolBar = new Draw(map);\n                    //绑定点击事件\n                    on(dom.byId(\"Btn\"),\"click\",function(e){\n                        //激活绘图工具：绘制面\n                        toolBar.activate(esri.toolbars.Draw.POLYGON);\n                        \n                    })\n                    //给绘图工具绑定绘图完成事件\n                    on(toolBar, \"draw-complete\", function (result)\n                    {\n                        //获得绘图得到的面\n                        var geometry=result.geometry;\n                        //关闭绘图工具\n                        toolBar.deactivate();\n                        //执行空间查询\n                        identifyQuery(geometry);\n                    });                   \n                    function identifyQuery(geometry) {\n                        //定义空间查询对象，注意他的参数是整个地图服务，而不是单个图层\n                        var identifyTask = new IdentifyTask(MapServer);\n                        //定义空间查询参数对象\n                        var params = new IdentifyParameters();\n                        //容差\n                        params.tolerance = 5;\n                        //是否返回几何信息\n                        params.returnGeometry = true;\n                        //空间查询的图层，此时是两个图层\n                        params.layerIds = [1,3];\n                        //空间查询的条件\n                        params.layerOption = IdentifyParameters.LAYER_OPTION_ALL;\n                        params.width = map.width;\n                        params.height = map.height;\n                        //空间查询的几何对象\n                        params.geometry = geometry;\n                        params.mapExtent = map.extent;\n                        //执行空间查询\n                        identifyTask.execute(params,showQueryResult);\n                    }\n                    //通过此函数处理查询之后的信息\n                    function showQueryResult(idResults) {\n                        //创建线符号\n                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                        //创建面符号\n                        var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);\n                        if (idResults.length > 0) {\n                                var htmls = \"<table style=\\\"width: 100%\\\">\";\n                                htmls = htmls + \"<tr bgcolor=\\\"#E0E0E0\\\"><td> 图层 </td><td> 名 称</td></tr>\";\n                                for (var i = 0; i < idResults.length; i++) {\n                                    var result = idResults[i];\n                                    //获得图形graphic\n                                    var graphic = result.feature;\n                                    //设置图形的符号\n                                    graphic.setSymbol(fill);\n                                    //获得教学楼的名称信息\n                                    var namevalue = result.feature.attributes.alias;\n                                    if (i % 2 == 1) {\n                                        htmls = htmls + \"<tr  bgcolor=\\\"#E0E0E0\\\"><td>\" +\n                                        result.layerName + \"</td><td>\" + namevalue + \"</td></tr>\";\n                                    }\n                                    else {\n                                        htmls = htmls + \"<tr><td>\" + result.layerName + \"</td><td>\"\n                                        + namevalue + \"</td></tr>\";\n                                    }\n                                    \n                                    map.graphics.add(graphic);\n                                }\n                                htmls = htmls + \"</table>\";\n                                document.getElementById(\"divShowResult\").innerHTML = htmls;\n                            }\n                            else {\n                                document.getElementById(\"divShowResult\").innerHTML = \"\";\n                            }\n                        }\n                        \n        });\n\n\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n    <input type=\"button\" value=\"空间查询---多边形\" id=\"Btn\"/>\n    <div id=\"divShowResult\"></div>\n</body>\n</html>\n```\n运行之后的结果：\n![05.png](05.png)","slug":"ArcGIS-API-for-JS14","published":1,"updated":"2019-08-06T07:42:39.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5ctn000zt09zhydq53je","content":"<p>在ArcGIS API中查询功能是非常常用的，Esri给我们提供了三个类用于实现矢量数据查询功能。FindTask,QueryTask,IdentifyTask，他们之间的区别为：</p>\n<ul>\n<li>FindTask只能进行属性查询，QueryTask,IdentifyTask两个类既可以进行属性查询也可以进行空间查询。</li>\n<li>对于QueryTask,IdentifyTask两个类，QueryTask只可应用于一个单独的图层，IdentifyTask可应用于地图服务和多个图层</li>\n<li>QueryTask可以进行简单的统计功能。</li>\n</ul>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><h4 id=\"利用FindTask实现简单的属性查询\"><a href=\"#利用FindTask实现简单的属性查询\" class=\"headerlink\" title=\"利用FindTask实现简单的属性查询\"></a>利用FindTask实现简单的属性查询</h4><p><img src=\"/2019/08/06/ArcGIS-API-for-JS14/01.png\" alt=\"01.png\"><br>我们将name属性为J4的教学楼查询出来，在页面上显示J4是哪一个学院？（机电学院），并且将J4的楼高亮显示<br>代码实现</p>\n<p>在页面加入一个地图（略）<br>在页面添加一个button和一个div（button用于属性查询，div用于显示楼层的名字）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;属性查询&quot; id=&quot;Btn&quot;/&gt;</span><br><span class=\"line\">&lt;div id=&quot;divShowResult&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建属性查询对象并给button绑定点击事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//地图服务的URL</span><br><span class=\"line\">                var MapServer = &quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;;</span><br><span class=\"line\">                //创建属性查询对象</span><br><span class=\"line\">                var findTask = new FindTask(MapServer);</span><br><span class=\"line\">                //创建属性查询参数</span><br><span class=\"line\">                var findParams = new FindParameters();</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //是否返回给我们几何信息</span><br><span class=\"line\">                    findParams.returnGeometry = true;</span><br><span class=\"line\">                    //对哪一个图层进行属性查询</span><br><span class=\"line\">                    findParams.layerIds = [1];</span><br><span class=\"line\">                    //查询的字段</span><br><span class=\"line\">                    findParams.searchFields = [&quot;name&quot;];</span><br><span class=\"line\">                    //searchText和searchFields结合使用，即查询name=J4</span><br><span class=\"line\">                    findParams.searchText = &quot;J4&quot;;</span><br><span class=\"line\">                    //执行查询对象</span><br><span class=\"line\">                    findTask.execute(findParams, ShowFindResult);</span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>处理属性查询返回给我们的数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ShowFindResult(queryResult) &#123;</span><br><span class=\"line\">                    //创建线符号</span><br><span class=\"line\">                    var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                    //创建面符号</span><br><span class=\"line\">                    var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);</span><br><span class=\"line\">                    if (queryResult.length == 0) &#123;</span><br><span class=\"line\">                        dom.byId(&quot;divShowResult&quot;).innerHTML = &quot;&quot;;</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    var htmls = &quot;&quot;;</span><br><span class=\"line\">                    if (queryResult.length &gt;= 1) &#123;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;table style=\\&quot;width: 100%\\&quot;&gt;&quot;;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;tr&gt;&lt;td&gt;名称&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                        for (var i = 0; i &lt; queryResult.length; i++) &#123;</span><br><span class=\"line\">                            //获得图形graphic</span><br><span class=\"line\">                            var graphic = queryResult[i].feature;</span><br><span class=\"line\">                            //赋予相应的符号</span><br><span class=\"line\">                            graphic.setSymbol(fill);</span><br><span class=\"line\">                            //将graphic添加到地图中，从而实现高亮效果</span><br><span class=\"line\">                            map.graphics.add(graphic);</span><br><span class=\"line\">                            //获得教学楼名称（此处是和shp属性表对应的）</span><br><span class=\"line\">                            var ptName = graphic.attributes[&quot;alias&quot;];</span><br><span class=\"line\">                            if (i % 2 == 0)</span><br><span class=\"line\">                                htmls = htmls + &quot;&lt;tr&gt;&quot;;</span><br><span class=\"line\">                            else</span><br><span class=\"line\">                                htmls = htmls + &quot;&lt;tr bgcolor=\\&quot;#F0F0F0\\&quot;&gt;&quot;;</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;td&gt;&lt;a href=\\&quot;#\\&quot; \\&quot;&gt;&quot; + ptName + &quot;&lt;/a&gt;&lt;/td&gt;&quot;;</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;/table&gt;&quot;;</span><br><span class=\"line\">                        //将属性绑定在divShowResult上面</span><br><span class=\"line\">                        dom.byId(&quot;divShowResult&quot;).innerHTML = htmls;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;FindTask&lt;/title&gt;</span><br><span class=\"line\">     &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/FindTask&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/FindParameters&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;, </span><br><span class=\"line\">            &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map, ArcGISDynamicMapServiceLayer,on,dom,</span><br><span class=\"line\">            FindTask, FindParameters, </span><br><span class=\"line\">            SimpleLineSymbol,SimpleFillSymbol,Graphic) &#123;   </span><br><span class=\"line\">                var map = new esri.Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                //地图服务的URL</span><br><span class=\"line\">                var MapServer = &quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;;</span><br><span class=\"line\">                var layer = new esri.layers.ArcGISDynamicMapServiceLayer(MapServer);</span><br><span class=\"line\">                map.addLayer(layer)</span><br><span class=\"line\">                //创建属性查询对象</span><br><span class=\"line\">                var findTask = new FindTask(MapServer);</span><br><span class=\"line\">                //创建属性查询参数</span><br><span class=\"line\">                var findParams = new FindParameters();</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //是否返回给我们几何信息</span><br><span class=\"line\">                    findParams.returnGeometry = true;</span><br><span class=\"line\">                    //对哪一个图层进行属性查询</span><br><span class=\"line\">                    findParams.layerIds = [1];</span><br><span class=\"line\">                    //查询的字段</span><br><span class=\"line\">                    findParams.searchFields = [&quot;name&quot;];</span><br><span class=\"line\">                    //searchText和searchFields结合使用，即查询name=J4</span><br><span class=\"line\">                    findParams.searchText = &quot;J4&quot;;</span><br><span class=\"line\">                    //执行查询对象</span><br><span class=\"line\">                    findTask.execute(findParams, ShowFindResult);</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                function ShowFindResult(queryResult) &#123;</span><br><span class=\"line\">                    //创建线符号</span><br><span class=\"line\">                    var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                    //创建面符号</span><br><span class=\"line\">                    var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);</span><br><span class=\"line\">                    if (queryResult.length == 0) &#123;</span><br><span class=\"line\">                        dom.byId(&quot;divShowResult&quot;).innerHTML = &quot;&quot;;</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    var htmls = &quot;&quot;;</span><br><span class=\"line\">                    if (queryResult.length &gt;= 1) &#123;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;table style=\\&quot;width: 100%\\&quot;&gt;&quot;;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;tr&gt;&lt;td&gt;名称&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                        for (var i = 0; i &lt; queryResult.length; i++) &#123;</span><br><span class=\"line\">                            //获得图形graphic</span><br><span class=\"line\">                            var graphic = queryResult[i].feature;</span><br><span class=\"line\">                            //赋予相应的符号</span><br><span class=\"line\">                            graphic.setSymbol(fill);</span><br><span class=\"line\">                            //将graphic添加到地图中，从而实现高亮效果</span><br><span class=\"line\">                            map.graphics.add(graphic);</span><br><span class=\"line\">                            //获得教学楼名称（此处是和shp属性表对应的）</span><br><span class=\"line\">                            var ptName = graphic.attributes[&quot;alias&quot;];</span><br><span class=\"line\">                            if (i % 2 == 0)</span><br><span class=\"line\">                                htmls = htmls + &quot;&lt;tr&gt;&quot;;</span><br><span class=\"line\">                            else</span><br><span class=\"line\">                                htmls = htmls + &quot;&lt;tr bgcolor=\\&quot;#F0F0F0\\&quot;&gt;&quot;;</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;td&gt;&lt;a href=\\&quot;#\\&quot; \\&quot;&gt;&quot; + ptName + &quot;&lt;/a&gt;&lt;/td&gt;&quot;;</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;/table&gt;&quot;;</span><br><span class=\"line\">                        //将属性绑定在divShowResult上面</span><br><span class=\"line\">                        dom.byId(&quot;divShowResult&quot;).innerHTML = htmls;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt; </span><br><span class=\"line\">    &lt;input type=&quot;button&quot; value=&quot;属性查询&quot; id=&quot;Btn&quot;/&gt;</span><br><span class=\"line\">    &lt;div id=&quot;divShowResult&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>运行之后的结果为：<br><img src=\"/2019/08/06/ArcGIS-API-for-JS14/01.png\" alt=\"01.png\"></p>\n<h4 id=\"利用QueryTask实现空间查询\"><a href=\"#利用QueryTask实现空间查询\" class=\"headerlink\" title=\"利用QueryTask实现空间查询\"></a>利用QueryTask实现空间查询</h4><p>此时的的需求是：我们在地图上画一个图形，然后和图形相交的教学楼选择出来。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.使用draw交互绘制几何形状</span><br><span class=\"line\">2.根据geometry形状构建空间查询参数</span><br><span class=\"line\">3.执行空间分析对象</span><br><span class=\"line\">4.处理空间分析的结果</span><br></pre></td></tr></table></figure></p>\n<p>创建一个button和一个div（button用于激活绘图工具，div用户显示用户选择的教学楼的名称）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;空间查询&quot; id=&quot;Btn&quot;/&gt;</span><br><span class=\"line\">&lt;div id=&quot;divShowResult&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>给button绑定事件（激活绘图工具）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义一个绘图工具</span><br><span class=\"line\">var toolBar = new Draw(map);</span><br><span class=\"line\">//给button绑定事件</span><br><span class=\"line\">on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;  </span><br><span class=\"line\">    //激活绘图工具，我要绘制一个面图形</span><br><span class=\"line\">    toolBar.activate(Draw.POLYGON);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>给绘图工具绑定绘图完成事件，绘图完成执行queryGraphic函数,并将绘制的geometry传入函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(toolBar, &quot;draw-complete&quot;, function (result) &#123;</span><br><span class=\"line\">        //获得绘图得到的面</span><br><span class=\"line\">        var geometry=result.geometry;</span><br><span class=\"line\">        //关闭绘图工具</span><br><span class=\"line\">        toolBar.deactivate();</span><br><span class=\"line\">        queryGraphic(geometry);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>编写queryGraphic函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function queryGraphic(geometry) &#123;</span><br><span class=\"line\">                //创建查询对象，注意：服务的后面有一个编号，代表对那一个图层进行查询</span><br><span class=\"line\">                var queryTask = new QueryTask(&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/1&quot;);</span><br><span class=\"line\">                //创建查询参数对象</span><br><span class=\"line\">                var query = new Query();</span><br><span class=\"line\">                //空间查询的几何对象</span><br><span class=\"line\">                query.geometry = geometry;</span><br><span class=\"line\">                //服务器给我们返回的字段信息，*代表返回所有字段</span><br><span class=\"line\">                query.outFields = [&quot;*&quot;];</span><br><span class=\"line\">                //空间参考信息</span><br><span class=\"line\">                query.outSpatialReference = map.spatialReference;</span><br><span class=\"line\">                //查询的标准，此处代表和geometry相交的图形都要返回</span><br><span class=\"line\">                query.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;</span><br><span class=\"line\">                //是否返回几何信息</span><br><span class=\"line\">                query.returnGeometry = true;</span><br><span class=\"line\">                //执行空间查询</span><br><span class=\"line\">                queryTask.execute(query, showQueryResult);</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure></p>\n<p>处理返回的结果信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function showQueryResult(queryResult) &#123;</span><br><span class=\"line\">                //创建线符号</span><br><span class=\"line\">                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //创建面符号</span><br><span class=\"line\">                var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);</span><br><span class=\"line\">                if (queryResult.features.length == 0) &#123;</span><br><span class=\"line\">                    dom.byId(&quot;divShowResult&quot;).innerHTML = &quot;&quot;;</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                var htmls = &quot;&quot;;</span><br><span class=\"line\">                if (queryResult.features.length &gt;= 1) &#123;</span><br><span class=\"line\">                    htmls = htmls + &quot;&lt;table style=\\&quot;width: 100%\\&quot;&gt;&quot;;</span><br><span class=\"line\">                    htmls = htmls + &quot;&lt;tr&gt;&lt;td&gt;名称&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                    for (var i = 0; i &lt; queryResult.features.length; i++) &#123;</span><br><span class=\"line\">                        //得到graphic</span><br><span class=\"line\">                        var graphic = queryResult.features[i];</span><br><span class=\"line\">                        //给图形赋予符号</span><br><span class=\"line\">                        graphic.setSymbol(fill);</span><br><span class=\"line\">                        //添加到地图从而实现高亮效果</span><br><span class=\"line\">                        map.graphics.add(graphic);</span><br><span class=\"line\">                        //获得教学楼的名称信息，此处应和shp的属性表对应</span><br><span class=\"line\">                        var ptName = graphic.attributes[&quot;alias&quot;];</span><br><span class=\"line\">                        if (i % 2 == 0)</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;tr&gt;&quot;;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;tr bgcolor=\\&quot;#F0F0F0\\&quot;&gt;&quot;;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;td&gt;&lt;a href=\\&quot;#\\&quot;\\&quot;&gt;&quot; + ptName + &quot;&lt;/a&gt;&lt;/td&gt;&quot;;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    htmls = htmls + &quot;&lt;/table&gt;&quot;;</span><br><span class=\"line\">                    //将教学楼的名称信息和divShowResult绑定</span><br><span class=\"line\">                    dom.byId(&quot;divShowResult&quot;).innerHTML = htmls;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"全部代码-1\"><a href=\"#全部代码-1\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;QueryTask&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/QueryTask&quot;,</span><br><span class=\"line\">            &quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/query&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;, </span><br><span class=\"line\">            &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map, ArcGISDynamicMapServiceLayer,dom, on,</span><br><span class=\"line\">            QueryTask, Draw, Query,</span><br><span class=\"line\">            SimpleLineSymbol,SimpleFillSymbol,Graphic) &#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapdiv&quot;);</span><br><span class=\"line\">            var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">            (&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;);</span><br><span class=\"line\">            map.addLayer(layer)</span><br><span class=\"line\">            //定义一个绘图工具</span><br><span class=\"line\">            var toolBar = new Draw(map);</span><br><span class=\"line\">            //给button绑定事件</span><br><span class=\"line\">            on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;  </span><br><span class=\"line\">                //激活绘图工具，我要绘制一个面图形</span><br><span class=\"line\">                toolBar.activate(Draw.POLYGON);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            on(toolBar, &quot;draw-complete&quot;, function (result) &#123;</span><br><span class=\"line\">                //获得绘图得到的面</span><br><span class=\"line\">                var geometry=result.geometry;</span><br><span class=\"line\">                //关闭绘图工具</span><br><span class=\"line\">                toolBar.deactivate();</span><br><span class=\"line\">                queryGraphic(geometry);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            </span><br><span class=\"line\">            function queryGraphic(geometry) &#123;</span><br><span class=\"line\">                //创建查询对象，注意：服务的后面有一个编号，代表对那一个图层进行查询</span><br><span class=\"line\">                var queryTask = new QueryTask(&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/1&quot;);</span><br><span class=\"line\">                //创建查询参数对象</span><br><span class=\"line\">                var query = new Query();</span><br><span class=\"line\">                //空间查询的几何对象</span><br><span class=\"line\">                query.geometry = geometry;</span><br><span class=\"line\">                //服务器给我们返回的字段信息，*代表返回所有字段</span><br><span class=\"line\">                query.outFields = [&quot;*&quot;];</span><br><span class=\"line\">                //空间参考信息</span><br><span class=\"line\">                query.outSpatialReference = map.spatialReference;</span><br><span class=\"line\">                //查询的标准，此处代表和geometry相交的图形都要返回</span><br><span class=\"line\">                query.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;</span><br><span class=\"line\">                //是否返回几何信息</span><br><span class=\"line\">                query.returnGeometry = true;</span><br><span class=\"line\">                //执行空间查询</span><br><span class=\"line\">                queryTask.execute(query, showQueryResult);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            function showQueryResult(queryResult) &#123;</span><br><span class=\"line\">                //创建线符号</span><br><span class=\"line\">                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //创建面符号</span><br><span class=\"line\">                var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);</span><br><span class=\"line\">                if (queryResult.features.length == 0) &#123;</span><br><span class=\"line\">                    dom.byId(&quot;divShowResult&quot;).innerHTML = &quot;&quot;;</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                var htmls = &quot;&quot;;</span><br><span class=\"line\">                if (queryResult.features.length &gt;= 1) &#123;</span><br><span class=\"line\">                    htmls = htmls + &quot;&lt;table style=\\&quot;width: 100%\\&quot;&gt;&quot;;</span><br><span class=\"line\">                    htmls = htmls + &quot;&lt;tr&gt;&lt;td&gt;名称&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                    for (var i = 0; i &lt; queryResult.features.length; i++) &#123;</span><br><span class=\"line\">                        //得到graphic</span><br><span class=\"line\">                        var graphic = queryResult.features[i];</span><br><span class=\"line\">                        //给图形赋予符号</span><br><span class=\"line\">                        graphic.setSymbol(fill);</span><br><span class=\"line\">                        //添加到地图从而实现高亮效果</span><br><span class=\"line\">                        map.graphics.add(graphic);</span><br><span class=\"line\">                        //获得教学楼的名称信息，此处应和shp的属性表对应</span><br><span class=\"line\">                        var ptName = graphic.attributes[&quot;alias&quot;];</span><br><span class=\"line\">                        if (i % 2 == 0)</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;tr&gt;&quot;;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;tr bgcolor=\\&quot;#F0F0F0\\&quot;&gt;&quot;;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;td&gt;&lt;a href=\\&quot;#\\&quot;\\&quot;&gt;&quot; + ptName + &quot;&lt;/a&gt;&lt;/td&gt;&quot;;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    htmls = htmls + &quot;&lt;/table&gt;&quot;;</span><br><span class=\"line\">                    //将教学楼的名称信息和divShowResult绑定</span><br><span class=\"line\">                    dom.byId(&quot;divShowResult&quot;).innerHTML = htmls;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           </span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapdiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; value=&quot;空间查询&quot; id=&quot;Btn&quot;/&gt;</span><br><span class=\"line\">    &lt;div id=&quot;divShowResult&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>运行之后的结果为：<br><img src=\"/2019/08/06/ArcGIS-API-for-JS14/03.png\" alt=\"03.png\"></p>\n<h4 id=\"利用QueryTask进行属性查询\"><a href=\"#利用QueryTask进行属性查询\" class=\"headerlink\" title=\"利用QueryTask进行属性查询\"></a>利用QueryTask进行属性查询</h4><p>利用QueryTask进行属性查询和空间查询代码差不多。</p>\n<p>#####全部代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;QueryTask&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/QueryTask&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/query&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;, </span><br><span class=\"line\">            &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map, ArcGISDynamicMapServiceLayer,dom, on,</span><br><span class=\"line\">            QueryTask, Query,</span><br><span class=\"line\">            SimpleLineSymbol,SimpleFillSymbol,Graphic) &#123;</span><br><span class=\"line\">                //根据div的id属性创建地图</span><br><span class=\"line\">                var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                //定义一个动态地图服务</span><br><span class=\"line\">                var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">                (&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;);</span><br><span class=\"line\">                //将图层添加到地图</span><br><span class=\"line\">                map.addLayer(layer)</span><br><span class=\"line\">                //给属性查询按钮添加click事件</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                    //定义查询对象</span><br><span class=\"line\">                    var queryTask = new QueryTask</span><br><span class=\"line\">                    (&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/1&quot;);</span><br><span class=\"line\">                    //定义查询参数对象</span><br><span class=\"line\">                    var query = new Query();</span><br><span class=\"line\">                    //查询条件，类似于sql语句的where子句</span><br><span class=\"line\">                    query.where = &quot;name = &apos;J4&apos;&quot;;;</span><br><span class=\"line\">                    //返回的字段信息：*代表返回全部字段</span><br><span class=\"line\">                    query.outFields = [&quot;*&quot;];</span><br><span class=\"line\">                    //是否返回几何形状</span><br><span class=\"line\">                    query.returnGeometry = true;</span><br><span class=\"line\">                    //执行属性查询</span><br><span class=\"line\">                    queryTask.execute(query, showQueryResult);</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //属性查询完成之后，用showQueryResult来处理返回的结果</span><br><span class=\"line\">                function showQueryResult(queryResult)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    //创建线符号</span><br><span class=\"line\">                    var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                    //创建面符号</span><br><span class=\"line\">                    var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);</span><br><span class=\"line\">                    if (queryResult.features.length == 0) &#123;</span><br><span class=\"line\">                        dom.byId(&quot;divShowResult&quot;).innerHTML = &quot;&quot;;</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    var htmls = &quot;&quot;;</span><br><span class=\"line\">                    if (queryResult.features.length &gt;= 1) &#123;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;table style=\\&quot;width: 100%\\&quot;&gt;&quot;;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;tr&gt;&lt;td&gt;名称&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                        for (var i = 0; i &lt; queryResult.features.length; i++) &#123;</span><br><span class=\"line\">                            //获得图形graphic</span><br><span class=\"line\">                            var graphic = queryResult.features[i];</span><br><span class=\"line\">                            //赋予相应的符号</span><br><span class=\"line\">                            graphic.setSymbol(fill);</span><br><span class=\"line\">                            //将graphic添加到地图中，从而实现高亮效果</span><br><span class=\"line\">                            map.graphics.add(graphic);</span><br><span class=\"line\">                            //获得教学楼名称（此处是和shp属性表对应的）</span><br><span class=\"line\">                            var ptName = graphic.attributes[&quot;alias&quot;];</span><br><span class=\"line\">                            if (i % 2 == 0)</span><br><span class=\"line\">                                htmls = htmls + &quot;&lt;tr&gt;&quot;;</span><br><span class=\"line\">                            else</span><br><span class=\"line\">                                htmls = htmls + &quot;&lt;tr bgcolor=\\&quot;#F0F0F0\\&quot;&gt;&quot;;</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;td&gt;&lt;a href=\\&quot;#\\&quot; \\&quot;&gt;&quot; + ptName + &quot;&lt;/a&gt;&lt;/td&gt;&quot;;</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;/table&gt;&quot;;</span><br><span class=\"line\">                        //将属性绑定在divShowResult上面</span><br><span class=\"line\">                        dom.byId(&quot;divShowResult&quot;).innerHTML = htmls;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">              </span><br><span class=\"line\">         </span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; value=&quot;属性查询&quot; id=&quot;Btn&quot;/&gt;</span><br><span class=\"line\">    &lt;div id=&quot;divShowResult&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行之后的结果：<br><img src=\"/2019/08/06/ArcGIS-API-for-JS14/04.png\" alt=\"04.png\"></p>\n<h4 id=\"利用IdentifyTask实现空间查询\"><a href=\"#利用IdentifyTask实现空间查询\" class=\"headerlink\" title=\"利用IdentifyTask实现空间查询\"></a>利用IdentifyTask实现空间查询</h4><p>IdentifyTask的使用与QueryTask十分类似，唯一不同的是IdentifyTask可以作用于多个图层，而QueryTask是作用于一个图层的。</p>\n<h5 id=\"全部代码-2\"><a href=\"#全部代码-2\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;WebGIS&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/IdentifyTask&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/IdentifyParameters&quot;,</span><br><span class=\"line\">            &quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map,</span><br><span class=\"line\">                ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                on,</span><br><span class=\"line\">                dom,</span><br><span class=\"line\">                IdentifyTask,</span><br><span class=\"line\">                IdentifyParameters,</span><br><span class=\"line\">                Draw,</span><br><span class=\"line\">                SimpleFillSymbol,</span><br><span class=\"line\">                SimpleLineSymbol,</span><br><span class=\"line\">                Graphic</span><br><span class=\"line\">                ) &#123;</span><br><span class=\"line\">                    var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                    //地图服务的url</span><br><span class=\"line\">                    MapServer = &quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;;</span><br><span class=\"line\">                    //定义一个动态地图服务</span><br><span class=\"line\">                    var layer = new ArcGISDynamicMapServiceLayer(MapServer);    </span><br><span class=\"line\">                    map.addLayer(layer)</span><br><span class=\"line\">                    //定义绘图对象</span><br><span class=\"line\">                    var toolBar = new Draw(map);</span><br><span class=\"line\">                    //绑定点击事件</span><br><span class=\"line\">                    on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                        //激活绘图工具：绘制面</span><br><span class=\"line\">                        toolBar.activate(esri.toolbars.Draw.POLYGON);</span><br><span class=\"line\">                        </span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    //给绘图工具绑定绘图完成事件</span><br><span class=\"line\">                    on(toolBar, &quot;draw-complete&quot;, function (result)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        //获得绘图得到的面</span><br><span class=\"line\">                        var geometry=result.geometry;</span><br><span class=\"line\">                        //关闭绘图工具</span><br><span class=\"line\">                        toolBar.deactivate();</span><br><span class=\"line\">                        //执行空间查询</span><br><span class=\"line\">                        identifyQuery(geometry);</span><br><span class=\"line\">                    &#125;);                   </span><br><span class=\"line\">                    function identifyQuery(geometry) &#123;</span><br><span class=\"line\">                        //定义空间查询对象，注意他的参数是整个地图服务，而不是单个图层</span><br><span class=\"line\">                        var identifyTask = new IdentifyTask(MapServer);</span><br><span class=\"line\">                        //定义空间查询参数对象</span><br><span class=\"line\">                        var params = new IdentifyParameters();</span><br><span class=\"line\">                        //容差</span><br><span class=\"line\">                        params.tolerance = 5;</span><br><span class=\"line\">                        //是否返回几何信息</span><br><span class=\"line\">                        params.returnGeometry = true;</span><br><span class=\"line\">                        //空间查询的图层，此时是两个图层</span><br><span class=\"line\">                        params.layerIds = [1,3];</span><br><span class=\"line\">                        //空间查询的条件</span><br><span class=\"line\">                        params.layerOption = IdentifyParameters.LAYER_OPTION_ALL;</span><br><span class=\"line\">                        params.width = map.width;</span><br><span class=\"line\">                        params.height = map.height;</span><br><span class=\"line\">                        //空间查询的几何对象</span><br><span class=\"line\">                        params.geometry = geometry;</span><br><span class=\"line\">                        params.mapExtent = map.extent;</span><br><span class=\"line\">                        //执行空间查询</span><br><span class=\"line\">                        identifyTask.execute(params,showQueryResult);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //通过此函数处理查询之后的信息</span><br><span class=\"line\">                    function showQueryResult(idResults) &#123;</span><br><span class=\"line\">                        //创建线符号</span><br><span class=\"line\">                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                        //创建面符号</span><br><span class=\"line\">                        var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);</span><br><span class=\"line\">                        if (idResults.length &gt; 0) &#123;</span><br><span class=\"line\">                                var htmls = &quot;&lt;table style=\\&quot;width: 100%\\&quot;&gt;&quot;;</span><br><span class=\"line\">                                htmls = htmls + &quot;&lt;tr bgcolor=\\&quot;#E0E0E0\\&quot;&gt;&lt;td&gt; 图层 &lt;/td&gt;&lt;td&gt; 名 称&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                                for (var i = 0; i &lt; idResults.length; i++) &#123;</span><br><span class=\"line\">                                    var result = idResults[i];</span><br><span class=\"line\">                                    //获得图形graphic</span><br><span class=\"line\">                                    var graphic = result.feature;</span><br><span class=\"line\">                                    //设置图形的符号</span><br><span class=\"line\">                                    graphic.setSymbol(fill);</span><br><span class=\"line\">                                    //获得教学楼的名称信息</span><br><span class=\"line\">                                    var namevalue = result.feature.attributes.alias;</span><br><span class=\"line\">                                    if (i % 2 == 1) &#123;</span><br><span class=\"line\">                                        htmls = htmls + &quot;&lt;tr  bgcolor=\\&quot;#E0E0E0\\&quot;&gt;&lt;td&gt;&quot; +</span><br><span class=\"line\">                                        result.layerName + &quot;&lt;/td&gt;&lt;td&gt;&quot; + namevalue + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                    else &#123;</span><br><span class=\"line\">                                        htmls = htmls + &quot;&lt;tr&gt;&lt;td&gt;&quot; + result.layerName + &quot;&lt;/td&gt;&lt;td&gt;&quot;</span><br><span class=\"line\">                                        + namevalue + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                    </span><br><span class=\"line\">                                    map.graphics.add(graphic);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                htmls = htmls + &quot;&lt;/table&gt;&quot;;</span><br><span class=\"line\">                                document.getElementById(&quot;divShowResult&quot;).innerHTML = htmls;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            else &#123;</span><br><span class=\"line\">                                document.getElementById(&quot;divShowResult&quot;).innerHTML = &quot;&quot;;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; value=&quot;空间查询---多边形&quot; id=&quot;Btn&quot;/&gt;</span><br><span class=\"line\">    &lt;div id=&quot;divShowResult&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>运行之后的结果：<br><img src=\"/2019/08/06/ArcGIS-API-for-JS14/05.png\" alt=\"05.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在ArcGIS API中查询功能是非常常用的，Esri给我们提供了三个类用于实现矢量数据查询功能。FindTask,QueryTask,IdentifyTask，他们之间的区别为：</p>\n<ul>\n<li>FindTask只能进行属性查询，QueryTask,IdentifyTask两个类既可以进行属性查询也可以进行空间查询。</li>\n<li>对于QueryTask,IdentifyTask两个类，QueryTask只可应用于一个单独的图层，IdentifyTask可应用于地图服务和多个图层</li>\n<li>QueryTask可以进行简单的统计功能。</li>\n</ul>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><h4 id=\"利用FindTask实现简单的属性查询\"><a href=\"#利用FindTask实现简单的属性查询\" class=\"headerlink\" title=\"利用FindTask实现简单的属性查询\"></a>利用FindTask实现简单的属性查询</h4><p><img src=\"/2019/08/06/ArcGIS-API-for-JS14/01.png\" alt=\"01.png\"><br>我们将name属性为J4的教学楼查询出来，在页面上显示J4是哪一个学院？（机电学院），并且将J4的楼高亮显示<br>代码实现</p>\n<p>在页面加入一个地图（略）<br>在页面添加一个button和一个div（button用于属性查询，div用于显示楼层的名字）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;属性查询&quot; id=&quot;Btn&quot;/&gt;</span><br><span class=\"line\">&lt;div id=&quot;divShowResult&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建属性查询对象并给button绑定点击事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//地图服务的URL</span><br><span class=\"line\">                var MapServer = &quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;;</span><br><span class=\"line\">                //创建属性查询对象</span><br><span class=\"line\">                var findTask = new FindTask(MapServer);</span><br><span class=\"line\">                //创建属性查询参数</span><br><span class=\"line\">                var findParams = new FindParameters();</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //是否返回给我们几何信息</span><br><span class=\"line\">                    findParams.returnGeometry = true;</span><br><span class=\"line\">                    //对哪一个图层进行属性查询</span><br><span class=\"line\">                    findParams.layerIds = [1];</span><br><span class=\"line\">                    //查询的字段</span><br><span class=\"line\">                    findParams.searchFields = [&quot;name&quot;];</span><br><span class=\"line\">                    //searchText和searchFields结合使用，即查询name=J4</span><br><span class=\"line\">                    findParams.searchText = &quot;J4&quot;;</span><br><span class=\"line\">                    //执行查询对象</span><br><span class=\"line\">                    findTask.execute(findParams, ShowFindResult);</span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>处理属性查询返回给我们的数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ShowFindResult(queryResult) &#123;</span><br><span class=\"line\">                    //创建线符号</span><br><span class=\"line\">                    var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                    //创建面符号</span><br><span class=\"line\">                    var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);</span><br><span class=\"line\">                    if (queryResult.length == 0) &#123;</span><br><span class=\"line\">                        dom.byId(&quot;divShowResult&quot;).innerHTML = &quot;&quot;;</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    var htmls = &quot;&quot;;</span><br><span class=\"line\">                    if (queryResult.length &gt;= 1) &#123;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;table style=\\&quot;width: 100%\\&quot;&gt;&quot;;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;tr&gt;&lt;td&gt;名称&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                        for (var i = 0; i &lt; queryResult.length; i++) &#123;</span><br><span class=\"line\">                            //获得图形graphic</span><br><span class=\"line\">                            var graphic = queryResult[i].feature;</span><br><span class=\"line\">                            //赋予相应的符号</span><br><span class=\"line\">                            graphic.setSymbol(fill);</span><br><span class=\"line\">                            //将graphic添加到地图中，从而实现高亮效果</span><br><span class=\"line\">                            map.graphics.add(graphic);</span><br><span class=\"line\">                            //获得教学楼名称（此处是和shp属性表对应的）</span><br><span class=\"line\">                            var ptName = graphic.attributes[&quot;alias&quot;];</span><br><span class=\"line\">                            if (i % 2 == 0)</span><br><span class=\"line\">                                htmls = htmls + &quot;&lt;tr&gt;&quot;;</span><br><span class=\"line\">                            else</span><br><span class=\"line\">                                htmls = htmls + &quot;&lt;tr bgcolor=\\&quot;#F0F0F0\\&quot;&gt;&quot;;</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;td&gt;&lt;a href=\\&quot;#\\&quot; \\&quot;&gt;&quot; + ptName + &quot;&lt;/a&gt;&lt;/td&gt;&quot;;</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;/table&gt;&quot;;</span><br><span class=\"line\">                        //将属性绑定在divShowResult上面</span><br><span class=\"line\">                        dom.byId(&quot;divShowResult&quot;).innerHTML = htmls;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;FindTask&lt;/title&gt;</span><br><span class=\"line\">     &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/FindTask&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/FindParameters&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;, </span><br><span class=\"line\">            &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map, ArcGISDynamicMapServiceLayer,on,dom,</span><br><span class=\"line\">            FindTask, FindParameters, </span><br><span class=\"line\">            SimpleLineSymbol,SimpleFillSymbol,Graphic) &#123;   </span><br><span class=\"line\">                var map = new esri.Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                //地图服务的URL</span><br><span class=\"line\">                var MapServer = &quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;;</span><br><span class=\"line\">                var layer = new esri.layers.ArcGISDynamicMapServiceLayer(MapServer);</span><br><span class=\"line\">                map.addLayer(layer)</span><br><span class=\"line\">                //创建属性查询对象</span><br><span class=\"line\">                var findTask = new FindTask(MapServer);</span><br><span class=\"line\">                //创建属性查询参数</span><br><span class=\"line\">                var findParams = new FindParameters();</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //是否返回给我们几何信息</span><br><span class=\"line\">                    findParams.returnGeometry = true;</span><br><span class=\"line\">                    //对哪一个图层进行属性查询</span><br><span class=\"line\">                    findParams.layerIds = [1];</span><br><span class=\"line\">                    //查询的字段</span><br><span class=\"line\">                    findParams.searchFields = [&quot;name&quot;];</span><br><span class=\"line\">                    //searchText和searchFields结合使用，即查询name=J4</span><br><span class=\"line\">                    findParams.searchText = &quot;J4&quot;;</span><br><span class=\"line\">                    //执行查询对象</span><br><span class=\"line\">                    findTask.execute(findParams, ShowFindResult);</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                function ShowFindResult(queryResult) &#123;</span><br><span class=\"line\">                    //创建线符号</span><br><span class=\"line\">                    var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                    //创建面符号</span><br><span class=\"line\">                    var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);</span><br><span class=\"line\">                    if (queryResult.length == 0) &#123;</span><br><span class=\"line\">                        dom.byId(&quot;divShowResult&quot;).innerHTML = &quot;&quot;;</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    var htmls = &quot;&quot;;</span><br><span class=\"line\">                    if (queryResult.length &gt;= 1) &#123;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;table style=\\&quot;width: 100%\\&quot;&gt;&quot;;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;tr&gt;&lt;td&gt;名称&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                        for (var i = 0; i &lt; queryResult.length; i++) &#123;</span><br><span class=\"line\">                            //获得图形graphic</span><br><span class=\"line\">                            var graphic = queryResult[i].feature;</span><br><span class=\"line\">                            //赋予相应的符号</span><br><span class=\"line\">                            graphic.setSymbol(fill);</span><br><span class=\"line\">                            //将graphic添加到地图中，从而实现高亮效果</span><br><span class=\"line\">                            map.graphics.add(graphic);</span><br><span class=\"line\">                            //获得教学楼名称（此处是和shp属性表对应的）</span><br><span class=\"line\">                            var ptName = graphic.attributes[&quot;alias&quot;];</span><br><span class=\"line\">                            if (i % 2 == 0)</span><br><span class=\"line\">                                htmls = htmls + &quot;&lt;tr&gt;&quot;;</span><br><span class=\"line\">                            else</span><br><span class=\"line\">                                htmls = htmls + &quot;&lt;tr bgcolor=\\&quot;#F0F0F0\\&quot;&gt;&quot;;</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;td&gt;&lt;a href=\\&quot;#\\&quot; \\&quot;&gt;&quot; + ptName + &quot;&lt;/a&gt;&lt;/td&gt;&quot;;</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;/table&gt;&quot;;</span><br><span class=\"line\">                        //将属性绑定在divShowResult上面</span><br><span class=\"line\">                        dom.byId(&quot;divShowResult&quot;).innerHTML = htmls;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt; </span><br><span class=\"line\">    &lt;input type=&quot;button&quot; value=&quot;属性查询&quot; id=&quot;Btn&quot;/&gt;</span><br><span class=\"line\">    &lt;div id=&quot;divShowResult&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>运行之后的结果为：<br><img src=\"/2019/08/06/ArcGIS-API-for-JS14/01.png\" alt=\"01.png\"></p>\n<h4 id=\"利用QueryTask实现空间查询\"><a href=\"#利用QueryTask实现空间查询\" class=\"headerlink\" title=\"利用QueryTask实现空间查询\"></a>利用QueryTask实现空间查询</h4><p>此时的的需求是：我们在地图上画一个图形，然后和图形相交的教学楼选择出来。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.使用draw交互绘制几何形状</span><br><span class=\"line\">2.根据geometry形状构建空间查询参数</span><br><span class=\"line\">3.执行空间分析对象</span><br><span class=\"line\">4.处理空间分析的结果</span><br></pre></td></tr></table></figure></p>\n<p>创建一个button和一个div（button用于激活绘图工具，div用户显示用户选择的教学楼的名称）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;button&quot; value=&quot;空间查询&quot; id=&quot;Btn&quot;/&gt;</span><br><span class=\"line\">&lt;div id=&quot;divShowResult&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>给button绑定事件（激活绘图工具）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义一个绘图工具</span><br><span class=\"line\">var toolBar = new Draw(map);</span><br><span class=\"line\">//给button绑定事件</span><br><span class=\"line\">on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;  </span><br><span class=\"line\">    //激活绘图工具，我要绘制一个面图形</span><br><span class=\"line\">    toolBar.activate(Draw.POLYGON);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>给绘图工具绑定绘图完成事件，绘图完成执行queryGraphic函数,并将绘制的geometry传入函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(toolBar, &quot;draw-complete&quot;, function (result) &#123;</span><br><span class=\"line\">        //获得绘图得到的面</span><br><span class=\"line\">        var geometry=result.geometry;</span><br><span class=\"line\">        //关闭绘图工具</span><br><span class=\"line\">        toolBar.deactivate();</span><br><span class=\"line\">        queryGraphic(geometry);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>编写queryGraphic函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function queryGraphic(geometry) &#123;</span><br><span class=\"line\">                //创建查询对象，注意：服务的后面有一个编号，代表对那一个图层进行查询</span><br><span class=\"line\">                var queryTask = new QueryTask(&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/1&quot;);</span><br><span class=\"line\">                //创建查询参数对象</span><br><span class=\"line\">                var query = new Query();</span><br><span class=\"line\">                //空间查询的几何对象</span><br><span class=\"line\">                query.geometry = geometry;</span><br><span class=\"line\">                //服务器给我们返回的字段信息，*代表返回所有字段</span><br><span class=\"line\">                query.outFields = [&quot;*&quot;];</span><br><span class=\"line\">                //空间参考信息</span><br><span class=\"line\">                query.outSpatialReference = map.spatialReference;</span><br><span class=\"line\">                //查询的标准，此处代表和geometry相交的图形都要返回</span><br><span class=\"line\">                query.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;</span><br><span class=\"line\">                //是否返回几何信息</span><br><span class=\"line\">                query.returnGeometry = true;</span><br><span class=\"line\">                //执行空间查询</span><br><span class=\"line\">                queryTask.execute(query, showQueryResult);</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure></p>\n<p>处理返回的结果信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function showQueryResult(queryResult) &#123;</span><br><span class=\"line\">                //创建线符号</span><br><span class=\"line\">                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //创建面符号</span><br><span class=\"line\">                var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);</span><br><span class=\"line\">                if (queryResult.features.length == 0) &#123;</span><br><span class=\"line\">                    dom.byId(&quot;divShowResult&quot;).innerHTML = &quot;&quot;;</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                var htmls = &quot;&quot;;</span><br><span class=\"line\">                if (queryResult.features.length &gt;= 1) &#123;</span><br><span class=\"line\">                    htmls = htmls + &quot;&lt;table style=\\&quot;width: 100%\\&quot;&gt;&quot;;</span><br><span class=\"line\">                    htmls = htmls + &quot;&lt;tr&gt;&lt;td&gt;名称&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                    for (var i = 0; i &lt; queryResult.features.length; i++) &#123;</span><br><span class=\"line\">                        //得到graphic</span><br><span class=\"line\">                        var graphic = queryResult.features[i];</span><br><span class=\"line\">                        //给图形赋予符号</span><br><span class=\"line\">                        graphic.setSymbol(fill);</span><br><span class=\"line\">                        //添加到地图从而实现高亮效果</span><br><span class=\"line\">                        map.graphics.add(graphic);</span><br><span class=\"line\">                        //获得教学楼的名称信息，此处应和shp的属性表对应</span><br><span class=\"line\">                        var ptName = graphic.attributes[&quot;alias&quot;];</span><br><span class=\"line\">                        if (i % 2 == 0)</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;tr&gt;&quot;;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;tr bgcolor=\\&quot;#F0F0F0\\&quot;&gt;&quot;;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;td&gt;&lt;a href=\\&quot;#\\&quot;\\&quot;&gt;&quot; + ptName + &quot;&lt;/a&gt;&lt;/td&gt;&quot;;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    htmls = htmls + &quot;&lt;/table&gt;&quot;;</span><br><span class=\"line\">                    //将教学楼的名称信息和divShowResult绑定</span><br><span class=\"line\">                    dom.byId(&quot;divShowResult&quot;).innerHTML = htmls;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"全部代码-1\"><a href=\"#全部代码-1\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;QueryTask&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/QueryTask&quot;,</span><br><span class=\"line\">            &quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/query&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;, </span><br><span class=\"line\">            &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map, ArcGISDynamicMapServiceLayer,dom, on,</span><br><span class=\"line\">            QueryTask, Draw, Query,</span><br><span class=\"line\">            SimpleLineSymbol,SimpleFillSymbol,Graphic) &#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapdiv&quot;);</span><br><span class=\"line\">            var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">            (&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;);</span><br><span class=\"line\">            map.addLayer(layer)</span><br><span class=\"line\">            //定义一个绘图工具</span><br><span class=\"line\">            var toolBar = new Draw(map);</span><br><span class=\"line\">            //给button绑定事件</span><br><span class=\"line\">            on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;  </span><br><span class=\"line\">                //激活绘图工具，我要绘制一个面图形</span><br><span class=\"line\">                toolBar.activate(Draw.POLYGON);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            on(toolBar, &quot;draw-complete&quot;, function (result) &#123;</span><br><span class=\"line\">                //获得绘图得到的面</span><br><span class=\"line\">                var geometry=result.geometry;</span><br><span class=\"line\">                //关闭绘图工具</span><br><span class=\"line\">                toolBar.deactivate();</span><br><span class=\"line\">                queryGraphic(geometry);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            </span><br><span class=\"line\">            function queryGraphic(geometry) &#123;</span><br><span class=\"line\">                //创建查询对象，注意：服务的后面有一个编号，代表对那一个图层进行查询</span><br><span class=\"line\">                var queryTask = new QueryTask(&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/1&quot;);</span><br><span class=\"line\">                //创建查询参数对象</span><br><span class=\"line\">                var query = new Query();</span><br><span class=\"line\">                //空间查询的几何对象</span><br><span class=\"line\">                query.geometry = geometry;</span><br><span class=\"line\">                //服务器给我们返回的字段信息，*代表返回所有字段</span><br><span class=\"line\">                query.outFields = [&quot;*&quot;];</span><br><span class=\"line\">                //空间参考信息</span><br><span class=\"line\">                query.outSpatialReference = map.spatialReference;</span><br><span class=\"line\">                //查询的标准，此处代表和geometry相交的图形都要返回</span><br><span class=\"line\">                query.spatialRelationship = Query.SPATIAL_REL_INTERSECTS;</span><br><span class=\"line\">                //是否返回几何信息</span><br><span class=\"line\">                query.returnGeometry = true;</span><br><span class=\"line\">                //执行空间查询</span><br><span class=\"line\">                queryTask.execute(query, showQueryResult);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            function showQueryResult(queryResult) &#123;</span><br><span class=\"line\">                //创建线符号</span><br><span class=\"line\">                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //创建面符号</span><br><span class=\"line\">                var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);</span><br><span class=\"line\">                if (queryResult.features.length == 0) &#123;</span><br><span class=\"line\">                    dom.byId(&quot;divShowResult&quot;).innerHTML = &quot;&quot;;</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                var htmls = &quot;&quot;;</span><br><span class=\"line\">                if (queryResult.features.length &gt;= 1) &#123;</span><br><span class=\"line\">                    htmls = htmls + &quot;&lt;table style=\\&quot;width: 100%\\&quot;&gt;&quot;;</span><br><span class=\"line\">                    htmls = htmls + &quot;&lt;tr&gt;&lt;td&gt;名称&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                    for (var i = 0; i &lt; queryResult.features.length; i++) &#123;</span><br><span class=\"line\">                        //得到graphic</span><br><span class=\"line\">                        var graphic = queryResult.features[i];</span><br><span class=\"line\">                        //给图形赋予符号</span><br><span class=\"line\">                        graphic.setSymbol(fill);</span><br><span class=\"line\">                        //添加到地图从而实现高亮效果</span><br><span class=\"line\">                        map.graphics.add(graphic);</span><br><span class=\"line\">                        //获得教学楼的名称信息，此处应和shp的属性表对应</span><br><span class=\"line\">                        var ptName = graphic.attributes[&quot;alias&quot;];</span><br><span class=\"line\">                        if (i % 2 == 0)</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;tr&gt;&quot;;</span><br><span class=\"line\">                        else</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;tr bgcolor=\\&quot;#F0F0F0\\&quot;&gt;&quot;;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;td&gt;&lt;a href=\\&quot;#\\&quot;\\&quot;&gt;&quot; + ptName + &quot;&lt;/a&gt;&lt;/td&gt;&quot;;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    htmls = htmls + &quot;&lt;/table&gt;&quot;;</span><br><span class=\"line\">                    //将教学楼的名称信息和divShowResult绑定</span><br><span class=\"line\">                    dom.byId(&quot;divShowResult&quot;).innerHTML = htmls;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           </span><br><span class=\"line\"></span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapdiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; value=&quot;空间查询&quot; id=&quot;Btn&quot;/&gt;</span><br><span class=\"line\">    &lt;div id=&quot;divShowResult&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>运行之后的结果为：<br><img src=\"/2019/08/06/ArcGIS-API-for-JS14/03.png\" alt=\"03.png\"></p>\n<h4 id=\"利用QueryTask进行属性查询\"><a href=\"#利用QueryTask进行属性查询\" class=\"headerlink\" title=\"利用QueryTask进行属性查询\"></a>利用QueryTask进行属性查询</h4><p>利用QueryTask进行属性查询和空间查询代码差不多。</p>\n<p>#####全部代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;QueryTask&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/QueryTask&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/query&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;, </span><br><span class=\"line\">            &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map, ArcGISDynamicMapServiceLayer,dom, on,</span><br><span class=\"line\">            QueryTask, Query,</span><br><span class=\"line\">            SimpleLineSymbol,SimpleFillSymbol,Graphic) &#123;</span><br><span class=\"line\">                //根据div的id属性创建地图</span><br><span class=\"line\">                var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                //定义一个动态地图服务</span><br><span class=\"line\">                var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">                (&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;);</span><br><span class=\"line\">                //将图层添加到地图</span><br><span class=\"line\">                map.addLayer(layer)</span><br><span class=\"line\">                //给属性查询按钮添加click事件</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                    //定义查询对象</span><br><span class=\"line\">                    var queryTask = new QueryTask</span><br><span class=\"line\">                    (&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/1&quot;);</span><br><span class=\"line\">                    //定义查询参数对象</span><br><span class=\"line\">                    var query = new Query();</span><br><span class=\"line\">                    //查询条件，类似于sql语句的where子句</span><br><span class=\"line\">                    query.where = &quot;name = &apos;J4&apos;&quot;;;</span><br><span class=\"line\">                    //返回的字段信息：*代表返回全部字段</span><br><span class=\"line\">                    query.outFields = [&quot;*&quot;];</span><br><span class=\"line\">                    //是否返回几何形状</span><br><span class=\"line\">                    query.returnGeometry = true;</span><br><span class=\"line\">                    //执行属性查询</span><br><span class=\"line\">                    queryTask.execute(query, showQueryResult);</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //属性查询完成之后，用showQueryResult来处理返回的结果</span><br><span class=\"line\">                function showQueryResult(queryResult)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    //创建线符号</span><br><span class=\"line\">                    var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                    //创建面符号</span><br><span class=\"line\">                    var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);</span><br><span class=\"line\">                    if (queryResult.features.length == 0) &#123;</span><br><span class=\"line\">                        dom.byId(&quot;divShowResult&quot;).innerHTML = &quot;&quot;;</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    var htmls = &quot;&quot;;</span><br><span class=\"line\">                    if (queryResult.features.length &gt;= 1) &#123;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;table style=\\&quot;width: 100%\\&quot;&gt;&quot;;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;tr&gt;&lt;td&gt;名称&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                        for (var i = 0; i &lt; queryResult.features.length; i++) &#123;</span><br><span class=\"line\">                            //获得图形graphic</span><br><span class=\"line\">                            var graphic = queryResult.features[i];</span><br><span class=\"line\">                            //赋予相应的符号</span><br><span class=\"line\">                            graphic.setSymbol(fill);</span><br><span class=\"line\">                            //将graphic添加到地图中，从而实现高亮效果</span><br><span class=\"line\">                            map.graphics.add(graphic);</span><br><span class=\"line\">                            //获得教学楼名称（此处是和shp属性表对应的）</span><br><span class=\"line\">                            var ptName = graphic.attributes[&quot;alias&quot;];</span><br><span class=\"line\">                            if (i % 2 == 0)</span><br><span class=\"line\">                                htmls = htmls + &quot;&lt;tr&gt;&quot;;</span><br><span class=\"line\">                            else</span><br><span class=\"line\">                                htmls = htmls + &quot;&lt;tr bgcolor=\\&quot;#F0F0F0\\&quot;&gt;&quot;;</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;td&gt;&lt;a href=\\&quot;#\\&quot; \\&quot;&gt;&quot; + ptName + &quot;&lt;/a&gt;&lt;/td&gt;&quot;;</span><br><span class=\"line\">                            htmls = htmls + &quot;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        htmls = htmls + &quot;&lt;/table&gt;&quot;;</span><br><span class=\"line\">                        //将属性绑定在divShowResult上面</span><br><span class=\"line\">                        dom.byId(&quot;divShowResult&quot;).innerHTML = htmls;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">              </span><br><span class=\"line\">         </span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; value=&quot;属性查询&quot; id=&quot;Btn&quot;/&gt;</span><br><span class=\"line\">    &lt;div id=&quot;divShowResult&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>运行之后的结果：<br><img src=\"/2019/08/06/ArcGIS-API-for-JS14/04.png\" alt=\"04.png\"></p>\n<h4 id=\"利用IdentifyTask实现空间查询\"><a href=\"#利用IdentifyTask实现空间查询\" class=\"headerlink\" title=\"利用IdentifyTask实现空间查询\"></a>利用IdentifyTask实现空间查询</h4><p>IdentifyTask的使用与QueryTask十分类似，唯一不同的是IdentifyTask可以作用于多个图层，而QueryTask是作用于一个图层的。</p>\n<h5 id=\"全部代码-2\"><a href=\"#全部代码-2\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;WebGIS&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/IdentifyTask&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/IdentifyParameters&quot;,</span><br><span class=\"line\">            &quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map,</span><br><span class=\"line\">                ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                on,</span><br><span class=\"line\">                dom,</span><br><span class=\"line\">                IdentifyTask,</span><br><span class=\"line\">                IdentifyParameters,</span><br><span class=\"line\">                Draw,</span><br><span class=\"line\">                SimpleFillSymbol,</span><br><span class=\"line\">                SimpleLineSymbol,</span><br><span class=\"line\">                Graphic</span><br><span class=\"line\">                ) &#123;</span><br><span class=\"line\">                    var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                    //地图服务的url</span><br><span class=\"line\">                    MapServer = &quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;;</span><br><span class=\"line\">                    //定义一个动态地图服务</span><br><span class=\"line\">                    var layer = new ArcGISDynamicMapServiceLayer(MapServer);    </span><br><span class=\"line\">                    map.addLayer(layer)</span><br><span class=\"line\">                    //定义绘图对象</span><br><span class=\"line\">                    var toolBar = new Draw(map);</span><br><span class=\"line\">                    //绑定点击事件</span><br><span class=\"line\">                    on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                        //激活绘图工具：绘制面</span><br><span class=\"line\">                        toolBar.activate(esri.toolbars.Draw.POLYGON);</span><br><span class=\"line\">                        </span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    //给绘图工具绑定绘图完成事件</span><br><span class=\"line\">                    on(toolBar, &quot;draw-complete&quot;, function (result)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        //获得绘图得到的面</span><br><span class=\"line\">                        var geometry=result.geometry;</span><br><span class=\"line\">                        //关闭绘图工具</span><br><span class=\"line\">                        toolBar.deactivate();</span><br><span class=\"line\">                        //执行空间查询</span><br><span class=\"line\">                        identifyQuery(geometry);</span><br><span class=\"line\">                    &#125;);                   </span><br><span class=\"line\">                    function identifyQuery(geometry) &#123;</span><br><span class=\"line\">                        //定义空间查询对象，注意他的参数是整个地图服务，而不是单个图层</span><br><span class=\"line\">                        var identifyTask = new IdentifyTask(MapServer);</span><br><span class=\"line\">                        //定义空间查询参数对象</span><br><span class=\"line\">                        var params = new IdentifyParameters();</span><br><span class=\"line\">                        //容差</span><br><span class=\"line\">                        params.tolerance = 5;</span><br><span class=\"line\">                        //是否返回几何信息</span><br><span class=\"line\">                        params.returnGeometry = true;</span><br><span class=\"line\">                        //空间查询的图层，此时是两个图层</span><br><span class=\"line\">                        params.layerIds = [1,3];</span><br><span class=\"line\">                        //空间查询的条件</span><br><span class=\"line\">                        params.layerOption = IdentifyParameters.LAYER_OPTION_ALL;</span><br><span class=\"line\">                        params.width = map.width;</span><br><span class=\"line\">                        params.height = map.height;</span><br><span class=\"line\">                        //空间查询的几何对象</span><br><span class=\"line\">                        params.geometry = geometry;</span><br><span class=\"line\">                        params.mapExtent = map.extent;</span><br><span class=\"line\">                        //执行空间查询</span><br><span class=\"line\">                        identifyTask.execute(params,showQueryResult);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //通过此函数处理查询之后的信息</span><br><span class=\"line\">                    function showQueryResult(idResults) &#123;</span><br><span class=\"line\">                        //创建线符号</span><br><span class=\"line\">                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                        //创建面符号</span><br><span class=\"line\">                        var fill=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol);</span><br><span class=\"line\">                        if (idResults.length &gt; 0) &#123;</span><br><span class=\"line\">                                var htmls = &quot;&lt;table style=\\&quot;width: 100%\\&quot;&gt;&quot;;</span><br><span class=\"line\">                                htmls = htmls + &quot;&lt;tr bgcolor=\\&quot;#E0E0E0\\&quot;&gt;&lt;td&gt; 图层 &lt;/td&gt;&lt;td&gt; 名 称&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                                for (var i = 0; i &lt; idResults.length; i++) &#123;</span><br><span class=\"line\">                                    var result = idResults[i];</span><br><span class=\"line\">                                    //获得图形graphic</span><br><span class=\"line\">                                    var graphic = result.feature;</span><br><span class=\"line\">                                    //设置图形的符号</span><br><span class=\"line\">                                    graphic.setSymbol(fill);</span><br><span class=\"line\">                                    //获得教学楼的名称信息</span><br><span class=\"line\">                                    var namevalue = result.feature.attributes.alias;</span><br><span class=\"line\">                                    if (i % 2 == 1) &#123;</span><br><span class=\"line\">                                        htmls = htmls + &quot;&lt;tr  bgcolor=\\&quot;#E0E0E0\\&quot;&gt;&lt;td&gt;&quot; +</span><br><span class=\"line\">                                        result.layerName + &quot;&lt;/td&gt;&lt;td&gt;&quot; + namevalue + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                    else &#123;</span><br><span class=\"line\">                                        htmls = htmls + &quot;&lt;tr&gt;&lt;td&gt;&quot; + result.layerName + &quot;&lt;/td&gt;&lt;td&gt;&quot;</span><br><span class=\"line\">                                        + namevalue + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                    </span><br><span class=\"line\">                                    map.graphics.add(graphic);</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                htmls = htmls + &quot;&lt;/table&gt;&quot;;</span><br><span class=\"line\">                                document.getElementById(&quot;divShowResult&quot;).innerHTML = htmls;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            else &#123;</span><br><span class=\"line\">                                document.getElementById(&quot;divShowResult&quot;).innerHTML = &quot;&quot;;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; value=&quot;空间查询---多边形&quot; id=&quot;Btn&quot;/&gt;</span><br><span class=\"line\">    &lt;div id=&quot;divShowResult&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>运行之后的结果：<br><img src=\"/2019/08/06/ArcGIS-API-for-JS14/05.png\" alt=\"05.png\"></p>\n"},{"title":"ArcGIS API For Javascript调用结果地图服务","date":"2019-08-06T08:07:59.000Z","_content":"结果地图服务也是GP服务的一种，当GP服务的结果返回栅格数据时，我们往往使用结果地图服务来对生成的栅格数据进行渲染，本实例是：克里金差值\n### ArcGIS API调用结果地图服务\n首先我们查看一下服务的定义：\n![01.png](01.png)\n![02.png](02.png)\n####代码实现\n在页面添加地图（略）\n创建两个按钮（一个是画点，一个是进行插值运算）\n```\n<input id=\"Btn\" type=\"button\" value=\"画点\" />\n<input id=\"king\" type=\"button\" value=\"插值分析\" />\n```\n定义点集合对象\n```\n//定义点集合\nvar pointSet = new FeatureSet();\n//定义点符号\nvar psymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CROSS, 12,\nnew SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,\nnew dojo.Color([255, 0, 0]), 2),\nnew dojo.Color([0, 255, 0, 0.25]));\n```\n给画点的按钮绑定事件\n```\n        //绑定画点的事件\n        on(dom.byId(\"Btn\"),\"click\",function(e){\n            //定义绘图工具\n                    var toolBar = new Draw(MyMap, { showTooltips: true });\n                    //激活绘图工具\n                    toolBar.activate(Draw.POINT);\n                    //定义一个i，为了给graphic赋予属性，为差值做准备。\n                    var i=20;\n                    //给绘图工具绑定绘图完成事件\n                    on(toolBar, \"draw-complete\", function(result){\n                        //保证每一次i的值都不一样，如果所有点的属性都一样，是不可以差值的。\n                        i=i+40;\n                        //获得几何形状\n                        var geometry = result.geometry;\n                        //给图形一个m属性，我们后面对m进行差值\n                        var graphicpoint = new Graphic(geometry, psymbol,{\"m\":i});\n                        pointSet.features.push(graphicpoint);   \n                        MyMap.graphics.add(graphicpoint);\n                    }); \n        });\n```\n给插值按钮绑定事件\n```\n//声明gp对象\nvar gp;\non(dom.byId(\"king\"),\"click\",function(e){\n                    //定义gp服务对象\n                    gp= new Geoprocessor(\"http://localhost:6080/arcgis/rest/services/Test/myKing/GPServer/king\");\n                    //定义GP服务参数对象\n                    var gpParams={};\n                    //添加点集合的字段信息\n                    pointSet.fields=[{\n                    \"name\":\"m\",\n                    \"type\":\"esriFieldTypeSmallInteger\",\n                    \"alias\":\"m\"\n                    }];\n                    //添加Input参数\n                    gpParams.Input=pointSet;\n                    //添加Z属性：即差值的属性\n                    gpParams.Z=\"m\";\n                    gp.submitJob(gpParams,completeCallback);\n})\n```\n回掉函数处理结果\n```\nfunction completeCallback(jobInfo)\n                {\n                    gp.on(\"get-result-image-layer-complete\",function(gpLayer){\n                        MyMap.addLayer(gpLayer[\"layer\"])\n                    })\n                    gp.getResultImageLayer(jobInfo.jobId,\"out\");\n                    \n                    \n                    \n}\n```\n#### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>GP</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\" charset=\"utf-8\">\n\n        require([\"esri/map\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"dojo/dom\",\n            \"esri/tasks/Geoprocessor\",\n            \"esri/tasks/FeatureSet\",\n            \"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/toolbars/draw\",\n            \"esri/symbols/SimpleFillSymbol\",\n             \"dojo/on\",\"esri/graphic\",\n            \"esri/layers/ImageParameters\",\n            \"dojo/domReady!\"],\n            function (Map,\n                ArcGISDynamicMapServiceLayer,\n                dom,\n                Geoprocessor,\n                FeatureSet,\n                SimpleMarkerSymbol,\n                SimpleLineSymbol,\n                Draw,\n                SimpleFillSymbol,on,Graphic,ImageParameters) {\n                var MyMap = new Map(\"MyMapDiv\");\n                var layer = new ArcGISDynamicMapServiceLayer\n                (\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer\");\n                MyMap.addLayer(layer)               \n                \n                //定义点集合对象\n                var pointSet = new FeatureSet();\n                //定义点符号\n                var psymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CROSS, 12,\n                new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,\n                new dojo.Color([255, 0, 0]), 2),\n                new dojo.Color([0, 255, 0, 0.25]));\n                //绑定画点的事件\n                on(dom.byId(\"Btn\"),\"click\",function(e){\n                    //定义绘图工具\n                    var toolBar = new Draw(MyMap, { showTooltips: true });\n                    //激活绘图工具\n                    toolBar.activate(Draw.POINT);\n                    //定义一个i，为了给graphic赋予属性，为差值做准备。\n                    var i=20;\n                    //给绘图工具绑定绘图完成事件\n                    on(toolBar, \"draw-complete\", function(result){\n                        //保证每一次i的值都不一样，如果所有点的属性都一样，是不可以差值的。\n                        i=i+40;\n                        //获得几何形状\n                        var geometry = result.geometry;\n                        //给图形一个m属性，我们后面对m进行差值\n                        var graphicpoint = new Graphic(geometry, psymbol,{\"m\":i});\n                        pointSet.features.push(graphicpoint);   \n                        MyMap.graphics.add(graphicpoint);\n                    }); \n                });\n                var gp;\n                on(dom.byId(\"king\"),\"click\",function(e){\n                    //定义gp服务对象\n                    gp= new Geoprocessor(\"http://localhost:6080/arcgis/rest/services/Test/myKing/GPServer/king\");\n                    //定义GP服务参数对象\n                    var gpParams={};\n                    //添加点集合的字段信息\n                    pointSet.fields=[{\n                    \"name\":\"m\",\n                    \"type\":\"esriFieldTypeSmallInteger\",\n                    \"alias\":\"m\"\n                    }];\n                    //添加Input参数\n                    gpParams.Input=pointSet;\n                    //添加Z属性：即差值的属性\n                    gpParams.Z=\"m\";\n                    //执行gp服务，注意这里是执行submitJob，因为是同步的gp服务\n                    gp.submitJob(gpParams,completeCallback);\n                })          \n                function completeCallback(jobInfo)\n                {\n                    //给gp服务绑定获得图层事件\n                    gp.on(\"get-result-image-layer-complete\",function(gpLayer){\n                        //将图层添加到地图中\n                        MyMap.addLayer(gpLayer[\"layer\"])\n                    })\n                    //注意out是服务定义的参数\n                    gp.getResultImageLayer(jobInfo.jobId,\"out\");\n                                                           \n                }   \n\n            });\n\n\n    </script>\n</head>\n<body>\n    <div id=\"MyMapDiv\" class=\"MapClass\"></div>\n    <input id=\"Btn\" type=\"button\" value=\"画点\" />\n    <input id=\"king\" type=\"button\" value=\"插值分析\" />\n\n</body>\n</html>\n```\n![03.png](03.png)","source":"_posts/ArcGIS-API-for-JS17.md","raw":"---\ntitle: ArcGIS API For Javascript调用结果地图服务\ndate: 2019-08-06 16:07:59\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n结果地图服务也是GP服务的一种，当GP服务的结果返回栅格数据时，我们往往使用结果地图服务来对生成的栅格数据进行渲染，本实例是：克里金差值\n### ArcGIS API调用结果地图服务\n首先我们查看一下服务的定义：\n![01.png](01.png)\n![02.png](02.png)\n####代码实现\n在页面添加地图（略）\n创建两个按钮（一个是画点，一个是进行插值运算）\n```\n<input id=\"Btn\" type=\"button\" value=\"画点\" />\n<input id=\"king\" type=\"button\" value=\"插值分析\" />\n```\n定义点集合对象\n```\n//定义点集合\nvar pointSet = new FeatureSet();\n//定义点符号\nvar psymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CROSS, 12,\nnew SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,\nnew dojo.Color([255, 0, 0]), 2),\nnew dojo.Color([0, 255, 0, 0.25]));\n```\n给画点的按钮绑定事件\n```\n        //绑定画点的事件\n        on(dom.byId(\"Btn\"),\"click\",function(e){\n            //定义绘图工具\n                    var toolBar = new Draw(MyMap, { showTooltips: true });\n                    //激活绘图工具\n                    toolBar.activate(Draw.POINT);\n                    //定义一个i，为了给graphic赋予属性，为差值做准备。\n                    var i=20;\n                    //给绘图工具绑定绘图完成事件\n                    on(toolBar, \"draw-complete\", function(result){\n                        //保证每一次i的值都不一样，如果所有点的属性都一样，是不可以差值的。\n                        i=i+40;\n                        //获得几何形状\n                        var geometry = result.geometry;\n                        //给图形一个m属性，我们后面对m进行差值\n                        var graphicpoint = new Graphic(geometry, psymbol,{\"m\":i});\n                        pointSet.features.push(graphicpoint);   \n                        MyMap.graphics.add(graphicpoint);\n                    }); \n        });\n```\n给插值按钮绑定事件\n```\n//声明gp对象\nvar gp;\non(dom.byId(\"king\"),\"click\",function(e){\n                    //定义gp服务对象\n                    gp= new Geoprocessor(\"http://localhost:6080/arcgis/rest/services/Test/myKing/GPServer/king\");\n                    //定义GP服务参数对象\n                    var gpParams={};\n                    //添加点集合的字段信息\n                    pointSet.fields=[{\n                    \"name\":\"m\",\n                    \"type\":\"esriFieldTypeSmallInteger\",\n                    \"alias\":\"m\"\n                    }];\n                    //添加Input参数\n                    gpParams.Input=pointSet;\n                    //添加Z属性：即差值的属性\n                    gpParams.Z=\"m\";\n                    gp.submitJob(gpParams,completeCallback);\n})\n```\n回掉函数处理结果\n```\nfunction completeCallback(jobInfo)\n                {\n                    gp.on(\"get-result-image-layer-complete\",function(gpLayer){\n                        MyMap.addLayer(gpLayer[\"layer\"])\n                    })\n                    gp.getResultImageLayer(jobInfo.jobId,\"out\");\n                    \n                    \n                    \n}\n```\n#### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>GP</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\" charset=\"utf-8\">\n\n        require([\"esri/map\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"dojo/dom\",\n            \"esri/tasks/Geoprocessor\",\n            \"esri/tasks/FeatureSet\",\n            \"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/toolbars/draw\",\n            \"esri/symbols/SimpleFillSymbol\",\n             \"dojo/on\",\"esri/graphic\",\n            \"esri/layers/ImageParameters\",\n            \"dojo/domReady!\"],\n            function (Map,\n                ArcGISDynamicMapServiceLayer,\n                dom,\n                Geoprocessor,\n                FeatureSet,\n                SimpleMarkerSymbol,\n                SimpleLineSymbol,\n                Draw,\n                SimpleFillSymbol,on,Graphic,ImageParameters) {\n                var MyMap = new Map(\"MyMapDiv\");\n                var layer = new ArcGISDynamicMapServiceLayer\n                (\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer\");\n                MyMap.addLayer(layer)               \n                \n                //定义点集合对象\n                var pointSet = new FeatureSet();\n                //定义点符号\n                var psymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CROSS, 12,\n                new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,\n                new dojo.Color([255, 0, 0]), 2),\n                new dojo.Color([0, 255, 0, 0.25]));\n                //绑定画点的事件\n                on(dom.byId(\"Btn\"),\"click\",function(e){\n                    //定义绘图工具\n                    var toolBar = new Draw(MyMap, { showTooltips: true });\n                    //激活绘图工具\n                    toolBar.activate(Draw.POINT);\n                    //定义一个i，为了给graphic赋予属性，为差值做准备。\n                    var i=20;\n                    //给绘图工具绑定绘图完成事件\n                    on(toolBar, \"draw-complete\", function(result){\n                        //保证每一次i的值都不一样，如果所有点的属性都一样，是不可以差值的。\n                        i=i+40;\n                        //获得几何形状\n                        var geometry = result.geometry;\n                        //给图形一个m属性，我们后面对m进行差值\n                        var graphicpoint = new Graphic(geometry, psymbol,{\"m\":i});\n                        pointSet.features.push(graphicpoint);   \n                        MyMap.graphics.add(graphicpoint);\n                    }); \n                });\n                var gp;\n                on(dom.byId(\"king\"),\"click\",function(e){\n                    //定义gp服务对象\n                    gp= new Geoprocessor(\"http://localhost:6080/arcgis/rest/services/Test/myKing/GPServer/king\");\n                    //定义GP服务参数对象\n                    var gpParams={};\n                    //添加点集合的字段信息\n                    pointSet.fields=[{\n                    \"name\":\"m\",\n                    \"type\":\"esriFieldTypeSmallInteger\",\n                    \"alias\":\"m\"\n                    }];\n                    //添加Input参数\n                    gpParams.Input=pointSet;\n                    //添加Z属性：即差值的属性\n                    gpParams.Z=\"m\";\n                    //执行gp服务，注意这里是执行submitJob，因为是同步的gp服务\n                    gp.submitJob(gpParams,completeCallback);\n                })          \n                function completeCallback(jobInfo)\n                {\n                    //给gp服务绑定获得图层事件\n                    gp.on(\"get-result-image-layer-complete\",function(gpLayer){\n                        //将图层添加到地图中\n                        MyMap.addLayer(gpLayer[\"layer\"])\n                    })\n                    //注意out是服务定义的参数\n                    gp.getResultImageLayer(jobInfo.jobId,\"out\");\n                                                           \n                }   \n\n            });\n\n\n    </script>\n</head>\n<body>\n    <div id=\"MyMapDiv\" class=\"MapClass\"></div>\n    <input id=\"Btn\" type=\"button\" value=\"画点\" />\n    <input id=\"king\" type=\"button\" value=\"插值分析\" />\n\n</body>\n</html>\n```\n![03.png](03.png)","slug":"ArcGIS-API-for-JS17","published":1,"updated":"2019-08-06T08:32:25.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5ctq0012t09zli7fc7xx","content":"<p>结果地图服务也是GP服务的一种，当GP服务的结果返回栅格数据时，我们往往使用结果地图服务来对生成的栅格数据进行渲染，本实例是：克里金差值</p>\n<h3 id=\"ArcGIS-API调用结果地图服务\"><a href=\"#ArcGIS-API调用结果地图服务\" class=\"headerlink\" title=\"ArcGIS API调用结果地图服务\"></a>ArcGIS API调用结果地图服务</h3><p>首先我们查看一下服务的定义：<br><img src=\"/2019/08/06/ArcGIS-API-for-JS17/01.png\" alt=\"01.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS17/02.png\" alt=\"02.png\"></p>\n<p>####代码实现<br>在页面添加地图（略）<br>创建两个按钮（一个是画点，一个是进行插值运算）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input id=&quot;Btn&quot; type=&quot;button&quot; value=&quot;画点&quot; /&gt;</span><br><span class=\"line\">&lt;input id=&quot;king&quot; type=&quot;button&quot; value=&quot;插值分析&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>定义点集合对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义点集合</span><br><span class=\"line\">var pointSet = new FeatureSet();</span><br><span class=\"line\">//定义点符号</span><br><span class=\"line\">var psymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CROSS, 12,</span><br><span class=\"line\">new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,</span><br><span class=\"line\">new dojo.Color([255, 0, 0]), 2),</span><br><span class=\"line\">new dojo.Color([0, 255, 0, 0.25]));</span><br></pre></td></tr></table></figure></p>\n<p>给画点的按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//绑定画点的事件</span><br><span class=\"line\">on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">    //定义绘图工具</span><br><span class=\"line\">            var toolBar = new Draw(MyMap, &#123; showTooltips: true &#125;);</span><br><span class=\"line\">            //激活绘图工具</span><br><span class=\"line\">            toolBar.activate(Draw.POINT);</span><br><span class=\"line\">            //定义一个i，为了给graphic赋予属性，为差值做准备。</span><br><span class=\"line\">            var i=20;</span><br><span class=\"line\">            //给绘图工具绑定绘图完成事件</span><br><span class=\"line\">            on(toolBar, &quot;draw-complete&quot;, function(result)&#123;</span><br><span class=\"line\">                //保证每一次i的值都不一样，如果所有点的属性都一样，是不可以差值的。</span><br><span class=\"line\">                i=i+40;</span><br><span class=\"line\">                //获得几何形状</span><br><span class=\"line\">                var geometry = result.geometry;</span><br><span class=\"line\">                //给图形一个m属性，我们后面对m进行差值</span><br><span class=\"line\">                var graphicpoint = new Graphic(geometry, psymbol,&#123;&quot;m&quot;:i&#125;);</span><br><span class=\"line\">                pointSet.features.push(graphicpoint);   </span><br><span class=\"line\">                MyMap.graphics.add(graphicpoint);</span><br><span class=\"line\">            &#125;); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>给插值按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//声明gp对象</span><br><span class=\"line\">var gp;</span><br><span class=\"line\">on(dom.byId(&quot;king&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                    //定义gp服务对象</span><br><span class=\"line\">                    gp= new Geoprocessor(&quot;http://localhost:6080/arcgis/rest/services/Test/myKing/GPServer/king&quot;);</span><br><span class=\"line\">                    //定义GP服务参数对象</span><br><span class=\"line\">                    var gpParams=&#123;&#125;;</span><br><span class=\"line\">                    //添加点集合的字段信息</span><br><span class=\"line\">                    pointSet.fields=[&#123;</span><br><span class=\"line\">                    &quot;name&quot;:&quot;m&quot;,</span><br><span class=\"line\">                    &quot;type&quot;:&quot;esriFieldTypeSmallInteger&quot;,</span><br><span class=\"line\">                    &quot;alias&quot;:&quot;m&quot;</span><br><span class=\"line\">                    &#125;];</span><br><span class=\"line\">                    //添加Input参数</span><br><span class=\"line\">                    gpParams.Input=pointSet;</span><br><span class=\"line\">                    //添加Z属性：即差值的属性</span><br><span class=\"line\">                    gpParams.Z=&quot;m&quot;;</span><br><span class=\"line\">                    gp.submitJob(gpParams,completeCallback);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>回掉函数处理结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function completeCallback(jobInfo)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    gp.on(&quot;get-result-image-layer-complete&quot;,function(gpLayer)&#123;</span><br><span class=\"line\">                        MyMap.addLayer(gpLayer[&quot;layer&quot;])</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    gp.getResultImageLayer(jobInfo.jobId,&quot;out&quot;);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    </span><br><span class=\"line\">                    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;GP&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/Geoprocessor&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/FeatureSet&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">             &quot;dojo/on&quot;,&quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ImageParameters&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map,</span><br><span class=\"line\">                ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                dom,</span><br><span class=\"line\">                Geoprocessor,</span><br><span class=\"line\">                FeatureSet,</span><br><span class=\"line\">                SimpleMarkerSymbol,</span><br><span class=\"line\">                SimpleLineSymbol,</span><br><span class=\"line\">                Draw,</span><br><span class=\"line\">                SimpleFillSymbol,on,Graphic,ImageParameters) &#123;</span><br><span class=\"line\">                var MyMap = new Map(&quot;MyMapDiv&quot;);</span><br><span class=\"line\">                var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">                (&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer&quot;);</span><br><span class=\"line\">                MyMap.addLayer(layer)               </span><br><span class=\"line\">                </span><br><span class=\"line\">                //定义点集合对象</span><br><span class=\"line\">                var pointSet = new FeatureSet();</span><br><span class=\"line\">                //定义点符号</span><br><span class=\"line\">                var psymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CROSS, 12,</span><br><span class=\"line\">                new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,</span><br><span class=\"line\">                new dojo.Color([255, 0, 0]), 2),</span><br><span class=\"line\">                new dojo.Color([0, 255, 0, 0.25]));</span><br><span class=\"line\">                //绑定画点的事件</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                    //定义绘图工具</span><br><span class=\"line\">                    var toolBar = new Draw(MyMap, &#123; showTooltips: true &#125;);</span><br><span class=\"line\">                    //激活绘图工具</span><br><span class=\"line\">                    toolBar.activate(Draw.POINT);</span><br><span class=\"line\">                    //定义一个i，为了给graphic赋予属性，为差值做准备。</span><br><span class=\"line\">                    var i=20;</span><br><span class=\"line\">                    //给绘图工具绑定绘图完成事件</span><br><span class=\"line\">                    on(toolBar, &quot;draw-complete&quot;, function(result)&#123;</span><br><span class=\"line\">                        //保证每一次i的值都不一样，如果所有点的属性都一样，是不可以差值的。</span><br><span class=\"line\">                        i=i+40;</span><br><span class=\"line\">                        //获得几何形状</span><br><span class=\"line\">                        var geometry = result.geometry;</span><br><span class=\"line\">                        //给图形一个m属性，我们后面对m进行差值</span><br><span class=\"line\">                        var graphicpoint = new Graphic(geometry, psymbol,&#123;&quot;m&quot;:i&#125;);</span><br><span class=\"line\">                        pointSet.features.push(graphicpoint);   </span><br><span class=\"line\">                        MyMap.graphics.add(graphicpoint);</span><br><span class=\"line\">                    &#125;); </span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                var gp;</span><br><span class=\"line\">                on(dom.byId(&quot;king&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                    //定义gp服务对象</span><br><span class=\"line\">                    gp= new Geoprocessor(&quot;http://localhost:6080/arcgis/rest/services/Test/myKing/GPServer/king&quot;);</span><br><span class=\"line\">                    //定义GP服务参数对象</span><br><span class=\"line\">                    var gpParams=&#123;&#125;;</span><br><span class=\"line\">                    //添加点集合的字段信息</span><br><span class=\"line\">                    pointSet.fields=[&#123;</span><br><span class=\"line\">                    &quot;name&quot;:&quot;m&quot;,</span><br><span class=\"line\">                    &quot;type&quot;:&quot;esriFieldTypeSmallInteger&quot;,</span><br><span class=\"line\">                    &quot;alias&quot;:&quot;m&quot;</span><br><span class=\"line\">                    &#125;];</span><br><span class=\"line\">                    //添加Input参数</span><br><span class=\"line\">                    gpParams.Input=pointSet;</span><br><span class=\"line\">                    //添加Z属性：即差值的属性</span><br><span class=\"line\">                    gpParams.Z=&quot;m&quot;;</span><br><span class=\"line\">                    //执行gp服务，注意这里是执行submitJob，因为是同步的gp服务</span><br><span class=\"line\">                    gp.submitJob(gpParams,completeCallback);</span><br><span class=\"line\">                &#125;)          </span><br><span class=\"line\">                function completeCallback(jobInfo)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    //给gp服务绑定获得图层事件</span><br><span class=\"line\">                    gp.on(&quot;get-result-image-layer-complete&quot;,function(gpLayer)&#123;</span><br><span class=\"line\">                        //将图层添加到地图中</span><br><span class=\"line\">                        MyMap.addLayer(gpLayer[&quot;layer&quot;])</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    //注意out是服务定义的参数</span><br><span class=\"line\">                    gp.getResultImageLayer(jobInfo.jobId,&quot;out&quot;);</span><br><span class=\"line\">                                                           </span><br><span class=\"line\">                &#125;   </span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;MyMapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;input id=&quot;Btn&quot; type=&quot;button&quot; value=&quot;画点&quot; /&gt;</span><br><span class=\"line\">    &lt;input id=&quot;king&quot; type=&quot;button&quot; value=&quot;插值分析&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/08/06/ArcGIS-API-for-JS17/03.png\" alt=\"03.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>结果地图服务也是GP服务的一种，当GP服务的结果返回栅格数据时，我们往往使用结果地图服务来对生成的栅格数据进行渲染，本实例是：克里金差值</p>\n<h3 id=\"ArcGIS-API调用结果地图服务\"><a href=\"#ArcGIS-API调用结果地图服务\" class=\"headerlink\" title=\"ArcGIS API调用结果地图服务\"></a>ArcGIS API调用结果地图服务</h3><p>首先我们查看一下服务的定义：<br><img src=\"/2019/08/06/ArcGIS-API-for-JS17/01.png\" alt=\"01.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS17/02.png\" alt=\"02.png\"></p>\n<p>####代码实现<br>在页面添加地图（略）<br>创建两个按钮（一个是画点，一个是进行插值运算）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input id=&quot;Btn&quot; type=&quot;button&quot; value=&quot;画点&quot; /&gt;</span><br><span class=\"line\">&lt;input id=&quot;king&quot; type=&quot;button&quot; value=&quot;插值分析&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>定义点集合对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义点集合</span><br><span class=\"line\">var pointSet = new FeatureSet();</span><br><span class=\"line\">//定义点符号</span><br><span class=\"line\">var psymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CROSS, 12,</span><br><span class=\"line\">new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,</span><br><span class=\"line\">new dojo.Color([255, 0, 0]), 2),</span><br><span class=\"line\">new dojo.Color([0, 255, 0, 0.25]));</span><br></pre></td></tr></table></figure></p>\n<p>给画点的按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//绑定画点的事件</span><br><span class=\"line\">on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">    //定义绘图工具</span><br><span class=\"line\">            var toolBar = new Draw(MyMap, &#123; showTooltips: true &#125;);</span><br><span class=\"line\">            //激活绘图工具</span><br><span class=\"line\">            toolBar.activate(Draw.POINT);</span><br><span class=\"line\">            //定义一个i，为了给graphic赋予属性，为差值做准备。</span><br><span class=\"line\">            var i=20;</span><br><span class=\"line\">            //给绘图工具绑定绘图完成事件</span><br><span class=\"line\">            on(toolBar, &quot;draw-complete&quot;, function(result)&#123;</span><br><span class=\"line\">                //保证每一次i的值都不一样，如果所有点的属性都一样，是不可以差值的。</span><br><span class=\"line\">                i=i+40;</span><br><span class=\"line\">                //获得几何形状</span><br><span class=\"line\">                var geometry = result.geometry;</span><br><span class=\"line\">                //给图形一个m属性，我们后面对m进行差值</span><br><span class=\"line\">                var graphicpoint = new Graphic(geometry, psymbol,&#123;&quot;m&quot;:i&#125;);</span><br><span class=\"line\">                pointSet.features.push(graphicpoint);   </span><br><span class=\"line\">                MyMap.graphics.add(graphicpoint);</span><br><span class=\"line\">            &#125;); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>给插值按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//声明gp对象</span><br><span class=\"line\">var gp;</span><br><span class=\"line\">on(dom.byId(&quot;king&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                    //定义gp服务对象</span><br><span class=\"line\">                    gp= new Geoprocessor(&quot;http://localhost:6080/arcgis/rest/services/Test/myKing/GPServer/king&quot;);</span><br><span class=\"line\">                    //定义GP服务参数对象</span><br><span class=\"line\">                    var gpParams=&#123;&#125;;</span><br><span class=\"line\">                    //添加点集合的字段信息</span><br><span class=\"line\">                    pointSet.fields=[&#123;</span><br><span class=\"line\">                    &quot;name&quot;:&quot;m&quot;,</span><br><span class=\"line\">                    &quot;type&quot;:&quot;esriFieldTypeSmallInteger&quot;,</span><br><span class=\"line\">                    &quot;alias&quot;:&quot;m&quot;</span><br><span class=\"line\">                    &#125;];</span><br><span class=\"line\">                    //添加Input参数</span><br><span class=\"line\">                    gpParams.Input=pointSet;</span><br><span class=\"line\">                    //添加Z属性：即差值的属性</span><br><span class=\"line\">                    gpParams.Z=&quot;m&quot;;</span><br><span class=\"line\">                    gp.submitJob(gpParams,completeCallback);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>回掉函数处理结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function completeCallback(jobInfo)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    gp.on(&quot;get-result-image-layer-complete&quot;,function(gpLayer)&#123;</span><br><span class=\"line\">                        MyMap.addLayer(gpLayer[&quot;layer&quot;])</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    gp.getResultImageLayer(jobInfo.jobId,&quot;out&quot;);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    </span><br><span class=\"line\">                    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;GP&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/Geoprocessor&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/FeatureSet&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">             &quot;dojo/on&quot;,&quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ImageParameters&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map,</span><br><span class=\"line\">                ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                dom,</span><br><span class=\"line\">                Geoprocessor,</span><br><span class=\"line\">                FeatureSet,</span><br><span class=\"line\">                SimpleMarkerSymbol,</span><br><span class=\"line\">                SimpleLineSymbol,</span><br><span class=\"line\">                Draw,</span><br><span class=\"line\">                SimpleFillSymbol,on,Graphic,ImageParameters) &#123;</span><br><span class=\"line\">                var MyMap = new Map(&quot;MyMapDiv&quot;);</span><br><span class=\"line\">                var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">                (&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer&quot;);</span><br><span class=\"line\">                MyMap.addLayer(layer)               </span><br><span class=\"line\">                </span><br><span class=\"line\">                //定义点集合对象</span><br><span class=\"line\">                var pointSet = new FeatureSet();</span><br><span class=\"line\">                //定义点符号</span><br><span class=\"line\">                var psymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CROSS, 12,</span><br><span class=\"line\">                new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,</span><br><span class=\"line\">                new dojo.Color([255, 0, 0]), 2),</span><br><span class=\"line\">                new dojo.Color([0, 255, 0, 0.25]));</span><br><span class=\"line\">                //绑定画点的事件</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                    //定义绘图工具</span><br><span class=\"line\">                    var toolBar = new Draw(MyMap, &#123; showTooltips: true &#125;);</span><br><span class=\"line\">                    //激活绘图工具</span><br><span class=\"line\">                    toolBar.activate(Draw.POINT);</span><br><span class=\"line\">                    //定义一个i，为了给graphic赋予属性，为差值做准备。</span><br><span class=\"line\">                    var i=20;</span><br><span class=\"line\">                    //给绘图工具绑定绘图完成事件</span><br><span class=\"line\">                    on(toolBar, &quot;draw-complete&quot;, function(result)&#123;</span><br><span class=\"line\">                        //保证每一次i的值都不一样，如果所有点的属性都一样，是不可以差值的。</span><br><span class=\"line\">                        i=i+40;</span><br><span class=\"line\">                        //获得几何形状</span><br><span class=\"line\">                        var geometry = result.geometry;</span><br><span class=\"line\">                        //给图形一个m属性，我们后面对m进行差值</span><br><span class=\"line\">                        var graphicpoint = new Graphic(geometry, psymbol,&#123;&quot;m&quot;:i&#125;);</span><br><span class=\"line\">                        pointSet.features.push(graphicpoint);   </span><br><span class=\"line\">                        MyMap.graphics.add(graphicpoint);</span><br><span class=\"line\">                    &#125;); </span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                var gp;</span><br><span class=\"line\">                on(dom.byId(&quot;king&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                    //定义gp服务对象</span><br><span class=\"line\">                    gp= new Geoprocessor(&quot;http://localhost:6080/arcgis/rest/services/Test/myKing/GPServer/king&quot;);</span><br><span class=\"line\">                    //定义GP服务参数对象</span><br><span class=\"line\">                    var gpParams=&#123;&#125;;</span><br><span class=\"line\">                    //添加点集合的字段信息</span><br><span class=\"line\">                    pointSet.fields=[&#123;</span><br><span class=\"line\">                    &quot;name&quot;:&quot;m&quot;,</span><br><span class=\"line\">                    &quot;type&quot;:&quot;esriFieldTypeSmallInteger&quot;,</span><br><span class=\"line\">                    &quot;alias&quot;:&quot;m&quot;</span><br><span class=\"line\">                    &#125;];</span><br><span class=\"line\">                    //添加Input参数</span><br><span class=\"line\">                    gpParams.Input=pointSet;</span><br><span class=\"line\">                    //添加Z属性：即差值的属性</span><br><span class=\"line\">                    gpParams.Z=&quot;m&quot;;</span><br><span class=\"line\">                    //执行gp服务，注意这里是执行submitJob，因为是同步的gp服务</span><br><span class=\"line\">                    gp.submitJob(gpParams,completeCallback);</span><br><span class=\"line\">                &#125;)          </span><br><span class=\"line\">                function completeCallback(jobInfo)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    //给gp服务绑定获得图层事件</span><br><span class=\"line\">                    gp.on(&quot;get-result-image-layer-complete&quot;,function(gpLayer)&#123;</span><br><span class=\"line\">                        //将图层添加到地图中</span><br><span class=\"line\">                        MyMap.addLayer(gpLayer[&quot;layer&quot;])</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    //注意out是服务定义的参数</span><br><span class=\"line\">                    gp.getResultImageLayer(jobInfo.jobId,&quot;out&quot;);</span><br><span class=\"line\">                                                           </span><br><span class=\"line\">                &#125;   </span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;MyMapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;input id=&quot;Btn&quot; type=&quot;button&quot; value=&quot;画点&quot; /&gt;</span><br><span class=\"line\">    &lt;input id=&quot;king&quot; type=&quot;button&quot; value=&quot;插值分析&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/08/06/ArcGIS-API-for-JS17/03.png\" alt=\"03.png\"></p>\n"},{"title":"ArcGIS API For Javascript之地图操作及小部件","date":"2019-08-06T06:22:30.000Z","_content":"开发一个GIS系统不可避免的就要涉及一些简单的地图操作，比如：拉框放大，拉框缩小，平移，全图等相关操作。除了这些基本的地图操作，Esri给我们提供的一些小部件也非常有用，其中几个重要的小部件有：鹰眼，书签，比例尺等等。在此篇博文中，主要介绍地图的基本操作和几个常用的小部件。\n### 地图的基本操作\n在ArcGIS API中给我们提供了一个类叫做Navigation，通过这个类我们可以实现对地图的基本操作，Navigation类的用法可以分为以下几步：\n\n* 创建Navigation对象\n* 激活Navigation的相应状态\n* 地图操作\n#### 代码实现\n创建五个按钮\n```\n    <button>拉框放大</button>\n    <button>拉框缩小</button>\n    <button>平移</button>\n    <button>全图</button>\n    <button>漫游</button>\n```\n添加地图（省略）\n给相应按钮添加绑定事\n```\n                //给按钮添加绑定事件\n                query(\"button\").on(\"click\",function(event){\n                    //获得按钮的文本信息\n                    var value=this.innerHTML;\n                    switch(value){\n                        case \"平移\":\n                            navToolbar.activate(Navigation.PAN);\n                            break;                          \n                        case \"拉框缩小\":\n                            navToolbar.activate(Navigation.ZOOM_OUT);\n                            break;\n                        case \"拉框放大\":\n                            navToolbar.activate(Navigation.ZOOM_IN);\n                            break;\n                        case \"全图\":\n                            navToolbar.zoomToFullExtent();\n                            break;\n                        case \"漫游\":\n                            //默认是漫游操作\n                            navToolbar.deactivate();\n                            break;\n                    }\n                })\n```\n#### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>Geometric _Network</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"dojo/on\",\n            \"dojo/dom\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"dojo/query\",\"esri/toolbars/navigation\",\n            \"dojo/domReady!\"],\n            function (Map,on,dom,\n                ArcGISDynamicMapServiceLayer,query,Navigation      \n                ) {\n                var map = new Map(\"mapDiv\",{\n                    logo: false\n                });\n                var layer = new ArcGISDynamicMapServiceLayer\n                (\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\");\n                map.addLayer(layer)\n                //创建地图操作对象\n                var navToolbar = new Navigation(map);\n                //给按钮添加绑定事件\n                query(\"button\").on(\"click\",function(event){\n                    //获得按钮的文本信息\n                    var value=this.innerHTML;\n                    switch(value){\n                        case \"平移\":\n                            navToolbar.activate(Navigation.PAN);\n                            break;                          \n                        case \"拉框缩小\":\n                            navToolbar.activate(Navigation.ZOOM_OUT);\n                            break;\n                        case \"拉框放大\":\n                            navToolbar.activate(Navigation.ZOOM_IN);\n                            break;\n                        case \"全图\":\n                            navToolbar.zoomToFullExtent();\n                            break;\n                        case \"漫游\":\n                            //默认是漫游操作\n                            navToolbar.deactivate();\n                            break;\n                    }\n                })\n                               \n            });\n\n\n    </script>\n</head>\n<body class=\"tundra\">\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n    <button>拉框放大</button>\n    <button>拉框缩小</button>\n    <button>平移</button>\n    <button>全图</button> \n    <button>漫游</button>\n</body>\n</html>\n```\n### API中的小部件\n关于API中提供的小部件有两种使用方式：\n\n* 将小部件绑定在一个DOM元素上面\n* 将小部件绑定在地图的上面\n\n#### 代码实现\n首先我们将小部件绑定在DOM元素上面\n我们创建一个DOM元素用于存放鹰眼控件\n```\n<div id=\"view\"></div>\n```\n创建小部件（并指定小部件绑定在哪一个DOM元素上面）\n```\n//1.创建小部件对象\nvar overviewMapDijit = new OverviewMap({\n                map: map,\n                visible: true,\n            },dom.byId(\"view\"));//指定将小部件绑定在哪个DOM元素上面\n```\n启用小部件\n```\n//2.启用小部件\noverviewMapDijit.startup();\n```\n#### 代码结果（绑定在DOM）\n![04.png](04.png)\n#### 全部代码（绑定在DOM）\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n    <!--The viewport meta tag is used to improve the presentation and behavior of the samples \n      on iOS devices-->\n    <meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=1,user-scalable=no\">\n    <title>Overview Map</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style>\n        .MapClass{\n            width:600px;\n            height:400px;\n            border:1px solid #000;\n        }\n        #view {\n           height: 100px;\n           width: 100px; \n           border:1px solid red;\n           border-right-color:blue;\n           position:relative;\n           left:800px;\n           top:-200px;\n\n\n        }\n    </style>\n    <script>\n       \n        require([\"esri/map\",\"dojo/dom\",\"esri/dijit/OverviewMap\",\"dojo/domReady!\"], function (\n          Map,dom, OverviewMap){\n            var map = new Map(\"mapDiv\",\n            {   \n                basemap: \"topo\"\n            });\n            //1.创建小部件对象\n            var overviewMapDijit = new OverviewMap({\n                map: map,\n                visible: true,\n            },dom.byId(\"view\"));//指定将小部件绑定在哪个DOM元素上面\n            //2.启用小部件\n            overviewMapDijit.startup();\n        });\n    </script>\n  </head>\n  \n  <body>\n      <div id=\"mapDiv\" class=\"MapClass\"></div>  \n      <div id=\"view\"></div> \n  </body>\n</html>\n```\n#### 补充（将小部件绑定在地图上）\n只需要在创建小部件的时候，修改一个属性即可\n```\nvar overviewMapDijit = new OverviewMap({\n                //指定将小部件绑定在地图的哪一个位置：可以填写top-right,bottom-right,bottom-left 和top-left. \n                attachTo: \"top-right\",\n                map: map,\n                visible: true,\n            });\n```\n##### 运行结果（绑定在地图）\n![05.png](05.png)\n##### 全部代码（绑定在地图）\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n    <!--The viewport meta tag is used to improve the presentation and behavior of the samples \n      on iOS devices-->\n    <meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=1,user-scalable=no\">\n    <title>Overview Map</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style>\n        .MapClass{\n            width:100%;\n            height:600;\n        }\n    </style>\n    <script>\n       \n        require([\"esri/map\",\"dojo/dom\",\"esri/dijit/OverviewMap\",\"dojo/domReady!\"], function (\n          Map,dom, OverviewMap){\n            var map = new Map(\"mapDiv\",\n            {   \n                basemap: \"topo\"\n            });\n            //1.创建小部件对象\n            var overviewMapDijit = new OverviewMap({\n                //指定将小部件绑定在地图的哪一个位置：可以填写top-right,bottom-right,bottom-left 和top-left. \n                attachTo: \"top-right\",\n                map: map,\n                visible: true,\n            });\n            //2.启用小部件\n            overviewMapDijit.startup();\n        });\n    </script>\n  </head>\n  \n  <body>\n      <div id=\"mapDiv\" class=\"MapClass\"></div>  \n  </body>\n</html>\n```","source":"_posts/ArcGIS-API-for-JS12.md","raw":"---\ntitle: ArcGIS API For Javascript之地图操作及小部件\ndate: 2019-08-06 14:22:30\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n开发一个GIS系统不可避免的就要涉及一些简单的地图操作，比如：拉框放大，拉框缩小，平移，全图等相关操作。除了这些基本的地图操作，Esri给我们提供的一些小部件也非常有用，其中几个重要的小部件有：鹰眼，书签，比例尺等等。在此篇博文中，主要介绍地图的基本操作和几个常用的小部件。\n### 地图的基本操作\n在ArcGIS API中给我们提供了一个类叫做Navigation，通过这个类我们可以实现对地图的基本操作，Navigation类的用法可以分为以下几步：\n\n* 创建Navigation对象\n* 激活Navigation的相应状态\n* 地图操作\n#### 代码实现\n创建五个按钮\n```\n    <button>拉框放大</button>\n    <button>拉框缩小</button>\n    <button>平移</button>\n    <button>全图</button>\n    <button>漫游</button>\n```\n添加地图（省略）\n给相应按钮添加绑定事\n```\n                //给按钮添加绑定事件\n                query(\"button\").on(\"click\",function(event){\n                    //获得按钮的文本信息\n                    var value=this.innerHTML;\n                    switch(value){\n                        case \"平移\":\n                            navToolbar.activate(Navigation.PAN);\n                            break;                          \n                        case \"拉框缩小\":\n                            navToolbar.activate(Navigation.ZOOM_OUT);\n                            break;\n                        case \"拉框放大\":\n                            navToolbar.activate(Navigation.ZOOM_IN);\n                            break;\n                        case \"全图\":\n                            navToolbar.zoomToFullExtent();\n                            break;\n                        case \"漫游\":\n                            //默认是漫游操作\n                            navToolbar.deactivate();\n                            break;\n                    }\n                })\n```\n#### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>Geometric _Network</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"dojo/on\",\n            \"dojo/dom\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"dojo/query\",\"esri/toolbars/navigation\",\n            \"dojo/domReady!\"],\n            function (Map,on,dom,\n                ArcGISDynamicMapServiceLayer,query,Navigation      \n                ) {\n                var map = new Map(\"mapDiv\",{\n                    logo: false\n                });\n                var layer = new ArcGISDynamicMapServiceLayer\n                (\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\");\n                map.addLayer(layer)\n                //创建地图操作对象\n                var navToolbar = new Navigation(map);\n                //给按钮添加绑定事件\n                query(\"button\").on(\"click\",function(event){\n                    //获得按钮的文本信息\n                    var value=this.innerHTML;\n                    switch(value){\n                        case \"平移\":\n                            navToolbar.activate(Navigation.PAN);\n                            break;                          \n                        case \"拉框缩小\":\n                            navToolbar.activate(Navigation.ZOOM_OUT);\n                            break;\n                        case \"拉框放大\":\n                            navToolbar.activate(Navigation.ZOOM_IN);\n                            break;\n                        case \"全图\":\n                            navToolbar.zoomToFullExtent();\n                            break;\n                        case \"漫游\":\n                            //默认是漫游操作\n                            navToolbar.deactivate();\n                            break;\n                    }\n                })\n                               \n            });\n\n\n    </script>\n</head>\n<body class=\"tundra\">\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n    <button>拉框放大</button>\n    <button>拉框缩小</button>\n    <button>平移</button>\n    <button>全图</button> \n    <button>漫游</button>\n</body>\n</html>\n```\n### API中的小部件\n关于API中提供的小部件有两种使用方式：\n\n* 将小部件绑定在一个DOM元素上面\n* 将小部件绑定在地图的上面\n\n#### 代码实现\n首先我们将小部件绑定在DOM元素上面\n我们创建一个DOM元素用于存放鹰眼控件\n```\n<div id=\"view\"></div>\n```\n创建小部件（并指定小部件绑定在哪一个DOM元素上面）\n```\n//1.创建小部件对象\nvar overviewMapDijit = new OverviewMap({\n                map: map,\n                visible: true,\n            },dom.byId(\"view\"));//指定将小部件绑定在哪个DOM元素上面\n```\n启用小部件\n```\n//2.启用小部件\noverviewMapDijit.startup();\n```\n#### 代码结果（绑定在DOM）\n![04.png](04.png)\n#### 全部代码（绑定在DOM）\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n    <!--The viewport meta tag is used to improve the presentation and behavior of the samples \n      on iOS devices-->\n    <meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=1,user-scalable=no\">\n    <title>Overview Map</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style>\n        .MapClass{\n            width:600px;\n            height:400px;\n            border:1px solid #000;\n        }\n        #view {\n           height: 100px;\n           width: 100px; \n           border:1px solid red;\n           border-right-color:blue;\n           position:relative;\n           left:800px;\n           top:-200px;\n\n\n        }\n    </style>\n    <script>\n       \n        require([\"esri/map\",\"dojo/dom\",\"esri/dijit/OverviewMap\",\"dojo/domReady!\"], function (\n          Map,dom, OverviewMap){\n            var map = new Map(\"mapDiv\",\n            {   \n                basemap: \"topo\"\n            });\n            //1.创建小部件对象\n            var overviewMapDijit = new OverviewMap({\n                map: map,\n                visible: true,\n            },dom.byId(\"view\"));//指定将小部件绑定在哪个DOM元素上面\n            //2.启用小部件\n            overviewMapDijit.startup();\n        });\n    </script>\n  </head>\n  \n  <body>\n      <div id=\"mapDiv\" class=\"MapClass\"></div>  \n      <div id=\"view\"></div> \n  </body>\n</html>\n```\n#### 补充（将小部件绑定在地图上）\n只需要在创建小部件的时候，修改一个属性即可\n```\nvar overviewMapDijit = new OverviewMap({\n                //指定将小部件绑定在地图的哪一个位置：可以填写top-right,bottom-right,bottom-left 和top-left. \n                attachTo: \"top-right\",\n                map: map,\n                visible: true,\n            });\n```\n##### 运行结果（绑定在地图）\n![05.png](05.png)\n##### 全部代码（绑定在地图）\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n    <!--The viewport meta tag is used to improve the presentation and behavior of the samples \n      on iOS devices-->\n    <meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=1,user-scalable=no\">\n    <title>Overview Map</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style>\n        .MapClass{\n            width:100%;\n            height:600;\n        }\n    </style>\n    <script>\n       \n        require([\"esri/map\",\"dojo/dom\",\"esri/dijit/OverviewMap\",\"dojo/domReady!\"], function (\n          Map,dom, OverviewMap){\n            var map = new Map(\"mapDiv\",\n            {   \n                basemap: \"topo\"\n            });\n            //1.创建小部件对象\n            var overviewMapDijit = new OverviewMap({\n                //指定将小部件绑定在地图的哪一个位置：可以填写top-right,bottom-right,bottom-left 和top-left. \n                attachTo: \"top-right\",\n                map: map,\n                visible: true,\n            });\n            //2.启用小部件\n            overviewMapDijit.startup();\n        });\n    </script>\n  </head>\n  \n  <body>\n      <div id=\"mapDiv\" class=\"MapClass\"></div>  \n  </body>\n</html>\n```","slug":"ArcGIS-API-for-JS12","published":1,"updated":"2019-08-06T06:32:36.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cu00015t09ze53k773g","content":"<p>开发一个GIS系统不可避免的就要涉及一些简单的地图操作，比如：拉框放大，拉框缩小，平移，全图等相关操作。除了这些基本的地图操作，Esri给我们提供的一些小部件也非常有用，其中几个重要的小部件有：鹰眼，书签，比例尺等等。在此篇博文中，主要介绍地图的基本操作和几个常用的小部件。</p>\n<h3 id=\"地图的基本操作\"><a href=\"#地图的基本操作\" class=\"headerlink\" title=\"地图的基本操作\"></a>地图的基本操作</h3><p>在ArcGIS API中给我们提供了一个类叫做Navigation，通过这个类我们可以实现对地图的基本操作，Navigation类的用法可以分为以下几步：</p>\n<ul>\n<li>创建Navigation对象</li>\n<li>激活Navigation的相应状态</li>\n<li>地图操作<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4>创建五个按钮<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button&gt;拉框放大&lt;/button&gt;</span><br><span class=\"line\">&lt;button&gt;拉框缩小&lt;/button&gt;</span><br><span class=\"line\">&lt;button&gt;平移&lt;/button&gt;</span><br><span class=\"line\">&lt;button&gt;全图&lt;/button&gt;</span><br><span class=\"line\">&lt;button&gt;漫游&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>添加地图（省略）<br>给相应按钮添加绑定事<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给按钮添加绑定事件</span><br><span class=\"line\">query(&quot;button&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">    //获得按钮的文本信息</span><br><span class=\"line\">    var value=this.innerHTML;</span><br><span class=\"line\">    switch(value)&#123;</span><br><span class=\"line\">        case &quot;平移&quot;:</span><br><span class=\"line\">            navToolbar.activate(Navigation.PAN);</span><br><span class=\"line\">            break;                          </span><br><span class=\"line\">        case &quot;拉框缩小&quot;:</span><br><span class=\"line\">            navToolbar.activate(Navigation.ZOOM_OUT);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case &quot;拉框放大&quot;:</span><br><span class=\"line\">            navToolbar.activate(Navigation.ZOOM_IN);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case &quot;全图&quot;:</span><br><span class=\"line\">            navToolbar.zoomToFullExtent();</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case &quot;漫游&quot;:</span><br><span class=\"line\">            //默认是漫游操作</span><br><span class=\"line\">            navToolbar.deactivate();</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;Geometric _Network&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/query&quot;,&quot;esri/toolbars/navigation&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map,on,dom,</span><br><span class=\"line\">                ArcGISDynamicMapServiceLayer,query,Navigation      </span><br><span class=\"line\">                ) &#123;</span><br><span class=\"line\">                var map = new Map(&quot;mapDiv&quot;,&#123;</span><br><span class=\"line\">                    logo: false</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">                (&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;);</span><br><span class=\"line\">                map.addLayer(layer)</span><br><span class=\"line\">                //创建地图操作对象</span><br><span class=\"line\">                var navToolbar = new Navigation(map);</span><br><span class=\"line\">                //给按钮添加绑定事件</span><br><span class=\"line\">                query(&quot;button&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                    //获得按钮的文本信息</span><br><span class=\"line\">                    var value=this.innerHTML;</span><br><span class=\"line\">                    switch(value)&#123;</span><br><span class=\"line\">                        case &quot;平移&quot;:</span><br><span class=\"line\">                            navToolbar.activate(Navigation.PAN);</span><br><span class=\"line\">                            break;                          </span><br><span class=\"line\">                        case &quot;拉框缩小&quot;:</span><br><span class=\"line\">                            navToolbar.activate(Navigation.ZOOM_OUT);</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        case &quot;拉框放大&quot;:</span><br><span class=\"line\">                            navToolbar.activate(Navigation.ZOOM_IN);</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        case &quot;全图&quot;:</span><br><span class=\"line\">                            navToolbar.zoomToFullExtent();</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        case &quot;漫游&quot;:</span><br><span class=\"line\">                            //默认是漫游操作</span><br><span class=\"line\">                            navToolbar.deactivate();</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                               </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body class=&quot;tundra&quot;&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;button&gt;拉框放大&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;拉框缩小&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;平移&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;全图&lt;/button&gt; </span><br><span class=\"line\">    &lt;button&gt;漫游&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"API中的小部件\"><a href=\"#API中的小部件\" class=\"headerlink\" title=\"API中的小部件\"></a>API中的小部件</h3><p>关于API中提供的小部件有两种使用方式：</p>\n<ul>\n<li>将小部件绑定在一个DOM元素上面</li>\n<li>将小部件绑定在地图的上面</li>\n</ul>\n<h4 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>首先我们将小部件绑定在DOM元素上面<br>我们创建一个DOM元素用于存放鹰眼控件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;view&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建小部件（并指定小部件绑定在哪一个DOM元素上面）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.创建小部件对象</span><br><span class=\"line\">var overviewMapDijit = new OverviewMap(&#123;</span><br><span class=\"line\">                map: map,</span><br><span class=\"line\">                visible: true,</span><br><span class=\"line\">            &#125;,dom.byId(&quot;view&quot;));//指定将小部件绑定在哪个DOM元素上面</span><br></pre></td></tr></table></figure></p>\n<p>启用小部件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//2.启用小部件</span><br><span class=\"line\">overviewMapDijit.startup();</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"代码结果（绑定在DOM）\"><a href=\"#代码结果（绑定在DOM）\" class=\"headerlink\" title=\"代码结果（绑定在DOM）\"></a>代码结果（绑定在DOM）</h4><p><img src=\"/2019/08/06/ArcGIS-API-for-JS12/04.png\" alt=\"04.png\"></p>\n<h4 id=\"全部代码（绑定在DOM）\"><a href=\"#全部代码（绑定在DOM）\" class=\"headerlink\" title=\"全部代码（绑定在DOM）\"></a>全部代码（绑定在DOM）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;!--The viewport meta tag is used to improve the presentation and behavior of the samples </span><br><span class=\"line\">      on iOS devices--&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=1,user-scalable=no&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Overview Map&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:600px;</span><br><span class=\"line\">            height:400px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #view &#123;</span><br><span class=\"line\">           height: 100px;</span><br><span class=\"line\">           width: 100px; </span><br><span class=\"line\">           border:1px solid red;</span><br><span class=\"line\">           border-right-color:blue;</span><br><span class=\"line\">           position:relative;</span><br><span class=\"line\">           left:800px;</span><br><span class=\"line\">           top:-200px;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">       </span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;dojo/dom&quot;,&quot;esri/dijit/OverviewMap&quot;,&quot;dojo/domReady!&quot;], function (</span><br><span class=\"line\">          Map,dom, OverviewMap)&#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;,</span><br><span class=\"line\">            &#123;   </span><br><span class=\"line\">                basemap: &quot;topo&quot;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            //1.创建小部件对象</span><br><span class=\"line\">            var overviewMapDijit = new OverviewMap(&#123;</span><br><span class=\"line\">                map: map,</span><br><span class=\"line\">                visible: true,</span><br><span class=\"line\">            &#125;,dom.byId(&quot;view&quot;));//指定将小部件绑定在哪个DOM元素上面</span><br><span class=\"line\">            //2.启用小部件</span><br><span class=\"line\">            overviewMapDijit.startup();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">      &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;  </span><br><span class=\"line\">      &lt;div id=&quot;view&quot;&gt;&lt;/div&gt; </span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"补充（将小部件绑定在地图上）\"><a href=\"#补充（将小部件绑定在地图上）\" class=\"headerlink\" title=\"补充（将小部件绑定在地图上）\"></a>补充（将小部件绑定在地图上）</h4><p>只需要在创建小部件的时候，修改一个属性即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var overviewMapDijit = new OverviewMap(&#123;</span><br><span class=\"line\">                //指定将小部件绑定在地图的哪一个位置：可以填写top-right,bottom-right,bottom-left 和top-left. </span><br><span class=\"line\">                attachTo: &quot;top-right&quot;,</span><br><span class=\"line\">                map: map,</span><br><span class=\"line\">                visible: true,</span><br><span class=\"line\">            &#125;);</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"运行结果（绑定在地图）\"><a href=\"#运行结果（绑定在地图）\" class=\"headerlink\" title=\"运行结果（绑定在地图）\"></a>运行结果（绑定在地图）</h5><p><img src=\"/2019/08/06/ArcGIS-API-for-JS12/05.png\" alt=\"05.png\"></p>\n<h5 id=\"全部代码（绑定在地图）\"><a href=\"#全部代码（绑定在地图）\" class=\"headerlink\" title=\"全部代码（绑定在地图）\"></a>全部代码（绑定在地图）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;!--The viewport meta tag is used to improve the presentation and behavior of the samples </span><br><span class=\"line\">      on iOS devices--&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=1,user-scalable=no&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Overview Map&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">       </span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;dojo/dom&quot;,&quot;esri/dijit/OverviewMap&quot;,&quot;dojo/domReady!&quot;], function (</span><br><span class=\"line\">          Map,dom, OverviewMap)&#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;,</span><br><span class=\"line\">            &#123;   </span><br><span class=\"line\">                basemap: &quot;topo&quot;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            //1.创建小部件对象</span><br><span class=\"line\">            var overviewMapDijit = new OverviewMap(&#123;</span><br><span class=\"line\">                //指定将小部件绑定在地图的哪一个位置：可以填写top-right,bottom-right,bottom-left 和top-left. </span><br><span class=\"line\">                attachTo: &quot;top-right&quot;,</span><br><span class=\"line\">                map: map,</span><br><span class=\"line\">                visible: true,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            //2.启用小部件</span><br><span class=\"line\">            overviewMapDijit.startup();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">      &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;  </span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>开发一个GIS系统不可避免的就要涉及一些简单的地图操作，比如：拉框放大，拉框缩小，平移，全图等相关操作。除了这些基本的地图操作，Esri给我们提供的一些小部件也非常有用，其中几个重要的小部件有：鹰眼，书签，比例尺等等。在此篇博文中，主要介绍地图的基本操作和几个常用的小部件。</p>\n<h3 id=\"地图的基本操作\"><a href=\"#地图的基本操作\" class=\"headerlink\" title=\"地图的基本操作\"></a>地图的基本操作</h3><p>在ArcGIS API中给我们提供了一个类叫做Navigation，通过这个类我们可以实现对地图的基本操作，Navigation类的用法可以分为以下几步：</p>\n<ul>\n<li>创建Navigation对象</li>\n<li>激活Navigation的相应状态</li>\n<li>地图操作<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4>创建五个按钮<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button&gt;拉框放大&lt;/button&gt;</span><br><span class=\"line\">&lt;button&gt;拉框缩小&lt;/button&gt;</span><br><span class=\"line\">&lt;button&gt;平移&lt;/button&gt;</span><br><span class=\"line\">&lt;button&gt;全图&lt;/button&gt;</span><br><span class=\"line\">&lt;button&gt;漫游&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>添加地图（省略）<br>给相应按钮添加绑定事<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给按钮添加绑定事件</span><br><span class=\"line\">query(&quot;button&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">    //获得按钮的文本信息</span><br><span class=\"line\">    var value=this.innerHTML;</span><br><span class=\"line\">    switch(value)&#123;</span><br><span class=\"line\">        case &quot;平移&quot;:</span><br><span class=\"line\">            navToolbar.activate(Navigation.PAN);</span><br><span class=\"line\">            break;                          </span><br><span class=\"line\">        case &quot;拉框缩小&quot;:</span><br><span class=\"line\">            navToolbar.activate(Navigation.ZOOM_OUT);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case &quot;拉框放大&quot;:</span><br><span class=\"line\">            navToolbar.activate(Navigation.ZOOM_IN);</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case &quot;全图&quot;:</span><br><span class=\"line\">            navToolbar.zoomToFullExtent();</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        case &quot;漫游&quot;:</span><br><span class=\"line\">            //默认是漫游操作</span><br><span class=\"line\">            navToolbar.deactivate();</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;Geometric _Network&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/query&quot;,&quot;esri/toolbars/navigation&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map,on,dom,</span><br><span class=\"line\">                ArcGISDynamicMapServiceLayer,query,Navigation      </span><br><span class=\"line\">                ) &#123;</span><br><span class=\"line\">                var map = new Map(&quot;mapDiv&quot;,&#123;</span><br><span class=\"line\">                    logo: false</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">                (&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;);</span><br><span class=\"line\">                map.addLayer(layer)</span><br><span class=\"line\">                //创建地图操作对象</span><br><span class=\"line\">                var navToolbar = new Navigation(map);</span><br><span class=\"line\">                //给按钮添加绑定事件</span><br><span class=\"line\">                query(&quot;button&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                    //获得按钮的文本信息</span><br><span class=\"line\">                    var value=this.innerHTML;</span><br><span class=\"line\">                    switch(value)&#123;</span><br><span class=\"line\">                        case &quot;平移&quot;:</span><br><span class=\"line\">                            navToolbar.activate(Navigation.PAN);</span><br><span class=\"line\">                            break;                          </span><br><span class=\"line\">                        case &quot;拉框缩小&quot;:</span><br><span class=\"line\">                            navToolbar.activate(Navigation.ZOOM_OUT);</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        case &quot;拉框放大&quot;:</span><br><span class=\"line\">                            navToolbar.activate(Navigation.ZOOM_IN);</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        case &quot;全图&quot;:</span><br><span class=\"line\">                            navToolbar.zoomToFullExtent();</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        case &quot;漫游&quot;:</span><br><span class=\"line\">                            //默认是漫游操作</span><br><span class=\"line\">                            navToolbar.deactivate();</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                               </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body class=&quot;tundra&quot;&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;button&gt;拉框放大&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;拉框缩小&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;平移&lt;/button&gt;</span><br><span class=\"line\">    &lt;button&gt;全图&lt;/button&gt; </span><br><span class=\"line\">    &lt;button&gt;漫游&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"API中的小部件\"><a href=\"#API中的小部件\" class=\"headerlink\" title=\"API中的小部件\"></a>API中的小部件</h3><p>关于API中提供的小部件有两种使用方式：</p>\n<ul>\n<li>将小部件绑定在一个DOM元素上面</li>\n<li>将小部件绑定在地图的上面</li>\n</ul>\n<h4 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>首先我们将小部件绑定在DOM元素上面<br>我们创建一个DOM元素用于存放鹰眼控件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;view&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建小部件（并指定小部件绑定在哪一个DOM元素上面）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.创建小部件对象</span><br><span class=\"line\">var overviewMapDijit = new OverviewMap(&#123;</span><br><span class=\"line\">                map: map,</span><br><span class=\"line\">                visible: true,</span><br><span class=\"line\">            &#125;,dom.byId(&quot;view&quot;));//指定将小部件绑定在哪个DOM元素上面</span><br></pre></td></tr></table></figure></p>\n<p>启用小部件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//2.启用小部件</span><br><span class=\"line\">overviewMapDijit.startup();</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"代码结果（绑定在DOM）\"><a href=\"#代码结果（绑定在DOM）\" class=\"headerlink\" title=\"代码结果（绑定在DOM）\"></a>代码结果（绑定在DOM）</h4><p><img src=\"/2019/08/06/ArcGIS-API-for-JS12/04.png\" alt=\"04.png\"></p>\n<h4 id=\"全部代码（绑定在DOM）\"><a href=\"#全部代码（绑定在DOM）\" class=\"headerlink\" title=\"全部代码（绑定在DOM）\"></a>全部代码（绑定在DOM）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;!--The viewport meta tag is used to improve the presentation and behavior of the samples </span><br><span class=\"line\">      on iOS devices--&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=1,user-scalable=no&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Overview Map&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:600px;</span><br><span class=\"line\">            height:400px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        #view &#123;</span><br><span class=\"line\">           height: 100px;</span><br><span class=\"line\">           width: 100px; </span><br><span class=\"line\">           border:1px solid red;</span><br><span class=\"line\">           border-right-color:blue;</span><br><span class=\"line\">           position:relative;</span><br><span class=\"line\">           left:800px;</span><br><span class=\"line\">           top:-200px;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">       </span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;dojo/dom&quot;,&quot;esri/dijit/OverviewMap&quot;,&quot;dojo/domReady!&quot;], function (</span><br><span class=\"line\">          Map,dom, OverviewMap)&#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;,</span><br><span class=\"line\">            &#123;   </span><br><span class=\"line\">                basemap: &quot;topo&quot;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            //1.创建小部件对象</span><br><span class=\"line\">            var overviewMapDijit = new OverviewMap(&#123;</span><br><span class=\"line\">                map: map,</span><br><span class=\"line\">                visible: true,</span><br><span class=\"line\">            &#125;,dom.byId(&quot;view&quot;));//指定将小部件绑定在哪个DOM元素上面</span><br><span class=\"line\">            //2.启用小部件</span><br><span class=\"line\">            overviewMapDijit.startup();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">      &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;  </span><br><span class=\"line\">      &lt;div id=&quot;view&quot;&gt;&lt;/div&gt; </span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"补充（将小部件绑定在地图上）\"><a href=\"#补充（将小部件绑定在地图上）\" class=\"headerlink\" title=\"补充（将小部件绑定在地图上）\"></a>补充（将小部件绑定在地图上）</h4><p>只需要在创建小部件的时候，修改一个属性即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var overviewMapDijit = new OverviewMap(&#123;</span><br><span class=\"line\">                //指定将小部件绑定在地图的哪一个位置：可以填写top-right,bottom-right,bottom-left 和top-left. </span><br><span class=\"line\">                attachTo: &quot;top-right&quot;,</span><br><span class=\"line\">                map: map,</span><br><span class=\"line\">                visible: true,</span><br><span class=\"line\">            &#125;);</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"运行结果（绑定在地图）\"><a href=\"#运行结果（绑定在地图）\" class=\"headerlink\" title=\"运行结果（绑定在地图）\"></a>运行结果（绑定在地图）</h5><p><img src=\"/2019/08/06/ArcGIS-API-for-JS12/05.png\" alt=\"05.png\"></p>\n<h5 id=\"全部代码（绑定在地图）\"><a href=\"#全部代码（绑定在地图）\" class=\"headerlink\" title=\"全部代码（绑定在地图）\"></a>全部代码（绑定在地图）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;!--The viewport meta tag is used to improve the presentation and behavior of the samples </span><br><span class=\"line\">      on iOS devices--&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=1,user-scalable=no&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Overview Map&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">       </span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;dojo/dom&quot;,&quot;esri/dijit/OverviewMap&quot;,&quot;dojo/domReady!&quot;], function (</span><br><span class=\"line\">          Map,dom, OverviewMap)&#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;,</span><br><span class=\"line\">            &#123;   </span><br><span class=\"line\">                basemap: &quot;topo&quot;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            //1.创建小部件对象</span><br><span class=\"line\">            var overviewMapDijit = new OverviewMap(&#123;</span><br><span class=\"line\">                //指定将小部件绑定在地图的哪一个位置：可以填写top-right,bottom-right,bottom-left 和top-left. </span><br><span class=\"line\">                attachTo: &quot;top-right&quot;,</span><br><span class=\"line\">                map: map,</span><br><span class=\"line\">                visible: true,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            //2.启用小部件</span><br><span class=\"line\">            overviewMapDijit.startup();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">      &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;  </span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ArcGIS API For Javascript调用GP服务","date":"2019-08-06T07:59:51.000Z","_content":"ArcGIS API中关于GP服务的调用是比较容易出错的，出错的大部分原因便是Web API调用GP服务的时候参数不对应导致的\n### ArcGIS API调用GP服务\n![01.png](01.png)\n然后接下来我们将在Web中调用我们的GP服务\n#### 代码实现\n在页面加入地图（略）\n在页面添加两个按钮（第一个按钮用于画点，第二个按钮用于缓冲区分析）\n```\n<input id=\"Btn\" type=\"button\" value=\"画点\" />\n<input id=\"buffer\" type=\"button\" value=\"缓冲区分析\" />\n```\n定义一个点几何对象（与服务定义的类型对应）\n```\n//定义点几何对象\nvar pointSet = new FeatureSet();\n```\n定义点符号对象\n```\nvar psymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CROSS, 12,\nnew SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,\nnew dojo.Color([255, 0, 0]), 2),\nnew dojo.Color([0, 255, 0, 0.25]));\n```\n给画点按钮绑定点击事件\n```\non(dom.byId(\"Btn\"),\"click\",function(e){\n                    //定义绘图对象\n                    var toolBar= new Draw(MyMap, { showTooltips: true });\n                    //激活绘图对象\n                    toolBar.activate(Draw.POINT);\n                    on(toolBar, \"draw-complete\", function(result){\n                        //获得绘图结束的点对象\n                        var geometry = result.geometry;\n                        //根据点对象生成相应的图形\n                        var graphic = new Graphic(geometry, psymbol);\n                        //将点对象存储在点几何中\n                        pointSet.features.push(graphic);\n                        //将图形存放在地图中，然后得以显示\n                        MyMap.graphics.add(graphic);\n\n                    }); \n});\n```\n给缓冲区分析按钮添加绑定事件\n```\non(dom.byId(\"buffer\"),\"click\",function(e){\n                    //定义GP服务对象\n                    var buffer = new Geoprocessor(\"http://localhost:6080/arcgis/rest/services/Test/MyBuffer/GPServer/Mybuffer\");\n                    //构建GP服务参数\n                    var gpParams={};\n                    //GP服务的Input参数\n                    gpParams.Input=pointSet;\n                    //GP服务的dis参数\n                    var dis=new LinearUnit({\n                        \"distance\": 100,\n                        \"units\": \"esriMeters\"\n                    });\n                    gpParams.dis=dis;\n                    //执行GP服务\n                    buffer.execute(gpParams, showResult);\n})\n```\n处理GP服务返回的结果\n```\nfunction showResult(results, messages){\n                    var features = results[0].value.features;\n                    for (var i = 0; i < features.length; i++) {\n                        var graphic = features[i];\n                        //定义线符号\n                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT, new dojo.Color([255, 0, 0]), 1);\n                        //定义面符号\n                        var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new dojo.Color([255, 255, 0, 0.25]));\n                        //设置面符号\n                        graphic.setSymbol(PolygonSymbol);\n                        MyMap.graphics.add(graphic);\n                    }\n }\n```\n运行代码发现错误\n![02.png](02.png)\n此时我们观察前台传给后台的参数\n```\nInput:{\n            \"geometryType\":\"esriGeometryPoint\",\n            \"features\":[{\"geometry\":{\"x\":21264961.8441914,\"y\":3997922.462940743,\"spatialReference\":{\"wkid\":2334,\"latestWkid\":2334}}}],\n            \"sr\":{\"wkid\":2334,\"latestWkid\":2334}\n    }\ndis: {\"distance\":100,\"units\":\"esriMeters\"}\n```\n传给后台的参数和GP服务的参数对比，发现Input参数，缺少fields字段：\n![03.png](03.png)\n修改错误\n我们给运行GP服务之前给Input参数添加上Fields字段:\n```\non(dom.byId(\"buffer\"),\"click\",function(e){\n                    //定义GP服务对象\n                    var buffer = new Geoprocessor(\"http://localhost:6080/arcgis/rest/services/Test/MyBuffer/GPServer/Mybuffer\");\n                    //构建GP服务参数\n                    var gpParams={};\n                    //添加fields字段，为了和后台服务字段匹配\n                    pointSet.fields=[];\n                    //GP服务的Input参数\n                    gpParams.Input=pointSet;\n                    //GP服务的dis参数\n                    var dis=new LinearUnit({\n                        \"distance\": 100,\n                        \"units\": \"esriMeters\"\n                    });\n                    gpParams.dis=dis;\n                    //执行GP服务\n                    buffer.execute(gpParams, showResult);\n});\n```\n#### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>GP</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\" charset=\"utf-8\">\n\n        require([\"esri/map\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"dojo/dom\",\n            \"esri/tasks/Geoprocessor\",\n            \"esri/tasks/FeatureSet\",\n            \"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/toolbars/draw\",\n            \"esri/symbols/SimpleFillSymbol\",\n            \"dojo/on\",\"esri/graphic\",\n            \"esri/tasks/LinearUnit\",\n            \"dojo/domReady!\"],\n            function (Map,\n                ArcGISDynamicMapServiceLayer,\n                dom,\n                Geoprocessor,\n                FeatureSet,\n                SimpleMarkerSymbol,\n                SimpleLineSymbol,\n                Draw,\n                SimpleFillSymbol,on,Graphic,LinearUnit) {\n                var MyMap = new Map(\"MyMapDiv\");\n                \n                var layer = new ArcGISDynamicMapServiceLayer\n                (\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer\");\n                MyMap.addLayer(layer);\n                //定义点几何对象\n                var pointSet = new FeatureSet();\n                var psymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CROSS, 12,\n                new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,\n                new dojo.Color([255, 0, 0]), 2),\n                new dojo.Color([0, 255, 0, 0.25]));\n                on(dom.byId(\"Btn\"),\"click\",function(e){\n                    //定义绘图对象\n                    var toolBar= new Draw(MyMap, { showTooltips: true });\n                    //激活绘图对象\n                    toolBar.activate(Draw.POINT);\n                    on(toolBar, \"draw-complete\", function(result){\n                        //获得绘图结束的点对象\n                        var geometry = result.geometry;\n                        //根据点对象生成相应的图形\n                        var graphic = new Graphic(geometry,psymbol);\n                        //将点对象存储在点几何中\n                        pointSet.features.push(graphic);\n                        //将图形存放在地图中，然后得以显示\n                        MyMap.graphics.add(graphic);\n\n                    }); \n                });\n                \n                on(dom.byId(\"buffer\"),\"click\",function(e){\n                    //定义GP服务对象\n                    var buffer = new Geoprocessor(\"http://localhost:6080/arcgis/rest/services/Test/MyBuffer/GPServer/Mybuffer\");\n                    //构建GP服务参数\n                    var gpParams={};\n                    //添加fields字段，为了和后台服务字段匹配\n                    pointSet.fields=[];\n                    //GP服务的Input参数\n                    gpParams.Input=pointSet;\n                    //GP服务的dis参数\n                    var dis=new LinearUnit({\n                        \"distance\": 100,\n                        \"units\": \"esriMeters\"\n                    });\n                    gpParams.dis=dis;\n                    //执行GP服务\n                    buffer.execute(gpParams, showResult);\n                });\n                function showResult(results, messages)\n                {\n                    var features = results[0].value.features;\n                    for (var i = 0; i < features.length; i++) {\n                        var graphic = features[i];\n                        //定义线符号\n                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT, new dojo.Color([255, 0, 0]), 1);\n                        //定义面符号\n                        var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new dojo.Color([255, 255, 0, 0.25]));\n                        //设置面符号\n                        graphic.setSymbol(PolygonSymbol);\n                        MyMap.graphics.add(graphic);\n                    }\n                }\n                \n            });\n\n\n    </script>\n</head>\n<body>\n    <div id=\"MyMapDiv\" class=\"MapClass\"></div>\n    <input id=\"Btn\" type=\"button\" value=\"画点\" />\n    <input id=\"buffer\" type=\"button\" value=\"缓冲区分析\" />\n</body>\n</html>\n```\n![04.png](04.png)","source":"_posts/ArcGIS-API-for-JS16.md","raw":"---\ntitle: ArcGIS API For Javascript调用GP服务\ndate: 2019-08-06 15:59:51\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\nArcGIS API中关于GP服务的调用是比较容易出错的，出错的大部分原因便是Web API调用GP服务的时候参数不对应导致的\n### ArcGIS API调用GP服务\n![01.png](01.png)\n然后接下来我们将在Web中调用我们的GP服务\n#### 代码实现\n在页面加入地图（略）\n在页面添加两个按钮（第一个按钮用于画点，第二个按钮用于缓冲区分析）\n```\n<input id=\"Btn\" type=\"button\" value=\"画点\" />\n<input id=\"buffer\" type=\"button\" value=\"缓冲区分析\" />\n```\n定义一个点几何对象（与服务定义的类型对应）\n```\n//定义点几何对象\nvar pointSet = new FeatureSet();\n```\n定义点符号对象\n```\nvar psymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CROSS, 12,\nnew SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,\nnew dojo.Color([255, 0, 0]), 2),\nnew dojo.Color([0, 255, 0, 0.25]));\n```\n给画点按钮绑定点击事件\n```\non(dom.byId(\"Btn\"),\"click\",function(e){\n                    //定义绘图对象\n                    var toolBar= new Draw(MyMap, { showTooltips: true });\n                    //激活绘图对象\n                    toolBar.activate(Draw.POINT);\n                    on(toolBar, \"draw-complete\", function(result){\n                        //获得绘图结束的点对象\n                        var geometry = result.geometry;\n                        //根据点对象生成相应的图形\n                        var graphic = new Graphic(geometry, psymbol);\n                        //将点对象存储在点几何中\n                        pointSet.features.push(graphic);\n                        //将图形存放在地图中，然后得以显示\n                        MyMap.graphics.add(graphic);\n\n                    }); \n});\n```\n给缓冲区分析按钮添加绑定事件\n```\non(dom.byId(\"buffer\"),\"click\",function(e){\n                    //定义GP服务对象\n                    var buffer = new Geoprocessor(\"http://localhost:6080/arcgis/rest/services/Test/MyBuffer/GPServer/Mybuffer\");\n                    //构建GP服务参数\n                    var gpParams={};\n                    //GP服务的Input参数\n                    gpParams.Input=pointSet;\n                    //GP服务的dis参数\n                    var dis=new LinearUnit({\n                        \"distance\": 100,\n                        \"units\": \"esriMeters\"\n                    });\n                    gpParams.dis=dis;\n                    //执行GP服务\n                    buffer.execute(gpParams, showResult);\n})\n```\n处理GP服务返回的结果\n```\nfunction showResult(results, messages){\n                    var features = results[0].value.features;\n                    for (var i = 0; i < features.length; i++) {\n                        var graphic = features[i];\n                        //定义线符号\n                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT, new dojo.Color([255, 0, 0]), 1);\n                        //定义面符号\n                        var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new dojo.Color([255, 255, 0, 0.25]));\n                        //设置面符号\n                        graphic.setSymbol(PolygonSymbol);\n                        MyMap.graphics.add(graphic);\n                    }\n }\n```\n运行代码发现错误\n![02.png](02.png)\n此时我们观察前台传给后台的参数\n```\nInput:{\n            \"geometryType\":\"esriGeometryPoint\",\n            \"features\":[{\"geometry\":{\"x\":21264961.8441914,\"y\":3997922.462940743,\"spatialReference\":{\"wkid\":2334,\"latestWkid\":2334}}}],\n            \"sr\":{\"wkid\":2334,\"latestWkid\":2334}\n    }\ndis: {\"distance\":100,\"units\":\"esriMeters\"}\n```\n传给后台的参数和GP服务的参数对比，发现Input参数，缺少fields字段：\n![03.png](03.png)\n修改错误\n我们给运行GP服务之前给Input参数添加上Fields字段:\n```\non(dom.byId(\"buffer\"),\"click\",function(e){\n                    //定义GP服务对象\n                    var buffer = new Geoprocessor(\"http://localhost:6080/arcgis/rest/services/Test/MyBuffer/GPServer/Mybuffer\");\n                    //构建GP服务参数\n                    var gpParams={};\n                    //添加fields字段，为了和后台服务字段匹配\n                    pointSet.fields=[];\n                    //GP服务的Input参数\n                    gpParams.Input=pointSet;\n                    //GP服务的dis参数\n                    var dis=new LinearUnit({\n                        \"distance\": 100,\n                        \"units\": \"esriMeters\"\n                    });\n                    gpParams.dis=dis;\n                    //执行GP服务\n                    buffer.execute(gpParams, showResult);\n});\n```\n#### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>GP</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\" charset=\"utf-8\">\n\n        require([\"esri/map\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"dojo/dom\",\n            \"esri/tasks/Geoprocessor\",\n            \"esri/tasks/FeatureSet\",\n            \"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/toolbars/draw\",\n            \"esri/symbols/SimpleFillSymbol\",\n            \"dojo/on\",\"esri/graphic\",\n            \"esri/tasks/LinearUnit\",\n            \"dojo/domReady!\"],\n            function (Map,\n                ArcGISDynamicMapServiceLayer,\n                dom,\n                Geoprocessor,\n                FeatureSet,\n                SimpleMarkerSymbol,\n                SimpleLineSymbol,\n                Draw,\n                SimpleFillSymbol,on,Graphic,LinearUnit) {\n                var MyMap = new Map(\"MyMapDiv\");\n                \n                var layer = new ArcGISDynamicMapServiceLayer\n                (\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer\");\n                MyMap.addLayer(layer);\n                //定义点几何对象\n                var pointSet = new FeatureSet();\n                var psymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CROSS, 12,\n                new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,\n                new dojo.Color([255, 0, 0]), 2),\n                new dojo.Color([0, 255, 0, 0.25]));\n                on(dom.byId(\"Btn\"),\"click\",function(e){\n                    //定义绘图对象\n                    var toolBar= new Draw(MyMap, { showTooltips: true });\n                    //激活绘图对象\n                    toolBar.activate(Draw.POINT);\n                    on(toolBar, \"draw-complete\", function(result){\n                        //获得绘图结束的点对象\n                        var geometry = result.geometry;\n                        //根据点对象生成相应的图形\n                        var graphic = new Graphic(geometry,psymbol);\n                        //将点对象存储在点几何中\n                        pointSet.features.push(graphic);\n                        //将图形存放在地图中，然后得以显示\n                        MyMap.graphics.add(graphic);\n\n                    }); \n                });\n                \n                on(dom.byId(\"buffer\"),\"click\",function(e){\n                    //定义GP服务对象\n                    var buffer = new Geoprocessor(\"http://localhost:6080/arcgis/rest/services/Test/MyBuffer/GPServer/Mybuffer\");\n                    //构建GP服务参数\n                    var gpParams={};\n                    //添加fields字段，为了和后台服务字段匹配\n                    pointSet.fields=[];\n                    //GP服务的Input参数\n                    gpParams.Input=pointSet;\n                    //GP服务的dis参数\n                    var dis=new LinearUnit({\n                        \"distance\": 100,\n                        \"units\": \"esriMeters\"\n                    });\n                    gpParams.dis=dis;\n                    //执行GP服务\n                    buffer.execute(gpParams, showResult);\n                });\n                function showResult(results, messages)\n                {\n                    var features = results[0].value.features;\n                    for (var i = 0; i < features.length; i++) {\n                        var graphic = features[i];\n                        //定义线符号\n                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT, new dojo.Color([255, 0, 0]), 1);\n                        //定义面符号\n                        var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new dojo.Color([255, 255, 0, 0.25]));\n                        //设置面符号\n                        graphic.setSymbol(PolygonSymbol);\n                        MyMap.graphics.add(graphic);\n                    }\n                }\n                \n            });\n\n\n    </script>\n</head>\n<body>\n    <div id=\"MyMapDiv\" class=\"MapClass\"></div>\n    <input id=\"Btn\" type=\"button\" value=\"画点\" />\n    <input id=\"buffer\" type=\"button\" value=\"缓冲区分析\" />\n</body>\n</html>\n```\n![04.png](04.png)","slug":"ArcGIS-API-for-JS16","published":1,"updated":"2019-08-06T08:07:00.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cu20018t09zmoo3gp0s","content":"<p>ArcGIS API中关于GP服务的调用是比较容易出错的，出错的大部分原因便是Web API调用GP服务的时候参数不对应导致的</p>\n<h3 id=\"ArcGIS-API调用GP服务\"><a href=\"#ArcGIS-API调用GP服务\" class=\"headerlink\" title=\"ArcGIS API调用GP服务\"></a>ArcGIS API调用GP服务</h3><p><img src=\"/2019/08/06/ArcGIS-API-for-JS16/01.png\" alt=\"01.png\"><br>然后接下来我们将在Web中调用我们的GP服务</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>在页面加入地图（略）<br>在页面添加两个按钮（第一个按钮用于画点，第二个按钮用于缓冲区分析）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input id=&quot;Btn&quot; type=&quot;button&quot; value=&quot;画点&quot; /&gt;</span><br><span class=\"line\">&lt;input id=&quot;buffer&quot; type=&quot;button&quot; value=&quot;缓冲区分析&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>定义一个点几何对象（与服务定义的类型对应）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义点几何对象</span><br><span class=\"line\">var pointSet = new FeatureSet();</span><br></pre></td></tr></table></figure></p>\n<p>定义点符号对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var psymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CROSS, 12,</span><br><span class=\"line\">new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,</span><br><span class=\"line\">new dojo.Color([255, 0, 0]), 2),</span><br><span class=\"line\">new dojo.Color([0, 255, 0, 0.25]));</span><br></pre></td></tr></table></figure></p>\n<p>给画点按钮绑定点击事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                    //定义绘图对象</span><br><span class=\"line\">                    var toolBar= new Draw(MyMap, &#123; showTooltips: true &#125;);</span><br><span class=\"line\">                    //激活绘图对象</span><br><span class=\"line\">                    toolBar.activate(Draw.POINT);</span><br><span class=\"line\">                    on(toolBar, &quot;draw-complete&quot;, function(result)&#123;</span><br><span class=\"line\">                        //获得绘图结束的点对象</span><br><span class=\"line\">                        var geometry = result.geometry;</span><br><span class=\"line\">                        //根据点对象生成相应的图形</span><br><span class=\"line\">                        var graphic = new Graphic(geometry, psymbol);</span><br><span class=\"line\">                        //将点对象存储在点几何中</span><br><span class=\"line\">                        pointSet.features.push(graphic);</span><br><span class=\"line\">                        //将图形存放在地图中，然后得以显示</span><br><span class=\"line\">                        MyMap.graphics.add(graphic);</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>给缓冲区分析按钮添加绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(dom.byId(&quot;buffer&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                    //定义GP服务对象</span><br><span class=\"line\">                    var buffer = new Geoprocessor(&quot;http://localhost:6080/arcgis/rest/services/Test/MyBuffer/GPServer/Mybuffer&quot;);</span><br><span class=\"line\">                    //构建GP服务参数</span><br><span class=\"line\">                    var gpParams=&#123;&#125;;</span><br><span class=\"line\">                    //GP服务的Input参数</span><br><span class=\"line\">                    gpParams.Input=pointSet;</span><br><span class=\"line\">                    //GP服务的dis参数</span><br><span class=\"line\">                    var dis=new LinearUnit(&#123;</span><br><span class=\"line\">                        &quot;distance&quot;: 100,</span><br><span class=\"line\">                        &quot;units&quot;: &quot;esriMeters&quot;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    gpParams.dis=dis;</span><br><span class=\"line\">                    //执行GP服务</span><br><span class=\"line\">                    buffer.execute(gpParams, showResult);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>处理GP服务返回的结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function showResult(results, messages)&#123;</span><br><span class=\"line\">                    var features = results[0].value.features;</span><br><span class=\"line\">                    for (var i = 0; i &lt; features.length; i++) &#123;</span><br><span class=\"line\">                        var graphic = features[i];</span><br><span class=\"line\">                        //定义线符号</span><br><span class=\"line\">                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT, new dojo.Color([255, 0, 0]), 1);</span><br><span class=\"line\">                        //定义面符号</span><br><span class=\"line\">                        var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new dojo.Color([255, 255, 0, 0.25]));</span><br><span class=\"line\">                        //设置面符号</span><br><span class=\"line\">                        graphic.setSymbol(PolygonSymbol);</span><br><span class=\"line\">                        MyMap.graphics.add(graphic);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行代码发现错误<br><img src=\"/2019/08/06/ArcGIS-API-for-JS16/02.png\" alt=\"02.png\"><br>此时我们观察前台传给后台的参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input:&#123;</span><br><span class=\"line\">            &quot;geometryType&quot;:&quot;esriGeometryPoint&quot;,</span><br><span class=\"line\">            &quot;features&quot;:[&#123;&quot;geometry&quot;:&#123;&quot;x&quot;:21264961.8441914,&quot;y&quot;:3997922.462940743,&quot;spatialReference&quot;:&#123;&quot;wkid&quot;:2334,&quot;latestWkid&quot;:2334&#125;&#125;&#125;],</span><br><span class=\"line\">            &quot;sr&quot;:&#123;&quot;wkid&quot;:2334,&quot;latestWkid&quot;:2334&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">dis: &#123;&quot;distance&quot;:100,&quot;units&quot;:&quot;esriMeters&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>传给后台的参数和GP服务的参数对比，发现Input参数，缺少fields字段：<br><img src=\"/2019/08/06/ArcGIS-API-for-JS16/03.png\" alt=\"03.png\"><br>修改错误<br>我们给运行GP服务之前给Input参数添加上Fields字段:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(dom.byId(&quot;buffer&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                    //定义GP服务对象</span><br><span class=\"line\">                    var buffer = new Geoprocessor(&quot;http://localhost:6080/arcgis/rest/services/Test/MyBuffer/GPServer/Mybuffer&quot;);</span><br><span class=\"line\">                    //构建GP服务参数</span><br><span class=\"line\">                    var gpParams=&#123;&#125;;</span><br><span class=\"line\">                    //添加fields字段，为了和后台服务字段匹配</span><br><span class=\"line\">                    pointSet.fields=[];</span><br><span class=\"line\">                    //GP服务的Input参数</span><br><span class=\"line\">                    gpParams.Input=pointSet;</span><br><span class=\"line\">                    //GP服务的dis参数</span><br><span class=\"line\">                    var dis=new LinearUnit(&#123;</span><br><span class=\"line\">                        &quot;distance&quot;: 100,</span><br><span class=\"line\">                        &quot;units&quot;: &quot;esriMeters&quot;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    gpParams.dis=dis;</span><br><span class=\"line\">                    //执行GP服务</span><br><span class=\"line\">                    buffer.execute(gpParams, showResult);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;GP&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/Geoprocessor&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/FeatureSet&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,&quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/LinearUnit&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map,</span><br><span class=\"line\">                ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                dom,</span><br><span class=\"line\">                Geoprocessor,</span><br><span class=\"line\">                FeatureSet,</span><br><span class=\"line\">                SimpleMarkerSymbol,</span><br><span class=\"line\">                SimpleLineSymbol,</span><br><span class=\"line\">                Draw,</span><br><span class=\"line\">                SimpleFillSymbol,on,Graphic,LinearUnit) &#123;</span><br><span class=\"line\">                var MyMap = new Map(&quot;MyMapDiv&quot;);</span><br><span class=\"line\">                </span><br><span class=\"line\">                var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">                (&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer&quot;);</span><br><span class=\"line\">                MyMap.addLayer(layer);</span><br><span class=\"line\">                //定义点几何对象</span><br><span class=\"line\">                var pointSet = new FeatureSet();</span><br><span class=\"line\">                var psymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CROSS, 12,</span><br><span class=\"line\">                new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,</span><br><span class=\"line\">                new dojo.Color([255, 0, 0]), 2),</span><br><span class=\"line\">                new dojo.Color([0, 255, 0, 0.25]));</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                    //定义绘图对象</span><br><span class=\"line\">                    var toolBar= new Draw(MyMap, &#123; showTooltips: true &#125;);</span><br><span class=\"line\">                    //激活绘图对象</span><br><span class=\"line\">                    toolBar.activate(Draw.POINT);</span><br><span class=\"line\">                    on(toolBar, &quot;draw-complete&quot;, function(result)&#123;</span><br><span class=\"line\">                        //获得绘图结束的点对象</span><br><span class=\"line\">                        var geometry = result.geometry;</span><br><span class=\"line\">                        //根据点对象生成相应的图形</span><br><span class=\"line\">                        var graphic = new Graphic(geometry,psymbol);</span><br><span class=\"line\">                        //将点对象存储在点几何中</span><br><span class=\"line\">                        pointSet.features.push(graphic);</span><br><span class=\"line\">                        //将图形存放在地图中，然后得以显示</span><br><span class=\"line\">                        MyMap.graphics.add(graphic);</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;); </span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                </span><br><span class=\"line\">                on(dom.byId(&quot;buffer&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                    //定义GP服务对象</span><br><span class=\"line\">                    var buffer = new Geoprocessor(&quot;http://localhost:6080/arcgis/rest/services/Test/MyBuffer/GPServer/Mybuffer&quot;);</span><br><span class=\"line\">                    //构建GP服务参数</span><br><span class=\"line\">                    var gpParams=&#123;&#125;;</span><br><span class=\"line\">                    //添加fields字段，为了和后台服务字段匹配</span><br><span class=\"line\">                    pointSet.fields=[];</span><br><span class=\"line\">                    //GP服务的Input参数</span><br><span class=\"line\">                    gpParams.Input=pointSet;</span><br><span class=\"line\">                    //GP服务的dis参数</span><br><span class=\"line\">                    var dis=new LinearUnit(&#123;</span><br><span class=\"line\">                        &quot;distance&quot;: 100,</span><br><span class=\"line\">                        &quot;units&quot;: &quot;esriMeters&quot;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    gpParams.dis=dis;</span><br><span class=\"line\">                    //执行GP服务</span><br><span class=\"line\">                    buffer.execute(gpParams, showResult);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                function showResult(results, messages)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    var features = results[0].value.features;</span><br><span class=\"line\">                    for (var i = 0; i &lt; features.length; i++) &#123;</span><br><span class=\"line\">                        var graphic = features[i];</span><br><span class=\"line\">                        //定义线符号</span><br><span class=\"line\">                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT, new dojo.Color([255, 0, 0]), 1);</span><br><span class=\"line\">                        //定义面符号</span><br><span class=\"line\">                        var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new dojo.Color([255, 255, 0, 0.25]));</span><br><span class=\"line\">                        //设置面符号</span><br><span class=\"line\">                        graphic.setSymbol(PolygonSymbol);</span><br><span class=\"line\">                        MyMap.graphics.add(graphic);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;MyMapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;input id=&quot;Btn&quot; type=&quot;button&quot; value=&quot;画点&quot; /&gt;</span><br><span class=\"line\">    &lt;input id=&quot;buffer&quot; type=&quot;button&quot; value=&quot;缓冲区分析&quot; /&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/08/06/ArcGIS-API-for-JS16/04.png\" alt=\"04.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>ArcGIS API中关于GP服务的调用是比较容易出错的，出错的大部分原因便是Web API调用GP服务的时候参数不对应导致的</p>\n<h3 id=\"ArcGIS-API调用GP服务\"><a href=\"#ArcGIS-API调用GP服务\" class=\"headerlink\" title=\"ArcGIS API调用GP服务\"></a>ArcGIS API调用GP服务</h3><p><img src=\"/2019/08/06/ArcGIS-API-for-JS16/01.png\" alt=\"01.png\"><br>然后接下来我们将在Web中调用我们的GP服务</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>在页面加入地图（略）<br>在页面添加两个按钮（第一个按钮用于画点，第二个按钮用于缓冲区分析）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input id=&quot;Btn&quot; type=&quot;button&quot; value=&quot;画点&quot; /&gt;</span><br><span class=\"line\">&lt;input id=&quot;buffer&quot; type=&quot;button&quot; value=&quot;缓冲区分析&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>定义一个点几何对象（与服务定义的类型对应）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义点几何对象</span><br><span class=\"line\">var pointSet = new FeatureSet();</span><br></pre></td></tr></table></figure></p>\n<p>定义点符号对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var psymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CROSS, 12,</span><br><span class=\"line\">new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,</span><br><span class=\"line\">new dojo.Color([255, 0, 0]), 2),</span><br><span class=\"line\">new dojo.Color([0, 255, 0, 0.25]));</span><br></pre></td></tr></table></figure></p>\n<p>给画点按钮绑定点击事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                    //定义绘图对象</span><br><span class=\"line\">                    var toolBar= new Draw(MyMap, &#123; showTooltips: true &#125;);</span><br><span class=\"line\">                    //激活绘图对象</span><br><span class=\"line\">                    toolBar.activate(Draw.POINT);</span><br><span class=\"line\">                    on(toolBar, &quot;draw-complete&quot;, function(result)&#123;</span><br><span class=\"line\">                        //获得绘图结束的点对象</span><br><span class=\"line\">                        var geometry = result.geometry;</span><br><span class=\"line\">                        //根据点对象生成相应的图形</span><br><span class=\"line\">                        var graphic = new Graphic(geometry, psymbol);</span><br><span class=\"line\">                        //将点对象存储在点几何中</span><br><span class=\"line\">                        pointSet.features.push(graphic);</span><br><span class=\"line\">                        //将图形存放在地图中，然后得以显示</span><br><span class=\"line\">                        MyMap.graphics.add(graphic);</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;); </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>给缓冲区分析按钮添加绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(dom.byId(&quot;buffer&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                    //定义GP服务对象</span><br><span class=\"line\">                    var buffer = new Geoprocessor(&quot;http://localhost:6080/arcgis/rest/services/Test/MyBuffer/GPServer/Mybuffer&quot;);</span><br><span class=\"line\">                    //构建GP服务参数</span><br><span class=\"line\">                    var gpParams=&#123;&#125;;</span><br><span class=\"line\">                    //GP服务的Input参数</span><br><span class=\"line\">                    gpParams.Input=pointSet;</span><br><span class=\"line\">                    //GP服务的dis参数</span><br><span class=\"line\">                    var dis=new LinearUnit(&#123;</span><br><span class=\"line\">                        &quot;distance&quot;: 100,</span><br><span class=\"line\">                        &quot;units&quot;: &quot;esriMeters&quot;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    gpParams.dis=dis;</span><br><span class=\"line\">                    //执行GP服务</span><br><span class=\"line\">                    buffer.execute(gpParams, showResult);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>处理GP服务返回的结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function showResult(results, messages)&#123;</span><br><span class=\"line\">                    var features = results[0].value.features;</span><br><span class=\"line\">                    for (var i = 0; i &lt; features.length; i++) &#123;</span><br><span class=\"line\">                        var graphic = features[i];</span><br><span class=\"line\">                        //定义线符号</span><br><span class=\"line\">                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT, new dojo.Color([255, 0, 0]), 1);</span><br><span class=\"line\">                        //定义面符号</span><br><span class=\"line\">                        var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new dojo.Color([255, 255, 0, 0.25]));</span><br><span class=\"line\">                        //设置面符号</span><br><span class=\"line\">                        graphic.setSymbol(PolygonSymbol);</span><br><span class=\"line\">                        MyMap.graphics.add(graphic);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行代码发现错误<br><img src=\"/2019/08/06/ArcGIS-API-for-JS16/02.png\" alt=\"02.png\"><br>此时我们观察前台传给后台的参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input:&#123;</span><br><span class=\"line\">            &quot;geometryType&quot;:&quot;esriGeometryPoint&quot;,</span><br><span class=\"line\">            &quot;features&quot;:[&#123;&quot;geometry&quot;:&#123;&quot;x&quot;:21264961.8441914,&quot;y&quot;:3997922.462940743,&quot;spatialReference&quot;:&#123;&quot;wkid&quot;:2334,&quot;latestWkid&quot;:2334&#125;&#125;&#125;],</span><br><span class=\"line\">            &quot;sr&quot;:&#123;&quot;wkid&quot;:2334,&quot;latestWkid&quot;:2334&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">dis: &#123;&quot;distance&quot;:100,&quot;units&quot;:&quot;esriMeters&quot;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>传给后台的参数和GP服务的参数对比，发现Input参数，缺少fields字段：<br><img src=\"/2019/08/06/ArcGIS-API-for-JS16/03.png\" alt=\"03.png\"><br>修改错误<br>我们给运行GP服务之前给Input参数添加上Fields字段:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(dom.byId(&quot;buffer&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                    //定义GP服务对象</span><br><span class=\"line\">                    var buffer = new Geoprocessor(&quot;http://localhost:6080/arcgis/rest/services/Test/MyBuffer/GPServer/Mybuffer&quot;);</span><br><span class=\"line\">                    //构建GP服务参数</span><br><span class=\"line\">                    var gpParams=&#123;&#125;;</span><br><span class=\"line\">                    //添加fields字段，为了和后台服务字段匹配</span><br><span class=\"line\">                    pointSet.fields=[];</span><br><span class=\"line\">                    //GP服务的Input参数</span><br><span class=\"line\">                    gpParams.Input=pointSet;</span><br><span class=\"line\">                    //GP服务的dis参数</span><br><span class=\"line\">                    var dis=new LinearUnit(&#123;</span><br><span class=\"line\">                        &quot;distance&quot;: 100,</span><br><span class=\"line\">                        &quot;units&quot;: &quot;esriMeters&quot;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    gpParams.dis=dis;</span><br><span class=\"line\">                    //执行GP服务</span><br><span class=\"line\">                    buffer.execute(gpParams, showResult);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;GP&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/Geoprocessor&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/FeatureSet&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,&quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/LinearUnit&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map,</span><br><span class=\"line\">                ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                dom,</span><br><span class=\"line\">                Geoprocessor,</span><br><span class=\"line\">                FeatureSet,</span><br><span class=\"line\">                SimpleMarkerSymbol,</span><br><span class=\"line\">                SimpleLineSymbol,</span><br><span class=\"line\">                Draw,</span><br><span class=\"line\">                SimpleFillSymbol,on,Graphic,LinearUnit) &#123;</span><br><span class=\"line\">                var MyMap = new Map(&quot;MyMapDiv&quot;);</span><br><span class=\"line\">                </span><br><span class=\"line\">                var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">                (&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer&quot;);</span><br><span class=\"line\">                MyMap.addLayer(layer);</span><br><span class=\"line\">                //定义点几何对象</span><br><span class=\"line\">                var pointSet = new FeatureSet();</span><br><span class=\"line\">                var psymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CROSS, 12,</span><br><span class=\"line\">                new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,</span><br><span class=\"line\">                new dojo.Color([255, 0, 0]), 2),</span><br><span class=\"line\">                new dojo.Color([0, 255, 0, 0.25]));</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                    //定义绘图对象</span><br><span class=\"line\">                    var toolBar= new Draw(MyMap, &#123; showTooltips: true &#125;);</span><br><span class=\"line\">                    //激活绘图对象</span><br><span class=\"line\">                    toolBar.activate(Draw.POINT);</span><br><span class=\"line\">                    on(toolBar, &quot;draw-complete&quot;, function(result)&#123;</span><br><span class=\"line\">                        //获得绘图结束的点对象</span><br><span class=\"line\">                        var geometry = result.geometry;</span><br><span class=\"line\">                        //根据点对象生成相应的图形</span><br><span class=\"line\">                        var graphic = new Graphic(geometry,psymbol);</span><br><span class=\"line\">                        //将点对象存储在点几何中</span><br><span class=\"line\">                        pointSet.features.push(graphic);</span><br><span class=\"line\">                        //将图形存放在地图中，然后得以显示</span><br><span class=\"line\">                        MyMap.graphics.add(graphic);</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;); </span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                </span><br><span class=\"line\">                on(dom.byId(&quot;buffer&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                    //定义GP服务对象</span><br><span class=\"line\">                    var buffer = new Geoprocessor(&quot;http://localhost:6080/arcgis/rest/services/Test/MyBuffer/GPServer/Mybuffer&quot;);</span><br><span class=\"line\">                    //构建GP服务参数</span><br><span class=\"line\">                    var gpParams=&#123;&#125;;</span><br><span class=\"line\">                    //添加fields字段，为了和后台服务字段匹配</span><br><span class=\"line\">                    pointSet.fields=[];</span><br><span class=\"line\">                    //GP服务的Input参数</span><br><span class=\"line\">                    gpParams.Input=pointSet;</span><br><span class=\"line\">                    //GP服务的dis参数</span><br><span class=\"line\">                    var dis=new LinearUnit(&#123;</span><br><span class=\"line\">                        &quot;distance&quot;: 100,</span><br><span class=\"line\">                        &quot;units&quot;: &quot;esriMeters&quot;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    gpParams.dis=dis;</span><br><span class=\"line\">                    //执行GP服务</span><br><span class=\"line\">                    buffer.execute(gpParams, showResult);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                function showResult(results, messages)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    var features = results[0].value.features;</span><br><span class=\"line\">                    for (var i = 0; i &lt; features.length; i++) &#123;</span><br><span class=\"line\">                        var graphic = features[i];</span><br><span class=\"line\">                        //定义线符号</span><br><span class=\"line\">                        var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASHDOT, new dojo.Color([255, 0, 0]), 1);</span><br><span class=\"line\">                        //定义面符号</span><br><span class=\"line\">                        var PolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new dojo.Color([255, 255, 0, 0.25]));</span><br><span class=\"line\">                        //设置面符号</span><br><span class=\"line\">                        graphic.setSymbol(PolygonSymbol);</span><br><span class=\"line\">                        MyMap.graphics.add(graphic);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;MyMapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;input id=&quot;Btn&quot; type=&quot;button&quot; value=&quot;画点&quot; /&gt;</span><br><span class=\"line\">    &lt;input id=&quot;buffer&quot; type=&quot;button&quot; value=&quot;缓冲区分析&quot; /&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/08/06/ArcGIS-API-for-JS16/04.png\" alt=\"04.png\"></p>\n"},{"title":"ArcGIS API For Javacsript编辑客户端图形","date":"2019-08-06T09:07:56.000Z","_content":"在ArcGIS API当中，提供了一个工具叫做Edit，我们利用Edit可以交互的编辑客户端图形Graphic，这个功能在我们实际开发过程中非常有用，可以交互编辑已经存在的Graphic以达到我们的目的，Edit工具可以从以下方面编辑客户端图形：\n\n* 移动客户端图形\n* 编辑结点（增加结点，删除结点）\n* 拉伸客户端图形（是否保持长宽比例）\n* 旋转客户端图形\n\n### Edit工具的使用\n使用Edit工具很简单，只需要以下几步即可：\n\n* 给地图添加Graphic，为了下面Edit交互操作做准备\n* 创建Edit对象\n* 激活Edit工具，此时需要制定Edit的一些参数\n* 操作完Graphic将Edit工具关闭\n\n#### 代码实现\n添加地图（省略）\n定义Edit对象，和graphic对象\n```\n            //声明一个客户端图形（为了以后的编辑）\n            var graphic\n            //定义一个Edit对象\n            var edit = new Edit(map);\n```\n首先创建几个按钮（用户实现相应的功能）\n```\n    <input type=\"button\"  id=\"add\" value=\"添加客户端图形\">\n    <input type=\"button\" class=\"btn\" value=\"移动客户端图形\">\n    <input type=\"button\" class=\"btn\" value=\"拉伸客户端图形\">\n    <input type=\"button\" class=\"btn\" value=\"旋转客户端图形\">\n    <input type=\"button\" class=\"btn\" value=\"编辑结点\">\n```\n给添加客户端图形按钮添加绑定事件\n```\non(dom.byId(\"add\"),\"click\",function(){\n                //定义线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //定义面符号\n                var fill=SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new Color([255, 0, 0]));\n                //点的坐标对\n                var ring=[];\n                ring[0]=[\n                    [510275, 3986100],\n                    [510508, 3986162],\n                    [510596, 3986032],\n                    [510271, 3985847],\n                    [510275, 3986100]\n                ];\n                var geometry=new Polygon({\n                    \"rings\":ring,\n                    \"spatialReference\":map.spatialReference\n                });\n                graphic=new Graphic(geometry,fill);\n                map.graphics.add(graphic);\n            })\n```\n给剩余四个按钮添加绑定事件\n```\n//给剩余四个按钮绑定事件\n            query(\".btn\").on(\"click\",function(event){\n                var value=event.currentTarget.defaultValue;\n                switch(value){\n                    case \"移动客户端图形\":\n                        //激活Edit工具（移动）\n                        edit.activate(Edit.MOVE,graphic);\n                        break;\n                    case \"拉伸客户端图形\":\n                        //构建Edit参数 注：拉伸的时候，可以指定是否保持长宽比例\n                        var options = {\n                            uniformScaling:true\n                        };\n                        //激活Edit工具（拉伸客户端图形）\n                        edit.activate(Edit.SCALE,graphic,options)\n                        break;\n                    case \"旋转客户端图形\":\n                        //激活Edit工具（旋转客户端图形）\n                        edit.activate(Edit.ROTATE,graphic)\n                        break;\n                    case \"编辑结点\":\n                        //构建Edit参数 注：编辑折点的时候，要指定是否能添加或者删除结点。\n                        var options = {\n                            allowAddVertices:true,//能添加结点\n                            allowDeleteVertices: true,//能删除结点\n                        };\n                        edit.activate(Edit.EDIT_VERTICES, graphic, options);\n                        break;\n                }\n            })\n```\n关闭Edit工具\n```\n//用完Edit工具，将工具关闭，点击地图（没有点击到Graphic时结束）\n            map.on(\"click\", function () {\n                edit.deactivate();\n            })\n```\n#### 结果\n![1.png](1.png)\n![2.png](2.png)\n![3.png](3.png)\n![4.png](4.png)\n![5.png](5.png)\n![6.png](6.png)\n#### 完整代码\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Graphic</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style>\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script>\n        require([\"esri/map\",\"dojo/dom\",\"dojo/on\",\"esri/toolbars/edit\",\"esri/geometry/Polygon\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\", \"esri/graphic\",\n            \"esri/symbols/SimpleLineSymbol\", \"esri/symbols/SimpleFillSymbol\",\"dojo/colors\",\"dojo/query\",\n             \"dojo/domReady!\"\n        ], function (\n                Map,dom,on, Edit,Polygon, ArcGISDynamicMapServiceLayer, Graphic,\n                SimpleLineSymbol, SimpleFillSymbol,Color,query\n        ) {\n            var map = new Map(\"mapDiv\");\n            var url = \"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\";\n            var layer = new ArcGISDynamicMapServiceLayer(url);\n            map.addLayer(layer);\n            //定义一个Edit对象\n            var edit = new Edit(map);\n            //定义一个graphic，为了后来的交互编辑\n            var graphic;\n            //给`添加客户端图形`按钮添加绑定事件\n            on(dom.byId(\"add\"),\"click\",function(){\n                //定义线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //定义面符号\n                var fill=SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new Color([255, 0, 0]));\n                //点的坐标对\n                var ring=[];\n                ring[0]=[\n                    [510275, 3986100],\n                    [510508, 3986162],\n                    [510596, 3986032],\n                    [510271, 3985847],\n                    [510275, 3986100]\n                ];\n                var geometry=new Polygon({\n                    \"rings\":ring,\n                    \"spatialReference\":map.spatialReference\n                });\n                graphic=new Graphic(geometry,fill);\n                map.graphics.add(graphic);\n            })\n            //给按钮绑定事件\n            query(\".btn\").on(\"click\",function(event){\n                var value=event.currentTarget.defaultValue;\n                switch(value){\n                    case \"移动客户端图形\":\n                        //激活Edit工具（移动）\n                        edit.activate(Edit.MOVE,graphic);\n                        break;\n                    case \"拉伸客户端图形\":\n                        //构建Edit参数 注：拉伸的时候，可以指定是否保持长宽比例\n                        var options = {\n                            uniformScaling:true\n                        };\n                        //激活Edit工具（拉伸客户端图形）\n                        edit.activate(Edit.SCALE,graphic,options)\n                        break;\n                    case \"旋转客户端图形\":\n                        //激活Edit工具（旋转客户端图形）\n                        edit.activate(Edit.ROTATE,graphic)\n                        break;\n                    case \"编辑结点\":\n                        //构建Edit参数 注：编辑折点的时候，要指定是否能添加或者删除结点。\n                        var options = {\n                            allowAddVertices:true,//能添加结点\n                            allowDeleteVertices: true,//能删除结点\n                        };\n                        edit.activate(Edit.EDIT_VERTICES, graphic, options);\n                        break;\n                }\n            })\n            //用完Edit工具，将工具关闭，点击地图（没有点击到Graphic时结束）\n            map.on(\"click\", function () {\n                edit.deactivate();\n            })\n\n        });\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n    <input type=\"button\"  id=\"add\" value=\"添加客户端图形\">\n    <input type=\"button\" class=\"btn\" value=\"移动客户端图形\">\n    <input type=\"button\" class=\"btn\" value=\"拉伸客户端图形\">\n    <input type=\"button\" class=\"btn\" value=\"旋转客户端图形\">\n    <input type=\"button\" class=\"btn\" value=\"编辑结点\">\n</body>\n</html>\n```","source":"_posts/ArcGIS-API-for-JS19.md","raw":"---\ntitle: ArcGIS API For Javacsript编辑客户端图形\ndate: 2019-08-06 17:07:56\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n在ArcGIS API当中，提供了一个工具叫做Edit，我们利用Edit可以交互的编辑客户端图形Graphic，这个功能在我们实际开发过程中非常有用，可以交互编辑已经存在的Graphic以达到我们的目的，Edit工具可以从以下方面编辑客户端图形：\n\n* 移动客户端图形\n* 编辑结点（增加结点，删除结点）\n* 拉伸客户端图形（是否保持长宽比例）\n* 旋转客户端图形\n\n### Edit工具的使用\n使用Edit工具很简单，只需要以下几步即可：\n\n* 给地图添加Graphic，为了下面Edit交互操作做准备\n* 创建Edit对象\n* 激活Edit工具，此时需要制定Edit的一些参数\n* 操作完Graphic将Edit工具关闭\n\n#### 代码实现\n添加地图（省略）\n定义Edit对象，和graphic对象\n```\n            //声明一个客户端图形（为了以后的编辑）\n            var graphic\n            //定义一个Edit对象\n            var edit = new Edit(map);\n```\n首先创建几个按钮（用户实现相应的功能）\n```\n    <input type=\"button\"  id=\"add\" value=\"添加客户端图形\">\n    <input type=\"button\" class=\"btn\" value=\"移动客户端图形\">\n    <input type=\"button\" class=\"btn\" value=\"拉伸客户端图形\">\n    <input type=\"button\" class=\"btn\" value=\"旋转客户端图形\">\n    <input type=\"button\" class=\"btn\" value=\"编辑结点\">\n```\n给添加客户端图形按钮添加绑定事件\n```\non(dom.byId(\"add\"),\"click\",function(){\n                //定义线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //定义面符号\n                var fill=SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new Color([255, 0, 0]));\n                //点的坐标对\n                var ring=[];\n                ring[0]=[\n                    [510275, 3986100],\n                    [510508, 3986162],\n                    [510596, 3986032],\n                    [510271, 3985847],\n                    [510275, 3986100]\n                ];\n                var geometry=new Polygon({\n                    \"rings\":ring,\n                    \"spatialReference\":map.spatialReference\n                });\n                graphic=new Graphic(geometry,fill);\n                map.graphics.add(graphic);\n            })\n```\n给剩余四个按钮添加绑定事件\n```\n//给剩余四个按钮绑定事件\n            query(\".btn\").on(\"click\",function(event){\n                var value=event.currentTarget.defaultValue;\n                switch(value){\n                    case \"移动客户端图形\":\n                        //激活Edit工具（移动）\n                        edit.activate(Edit.MOVE,graphic);\n                        break;\n                    case \"拉伸客户端图形\":\n                        //构建Edit参数 注：拉伸的时候，可以指定是否保持长宽比例\n                        var options = {\n                            uniformScaling:true\n                        };\n                        //激活Edit工具（拉伸客户端图形）\n                        edit.activate(Edit.SCALE,graphic,options)\n                        break;\n                    case \"旋转客户端图形\":\n                        //激活Edit工具（旋转客户端图形）\n                        edit.activate(Edit.ROTATE,graphic)\n                        break;\n                    case \"编辑结点\":\n                        //构建Edit参数 注：编辑折点的时候，要指定是否能添加或者删除结点。\n                        var options = {\n                            allowAddVertices:true,//能添加结点\n                            allowDeleteVertices: true,//能删除结点\n                        };\n                        edit.activate(Edit.EDIT_VERTICES, graphic, options);\n                        break;\n                }\n            })\n```\n关闭Edit工具\n```\n//用完Edit工具，将工具关闭，点击地图（没有点击到Graphic时结束）\n            map.on(\"click\", function () {\n                edit.deactivate();\n            })\n```\n#### 结果\n![1.png](1.png)\n![2.png](2.png)\n![3.png](3.png)\n![4.png](4.png)\n![5.png](5.png)\n![6.png](6.png)\n#### 完整代码\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Graphic</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style>\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script>\n        require([\"esri/map\",\"dojo/dom\",\"dojo/on\",\"esri/toolbars/edit\",\"esri/geometry/Polygon\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\", \"esri/graphic\",\n            \"esri/symbols/SimpleLineSymbol\", \"esri/symbols/SimpleFillSymbol\",\"dojo/colors\",\"dojo/query\",\n             \"dojo/domReady!\"\n        ], function (\n                Map,dom,on, Edit,Polygon, ArcGISDynamicMapServiceLayer, Graphic,\n                SimpleLineSymbol, SimpleFillSymbol,Color,query\n        ) {\n            var map = new Map(\"mapDiv\");\n            var url = \"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\";\n            var layer = new ArcGISDynamicMapServiceLayer(url);\n            map.addLayer(layer);\n            //定义一个Edit对象\n            var edit = new Edit(map);\n            //定义一个graphic，为了后来的交互编辑\n            var graphic;\n            //给`添加客户端图形`按钮添加绑定事件\n            on(dom.byId(\"add\"),\"click\",function(){\n                //定义线符号\n                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //定义面符号\n                var fill=SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new Color([255, 0, 0]));\n                //点的坐标对\n                var ring=[];\n                ring[0]=[\n                    [510275, 3986100],\n                    [510508, 3986162],\n                    [510596, 3986032],\n                    [510271, 3985847],\n                    [510275, 3986100]\n                ];\n                var geometry=new Polygon({\n                    \"rings\":ring,\n                    \"spatialReference\":map.spatialReference\n                });\n                graphic=new Graphic(geometry,fill);\n                map.graphics.add(graphic);\n            })\n            //给按钮绑定事件\n            query(\".btn\").on(\"click\",function(event){\n                var value=event.currentTarget.defaultValue;\n                switch(value){\n                    case \"移动客户端图形\":\n                        //激活Edit工具（移动）\n                        edit.activate(Edit.MOVE,graphic);\n                        break;\n                    case \"拉伸客户端图形\":\n                        //构建Edit参数 注：拉伸的时候，可以指定是否保持长宽比例\n                        var options = {\n                            uniformScaling:true\n                        };\n                        //激活Edit工具（拉伸客户端图形）\n                        edit.activate(Edit.SCALE,graphic,options)\n                        break;\n                    case \"旋转客户端图形\":\n                        //激活Edit工具（旋转客户端图形）\n                        edit.activate(Edit.ROTATE,graphic)\n                        break;\n                    case \"编辑结点\":\n                        //构建Edit参数 注：编辑折点的时候，要指定是否能添加或者删除结点。\n                        var options = {\n                            allowAddVertices:true,//能添加结点\n                            allowDeleteVertices: true,//能删除结点\n                        };\n                        edit.activate(Edit.EDIT_VERTICES, graphic, options);\n                        break;\n                }\n            })\n            //用完Edit工具，将工具关闭，点击地图（没有点击到Graphic时结束）\n            map.on(\"click\", function () {\n                edit.deactivate();\n            })\n\n        });\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n    <input type=\"button\"  id=\"add\" value=\"添加客户端图形\">\n    <input type=\"button\" class=\"btn\" value=\"移动客户端图形\">\n    <input type=\"button\" class=\"btn\" value=\"拉伸客户端图形\">\n    <input type=\"button\" class=\"btn\" value=\"旋转客户端图形\">\n    <input type=\"button\" class=\"btn\" value=\"编辑结点\">\n</body>\n</html>\n```","slug":"ArcGIS-API-for-JS19","published":1,"updated":"2019-08-06T09:18:58.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cu4001bt09z13cj7b0h","content":"<p>在ArcGIS API当中，提供了一个工具叫做Edit，我们利用Edit可以交互的编辑客户端图形Graphic，这个功能在我们实际开发过程中非常有用，可以交互编辑已经存在的Graphic以达到我们的目的，Edit工具可以从以下方面编辑客户端图形：</p>\n<ul>\n<li>移动客户端图形</li>\n<li>编辑结点（增加结点，删除结点）</li>\n<li>拉伸客户端图形（是否保持长宽比例）</li>\n<li>旋转客户端图形</li>\n</ul>\n<h3 id=\"Edit工具的使用\"><a href=\"#Edit工具的使用\" class=\"headerlink\" title=\"Edit工具的使用\"></a>Edit工具的使用</h3><p>使用Edit工具很简单，只需要以下几步即可：</p>\n<ul>\n<li>给地图添加Graphic，为了下面Edit交互操作做准备</li>\n<li>创建Edit对象</li>\n<li>激活Edit工具，此时需要制定Edit的一些参数</li>\n<li>操作完Graphic将Edit工具关闭</li>\n</ul>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>添加地图（省略）<br>定义Edit对象，和graphic对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//声明一个客户端图形（为了以后的编辑）</span><br><span class=\"line\">var graphic</span><br><span class=\"line\">//定义一个Edit对象</span><br><span class=\"line\">var edit = new Edit(map);</span><br></pre></td></tr></table></figure></p>\n<p>首先创建几个按钮（用户实现相应的功能）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;button&quot;  id=&quot;add&quot; value=&quot;添加客户端图形&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; class=&quot;btn&quot; value=&quot;移动客户端图形&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; class=&quot;btn&quot; value=&quot;拉伸客户端图形&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; class=&quot;btn&quot; value=&quot;旋转客户端图形&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; class=&quot;btn&quot; value=&quot;编辑结点&quot;&gt;</span><br></pre></td></tr></table></figure></p>\n<p>给添加客户端图形按钮添加绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(dom.byId(&quot;add&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义面符号</span><br><span class=\"line\">                var fill=SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new Color([255, 0, 0]));</span><br><span class=\"line\">                //点的坐标对</span><br><span class=\"line\">                var ring=[];</span><br><span class=\"line\">                ring[0]=[</span><br><span class=\"line\">                    [510275, 3986100],</span><br><span class=\"line\">                    [510508, 3986162],</span><br><span class=\"line\">                    [510596, 3986032],</span><br><span class=\"line\">                    [510271, 3985847],</span><br><span class=\"line\">                    [510275, 3986100]</span><br><span class=\"line\">                ];</span><br><span class=\"line\">                var geometry=new Polygon(&#123;</span><br><span class=\"line\">                    &quot;rings&quot;:ring,</span><br><span class=\"line\">                    &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                graphic=new Graphic(geometry,fill);</span><br><span class=\"line\">                map.graphics.add(graphic);</span><br><span class=\"line\">            &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>给剩余四个按钮添加绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给剩余四个按钮绑定事件</span><br><span class=\"line\">            query(&quot;.btn&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                var value=event.currentTarget.defaultValue;</span><br><span class=\"line\">                switch(value)&#123;</span><br><span class=\"line\">                    case &quot;移动客户端图形&quot;:</span><br><span class=\"line\">                        //激活Edit工具（移动）</span><br><span class=\"line\">                        edit.activate(Edit.MOVE,graphic);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;拉伸客户端图形&quot;:</span><br><span class=\"line\">                        //构建Edit参数 注：拉伸的时候，可以指定是否保持长宽比例</span><br><span class=\"line\">                        var options = &#123;</span><br><span class=\"line\">                            uniformScaling:true</span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                        //激活Edit工具（拉伸客户端图形）</span><br><span class=\"line\">                        edit.activate(Edit.SCALE,graphic,options)</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;旋转客户端图形&quot;:</span><br><span class=\"line\">                        //激活Edit工具（旋转客户端图形）</span><br><span class=\"line\">                        edit.activate(Edit.ROTATE,graphic)</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;编辑结点&quot;:</span><br><span class=\"line\">                        //构建Edit参数 注：编辑折点的时候，要指定是否能添加或者删除结点。</span><br><span class=\"line\">                        var options = &#123;</span><br><span class=\"line\">                            allowAddVertices:true,//能添加结点</span><br><span class=\"line\">                            allowDeleteVertices: true,//能删除结点</span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                        edit.activate(Edit.EDIT_VERTICES, graphic, options);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>关闭Edit工具<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//用完Edit工具，将工具关闭，点击地图（没有点击到Graphic时结束）</span><br><span class=\"line\">            map.on(&quot;click&quot;, function () &#123;</span><br><span class=\"line\">                edit.deactivate();</span><br><span class=\"line\">            &#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h4><p><img src=\"/2019/08/06/ArcGIS-API-for-JS19/1.png\" alt=\"1.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS19/2.png\" alt=\"2.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS19/3.png\" alt=\"3.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS19/4.png\" alt=\"4.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS19/5.png\" alt=\"5.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS19/6.png\" alt=\"6.png\"></p>\n<h4 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Graphic&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;dojo/dom&quot;,&quot;dojo/on&quot;,&quot;esri/toolbars/edit&quot;,&quot;esri/geometry/Polygon&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;, &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;, &quot;esri/symbols/SimpleFillSymbol&quot;,&quot;dojo/colors&quot;,&quot;dojo/query&quot;,</span><br><span class=\"line\">             &quot;dojo/domReady!&quot;</span><br><span class=\"line\">        ], function (</span><br><span class=\"line\">                Map,dom,on, Edit,Polygon, ArcGISDynamicMapServiceLayer, Graphic,</span><br><span class=\"line\">                SimpleLineSymbol, SimpleFillSymbol,Color,query</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">            var url = &quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;;</span><br><span class=\"line\">            var layer = new ArcGISDynamicMapServiceLayer(url);</span><br><span class=\"line\">            map.addLayer(layer);</span><br><span class=\"line\">            //定义一个Edit对象</span><br><span class=\"line\">            var edit = new Edit(map);</span><br><span class=\"line\">            //定义一个graphic，为了后来的交互编辑</span><br><span class=\"line\">            var graphic;</span><br><span class=\"line\">            //给`添加客户端图形`按钮添加绑定事件</span><br><span class=\"line\">            on(dom.byId(&quot;add&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义面符号</span><br><span class=\"line\">                var fill=SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new Color([255, 0, 0]));</span><br><span class=\"line\">                //点的坐标对</span><br><span class=\"line\">                var ring=[];</span><br><span class=\"line\">                ring[0]=[</span><br><span class=\"line\">                    [510275, 3986100],</span><br><span class=\"line\">                    [510508, 3986162],</span><br><span class=\"line\">                    [510596, 3986032],</span><br><span class=\"line\">                    [510271, 3985847],</span><br><span class=\"line\">                    [510275, 3986100]</span><br><span class=\"line\">                ];</span><br><span class=\"line\">                var geometry=new Polygon(&#123;</span><br><span class=\"line\">                    &quot;rings&quot;:ring,</span><br><span class=\"line\">                    &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                graphic=new Graphic(geometry,fill);</span><br><span class=\"line\">                map.graphics.add(graphic);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            //给按钮绑定事件</span><br><span class=\"line\">            query(&quot;.btn&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                var value=event.currentTarget.defaultValue;</span><br><span class=\"line\">                switch(value)&#123;</span><br><span class=\"line\">                    case &quot;移动客户端图形&quot;:</span><br><span class=\"line\">                        //激活Edit工具（移动）</span><br><span class=\"line\">                        edit.activate(Edit.MOVE,graphic);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;拉伸客户端图形&quot;:</span><br><span class=\"line\">                        //构建Edit参数 注：拉伸的时候，可以指定是否保持长宽比例</span><br><span class=\"line\">                        var options = &#123;</span><br><span class=\"line\">                            uniformScaling:true</span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                        //激活Edit工具（拉伸客户端图形）</span><br><span class=\"line\">                        edit.activate(Edit.SCALE,graphic,options)</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;旋转客户端图形&quot;:</span><br><span class=\"line\">                        //激活Edit工具（旋转客户端图形）</span><br><span class=\"line\">                        edit.activate(Edit.ROTATE,graphic)</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;编辑结点&quot;:</span><br><span class=\"line\">                        //构建Edit参数 注：编辑折点的时候，要指定是否能添加或者删除结点。</span><br><span class=\"line\">                        var options = &#123;</span><br><span class=\"line\">                            allowAddVertices:true,//能添加结点</span><br><span class=\"line\">                            allowDeleteVertices: true,//能删除结点</span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                        edit.activate(Edit.EDIT_VERTICES, graphic, options);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            //用完Edit工具，将工具关闭，点击地图（没有点击到Graphic时结束）</span><br><span class=\"line\">            map.on(&quot;click&quot;, function () &#123;</span><br><span class=\"line\">                edit.deactivate();</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot;  id=&quot;add&quot; value=&quot;添加客户端图形&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; class=&quot;btn&quot; value=&quot;移动客户端图形&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; class=&quot;btn&quot; value=&quot;拉伸客户端图形&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; class=&quot;btn&quot; value=&quot;旋转客户端图形&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; class=&quot;btn&quot; value=&quot;编辑结点&quot;&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>在ArcGIS API当中，提供了一个工具叫做Edit，我们利用Edit可以交互的编辑客户端图形Graphic，这个功能在我们实际开发过程中非常有用，可以交互编辑已经存在的Graphic以达到我们的目的，Edit工具可以从以下方面编辑客户端图形：</p>\n<ul>\n<li>移动客户端图形</li>\n<li>编辑结点（增加结点，删除结点）</li>\n<li>拉伸客户端图形（是否保持长宽比例）</li>\n<li>旋转客户端图形</li>\n</ul>\n<h3 id=\"Edit工具的使用\"><a href=\"#Edit工具的使用\" class=\"headerlink\" title=\"Edit工具的使用\"></a>Edit工具的使用</h3><p>使用Edit工具很简单，只需要以下几步即可：</p>\n<ul>\n<li>给地图添加Graphic，为了下面Edit交互操作做准备</li>\n<li>创建Edit对象</li>\n<li>激活Edit工具，此时需要制定Edit的一些参数</li>\n<li>操作完Graphic将Edit工具关闭</li>\n</ul>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>添加地图（省略）<br>定义Edit对象，和graphic对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//声明一个客户端图形（为了以后的编辑）</span><br><span class=\"line\">var graphic</span><br><span class=\"line\">//定义一个Edit对象</span><br><span class=\"line\">var edit = new Edit(map);</span><br></pre></td></tr></table></figure></p>\n<p>首先创建几个按钮（用户实现相应的功能）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;button&quot;  id=&quot;add&quot; value=&quot;添加客户端图形&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; class=&quot;btn&quot; value=&quot;移动客户端图形&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; class=&quot;btn&quot; value=&quot;拉伸客户端图形&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; class=&quot;btn&quot; value=&quot;旋转客户端图形&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;button&quot; class=&quot;btn&quot; value=&quot;编辑结点&quot;&gt;</span><br></pre></td></tr></table></figure></p>\n<p>给添加客户端图形按钮添加绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(dom.byId(&quot;add&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义面符号</span><br><span class=\"line\">                var fill=SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new Color([255, 0, 0]));</span><br><span class=\"line\">                //点的坐标对</span><br><span class=\"line\">                var ring=[];</span><br><span class=\"line\">                ring[0]=[</span><br><span class=\"line\">                    [510275, 3986100],</span><br><span class=\"line\">                    [510508, 3986162],</span><br><span class=\"line\">                    [510596, 3986032],</span><br><span class=\"line\">                    [510271, 3985847],</span><br><span class=\"line\">                    [510275, 3986100]</span><br><span class=\"line\">                ];</span><br><span class=\"line\">                var geometry=new Polygon(&#123;</span><br><span class=\"line\">                    &quot;rings&quot;:ring,</span><br><span class=\"line\">                    &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                graphic=new Graphic(geometry,fill);</span><br><span class=\"line\">                map.graphics.add(graphic);</span><br><span class=\"line\">            &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>给剩余四个按钮添加绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给剩余四个按钮绑定事件</span><br><span class=\"line\">            query(&quot;.btn&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                var value=event.currentTarget.defaultValue;</span><br><span class=\"line\">                switch(value)&#123;</span><br><span class=\"line\">                    case &quot;移动客户端图形&quot;:</span><br><span class=\"line\">                        //激活Edit工具（移动）</span><br><span class=\"line\">                        edit.activate(Edit.MOVE,graphic);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;拉伸客户端图形&quot;:</span><br><span class=\"line\">                        //构建Edit参数 注：拉伸的时候，可以指定是否保持长宽比例</span><br><span class=\"line\">                        var options = &#123;</span><br><span class=\"line\">                            uniformScaling:true</span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                        //激活Edit工具（拉伸客户端图形）</span><br><span class=\"line\">                        edit.activate(Edit.SCALE,graphic,options)</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;旋转客户端图形&quot;:</span><br><span class=\"line\">                        //激活Edit工具（旋转客户端图形）</span><br><span class=\"line\">                        edit.activate(Edit.ROTATE,graphic)</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;编辑结点&quot;:</span><br><span class=\"line\">                        //构建Edit参数 注：编辑折点的时候，要指定是否能添加或者删除结点。</span><br><span class=\"line\">                        var options = &#123;</span><br><span class=\"line\">                            allowAddVertices:true,//能添加结点</span><br><span class=\"line\">                            allowDeleteVertices: true,//能删除结点</span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                        edit.activate(Edit.EDIT_VERTICES, graphic, options);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>关闭Edit工具<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//用完Edit工具，将工具关闭，点击地图（没有点击到Graphic时结束）</span><br><span class=\"line\">            map.on(&quot;click&quot;, function () &#123;</span><br><span class=\"line\">                edit.deactivate();</span><br><span class=\"line\">            &#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h4><p><img src=\"/2019/08/06/ArcGIS-API-for-JS19/1.png\" alt=\"1.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS19/2.png\" alt=\"2.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS19/3.png\" alt=\"3.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS19/4.png\" alt=\"4.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS19/5.png\" alt=\"5.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS19/6.png\" alt=\"6.png\"></p>\n<h4 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Graphic&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;dojo/dom&quot;,&quot;dojo/on&quot;,&quot;esri/toolbars/edit&quot;,&quot;esri/geometry/Polygon&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;, &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;, &quot;esri/symbols/SimpleFillSymbol&quot;,&quot;dojo/colors&quot;,&quot;dojo/query&quot;,</span><br><span class=\"line\">             &quot;dojo/domReady!&quot;</span><br><span class=\"line\">        ], function (</span><br><span class=\"line\">                Map,dom,on, Edit,Polygon, ArcGISDynamicMapServiceLayer, Graphic,</span><br><span class=\"line\">                SimpleLineSymbol, SimpleFillSymbol,Color,query</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">            var url = &quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;;</span><br><span class=\"line\">            var layer = new ArcGISDynamicMapServiceLayer(url);</span><br><span class=\"line\">            map.addLayer(layer);</span><br><span class=\"line\">            //定义一个Edit对象</span><br><span class=\"line\">            var edit = new Edit(map);</span><br><span class=\"line\">            //定义一个graphic，为了后来的交互编辑</span><br><span class=\"line\">            var graphic;</span><br><span class=\"line\">            //给`添加客户端图形`按钮添加绑定事件</span><br><span class=\"line\">            on(dom.byId(&quot;add&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol=new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义面符号</span><br><span class=\"line\">                var fill=SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new Color([255, 0, 0]));</span><br><span class=\"line\">                //点的坐标对</span><br><span class=\"line\">                var ring=[];</span><br><span class=\"line\">                ring[0]=[</span><br><span class=\"line\">                    [510275, 3986100],</span><br><span class=\"line\">                    [510508, 3986162],</span><br><span class=\"line\">                    [510596, 3986032],</span><br><span class=\"line\">                    [510271, 3985847],</span><br><span class=\"line\">                    [510275, 3986100]</span><br><span class=\"line\">                ];</span><br><span class=\"line\">                var geometry=new Polygon(&#123;</span><br><span class=\"line\">                    &quot;rings&quot;:ring,</span><br><span class=\"line\">                    &quot;spatialReference&quot;:map.spatialReference</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                graphic=new Graphic(geometry,fill);</span><br><span class=\"line\">                map.graphics.add(graphic);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            //给按钮绑定事件</span><br><span class=\"line\">            query(&quot;.btn&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                var value=event.currentTarget.defaultValue;</span><br><span class=\"line\">                switch(value)&#123;</span><br><span class=\"line\">                    case &quot;移动客户端图形&quot;:</span><br><span class=\"line\">                        //激活Edit工具（移动）</span><br><span class=\"line\">                        edit.activate(Edit.MOVE,graphic);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;拉伸客户端图形&quot;:</span><br><span class=\"line\">                        //构建Edit参数 注：拉伸的时候，可以指定是否保持长宽比例</span><br><span class=\"line\">                        var options = &#123;</span><br><span class=\"line\">                            uniformScaling:true</span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                        //激活Edit工具（拉伸客户端图形）</span><br><span class=\"line\">                        edit.activate(Edit.SCALE,graphic,options)</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;旋转客户端图形&quot;:</span><br><span class=\"line\">                        //激活Edit工具（旋转客户端图形）</span><br><span class=\"line\">                        edit.activate(Edit.ROTATE,graphic)</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                    case &quot;编辑结点&quot;:</span><br><span class=\"line\">                        //构建Edit参数 注：编辑折点的时候，要指定是否能添加或者删除结点。</span><br><span class=\"line\">                        var options = &#123;</span><br><span class=\"line\">                            allowAddVertices:true,//能添加结点</span><br><span class=\"line\">                            allowDeleteVertices: true,//能删除结点</span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                        edit.activate(Edit.EDIT_VERTICES, graphic, options);</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            //用完Edit工具，将工具关闭，点击地图（没有点击到Graphic时结束）</span><br><span class=\"line\">            map.on(&quot;click&quot;, function () &#123;</span><br><span class=\"line\">                edit.deactivate();</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot;  id=&quot;add&quot; value=&quot;添加客户端图形&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; class=&quot;btn&quot; value=&quot;移动客户端图形&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; class=&quot;btn&quot; value=&quot;拉伸客户端图形&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; class=&quot;btn&quot; value=&quot;旋转客户端图形&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;button&quot; class=&quot;btn&quot; value=&quot;编辑结点&quot;&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ArcGIS API For Javascript之地图输出","date":"2019-08-06T09:54:17.000Z","_content":"在WebGIS中地图输出是一个比较常用的功能，当我们制图结束时，往往要将我们的地图打印成一张图片保存起来，在ArcGIS API要想实现地图打印，需要借助PrintingTools工具，此工具实质上是一个GP工具，因为是GP工具，所以地图的生成是在服务器端生成的，也可以叫做服务器端打印.\n服务器端打印的执行对象是 PrintTask，打印的参数是 PrintParameters，通过设置打印模板对象PrintTemplate，可以对图片的大小，像素，格式等进行设置\n### 启用PrintingTools 工具\nPrintingTools 和几何服务一样，默认情况下是关闭的，我们应当开启此工具\n默认情况下关闭\n![01.png](01.png)\n启动成功\n![02.png](02.png)\n要使用的URL\n```\nhttp://localhost:6080/arcgis/rest/services/Utilities/PrintingTools/GPServer/Export%20Web%20Map%20Task\n```\n### 使用PrintingTools 打印地图\n#### 代码实现\n加载地图（略）\n添加两个按钮（一个按钮用于画polygon，一个按钮用于地图打印）\n```\n<button class=\"pbtn\" >画多边形</button>\n<input id=\"Btn\" type=\"button\" value=\"地图打印\" />\n```\n创建相关对象（例如：绘图对象，符号对象）\n```\n//创建绘图对象\nvar toolBar = new Draw(map);        \n//线符号\nlineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n//面符号\npolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 0, 0, 0.25]));\n```\n给绘制多边形按钮绑定事件\n```\n//给绘制polygon的按钮绑定事件\nquery(\".pbtn\").on(\"click\",function(event){\n    //激活绘制多边形\n    toolBar.activate(Draw.POLYGON, {\n        showTooltips:true\n    })\n    \n})\n//绘图结束绑定事件\non(toolBar,\"draw-end\",function(result){\n    //获得面形状\n    var geometry=result.geometry;\n    //创建Graphic\n    var graphicpoint= new Graphic(geometry, polygonSymbol);\n    map.graphics.add(graphicpoint); \n    //关闭绘图工具\n    toolBar.deactivate();                   \n})\n```\n给地图打印按钮绑定事件\n```\n//给地图打印按钮绑定事件\n                on(dom.byId(\"Btn\"),\"click\",function(){\n                    //创建地图打印对象\n                    var printMap = new PrintTask(\"http://localhost:6080/arcgis/rest/services/Utilities/PrintingTools/GPServer/Export%20Web%20Map%20Task\");\n                    //创建地图打印模版\n                    var template = new PrintTemplate();\n                    //创建地图的打印参数，参数里面包括：模版和地图\n                    var params = new PrintParameters(); \n                    //输出图片的空间参考\n                    printMap.outSpatialReference = map.SpatialReference \n                    //打印图片的各种参数\n                    template.exportOptions = { \n                        width: 850, \n                        height: 650, \n                        dpi: 96 \n                    };\n                    //打印输出的格式\n                    template.format = \"PDF\"; \n                    //输出地图的布局\n                    template.layout = \"MAP_ONLY\"; \n                    PrintTemplate \n                    //设置参数地图\n                    params.map = map; \n                    //设置参数模版\n                    params.template = template; \n                    //运行结果\n                    printMap.execute(params, function(result){\n                        if (result != null) { \n                            //网页打开生成的地图\n                            window.open(result.url); \n                        } \n                    }) \n```\n#### 运行结果\n![03.png](03.png)\n![04.png](04.png)\n#### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>地图打印</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"dojo/dom\",\"dojo/on\",\"dojo/query\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/symbols/SimpleFillSymbol\",\n            \"esri/toolbars/draw\",\n            \"esri/graphic\",\n            \"esri/tasks/PrintTask\",\n            \"esri/tasks/PrintTemplate\",\n            \"esri/tasks/PrintParameters\",\n            \"dojo/colors\",\n            \"dojo/domReady!\"],\n            function (Map,dom,on,query,\n                ArcGISDynamicMapServiceLayer,\n                SimpleMarkerSymbol,\n                SimpleLineSymbol,\n                SimpleFillSymbol,\n                Draw,\n                Graphic,\n                PrintTask,PrintTemplate,PrintParameters,\n                Color) {\n                var map = new esri.Map(\"mapDiv\");\n                var layer = new esri.layers.ArcGISDynamicMapServiceLayer\n                (\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer\");\n                map.addLayer(layer);\n                //创建绘图对象\n                var toolBar = new Draw(map);    \n                //线符号\n                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //面符号\n                polygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 0, 0, 0.25]));\n                \n                //给绘制polygon的按钮绑定事件\n                query(\".pbtn\").on(\"click\",function(event){\n                    //激活绘制多边形\n                    toolBar.activate(Draw.POLYGON, {\n                        showTooltips:true\n                    })\n                    \n                })\n                //绘图结束绑定事件\n                on(toolBar,\"draw-end\",function(result){\n                    //获得面形状\n                    var geometry=result.geometry;\n                    //创建Graphic\n                    var graphicpoint= new Graphic(geometry, polygonSymbol);\n                    map.graphics.add(graphicpoint); \n                    //关闭绘图工具\n                    toolBar.deactivate();                   \n                })\n                //给地图打印按钮绑定事件\n                on(dom.byId(\"Btn\"),\"click\",function(){\n                    //创建地图打印对象\n                    var printMap = new PrintTask(\"http://localhost:6080/arcgis/rest/services/Utilities/PrintingTools/GPServer/Export%20Web%20Map%20Task\");\n                    //创建地图打印模版\n                    var template = new PrintTemplate();\n                    //创建地图的打印参数，参数里面包括：模版和地图\n                    var params = new PrintParameters(); \n                    //输出图片的空间参考\n                    printMap.outSpatialReference = map.SpatialReference \n                    //打印图片的各种参数\n                    template.exportOptions = { \n                        width: 850, \n                        height: 650, \n                        dpi: 96 \n                    };\n                    //打印输出的格式\n                    template.format = \"PDF\"; \n                    //输出地图的布局\n                    template.layout = \"MAP_ONLY\"; \n                    PrintTemplate \n                    //设置参数地图\n                    params.map = map; \n                    //设置参数模版\n                    params.template = template; \n                    //运行结果\n                    printMap.execute(params, function(result){\n                        if (result != null) { \n                            //网页打开生成的地图\n                            window.open(result.url); \n                        } \n                    }) \n                })\n               \n            });\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n    <button class=\"pbtn\" >画多边形</button>\n    <input id=\"Btn\" type=\"button\" value=\"地图打印\" />\n</body>\n</html>\n```","source":"_posts/ArcGIS-API-for-JS23.md","raw":"---\ntitle: ArcGIS API For Javascript之地图输出\ndate: 2019-08-06 17:54:17\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n在WebGIS中地图输出是一个比较常用的功能，当我们制图结束时，往往要将我们的地图打印成一张图片保存起来，在ArcGIS API要想实现地图打印，需要借助PrintingTools工具，此工具实质上是一个GP工具，因为是GP工具，所以地图的生成是在服务器端生成的，也可以叫做服务器端打印.\n服务器端打印的执行对象是 PrintTask，打印的参数是 PrintParameters，通过设置打印模板对象PrintTemplate，可以对图片的大小，像素，格式等进行设置\n### 启用PrintingTools 工具\nPrintingTools 和几何服务一样，默认情况下是关闭的，我们应当开启此工具\n默认情况下关闭\n![01.png](01.png)\n启动成功\n![02.png](02.png)\n要使用的URL\n```\nhttp://localhost:6080/arcgis/rest/services/Utilities/PrintingTools/GPServer/Export%20Web%20Map%20Task\n```\n### 使用PrintingTools 打印地图\n#### 代码实现\n加载地图（略）\n添加两个按钮（一个按钮用于画polygon，一个按钮用于地图打印）\n```\n<button class=\"pbtn\" >画多边形</button>\n<input id=\"Btn\" type=\"button\" value=\"地图打印\" />\n```\n创建相关对象（例如：绘图对象，符号对象）\n```\n//创建绘图对象\nvar toolBar = new Draw(map);        \n//线符号\nlineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n//面符号\npolygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 0, 0, 0.25]));\n```\n给绘制多边形按钮绑定事件\n```\n//给绘制polygon的按钮绑定事件\nquery(\".pbtn\").on(\"click\",function(event){\n    //激活绘制多边形\n    toolBar.activate(Draw.POLYGON, {\n        showTooltips:true\n    })\n    \n})\n//绘图结束绑定事件\non(toolBar,\"draw-end\",function(result){\n    //获得面形状\n    var geometry=result.geometry;\n    //创建Graphic\n    var graphicpoint= new Graphic(geometry, polygonSymbol);\n    map.graphics.add(graphicpoint); \n    //关闭绘图工具\n    toolBar.deactivate();                   \n})\n```\n给地图打印按钮绑定事件\n```\n//给地图打印按钮绑定事件\n                on(dom.byId(\"Btn\"),\"click\",function(){\n                    //创建地图打印对象\n                    var printMap = new PrintTask(\"http://localhost:6080/arcgis/rest/services/Utilities/PrintingTools/GPServer/Export%20Web%20Map%20Task\");\n                    //创建地图打印模版\n                    var template = new PrintTemplate();\n                    //创建地图的打印参数，参数里面包括：模版和地图\n                    var params = new PrintParameters(); \n                    //输出图片的空间参考\n                    printMap.outSpatialReference = map.SpatialReference \n                    //打印图片的各种参数\n                    template.exportOptions = { \n                        width: 850, \n                        height: 650, \n                        dpi: 96 \n                    };\n                    //打印输出的格式\n                    template.format = \"PDF\"; \n                    //输出地图的布局\n                    template.layout = \"MAP_ONLY\"; \n                    PrintTemplate \n                    //设置参数地图\n                    params.map = map; \n                    //设置参数模版\n                    params.template = template; \n                    //运行结果\n                    printMap.execute(params, function(result){\n                        if (result != null) { \n                            //网页打开生成的地图\n                            window.open(result.url); \n                        } \n                    }) \n```\n#### 运行结果\n![03.png](03.png)\n![04.png](04.png)\n#### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>地图打印</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"dojo/dom\",\"dojo/on\",\"dojo/query\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/symbols/SimpleFillSymbol\",\n            \"esri/toolbars/draw\",\n            \"esri/graphic\",\n            \"esri/tasks/PrintTask\",\n            \"esri/tasks/PrintTemplate\",\n            \"esri/tasks/PrintParameters\",\n            \"dojo/colors\",\n            \"dojo/domReady!\"],\n            function (Map,dom,on,query,\n                ArcGISDynamicMapServiceLayer,\n                SimpleMarkerSymbol,\n                SimpleLineSymbol,\n                SimpleFillSymbol,\n                Draw,\n                Graphic,\n                PrintTask,PrintTemplate,PrintParameters,\n                Color) {\n                var map = new esri.Map(\"mapDiv\");\n                var layer = new esri.layers.ArcGISDynamicMapServiceLayer\n                (\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer\");\n                map.addLayer(layer);\n                //创建绘图对象\n                var toolBar = new Draw(map);    \n                //线符号\n                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //面符号\n                polygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 0, 0, 0.25]));\n                \n                //给绘制polygon的按钮绑定事件\n                query(\".pbtn\").on(\"click\",function(event){\n                    //激活绘制多边形\n                    toolBar.activate(Draw.POLYGON, {\n                        showTooltips:true\n                    })\n                    \n                })\n                //绘图结束绑定事件\n                on(toolBar,\"draw-end\",function(result){\n                    //获得面形状\n                    var geometry=result.geometry;\n                    //创建Graphic\n                    var graphicpoint= new Graphic(geometry, polygonSymbol);\n                    map.graphics.add(graphicpoint); \n                    //关闭绘图工具\n                    toolBar.deactivate();                   \n                })\n                //给地图打印按钮绑定事件\n                on(dom.byId(\"Btn\"),\"click\",function(){\n                    //创建地图打印对象\n                    var printMap = new PrintTask(\"http://localhost:6080/arcgis/rest/services/Utilities/PrintingTools/GPServer/Export%20Web%20Map%20Task\");\n                    //创建地图打印模版\n                    var template = new PrintTemplate();\n                    //创建地图的打印参数，参数里面包括：模版和地图\n                    var params = new PrintParameters(); \n                    //输出图片的空间参考\n                    printMap.outSpatialReference = map.SpatialReference \n                    //打印图片的各种参数\n                    template.exportOptions = { \n                        width: 850, \n                        height: 650, \n                        dpi: 96 \n                    };\n                    //打印输出的格式\n                    template.format = \"PDF\"; \n                    //输出地图的布局\n                    template.layout = \"MAP_ONLY\"; \n                    PrintTemplate \n                    //设置参数地图\n                    params.map = map; \n                    //设置参数模版\n                    params.template = template; \n                    //运行结果\n                    printMap.execute(params, function(result){\n                        if (result != null) { \n                            //网页打开生成的地图\n                            window.open(result.url); \n                        } \n                    }) \n                })\n               \n            });\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n    <button class=\"pbtn\" >画多边形</button>\n    <input id=\"Btn\" type=\"button\" value=\"地图打印\" />\n</body>\n</html>\n```","slug":"ArcGIS-API-for-JS23","published":1,"updated":"2019-08-06T10:01:15.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cu6001et09zut3zoz8d","content":"<p>在WebGIS中地图输出是一个比较常用的功能，当我们制图结束时，往往要将我们的地图打印成一张图片保存起来，在ArcGIS API要想实现地图打印，需要借助PrintingTools工具，此工具实质上是一个GP工具，因为是GP工具，所以地图的生成是在服务器端生成的，也可以叫做服务器端打印.<br>服务器端打印的执行对象是 PrintTask，打印的参数是 PrintParameters，通过设置打印模板对象PrintTemplate，可以对图片的大小，像素，格式等进行设置</p>\n<h3 id=\"启用PrintingTools-工具\"><a href=\"#启用PrintingTools-工具\" class=\"headerlink\" title=\"启用PrintingTools 工具\"></a>启用PrintingTools 工具</h3><p>PrintingTools 和几何服务一样，默认情况下是关闭的，我们应当开启此工具<br>默认情况下关闭<br><img src=\"/2019/08/06/ArcGIS-API-for-JS23/01.png\" alt=\"01.png\"><br>启动成功<br><img src=\"/2019/08/06/ArcGIS-API-for-JS23/02.png\" alt=\"02.png\"><br>要使用的URL<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:6080/arcgis/rest/services/Utilities/PrintingTools/GPServer/Export%20Web%20Map%20Task</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用PrintingTools-打印地图\"><a href=\"#使用PrintingTools-打印地图\" class=\"headerlink\" title=\"使用PrintingTools 打印地图\"></a>使用PrintingTools 打印地图</h3><h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>加载地图（略）<br>添加两个按钮（一个按钮用于画polygon，一个按钮用于地图打印）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button class=&quot;pbtn&quot; &gt;画多边形&lt;/button&gt;</span><br><span class=\"line\">&lt;input id=&quot;Btn&quot; type=&quot;button&quot; value=&quot;地图打印&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建相关对象（例如：绘图对象，符号对象）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建绘图对象</span><br><span class=\"line\">var toolBar = new Draw(map);        </span><br><span class=\"line\">//线符号</span><br><span class=\"line\">lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">//面符号</span><br><span class=\"line\">polygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 0, 0, 0.25]));</span><br></pre></td></tr></table></figure></p>\n<p>给绘制多边形按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给绘制polygon的按钮绑定事件</span><br><span class=\"line\">query(&quot;.pbtn&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">    //激活绘制多边形</span><br><span class=\"line\">    toolBar.activate(Draw.POLYGON, &#123;</span><br><span class=\"line\">        showTooltips:true</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//绘图结束绑定事件</span><br><span class=\"line\">on(toolBar,&quot;draw-end&quot;,function(result)&#123;</span><br><span class=\"line\">    //获得面形状</span><br><span class=\"line\">    var geometry=result.geometry;</span><br><span class=\"line\">    //创建Graphic</span><br><span class=\"line\">    var graphicpoint= new Graphic(geometry, polygonSymbol);</span><br><span class=\"line\">    map.graphics.add(graphicpoint); </span><br><span class=\"line\">    //关闭绘图工具</span><br><span class=\"line\">    toolBar.deactivate();                   </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>给地图打印按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给地图打印按钮绑定事件</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //创建地图打印对象</span><br><span class=\"line\">                    var printMap = new PrintTask(&quot;http://localhost:6080/arcgis/rest/services/Utilities/PrintingTools/GPServer/Export%20Web%20Map%20Task&quot;);</span><br><span class=\"line\">                    //创建地图打印模版</span><br><span class=\"line\">                    var template = new PrintTemplate();</span><br><span class=\"line\">                    //创建地图的打印参数，参数里面包括：模版和地图</span><br><span class=\"line\">                    var params = new PrintParameters(); </span><br><span class=\"line\">                    //输出图片的空间参考</span><br><span class=\"line\">                    printMap.outSpatialReference = map.SpatialReference </span><br><span class=\"line\">                    //打印图片的各种参数</span><br><span class=\"line\">                    template.exportOptions = &#123; </span><br><span class=\"line\">                        width: 850, </span><br><span class=\"line\">                        height: 650, </span><br><span class=\"line\">                        dpi: 96 </span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">                    //打印输出的格式</span><br><span class=\"line\">                    template.format = &quot;PDF&quot;; </span><br><span class=\"line\">                    //输出地图的布局</span><br><span class=\"line\">                    template.layout = &quot;MAP_ONLY&quot;; </span><br><span class=\"line\">                    PrintTemplate </span><br><span class=\"line\">                    //设置参数地图</span><br><span class=\"line\">                    params.map = map; </span><br><span class=\"line\">                    //设置参数模版</span><br><span class=\"line\">                    params.template = template; </span><br><span class=\"line\">                    //运行结果</span><br><span class=\"line\">                    printMap.execute(params, function(result)&#123;</span><br><span class=\"line\">                        if (result != null) &#123; </span><br><span class=\"line\">                            //网页打开生成的地图</span><br><span class=\"line\">                            window.open(result.url); </span><br><span class=\"line\">                        &#125; </span><br><span class=\"line\">                    &#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"/2019/08/06/ArcGIS-API-for-JS23/03.png\" alt=\"03.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS23/04.png\" alt=\"04.png\"></p>\n<h4 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;地图打印&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,&quot;dojo/on&quot;,&quot;dojo/query&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">            &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/PrintTask&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/PrintTemplate&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/PrintParameters&quot;,</span><br><span class=\"line\">            &quot;dojo/colors&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map,dom,on,query,</span><br><span class=\"line\">                ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                SimpleMarkerSymbol,</span><br><span class=\"line\">                SimpleLineSymbol,</span><br><span class=\"line\">                SimpleFillSymbol,</span><br><span class=\"line\">                Draw,</span><br><span class=\"line\">                Graphic,</span><br><span class=\"line\">                PrintTask,PrintTemplate,PrintParameters,</span><br><span class=\"line\">                Color) &#123;</span><br><span class=\"line\">                var map = new esri.Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                var layer = new esri.layers.ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">                (&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer&quot;);</span><br><span class=\"line\">                map.addLayer(layer);</span><br><span class=\"line\">                //创建绘图对象</span><br><span class=\"line\">                var toolBar = new Draw(map);    </span><br><span class=\"line\">                //线符号</span><br><span class=\"line\">                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //面符号</span><br><span class=\"line\">                polygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 0, 0, 0.25]));</span><br><span class=\"line\">                </span><br><span class=\"line\">                //给绘制polygon的按钮绑定事件</span><br><span class=\"line\">                query(&quot;.pbtn&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                    //激活绘制多边形</span><br><span class=\"line\">                    toolBar.activate(Draw.POLYGON, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //绘图结束绑定事件</span><br><span class=\"line\">                on(toolBar,&quot;draw-end&quot;,function(result)&#123;</span><br><span class=\"line\">                    //获得面形状</span><br><span class=\"line\">                    var geometry=result.geometry;</span><br><span class=\"line\">                    //创建Graphic</span><br><span class=\"line\">                    var graphicpoint= new Graphic(geometry, polygonSymbol);</span><br><span class=\"line\">                    map.graphics.add(graphicpoint); </span><br><span class=\"line\">                    //关闭绘图工具</span><br><span class=\"line\">                    toolBar.deactivate();                   </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //给地图打印按钮绑定事件</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //创建地图打印对象</span><br><span class=\"line\">                    var printMap = new PrintTask(&quot;http://localhost:6080/arcgis/rest/services/Utilities/PrintingTools/GPServer/Export%20Web%20Map%20Task&quot;);</span><br><span class=\"line\">                    //创建地图打印模版</span><br><span class=\"line\">                    var template = new PrintTemplate();</span><br><span class=\"line\">                    //创建地图的打印参数，参数里面包括：模版和地图</span><br><span class=\"line\">                    var params = new PrintParameters(); </span><br><span class=\"line\">                    //输出图片的空间参考</span><br><span class=\"line\">                    printMap.outSpatialReference = map.SpatialReference </span><br><span class=\"line\">                    //打印图片的各种参数</span><br><span class=\"line\">                    template.exportOptions = &#123; </span><br><span class=\"line\">                        width: 850, </span><br><span class=\"line\">                        height: 650, </span><br><span class=\"line\">                        dpi: 96 </span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">                    //打印输出的格式</span><br><span class=\"line\">                    template.format = &quot;PDF&quot;; </span><br><span class=\"line\">                    //输出地图的布局</span><br><span class=\"line\">                    template.layout = &quot;MAP_ONLY&quot;; </span><br><span class=\"line\">                    PrintTemplate </span><br><span class=\"line\">                    //设置参数地图</span><br><span class=\"line\">                    params.map = map; </span><br><span class=\"line\">                    //设置参数模版</span><br><span class=\"line\">                    params.template = template; </span><br><span class=\"line\">                    //运行结果</span><br><span class=\"line\">                    printMap.execute(params, function(result)&#123;</span><br><span class=\"line\">                        if (result != null) &#123; </span><br><span class=\"line\">                            //网页打开生成的地图</span><br><span class=\"line\">                            window.open(result.url); </span><br><span class=\"line\">                        &#125; </span><br><span class=\"line\">                    &#125;) </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;button class=&quot;pbtn&quot; &gt;画多边形&lt;/button&gt;</span><br><span class=\"line\">    &lt;input id=&quot;Btn&quot; type=&quot;button&quot; value=&quot;地图打印&quot; /&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>在WebGIS中地图输出是一个比较常用的功能，当我们制图结束时，往往要将我们的地图打印成一张图片保存起来，在ArcGIS API要想实现地图打印，需要借助PrintingTools工具，此工具实质上是一个GP工具，因为是GP工具，所以地图的生成是在服务器端生成的，也可以叫做服务器端打印.<br>服务器端打印的执行对象是 PrintTask，打印的参数是 PrintParameters，通过设置打印模板对象PrintTemplate，可以对图片的大小，像素，格式等进行设置</p>\n<h3 id=\"启用PrintingTools-工具\"><a href=\"#启用PrintingTools-工具\" class=\"headerlink\" title=\"启用PrintingTools 工具\"></a>启用PrintingTools 工具</h3><p>PrintingTools 和几何服务一样，默认情况下是关闭的，我们应当开启此工具<br>默认情况下关闭<br><img src=\"/2019/08/06/ArcGIS-API-for-JS23/01.png\" alt=\"01.png\"><br>启动成功<br><img src=\"/2019/08/06/ArcGIS-API-for-JS23/02.png\" alt=\"02.png\"><br>要使用的URL<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:6080/arcgis/rest/services/Utilities/PrintingTools/GPServer/Export%20Web%20Map%20Task</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用PrintingTools-打印地图\"><a href=\"#使用PrintingTools-打印地图\" class=\"headerlink\" title=\"使用PrintingTools 打印地图\"></a>使用PrintingTools 打印地图</h3><h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>加载地图（略）<br>添加两个按钮（一个按钮用于画polygon，一个按钮用于地图打印）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button class=&quot;pbtn&quot; &gt;画多边形&lt;/button&gt;</span><br><span class=\"line\">&lt;input id=&quot;Btn&quot; type=&quot;button&quot; value=&quot;地图打印&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建相关对象（例如：绘图对象，符号对象）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建绘图对象</span><br><span class=\"line\">var toolBar = new Draw(map);        </span><br><span class=\"line\">//线符号</span><br><span class=\"line\">lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">//面符号</span><br><span class=\"line\">polygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 0, 0, 0.25]));</span><br></pre></td></tr></table></figure></p>\n<p>给绘制多边形按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给绘制polygon的按钮绑定事件</span><br><span class=\"line\">query(&quot;.pbtn&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">    //激活绘制多边形</span><br><span class=\"line\">    toolBar.activate(Draw.POLYGON, &#123;</span><br><span class=\"line\">        showTooltips:true</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//绘图结束绑定事件</span><br><span class=\"line\">on(toolBar,&quot;draw-end&quot;,function(result)&#123;</span><br><span class=\"line\">    //获得面形状</span><br><span class=\"line\">    var geometry=result.geometry;</span><br><span class=\"line\">    //创建Graphic</span><br><span class=\"line\">    var graphicpoint= new Graphic(geometry, polygonSymbol);</span><br><span class=\"line\">    map.graphics.add(graphicpoint); </span><br><span class=\"line\">    //关闭绘图工具</span><br><span class=\"line\">    toolBar.deactivate();                   </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>给地图打印按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给地图打印按钮绑定事件</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //创建地图打印对象</span><br><span class=\"line\">                    var printMap = new PrintTask(&quot;http://localhost:6080/arcgis/rest/services/Utilities/PrintingTools/GPServer/Export%20Web%20Map%20Task&quot;);</span><br><span class=\"line\">                    //创建地图打印模版</span><br><span class=\"line\">                    var template = new PrintTemplate();</span><br><span class=\"line\">                    //创建地图的打印参数，参数里面包括：模版和地图</span><br><span class=\"line\">                    var params = new PrintParameters(); </span><br><span class=\"line\">                    //输出图片的空间参考</span><br><span class=\"line\">                    printMap.outSpatialReference = map.SpatialReference </span><br><span class=\"line\">                    //打印图片的各种参数</span><br><span class=\"line\">                    template.exportOptions = &#123; </span><br><span class=\"line\">                        width: 850, </span><br><span class=\"line\">                        height: 650, </span><br><span class=\"line\">                        dpi: 96 </span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">                    //打印输出的格式</span><br><span class=\"line\">                    template.format = &quot;PDF&quot;; </span><br><span class=\"line\">                    //输出地图的布局</span><br><span class=\"line\">                    template.layout = &quot;MAP_ONLY&quot;; </span><br><span class=\"line\">                    PrintTemplate </span><br><span class=\"line\">                    //设置参数地图</span><br><span class=\"line\">                    params.map = map; </span><br><span class=\"line\">                    //设置参数模版</span><br><span class=\"line\">                    params.template = template; </span><br><span class=\"line\">                    //运行结果</span><br><span class=\"line\">                    printMap.execute(params, function(result)&#123;</span><br><span class=\"line\">                        if (result != null) &#123; </span><br><span class=\"line\">                            //网页打开生成的地图</span><br><span class=\"line\">                            window.open(result.url); </span><br><span class=\"line\">                        &#125; </span><br><span class=\"line\">                    &#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"/2019/08/06/ArcGIS-API-for-JS23/03.png\" alt=\"03.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS23/04.png\" alt=\"04.png\"></p>\n<h4 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;地图打印&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,&quot;dojo/on&quot;,&quot;dojo/query&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">            &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/PrintTask&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/PrintTemplate&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/PrintParameters&quot;,</span><br><span class=\"line\">            &quot;dojo/colors&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map,dom,on,query,</span><br><span class=\"line\">                ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                SimpleMarkerSymbol,</span><br><span class=\"line\">                SimpleLineSymbol,</span><br><span class=\"line\">                SimpleFillSymbol,</span><br><span class=\"line\">                Draw,</span><br><span class=\"line\">                Graphic,</span><br><span class=\"line\">                PrintTask,PrintTemplate,PrintParameters,</span><br><span class=\"line\">                Color) &#123;</span><br><span class=\"line\">                var map = new esri.Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                var layer = new esri.layers.ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">                (&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer&quot;);</span><br><span class=\"line\">                map.addLayer(layer);</span><br><span class=\"line\">                //创建绘图对象</span><br><span class=\"line\">                var toolBar = new Draw(map);    </span><br><span class=\"line\">                //线符号</span><br><span class=\"line\">                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //面符号</span><br><span class=\"line\">                polygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 0, 0, 0.25]));</span><br><span class=\"line\">                </span><br><span class=\"line\">                //给绘制polygon的按钮绑定事件</span><br><span class=\"line\">                query(&quot;.pbtn&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                    //激活绘制多边形</span><br><span class=\"line\">                    toolBar.activate(Draw.POLYGON, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //绘图结束绑定事件</span><br><span class=\"line\">                on(toolBar,&quot;draw-end&quot;,function(result)&#123;</span><br><span class=\"line\">                    //获得面形状</span><br><span class=\"line\">                    var geometry=result.geometry;</span><br><span class=\"line\">                    //创建Graphic</span><br><span class=\"line\">                    var graphicpoint= new Graphic(geometry, polygonSymbol);</span><br><span class=\"line\">                    map.graphics.add(graphicpoint); </span><br><span class=\"line\">                    //关闭绘图工具</span><br><span class=\"line\">                    toolBar.deactivate();                   </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //给地图打印按钮绑定事件</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //创建地图打印对象</span><br><span class=\"line\">                    var printMap = new PrintTask(&quot;http://localhost:6080/arcgis/rest/services/Utilities/PrintingTools/GPServer/Export%20Web%20Map%20Task&quot;);</span><br><span class=\"line\">                    //创建地图打印模版</span><br><span class=\"line\">                    var template = new PrintTemplate();</span><br><span class=\"line\">                    //创建地图的打印参数，参数里面包括：模版和地图</span><br><span class=\"line\">                    var params = new PrintParameters(); </span><br><span class=\"line\">                    //输出图片的空间参考</span><br><span class=\"line\">                    printMap.outSpatialReference = map.SpatialReference </span><br><span class=\"line\">                    //打印图片的各种参数</span><br><span class=\"line\">                    template.exportOptions = &#123; </span><br><span class=\"line\">                        width: 850, </span><br><span class=\"line\">                        height: 650, </span><br><span class=\"line\">                        dpi: 96 </span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\">                    //打印输出的格式</span><br><span class=\"line\">                    template.format = &quot;PDF&quot;; </span><br><span class=\"line\">                    //输出地图的布局</span><br><span class=\"line\">                    template.layout = &quot;MAP_ONLY&quot;; </span><br><span class=\"line\">                    PrintTemplate </span><br><span class=\"line\">                    //设置参数地图</span><br><span class=\"line\">                    params.map = map; </span><br><span class=\"line\">                    //设置参数模版</span><br><span class=\"line\">                    params.template = template; </span><br><span class=\"line\">                    //运行结果</span><br><span class=\"line\">                    printMap.execute(params, function(result)&#123;</span><br><span class=\"line\">                        if (result != null) &#123; </span><br><span class=\"line\">                            //网页打开生成的地图</span><br><span class=\"line\">                            window.open(result.url); </span><br><span class=\"line\">                        &#125; </span><br><span class=\"line\">                    &#125;) </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;button class=&quot;pbtn&quot; &gt;画多边形&lt;/button&gt;</span><br><span class=\"line\">    &lt;input id=&quot;Btn&quot; type=&quot;button&quot; value=&quot;地图打印&quot; /&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ArcGIS API For Javascript之动态图层","date":"2019-08-06T08:42:34.000Z","_content":"动态图层主要特点：\n\n* 改变地图服务的现有图层\n* 动态图层适用于海量图层的情况\n* 不需要将shp文件发布为服务，服务器可以直接读取shp文件在前端显示\n\n### 调用动态图层\n在前面已经说过动态图层并不是一种新的服务类型，而是地图服务的一种扩展，因此我们不需要发布服务，只需要对地图服务添加动态图层功能即可。启用地图服务的步骤为：\n\n* 给相应的地图服务启用动态工作空间\n* 选择服务器相应的硬盘地址并赋予其id\n* 将相应位置注册到ArcGIS Server服务器（保证ArcGIS Server可以访问数据）\n* 在Web端进行调用\n\n#### 启用动态图层\n我们打开Manager->登录，找到该服务，点击功能，选择允许每次请求修改图层顺序和符号->添加\n![01.png](01.png)\n硬盘上的数据\n![02.png](02.png)\n注:D:\\myshp文件夹下面有一个shp文件：lunkuoxian.shp\n因此我们选择工作空间类型为：shpfile文件夹，工作空间id在此处取名为my，硬盘路径：D：\\myshp\n![03.png](03.png)\n点击确定，重新启动服务\n![04.png](04.png)\n![05.png](05.png)\n注册文件夹到服务器\n点击站点->数据存储->注册文件夹（因为我们是文件夹，所以是注册文件夹，如果是数据库，那么就要注册数据库）\n![06.png](06.png)\n![07.png](07.png)\n![08.png](08.png)\n在Services Directory 查看动态图层是否启用\n![09.png](09.png)\n#### Web端调用\n#### 代码实现\n首先我们加载地图\n```\nrequire([\"esri/map\",\n            \"dojo/dom\",\n            \"dojo/on\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/layers/FeatureLayer\",\n            \"esri/layers/TableDataSource\",\n            \"esri/layers/LayerDataSource\",\n            \"esri/renderers/SimpleRenderer\",\n            \"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"dojo/domReady!\"], function (\n                Map,dom,on, ArcGISDynamicMapServiceLayer, FeatureLayer, TableDataSource, LayerDataSource, SimpleRenderer, SimpleMarkerSymbol,SimpleLineSymbol) {\n            var map = new Map(\"mapDiv\");\n            var layer1 = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services//Test/MyService/MapServer\");\n            map.addLayer(layer1);\n });\n```\n添加一个按钮（用于添加动态图层）\n```\n<button id=\"btn\">添加动态图层</button>\n```\n给按钮添加事件\n```\non(dom.byId(\"btn\"),\"click\",function(e){\n                //定义一个数据源\n                var dataSource = new TableDataSource();\n                //此处为我们设置的命名空间\n                dataSource.workspaceId = \"my\";\n                //命名空间下面的shp\n                dataSource.dataSourceName = \"lunkuoxian.shp\";\n                //定义一个图层数据源\n                var layerSource = new LayerDataSource();\n                //给图层数据源赋值\n                layerSource.dataSource = dataSource;\n                //定义一个要素图层:注意链接为动态图层的地址\n                var layer2 = new FeatureLayer(\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/dynamicLayer\", {\n                    mode: FeatureLayer.MODE_ONDEMAND,\n                    outFields: [\"*\"],\n                    source: layerSource\n                });\n                //定义线符号\n                var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                //定义渲染器\n                var renderer = new esri.renderer.SimpleRenderer(lineSymbol);\n                //定义渲染器\n                layer2.setRenderer(renderer);\n                layer2.refresh();\n                map.addLayer(layer2);\n    })\n```\n##### 完整代码\n```\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <script type=\"text/javascript\">\n        require([\"esri/map\",\n            \"dojo/dom\",\n            \"dojo/on\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/layers/FeatureLayer\",\n            \"esri/layers/TableDataSource\",\n            \"esri/layers/LayerDataSource\",\n            \"esri/renderers/SimpleRenderer\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"dojo/domReady!\"], function (\n                Map,dom,on, ArcGISDynamicMapServiceLayer, FeatureLayer, TableDataSource, LayerDataSource, SimpleRenderer,SimpleLineSymbol) {\n            var map = new Map(\"mapDiv\");\n            var layer1 = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services//Test/MyService/MapServer\");\n            map.addLayer(layer1);\n\n            on(dom.byId(\"btn\"),\"click\",function(e){\n                //定义一个数据源\n                var dataSource = new TableDataSource();\n                //此处为我们设置的命名空间\n                dataSource.workspaceId = \"my\";\n                //命名空间下面的shp\n                dataSource.dataSourceName = \"lunkuoxian.shp\";\n                //定义一个图层数据源\n                var layerSource = new LayerDataSource();\n                //给图层数据源赋值\n                layerSource.dataSource = dataSource;\n                //定义一个要素图层:注意链接为动态图层的地址\n                var layer2 = new FeatureLayer(\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/dynamicLayer\", {\n                    mode: FeatureLayer.MODE_ONDEMAND,\n                    outFields: [\"*\"],\n                    source: layerSource\n                });\n                //定义线符号\n                var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                //定义渲染器\n                var renderer = new esri.renderer.SimpleRenderer(lineSymbol);\n                //定义渲染器\n                layer2.setRenderer(renderer);\n                layer2.refresh();\n                map.addLayer(layer2);\n            })\n            \n        });\n    </script>\n</head>\n\n<body>\n<div id=\"mapDiv\" style=\"height:600px;\"></div>\n<button id=\"btn\">添加动态图层</button>\n</body>\n</html>\n```\n运行结果之后：\n![10.png](10.png)\n### 动态图层的属性查询\n在真实需求中,我们不仅仅是将shp在地图中显示那么简单，我们往往要查询该图层的属性信息,我们在前面代码的基础上添加上属性查询。\n#### 方法1（通过click直接获取）\n##### 代码实现\n给要素图层添加点击事件\n```\nlayer2.on(\"click\", function(evt) {\n                    //得到点击的graphics\n                    var graphic=evt.graphic;\n                    //得到该属性信息\n                    var attributes=graphic.attributes;\n                    //得到该属性信息转换成字符串\n                    var result=jsonUtil.stringify(attributes)\n                    //将结果弹出一下\n                    alert(result);\n                    //获得要素图层的主键名称\n                    \n})\n```\n##### 全部代码\n```\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <script type=\"text/javascript\">\n        require([\"esri/map\",\n            \"dojo/dom\",\n            \"dojo/on\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/layers/FeatureLayer\",\n            \"esri/layers/TableDataSource\",\n            \"esri/layers/LayerDataSource\",\n            \"esri/renderers/SimpleRenderer\",\n            \"esri/symbols/SimpleLineSymbol\",\"dojo/json\",\n            \"dojo/domReady!\"], function (\n                Map,dom,on, ArcGISDynamicMapServiceLayer, FeatureLayer, TableDataSource, LayerDataSource, SimpleRenderer,SimpleLineSymbol,jsonUtil) {\n            var map = new Map(\"mapDiv\");\n            var layer1 = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services//Test/MyService/MapServer\");\n            map.addLayer(layer1);\n\n            on(dom.byId(\"btn\"),\"click\",function(e){\n                //定义一个数据源\n                var dataSource = new TableDataSource();\n                //此处为我们设置的命名空间\n                dataSource.workspaceId = \"my\";\n                //命名空间下面的shp\n                dataSource.dataSourceName = \"lunkuoxian.shp\";\n                //定义一个图层数据源\n                var layerSource = new LayerDataSource();\n                //给图层数据源赋值\n                layerSource.dataSource = dataSource;\n                //定义一个要素图层:注意链接为动态图层的地址\n                var layer2 = new FeatureLayer(\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/dynamicLayer\", {\n                    mode: FeatureLayer.MODE_ONDEMAND,\n                    outFields: [\"*\"],\n                    source: layerSource\n                });\n                //定义线符号\n                var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                //定义渲染器\n                var renderer = new esri.renderer.SimpleRenderer(lineSymbol);\n                //定义渲染器\n                layer2.setRenderer(renderer);\n                layer2.refresh();\n                map.addLayer(layer2);\n                layer2.on(\"click\", function(evt) {\n                    //得到点击的graphics\n                    var graphic=evt.graphic;\n                    //得到该属性信息\n                    var attributes=graphic.attributes;\n                    //得到该属性信息转换成字符串\n                    var result=jsonUtil.stringify(attributes)\n                    //将结果弹出一下\n                    alert(result);\n                    //获得要素图层的主键名称\n\n                })\n            })\n            \n        });\n    </script>\n</head>\n\n<body>\n<div id=\"mapDiv\" style=\"height:600px;\"></div>\n<button id=\"btn\">添加动态图层</button>\n</body>\n</html>\n```\n运行结果:\n![11.png](11.png)\n#### 通过查询获得属性\n##### 代码实现\n定义一个按钮（用户获得属性）\n```\n<button id=\"attr\">用户弹出属性</button>\n```\n给相应的按钮绑定事件\n```\non(dom.byId(\"attr\"),\"click\",function(){\n                    //得到要素图层的主键属性\n                    var idProperty = layer2.objectIdField;\n                    //定义查询参数\n                    var query = new Query();\n                    //是否返回几何形状\n                    query.returnGeometry = false;\n                    //图层的主键名称（根据自己要求修改）\n                    query.objectIds = [247];\n                    //查询条件1=1意思是：只根据主键查询，忽略where子句\n                    query.where = \"1=1\";\n                    //进行查询\n                    layer2.selectFeatures(query, FeatureLayer.SELECTION_NEW,function(result){\n                        //因为我们根据主键查询，一定只有一个元素\n                        var graphic=result[0];\n                        //获得属性\n                        var attributes=graphic.attributes;\n                        //得到该属性信息转换成字符串\n                        var result=jsonUtil.stringify(attributes)\n                        //将结果弹出一下\n                        alert(result);\n                    });\n\n                })\n```\n##### 全部代码\n```\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <script type=\"text/javascript\">\n        require([\"esri/map\",\n            \"dojo/dom\",\n            \"dojo/on\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/layers/FeatureLayer\",\n            \"esri/layers/TableDataSource\",\n            \"esri/layers/LayerDataSource\",\n            \"esri/renderers/SimpleRenderer\",\n            \"esri/symbols/SimpleLineSymbol\",\"dojo/json\",\"esri/tasks/query\",\n            \"dojo/domReady!\"], function (\n                Map,dom,on, ArcGISDynamicMapServiceLayer, FeatureLayer, TableDataSource, LayerDataSource, SimpleRenderer,SimpleLineSymbol,jsonUtil,Query) {\n            var map = new Map(\"mapDiv\");\n            var layer1 = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services//Test/MyService/MapServer\");\n            map.addLayer(layer1);\n\n            on(dom.byId(\"btn\"),\"click\",function(e){\n                //定义一个数据源\n                var dataSource = new TableDataSource();\n                //此处为我们设置的命名空间\n                dataSource.workspaceId = \"my\";\n                //命名空间下面的shp\n                dataSource.dataSourceName = \"lunkuoxian.shp\";\n                //定义一个图层数据源\n                var layerSource = new LayerDataSource();\n                //给图层数据源赋值\n                layerSource.dataSource = dataSource;\n                //定义一个要素图层:注意链接为动态图层的地址\n                var layer2 = new FeatureLayer(\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/dynamicLayer\", {\n                    mode: FeatureLayer.MODE_ONDEMAND,\n                    outFields: [\"*\"],\n                    source: layerSource\n                });\n                //定义线符号\n                var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                //定义渲染器\n                var renderer = new esri.renderer.SimpleRenderer(lineSymbol);\n                //定义渲染器\n                layer2.setRenderer(renderer);\n                layer2.refresh();\n                map.addLayer(layer2);\n                on(dom.byId(\"attr\"),\"click\",function(){\n                    //得到要素图层的主键属性\n                    var idProperty = layer2.objectIdField;\n                    //定义查询参数\n                    var query = new Query();\n                    //是否返回几何形状\n                    query.returnGeometry = false;\n                    //图层的主键名称（根据自己要求修改）\n                    query.objectIds = [247];\n                    //查询条件1=1意思是：只根据主键查询，忽略where子句\n                    query.where = \"1=1\";\n                    //进行查询\n                    layer2.selectFeatures(query, FeatureLayer.SELECTION_NEW,function(result){\n                        //因为我们根据主键查询，一定只有一个元素\n                        var graphic=result[0];\n                        //获得属性\n                        var attributes=graphic.attributes;\n                        //得到该属性信息转换成字符串\n                        var result=jsonUtil.stringify(attributes)\n                        //将结果弹出一下\n                        alert(result);\n                    });\n\n                })\n\n            })\n            \n        });\n    </script>\n</head>\n\n<body>\n<div id=\"mapDiv\" style=\"height:600px;\"></div>\n<button id=\"btn\">添加动态图层</button>\n<button id=\"attr\">用户弹出属性</button>\n</body>\n</html>\n```\n### 补充\n#### 启用文件地理数据库三点不同\n文件的目录\n![12.png](12.png)\n命名空间配置\n![13.png](13.png)\n注册文件夹配置\n![14.png](14.png)\n代码调用差别\n![15.png](15.png)\n注意：忽略了要素集的存在，即调用是lunkuoxian，而不是vector.lunkuoxian，调用的时候后面没有*.shp","source":"_posts/ArcGIS-API-for-JS18.md","raw":"---\ntitle: ArcGIS API For Javascript之动态图层\ndate: 2019-08-06 16:42:34\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n动态图层主要特点：\n\n* 改变地图服务的现有图层\n* 动态图层适用于海量图层的情况\n* 不需要将shp文件发布为服务，服务器可以直接读取shp文件在前端显示\n\n### 调用动态图层\n在前面已经说过动态图层并不是一种新的服务类型，而是地图服务的一种扩展，因此我们不需要发布服务，只需要对地图服务添加动态图层功能即可。启用地图服务的步骤为：\n\n* 给相应的地图服务启用动态工作空间\n* 选择服务器相应的硬盘地址并赋予其id\n* 将相应位置注册到ArcGIS Server服务器（保证ArcGIS Server可以访问数据）\n* 在Web端进行调用\n\n#### 启用动态图层\n我们打开Manager->登录，找到该服务，点击功能，选择允许每次请求修改图层顺序和符号->添加\n![01.png](01.png)\n硬盘上的数据\n![02.png](02.png)\n注:D:\\myshp文件夹下面有一个shp文件：lunkuoxian.shp\n因此我们选择工作空间类型为：shpfile文件夹，工作空间id在此处取名为my，硬盘路径：D：\\myshp\n![03.png](03.png)\n点击确定，重新启动服务\n![04.png](04.png)\n![05.png](05.png)\n注册文件夹到服务器\n点击站点->数据存储->注册文件夹（因为我们是文件夹，所以是注册文件夹，如果是数据库，那么就要注册数据库）\n![06.png](06.png)\n![07.png](07.png)\n![08.png](08.png)\n在Services Directory 查看动态图层是否启用\n![09.png](09.png)\n#### Web端调用\n#### 代码实现\n首先我们加载地图\n```\nrequire([\"esri/map\",\n            \"dojo/dom\",\n            \"dojo/on\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/layers/FeatureLayer\",\n            \"esri/layers/TableDataSource\",\n            \"esri/layers/LayerDataSource\",\n            \"esri/renderers/SimpleRenderer\",\n            \"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"dojo/domReady!\"], function (\n                Map,dom,on, ArcGISDynamicMapServiceLayer, FeatureLayer, TableDataSource, LayerDataSource, SimpleRenderer, SimpleMarkerSymbol,SimpleLineSymbol) {\n            var map = new Map(\"mapDiv\");\n            var layer1 = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services//Test/MyService/MapServer\");\n            map.addLayer(layer1);\n });\n```\n添加一个按钮（用于添加动态图层）\n```\n<button id=\"btn\">添加动态图层</button>\n```\n给按钮添加事件\n```\non(dom.byId(\"btn\"),\"click\",function(e){\n                //定义一个数据源\n                var dataSource = new TableDataSource();\n                //此处为我们设置的命名空间\n                dataSource.workspaceId = \"my\";\n                //命名空间下面的shp\n                dataSource.dataSourceName = \"lunkuoxian.shp\";\n                //定义一个图层数据源\n                var layerSource = new LayerDataSource();\n                //给图层数据源赋值\n                layerSource.dataSource = dataSource;\n                //定义一个要素图层:注意链接为动态图层的地址\n                var layer2 = new FeatureLayer(\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/dynamicLayer\", {\n                    mode: FeatureLayer.MODE_ONDEMAND,\n                    outFields: [\"*\"],\n                    source: layerSource\n                });\n                //定义线符号\n                var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                //定义渲染器\n                var renderer = new esri.renderer.SimpleRenderer(lineSymbol);\n                //定义渲染器\n                layer2.setRenderer(renderer);\n                layer2.refresh();\n                map.addLayer(layer2);\n    })\n```\n##### 完整代码\n```\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <script type=\"text/javascript\">\n        require([\"esri/map\",\n            \"dojo/dom\",\n            \"dojo/on\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/layers/FeatureLayer\",\n            \"esri/layers/TableDataSource\",\n            \"esri/layers/LayerDataSource\",\n            \"esri/renderers/SimpleRenderer\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"dojo/domReady!\"], function (\n                Map,dom,on, ArcGISDynamicMapServiceLayer, FeatureLayer, TableDataSource, LayerDataSource, SimpleRenderer,SimpleLineSymbol) {\n            var map = new Map(\"mapDiv\");\n            var layer1 = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services//Test/MyService/MapServer\");\n            map.addLayer(layer1);\n\n            on(dom.byId(\"btn\"),\"click\",function(e){\n                //定义一个数据源\n                var dataSource = new TableDataSource();\n                //此处为我们设置的命名空间\n                dataSource.workspaceId = \"my\";\n                //命名空间下面的shp\n                dataSource.dataSourceName = \"lunkuoxian.shp\";\n                //定义一个图层数据源\n                var layerSource = new LayerDataSource();\n                //给图层数据源赋值\n                layerSource.dataSource = dataSource;\n                //定义一个要素图层:注意链接为动态图层的地址\n                var layer2 = new FeatureLayer(\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/dynamicLayer\", {\n                    mode: FeatureLayer.MODE_ONDEMAND,\n                    outFields: [\"*\"],\n                    source: layerSource\n                });\n                //定义线符号\n                var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                //定义渲染器\n                var renderer = new esri.renderer.SimpleRenderer(lineSymbol);\n                //定义渲染器\n                layer2.setRenderer(renderer);\n                layer2.refresh();\n                map.addLayer(layer2);\n            })\n            \n        });\n    </script>\n</head>\n\n<body>\n<div id=\"mapDiv\" style=\"height:600px;\"></div>\n<button id=\"btn\">添加动态图层</button>\n</body>\n</html>\n```\n运行结果之后：\n![10.png](10.png)\n### 动态图层的属性查询\n在真实需求中,我们不仅仅是将shp在地图中显示那么简单，我们往往要查询该图层的属性信息,我们在前面代码的基础上添加上属性查询。\n#### 方法1（通过click直接获取）\n##### 代码实现\n给要素图层添加点击事件\n```\nlayer2.on(\"click\", function(evt) {\n                    //得到点击的graphics\n                    var graphic=evt.graphic;\n                    //得到该属性信息\n                    var attributes=graphic.attributes;\n                    //得到该属性信息转换成字符串\n                    var result=jsonUtil.stringify(attributes)\n                    //将结果弹出一下\n                    alert(result);\n                    //获得要素图层的主键名称\n                    \n})\n```\n##### 全部代码\n```\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <script type=\"text/javascript\">\n        require([\"esri/map\",\n            \"dojo/dom\",\n            \"dojo/on\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/layers/FeatureLayer\",\n            \"esri/layers/TableDataSource\",\n            \"esri/layers/LayerDataSource\",\n            \"esri/renderers/SimpleRenderer\",\n            \"esri/symbols/SimpleLineSymbol\",\"dojo/json\",\n            \"dojo/domReady!\"], function (\n                Map,dom,on, ArcGISDynamicMapServiceLayer, FeatureLayer, TableDataSource, LayerDataSource, SimpleRenderer,SimpleLineSymbol,jsonUtil) {\n            var map = new Map(\"mapDiv\");\n            var layer1 = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services//Test/MyService/MapServer\");\n            map.addLayer(layer1);\n\n            on(dom.byId(\"btn\"),\"click\",function(e){\n                //定义一个数据源\n                var dataSource = new TableDataSource();\n                //此处为我们设置的命名空间\n                dataSource.workspaceId = \"my\";\n                //命名空间下面的shp\n                dataSource.dataSourceName = \"lunkuoxian.shp\";\n                //定义一个图层数据源\n                var layerSource = new LayerDataSource();\n                //给图层数据源赋值\n                layerSource.dataSource = dataSource;\n                //定义一个要素图层:注意链接为动态图层的地址\n                var layer2 = new FeatureLayer(\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/dynamicLayer\", {\n                    mode: FeatureLayer.MODE_ONDEMAND,\n                    outFields: [\"*\"],\n                    source: layerSource\n                });\n                //定义线符号\n                var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                //定义渲染器\n                var renderer = new esri.renderer.SimpleRenderer(lineSymbol);\n                //定义渲染器\n                layer2.setRenderer(renderer);\n                layer2.refresh();\n                map.addLayer(layer2);\n                layer2.on(\"click\", function(evt) {\n                    //得到点击的graphics\n                    var graphic=evt.graphic;\n                    //得到该属性信息\n                    var attributes=graphic.attributes;\n                    //得到该属性信息转换成字符串\n                    var result=jsonUtil.stringify(attributes)\n                    //将结果弹出一下\n                    alert(result);\n                    //获得要素图层的主键名称\n\n                })\n            })\n            \n        });\n    </script>\n</head>\n\n<body>\n<div id=\"mapDiv\" style=\"height:600px;\"></div>\n<button id=\"btn\">添加动态图层</button>\n</body>\n</html>\n```\n运行结果:\n![11.png](11.png)\n#### 通过查询获得属性\n##### 代码实现\n定义一个按钮（用户获得属性）\n```\n<button id=\"attr\">用户弹出属性</button>\n```\n给相应的按钮绑定事件\n```\non(dom.byId(\"attr\"),\"click\",function(){\n                    //得到要素图层的主键属性\n                    var idProperty = layer2.objectIdField;\n                    //定义查询参数\n                    var query = new Query();\n                    //是否返回几何形状\n                    query.returnGeometry = false;\n                    //图层的主键名称（根据自己要求修改）\n                    query.objectIds = [247];\n                    //查询条件1=1意思是：只根据主键查询，忽略where子句\n                    query.where = \"1=1\";\n                    //进行查询\n                    layer2.selectFeatures(query, FeatureLayer.SELECTION_NEW,function(result){\n                        //因为我们根据主键查询，一定只有一个元素\n                        var graphic=result[0];\n                        //获得属性\n                        var attributes=graphic.attributes;\n                        //得到该属性信息转换成字符串\n                        var result=jsonUtil.stringify(attributes)\n                        //将结果弹出一下\n                        alert(result);\n                    });\n\n                })\n```\n##### 全部代码\n```\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <script type=\"text/javascript\">\n        require([\"esri/map\",\n            \"dojo/dom\",\n            \"dojo/on\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/layers/FeatureLayer\",\n            \"esri/layers/TableDataSource\",\n            \"esri/layers/LayerDataSource\",\n            \"esri/renderers/SimpleRenderer\",\n            \"esri/symbols/SimpleLineSymbol\",\"dojo/json\",\"esri/tasks/query\",\n            \"dojo/domReady!\"], function (\n                Map,dom,on, ArcGISDynamicMapServiceLayer, FeatureLayer, TableDataSource, LayerDataSource, SimpleRenderer,SimpleLineSymbol,jsonUtil,Query) {\n            var map = new Map(\"mapDiv\");\n            var layer1 = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services//Test/MyService/MapServer\");\n            map.addLayer(layer1);\n\n            on(dom.byId(\"btn\"),\"click\",function(e){\n                //定义一个数据源\n                var dataSource = new TableDataSource();\n                //此处为我们设置的命名空间\n                dataSource.workspaceId = \"my\";\n                //命名空间下面的shp\n                dataSource.dataSourceName = \"lunkuoxian.shp\";\n                //定义一个图层数据源\n                var layerSource = new LayerDataSource();\n                //给图层数据源赋值\n                layerSource.dataSource = dataSource;\n                //定义一个要素图层:注意链接为动态图层的地址\n                var layer2 = new FeatureLayer(\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/dynamicLayer\", {\n                    mode: FeatureLayer.MODE_ONDEMAND,\n                    outFields: [\"*\"],\n                    source: layerSource\n                });\n                //定义线符号\n                var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n                //定义渲染器\n                var renderer = new esri.renderer.SimpleRenderer(lineSymbol);\n                //定义渲染器\n                layer2.setRenderer(renderer);\n                layer2.refresh();\n                map.addLayer(layer2);\n                on(dom.byId(\"attr\"),\"click\",function(){\n                    //得到要素图层的主键属性\n                    var idProperty = layer2.objectIdField;\n                    //定义查询参数\n                    var query = new Query();\n                    //是否返回几何形状\n                    query.returnGeometry = false;\n                    //图层的主键名称（根据自己要求修改）\n                    query.objectIds = [247];\n                    //查询条件1=1意思是：只根据主键查询，忽略where子句\n                    query.where = \"1=1\";\n                    //进行查询\n                    layer2.selectFeatures(query, FeatureLayer.SELECTION_NEW,function(result){\n                        //因为我们根据主键查询，一定只有一个元素\n                        var graphic=result[0];\n                        //获得属性\n                        var attributes=graphic.attributes;\n                        //得到该属性信息转换成字符串\n                        var result=jsonUtil.stringify(attributes)\n                        //将结果弹出一下\n                        alert(result);\n                    });\n\n                })\n\n            })\n            \n        });\n    </script>\n</head>\n\n<body>\n<div id=\"mapDiv\" style=\"height:600px;\"></div>\n<button id=\"btn\">添加动态图层</button>\n<button id=\"attr\">用户弹出属性</button>\n</body>\n</html>\n```\n### 补充\n#### 启用文件地理数据库三点不同\n文件的目录\n![12.png](12.png)\n命名空间配置\n![13.png](13.png)\n注册文件夹配置\n![14.png](14.png)\n代码调用差别\n![15.png](15.png)\n注意：忽略了要素集的存在，即调用是lunkuoxian，而不是vector.lunkuoxian，调用的时候后面没有*.shp","slug":"ArcGIS-API-for-JS18","published":1,"updated":"2019-08-06T09:07:24.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cu8001ht09zn4z91i0x","content":"<p>动态图层主要特点：</p>\n<ul>\n<li>改变地图服务的现有图层</li>\n<li>动态图层适用于海量图层的情况</li>\n<li>不需要将shp文件发布为服务，服务器可以直接读取shp文件在前端显示</li>\n</ul>\n<h3 id=\"调用动态图层\"><a href=\"#调用动态图层\" class=\"headerlink\" title=\"调用动态图层\"></a>调用动态图层</h3><p>在前面已经说过动态图层并不是一种新的服务类型，而是地图服务的一种扩展，因此我们不需要发布服务，只需要对地图服务添加动态图层功能即可。启用地图服务的步骤为：</p>\n<ul>\n<li>给相应的地图服务启用动态工作空间</li>\n<li>选择服务器相应的硬盘地址并赋予其id</li>\n<li>将相应位置注册到ArcGIS Server服务器（保证ArcGIS Server可以访问数据）</li>\n<li>在Web端进行调用</li>\n</ul>\n<h4 id=\"启用动态图层\"><a href=\"#启用动态图层\" class=\"headerlink\" title=\"启用动态图层\"></a>启用动态图层</h4><p>我们打开Manager-&gt;登录，找到该服务，点击功能，选择允许每次请求修改图层顺序和符号-&gt;添加<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/01.png\" alt=\"01.png\"><br>硬盘上的数据<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/02.png\" alt=\"02.png\"><br>注:D:\\myshp文件夹下面有一个shp文件：lunkuoxian.shp<br>因此我们选择工作空间类型为：shpfile文件夹，工作空间id在此处取名为my，硬盘路径：D：\\myshp<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/03.png\" alt=\"03.png\"><br>点击确定，重新启动服务<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/04.png\" alt=\"04.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/05.png\" alt=\"05.png\"><br>注册文件夹到服务器<br>点击站点-&gt;数据存储-&gt;注册文件夹（因为我们是文件夹，所以是注册文件夹，如果是数据库，那么就要注册数据库）<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/06.png\" alt=\"06.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/07.png\" alt=\"07.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/08.png\" alt=\"08.png\"><br>在Services Directory 查看动态图层是否启用<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/09.png\" alt=\"09.png\"></p>\n<h4 id=\"Web端调用\"><a href=\"#Web端调用\" class=\"headerlink\" title=\"Web端调用\"></a>Web端调用</h4><h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>首先我们加载地图<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/FeatureLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/TableDataSource&quot;,</span><br><span class=\"line\">            &quot;esri/layers/LayerDataSource&quot;,</span><br><span class=\"line\">            &quot;esri/renderers/SimpleRenderer&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;], function (</span><br><span class=\"line\">                Map,dom,on, ArcGISDynamicMapServiceLayer, FeatureLayer, TableDataSource, LayerDataSource, SimpleRenderer, SimpleMarkerSymbol,SimpleLineSymbol) &#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">            var layer1 = new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services//Test/MyService/MapServer&quot;);</span><br><span class=\"line\">            map.addLayer(layer1);</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>添加一个按钮（用于添加动态图层）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;添加动态图层&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>给按钮添加事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(dom.byId(&quot;btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                //定义一个数据源</span><br><span class=\"line\">                var dataSource = new TableDataSource();</span><br><span class=\"line\">                //此处为我们设置的命名空间</span><br><span class=\"line\">                dataSource.workspaceId = &quot;my&quot;;</span><br><span class=\"line\">                //命名空间下面的shp</span><br><span class=\"line\">                dataSource.dataSourceName = &quot;lunkuoxian.shp&quot;;</span><br><span class=\"line\">                //定义一个图层数据源</span><br><span class=\"line\">                var layerSource = new LayerDataSource();</span><br><span class=\"line\">                //给图层数据源赋值</span><br><span class=\"line\">                layerSource.dataSource = dataSource;</span><br><span class=\"line\">                //定义一个要素图层:注意链接为动态图层的地址</span><br><span class=\"line\">                var layer2 = new FeatureLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/dynamicLayer&quot;, &#123;</span><br><span class=\"line\">                    mode: FeatureLayer.MODE_ONDEMAND,</span><br><span class=\"line\">                    outFields: [&quot;*&quot;],</span><br><span class=\"line\">                    source: layerSource</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义渲染器</span><br><span class=\"line\">                var renderer = new esri.renderer.SimpleRenderer(lineSymbol);</span><br><span class=\"line\">                //定义渲染器</span><br><span class=\"line\">                layer2.setRenderer(renderer);</span><br><span class=\"line\">                layer2.refresh();</span><br><span class=\"line\">                map.addLayer(layer2);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head lang=&quot;en&quot;&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/FeatureLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/TableDataSource&quot;,</span><br><span class=\"line\">            &quot;esri/layers/LayerDataSource&quot;,</span><br><span class=\"line\">            &quot;esri/renderers/SimpleRenderer&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;], function (</span><br><span class=\"line\">                Map,dom,on, ArcGISDynamicMapServiceLayer, FeatureLayer, TableDataSource, LayerDataSource, SimpleRenderer,SimpleLineSymbol) &#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">            var layer1 = new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services//Test/MyService/MapServer&quot;);</span><br><span class=\"line\">            map.addLayer(layer1);</span><br><span class=\"line\"></span><br><span class=\"line\">            on(dom.byId(&quot;btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                //定义一个数据源</span><br><span class=\"line\">                var dataSource = new TableDataSource();</span><br><span class=\"line\">                //此处为我们设置的命名空间</span><br><span class=\"line\">                dataSource.workspaceId = &quot;my&quot;;</span><br><span class=\"line\">                //命名空间下面的shp</span><br><span class=\"line\">                dataSource.dataSourceName = &quot;lunkuoxian.shp&quot;;</span><br><span class=\"line\">                //定义一个图层数据源</span><br><span class=\"line\">                var layerSource = new LayerDataSource();</span><br><span class=\"line\">                //给图层数据源赋值</span><br><span class=\"line\">                layerSource.dataSource = dataSource;</span><br><span class=\"line\">                //定义一个要素图层:注意链接为动态图层的地址</span><br><span class=\"line\">                var layer2 = new FeatureLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/dynamicLayer&quot;, &#123;</span><br><span class=\"line\">                    mode: FeatureLayer.MODE_ONDEMAND,</span><br><span class=\"line\">                    outFields: [&quot;*&quot;],</span><br><span class=\"line\">                    source: layerSource</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义渲染器</span><br><span class=\"line\">                var renderer = new esri.renderer.SimpleRenderer(lineSymbol);</span><br><span class=\"line\">                //定义渲染器</span><br><span class=\"line\">                layer2.setRenderer(renderer);</span><br><span class=\"line\">                layer2.refresh();</span><br><span class=\"line\">                map.addLayer(layer2);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;mapDiv&quot; style=&quot;height:600px;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;添加动态图层&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>运行结果之后：<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/10.png\" alt=\"10.png\"></p>\n<h3 id=\"动态图层的属性查询\"><a href=\"#动态图层的属性查询\" class=\"headerlink\" title=\"动态图层的属性查询\"></a>动态图层的属性查询</h3><p>在真实需求中,我们不仅仅是将shp在地图中显示那么简单，我们往往要查询该图层的属性信息,我们在前面代码的基础上添加上属性查询。</p>\n<h4 id=\"方法1（通过click直接获取）\"><a href=\"#方法1（通过click直接获取）\" class=\"headerlink\" title=\"方法1（通过click直接获取）\"></a>方法1（通过click直接获取）</h4><h5 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><p>给要素图层添加点击事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layer2.on(&quot;click&quot;, function(evt) &#123;</span><br><span class=\"line\">                    //得到点击的graphics</span><br><span class=\"line\">                    var graphic=evt.graphic;</span><br><span class=\"line\">                    //得到该属性信息</span><br><span class=\"line\">                    var attributes=graphic.attributes;</span><br><span class=\"line\">                    //得到该属性信息转换成字符串</span><br><span class=\"line\">                    var result=jsonUtil.stringify(attributes)</span><br><span class=\"line\">                    //将结果弹出一下</span><br><span class=\"line\">                    alert(result);</span><br><span class=\"line\">                    //获得要素图层的主键名称</span><br><span class=\"line\">                    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head lang=&quot;en&quot;&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/FeatureLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/TableDataSource&quot;,</span><br><span class=\"line\">            &quot;esri/layers/LayerDataSource&quot;,</span><br><span class=\"line\">            &quot;esri/renderers/SimpleRenderer&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,&quot;dojo/json&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;], function (</span><br><span class=\"line\">                Map,dom,on, ArcGISDynamicMapServiceLayer, FeatureLayer, TableDataSource, LayerDataSource, SimpleRenderer,SimpleLineSymbol,jsonUtil) &#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">            var layer1 = new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services//Test/MyService/MapServer&quot;);</span><br><span class=\"line\">            map.addLayer(layer1);</span><br><span class=\"line\"></span><br><span class=\"line\">            on(dom.byId(&quot;btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                //定义一个数据源</span><br><span class=\"line\">                var dataSource = new TableDataSource();</span><br><span class=\"line\">                //此处为我们设置的命名空间</span><br><span class=\"line\">                dataSource.workspaceId = &quot;my&quot;;</span><br><span class=\"line\">                //命名空间下面的shp</span><br><span class=\"line\">                dataSource.dataSourceName = &quot;lunkuoxian.shp&quot;;</span><br><span class=\"line\">                //定义一个图层数据源</span><br><span class=\"line\">                var layerSource = new LayerDataSource();</span><br><span class=\"line\">                //给图层数据源赋值</span><br><span class=\"line\">                layerSource.dataSource = dataSource;</span><br><span class=\"line\">                //定义一个要素图层:注意链接为动态图层的地址</span><br><span class=\"line\">                var layer2 = new FeatureLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/dynamicLayer&quot;, &#123;</span><br><span class=\"line\">                    mode: FeatureLayer.MODE_ONDEMAND,</span><br><span class=\"line\">                    outFields: [&quot;*&quot;],</span><br><span class=\"line\">                    source: layerSource</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义渲染器</span><br><span class=\"line\">                var renderer = new esri.renderer.SimpleRenderer(lineSymbol);</span><br><span class=\"line\">                //定义渲染器</span><br><span class=\"line\">                layer2.setRenderer(renderer);</span><br><span class=\"line\">                layer2.refresh();</span><br><span class=\"line\">                map.addLayer(layer2);</span><br><span class=\"line\">                layer2.on(&quot;click&quot;, function(evt) &#123;</span><br><span class=\"line\">                    //得到点击的graphics</span><br><span class=\"line\">                    var graphic=evt.graphic;</span><br><span class=\"line\">                    //得到该属性信息</span><br><span class=\"line\">                    var attributes=graphic.attributes;</span><br><span class=\"line\">                    //得到该属性信息转换成字符串</span><br><span class=\"line\">                    var result=jsonUtil.stringify(attributes)</span><br><span class=\"line\">                    //将结果弹出一下</span><br><span class=\"line\">                    alert(result);</span><br><span class=\"line\">                    //获得要素图层的主键名称</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;mapDiv&quot; style=&quot;height:600px;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;添加动态图层&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>运行结果:<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/11.png\" alt=\"11.png\"></p>\n<h4 id=\"通过查询获得属性\"><a href=\"#通过查询获得属性\" class=\"headerlink\" title=\"通过查询获得属性\"></a>通过查询获得属性</h4><h5 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><p>定义一个按钮（用户获得属性）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=&quot;attr&quot;&gt;用户弹出属性&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>给相应的按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(dom.byId(&quot;attr&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //得到要素图层的主键属性</span><br><span class=\"line\">                    var idProperty = layer2.objectIdField;</span><br><span class=\"line\">                    //定义查询参数</span><br><span class=\"line\">                    var query = new Query();</span><br><span class=\"line\">                    //是否返回几何形状</span><br><span class=\"line\">                    query.returnGeometry = false;</span><br><span class=\"line\">                    //图层的主键名称（根据自己要求修改）</span><br><span class=\"line\">                    query.objectIds = [247];</span><br><span class=\"line\">                    //查询条件1=1意思是：只根据主键查询，忽略where子句</span><br><span class=\"line\">                    query.where = &quot;1=1&quot;;</span><br><span class=\"line\">                    //进行查询</span><br><span class=\"line\">                    layer2.selectFeatures(query, FeatureLayer.SELECTION_NEW,function(result)&#123;</span><br><span class=\"line\">                        //因为我们根据主键查询，一定只有一个元素</span><br><span class=\"line\">                        var graphic=result[0];</span><br><span class=\"line\">                        //获得属性</span><br><span class=\"line\">                        var attributes=graphic.attributes;</span><br><span class=\"line\">                        //得到该属性信息转换成字符串</span><br><span class=\"line\">                        var result=jsonUtil.stringify(attributes)</span><br><span class=\"line\">                        //将结果弹出一下</span><br><span class=\"line\">                        alert(result);</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"全部代码-1\"><a href=\"#全部代码-1\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head lang=&quot;en&quot;&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/FeatureLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/TableDataSource&quot;,</span><br><span class=\"line\">            &quot;esri/layers/LayerDataSource&quot;,</span><br><span class=\"line\">            &quot;esri/renderers/SimpleRenderer&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,&quot;dojo/json&quot;,&quot;esri/tasks/query&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;], function (</span><br><span class=\"line\">                Map,dom,on, ArcGISDynamicMapServiceLayer, FeatureLayer, TableDataSource, LayerDataSource, SimpleRenderer,SimpleLineSymbol,jsonUtil,Query) &#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">            var layer1 = new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services//Test/MyService/MapServer&quot;);</span><br><span class=\"line\">            map.addLayer(layer1);</span><br><span class=\"line\"></span><br><span class=\"line\">            on(dom.byId(&quot;btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                //定义一个数据源</span><br><span class=\"line\">                var dataSource = new TableDataSource();</span><br><span class=\"line\">                //此处为我们设置的命名空间</span><br><span class=\"line\">                dataSource.workspaceId = &quot;my&quot;;</span><br><span class=\"line\">                //命名空间下面的shp</span><br><span class=\"line\">                dataSource.dataSourceName = &quot;lunkuoxian.shp&quot;;</span><br><span class=\"line\">                //定义一个图层数据源</span><br><span class=\"line\">                var layerSource = new LayerDataSource();</span><br><span class=\"line\">                //给图层数据源赋值</span><br><span class=\"line\">                layerSource.dataSource = dataSource;</span><br><span class=\"line\">                //定义一个要素图层:注意链接为动态图层的地址</span><br><span class=\"line\">                var layer2 = new FeatureLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/dynamicLayer&quot;, &#123;</span><br><span class=\"line\">                    mode: FeatureLayer.MODE_ONDEMAND,</span><br><span class=\"line\">                    outFields: [&quot;*&quot;],</span><br><span class=\"line\">                    source: layerSource</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义渲染器</span><br><span class=\"line\">                var renderer = new esri.renderer.SimpleRenderer(lineSymbol);</span><br><span class=\"line\">                //定义渲染器</span><br><span class=\"line\">                layer2.setRenderer(renderer);</span><br><span class=\"line\">                layer2.refresh();</span><br><span class=\"line\">                map.addLayer(layer2);</span><br><span class=\"line\">                on(dom.byId(&quot;attr&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //得到要素图层的主键属性</span><br><span class=\"line\">                    var idProperty = layer2.objectIdField;</span><br><span class=\"line\">                    //定义查询参数</span><br><span class=\"line\">                    var query = new Query();</span><br><span class=\"line\">                    //是否返回几何形状</span><br><span class=\"line\">                    query.returnGeometry = false;</span><br><span class=\"line\">                    //图层的主键名称（根据自己要求修改）</span><br><span class=\"line\">                    query.objectIds = [247];</span><br><span class=\"line\">                    //查询条件1=1意思是：只根据主键查询，忽略where子句</span><br><span class=\"line\">                    query.where = &quot;1=1&quot;;</span><br><span class=\"line\">                    //进行查询</span><br><span class=\"line\">                    layer2.selectFeatures(query, FeatureLayer.SELECTION_NEW,function(result)&#123;</span><br><span class=\"line\">                        //因为我们根据主键查询，一定只有一个元素</span><br><span class=\"line\">                        var graphic=result[0];</span><br><span class=\"line\">                        //获得属性</span><br><span class=\"line\">                        var attributes=graphic.attributes;</span><br><span class=\"line\">                        //得到该属性信息转换成字符串</span><br><span class=\"line\">                        var result=jsonUtil.stringify(attributes)</span><br><span class=\"line\">                        //将结果弹出一下</span><br><span class=\"line\">                        alert(result);</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;mapDiv&quot; style=&quot;height:600px;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;添加动态图层&lt;/button&gt;</span><br><span class=\"line\">&lt;button id=&quot;attr&quot;&gt;用户弹出属性&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><h4 id=\"启用文件地理数据库三点不同\"><a href=\"#启用文件地理数据库三点不同\" class=\"headerlink\" title=\"启用文件地理数据库三点不同\"></a>启用文件地理数据库三点不同</h4><p>文件的目录<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/12.png\" alt=\"12.png\"><br>命名空间配置<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/13.png\" alt=\"13.png\"><br>注册文件夹配置<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/14.png\" alt=\"14.png\"><br>代码调用差别<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/15.png\" alt=\"15.png\"><br>注意：忽略了要素集的存在，即调用是lunkuoxian，而不是vector.lunkuoxian，调用的时候后面没有*.shp</p>\n","site":{"data":{}},"excerpt":"","more":"<p>动态图层主要特点：</p>\n<ul>\n<li>改变地图服务的现有图层</li>\n<li>动态图层适用于海量图层的情况</li>\n<li>不需要将shp文件发布为服务，服务器可以直接读取shp文件在前端显示</li>\n</ul>\n<h3 id=\"调用动态图层\"><a href=\"#调用动态图层\" class=\"headerlink\" title=\"调用动态图层\"></a>调用动态图层</h3><p>在前面已经说过动态图层并不是一种新的服务类型，而是地图服务的一种扩展，因此我们不需要发布服务，只需要对地图服务添加动态图层功能即可。启用地图服务的步骤为：</p>\n<ul>\n<li>给相应的地图服务启用动态工作空间</li>\n<li>选择服务器相应的硬盘地址并赋予其id</li>\n<li>将相应位置注册到ArcGIS Server服务器（保证ArcGIS Server可以访问数据）</li>\n<li>在Web端进行调用</li>\n</ul>\n<h4 id=\"启用动态图层\"><a href=\"#启用动态图层\" class=\"headerlink\" title=\"启用动态图层\"></a>启用动态图层</h4><p>我们打开Manager-&gt;登录，找到该服务，点击功能，选择允许每次请求修改图层顺序和符号-&gt;添加<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/01.png\" alt=\"01.png\"><br>硬盘上的数据<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/02.png\" alt=\"02.png\"><br>注:D:\\myshp文件夹下面有一个shp文件：lunkuoxian.shp<br>因此我们选择工作空间类型为：shpfile文件夹，工作空间id在此处取名为my，硬盘路径：D：\\myshp<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/03.png\" alt=\"03.png\"><br>点击确定，重新启动服务<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/04.png\" alt=\"04.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/05.png\" alt=\"05.png\"><br>注册文件夹到服务器<br>点击站点-&gt;数据存储-&gt;注册文件夹（因为我们是文件夹，所以是注册文件夹，如果是数据库，那么就要注册数据库）<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/06.png\" alt=\"06.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/07.png\" alt=\"07.png\"><br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/08.png\" alt=\"08.png\"><br>在Services Directory 查看动态图层是否启用<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/09.png\" alt=\"09.png\"></p>\n<h4 id=\"Web端调用\"><a href=\"#Web端调用\" class=\"headerlink\" title=\"Web端调用\"></a>Web端调用</h4><h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>首先我们加载地图<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/FeatureLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/TableDataSource&quot;,</span><br><span class=\"line\">            &quot;esri/layers/LayerDataSource&quot;,</span><br><span class=\"line\">            &quot;esri/renderers/SimpleRenderer&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;], function (</span><br><span class=\"line\">                Map,dom,on, ArcGISDynamicMapServiceLayer, FeatureLayer, TableDataSource, LayerDataSource, SimpleRenderer, SimpleMarkerSymbol,SimpleLineSymbol) &#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">            var layer1 = new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services//Test/MyService/MapServer&quot;);</span><br><span class=\"line\">            map.addLayer(layer1);</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>添加一个按钮（用于添加动态图层）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;添加动态图层&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>给按钮添加事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(dom.byId(&quot;btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                //定义一个数据源</span><br><span class=\"line\">                var dataSource = new TableDataSource();</span><br><span class=\"line\">                //此处为我们设置的命名空间</span><br><span class=\"line\">                dataSource.workspaceId = &quot;my&quot;;</span><br><span class=\"line\">                //命名空间下面的shp</span><br><span class=\"line\">                dataSource.dataSourceName = &quot;lunkuoxian.shp&quot;;</span><br><span class=\"line\">                //定义一个图层数据源</span><br><span class=\"line\">                var layerSource = new LayerDataSource();</span><br><span class=\"line\">                //给图层数据源赋值</span><br><span class=\"line\">                layerSource.dataSource = dataSource;</span><br><span class=\"line\">                //定义一个要素图层:注意链接为动态图层的地址</span><br><span class=\"line\">                var layer2 = new FeatureLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/dynamicLayer&quot;, &#123;</span><br><span class=\"line\">                    mode: FeatureLayer.MODE_ONDEMAND,</span><br><span class=\"line\">                    outFields: [&quot;*&quot;],</span><br><span class=\"line\">                    source: layerSource</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义渲染器</span><br><span class=\"line\">                var renderer = new esri.renderer.SimpleRenderer(lineSymbol);</span><br><span class=\"line\">                //定义渲染器</span><br><span class=\"line\">                layer2.setRenderer(renderer);</span><br><span class=\"line\">                layer2.refresh();</span><br><span class=\"line\">                map.addLayer(layer2);</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head lang=&quot;en&quot;&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/FeatureLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/TableDataSource&quot;,</span><br><span class=\"line\">            &quot;esri/layers/LayerDataSource&quot;,</span><br><span class=\"line\">            &quot;esri/renderers/SimpleRenderer&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;], function (</span><br><span class=\"line\">                Map,dom,on, ArcGISDynamicMapServiceLayer, FeatureLayer, TableDataSource, LayerDataSource, SimpleRenderer,SimpleLineSymbol) &#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">            var layer1 = new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services//Test/MyService/MapServer&quot;);</span><br><span class=\"line\">            map.addLayer(layer1);</span><br><span class=\"line\"></span><br><span class=\"line\">            on(dom.byId(&quot;btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                //定义一个数据源</span><br><span class=\"line\">                var dataSource = new TableDataSource();</span><br><span class=\"line\">                //此处为我们设置的命名空间</span><br><span class=\"line\">                dataSource.workspaceId = &quot;my&quot;;</span><br><span class=\"line\">                //命名空间下面的shp</span><br><span class=\"line\">                dataSource.dataSourceName = &quot;lunkuoxian.shp&quot;;</span><br><span class=\"line\">                //定义一个图层数据源</span><br><span class=\"line\">                var layerSource = new LayerDataSource();</span><br><span class=\"line\">                //给图层数据源赋值</span><br><span class=\"line\">                layerSource.dataSource = dataSource;</span><br><span class=\"line\">                //定义一个要素图层:注意链接为动态图层的地址</span><br><span class=\"line\">                var layer2 = new FeatureLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/dynamicLayer&quot;, &#123;</span><br><span class=\"line\">                    mode: FeatureLayer.MODE_ONDEMAND,</span><br><span class=\"line\">                    outFields: [&quot;*&quot;],</span><br><span class=\"line\">                    source: layerSource</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义渲染器</span><br><span class=\"line\">                var renderer = new esri.renderer.SimpleRenderer(lineSymbol);</span><br><span class=\"line\">                //定义渲染器</span><br><span class=\"line\">                layer2.setRenderer(renderer);</span><br><span class=\"line\">                layer2.refresh();</span><br><span class=\"line\">                map.addLayer(layer2);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;mapDiv&quot; style=&quot;height:600px;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;添加动态图层&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>运行结果之后：<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/10.png\" alt=\"10.png\"></p>\n<h3 id=\"动态图层的属性查询\"><a href=\"#动态图层的属性查询\" class=\"headerlink\" title=\"动态图层的属性查询\"></a>动态图层的属性查询</h3><p>在真实需求中,我们不仅仅是将shp在地图中显示那么简单，我们往往要查询该图层的属性信息,我们在前面代码的基础上添加上属性查询。</p>\n<h4 id=\"方法1（通过click直接获取）\"><a href=\"#方法1（通过click直接获取）\" class=\"headerlink\" title=\"方法1（通过click直接获取）\"></a>方法1（通过click直接获取）</h4><h5 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><p>给要素图层添加点击事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layer2.on(&quot;click&quot;, function(evt) &#123;</span><br><span class=\"line\">                    //得到点击的graphics</span><br><span class=\"line\">                    var graphic=evt.graphic;</span><br><span class=\"line\">                    //得到该属性信息</span><br><span class=\"line\">                    var attributes=graphic.attributes;</span><br><span class=\"line\">                    //得到该属性信息转换成字符串</span><br><span class=\"line\">                    var result=jsonUtil.stringify(attributes)</span><br><span class=\"line\">                    //将结果弹出一下</span><br><span class=\"line\">                    alert(result);</span><br><span class=\"line\">                    //获得要素图层的主键名称</span><br><span class=\"line\">                    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head lang=&quot;en&quot;&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/FeatureLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/TableDataSource&quot;,</span><br><span class=\"line\">            &quot;esri/layers/LayerDataSource&quot;,</span><br><span class=\"line\">            &quot;esri/renderers/SimpleRenderer&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,&quot;dojo/json&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;], function (</span><br><span class=\"line\">                Map,dom,on, ArcGISDynamicMapServiceLayer, FeatureLayer, TableDataSource, LayerDataSource, SimpleRenderer,SimpleLineSymbol,jsonUtil) &#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">            var layer1 = new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services//Test/MyService/MapServer&quot;);</span><br><span class=\"line\">            map.addLayer(layer1);</span><br><span class=\"line\"></span><br><span class=\"line\">            on(dom.byId(&quot;btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                //定义一个数据源</span><br><span class=\"line\">                var dataSource = new TableDataSource();</span><br><span class=\"line\">                //此处为我们设置的命名空间</span><br><span class=\"line\">                dataSource.workspaceId = &quot;my&quot;;</span><br><span class=\"line\">                //命名空间下面的shp</span><br><span class=\"line\">                dataSource.dataSourceName = &quot;lunkuoxian.shp&quot;;</span><br><span class=\"line\">                //定义一个图层数据源</span><br><span class=\"line\">                var layerSource = new LayerDataSource();</span><br><span class=\"line\">                //给图层数据源赋值</span><br><span class=\"line\">                layerSource.dataSource = dataSource;</span><br><span class=\"line\">                //定义一个要素图层:注意链接为动态图层的地址</span><br><span class=\"line\">                var layer2 = new FeatureLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/dynamicLayer&quot;, &#123;</span><br><span class=\"line\">                    mode: FeatureLayer.MODE_ONDEMAND,</span><br><span class=\"line\">                    outFields: [&quot;*&quot;],</span><br><span class=\"line\">                    source: layerSource</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义渲染器</span><br><span class=\"line\">                var renderer = new esri.renderer.SimpleRenderer(lineSymbol);</span><br><span class=\"line\">                //定义渲染器</span><br><span class=\"line\">                layer2.setRenderer(renderer);</span><br><span class=\"line\">                layer2.refresh();</span><br><span class=\"line\">                map.addLayer(layer2);</span><br><span class=\"line\">                layer2.on(&quot;click&quot;, function(evt) &#123;</span><br><span class=\"line\">                    //得到点击的graphics</span><br><span class=\"line\">                    var graphic=evt.graphic;</span><br><span class=\"line\">                    //得到该属性信息</span><br><span class=\"line\">                    var attributes=graphic.attributes;</span><br><span class=\"line\">                    //得到该属性信息转换成字符串</span><br><span class=\"line\">                    var result=jsonUtil.stringify(attributes)</span><br><span class=\"line\">                    //将结果弹出一下</span><br><span class=\"line\">                    alert(result);</span><br><span class=\"line\">                    //获得要素图层的主键名称</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;mapDiv&quot; style=&quot;height:600px;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;添加动态图层&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>运行结果:<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/11.png\" alt=\"11.png\"></p>\n<h4 id=\"通过查询获得属性\"><a href=\"#通过查询获得属性\" class=\"headerlink\" title=\"通过查询获得属性\"></a>通过查询获得属性</h4><h5 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><p>定义一个按钮（用户获得属性）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=&quot;attr&quot;&gt;用户弹出属性&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>给相应的按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(dom.byId(&quot;attr&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //得到要素图层的主键属性</span><br><span class=\"line\">                    var idProperty = layer2.objectIdField;</span><br><span class=\"line\">                    //定义查询参数</span><br><span class=\"line\">                    var query = new Query();</span><br><span class=\"line\">                    //是否返回几何形状</span><br><span class=\"line\">                    query.returnGeometry = false;</span><br><span class=\"line\">                    //图层的主键名称（根据自己要求修改）</span><br><span class=\"line\">                    query.objectIds = [247];</span><br><span class=\"line\">                    //查询条件1=1意思是：只根据主键查询，忽略where子句</span><br><span class=\"line\">                    query.where = &quot;1=1&quot;;</span><br><span class=\"line\">                    //进行查询</span><br><span class=\"line\">                    layer2.selectFeatures(query, FeatureLayer.SELECTION_NEW,function(result)&#123;</span><br><span class=\"line\">                        //因为我们根据主键查询，一定只有一个元素</span><br><span class=\"line\">                        var graphic=result[0];</span><br><span class=\"line\">                        //获得属性</span><br><span class=\"line\">                        var attributes=graphic.attributes;</span><br><span class=\"line\">                        //得到该属性信息转换成字符串</span><br><span class=\"line\">                        var result=jsonUtil.stringify(attributes)</span><br><span class=\"line\">                        //将结果弹出一下</span><br><span class=\"line\">                        alert(result);</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"全部代码-1\"><a href=\"#全部代码-1\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head lang=&quot;en&quot;&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/FeatureLayer&quot;,</span><br><span class=\"line\">            &quot;esri/layers/TableDataSource&quot;,</span><br><span class=\"line\">            &quot;esri/layers/LayerDataSource&quot;,</span><br><span class=\"line\">            &quot;esri/renderers/SimpleRenderer&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,&quot;dojo/json&quot;,&quot;esri/tasks/query&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;], function (</span><br><span class=\"line\">                Map,dom,on, ArcGISDynamicMapServiceLayer, FeatureLayer, TableDataSource, LayerDataSource, SimpleRenderer,SimpleLineSymbol,jsonUtil,Query) &#123;</span><br><span class=\"line\">            var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">            var layer1 = new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services//Test/MyService/MapServer&quot;);</span><br><span class=\"line\">            map.addLayer(layer1);</span><br><span class=\"line\"></span><br><span class=\"line\">            on(dom.byId(&quot;btn&quot;),&quot;click&quot;,function(e)&#123;</span><br><span class=\"line\">                //定义一个数据源</span><br><span class=\"line\">                var dataSource = new TableDataSource();</span><br><span class=\"line\">                //此处为我们设置的命名空间</span><br><span class=\"line\">                dataSource.workspaceId = &quot;my&quot;;</span><br><span class=\"line\">                //命名空间下面的shp</span><br><span class=\"line\">                dataSource.dataSourceName = &quot;lunkuoxian.shp&quot;;</span><br><span class=\"line\">                //定义一个图层数据源</span><br><span class=\"line\">                var layerSource = new LayerDataSource();</span><br><span class=\"line\">                //给图层数据源赋值</span><br><span class=\"line\">                layerSource.dataSource = dataSource;</span><br><span class=\"line\">                //定义一个要素图层:注意链接为动态图层的地址</span><br><span class=\"line\">                var layer2 = new FeatureLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer/dynamicLayer&quot;, &#123;</span><br><span class=\"line\">                    mode: FeatureLayer.MODE_ONDEMAND,</span><br><span class=\"line\">                    outFields: [&quot;*&quot;],</span><br><span class=\"line\">                    source: layerSource</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                //定义线符号</span><br><span class=\"line\">                var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //定义渲染器</span><br><span class=\"line\">                var renderer = new esri.renderer.SimpleRenderer(lineSymbol);</span><br><span class=\"line\">                //定义渲染器</span><br><span class=\"line\">                layer2.setRenderer(renderer);</span><br><span class=\"line\">                layer2.refresh();</span><br><span class=\"line\">                map.addLayer(layer2);</span><br><span class=\"line\">                on(dom.byId(&quot;attr&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //得到要素图层的主键属性</span><br><span class=\"line\">                    var idProperty = layer2.objectIdField;</span><br><span class=\"line\">                    //定义查询参数</span><br><span class=\"line\">                    var query = new Query();</span><br><span class=\"line\">                    //是否返回几何形状</span><br><span class=\"line\">                    query.returnGeometry = false;</span><br><span class=\"line\">                    //图层的主键名称（根据自己要求修改）</span><br><span class=\"line\">                    query.objectIds = [247];</span><br><span class=\"line\">                    //查询条件1=1意思是：只根据主键查询，忽略where子句</span><br><span class=\"line\">                    query.where = &quot;1=1&quot;;</span><br><span class=\"line\">                    //进行查询</span><br><span class=\"line\">                    layer2.selectFeatures(query, FeatureLayer.SELECTION_NEW,function(result)&#123;</span><br><span class=\"line\">                        //因为我们根据主键查询，一定只有一个元素</span><br><span class=\"line\">                        var graphic=result[0];</span><br><span class=\"line\">                        //获得属性</span><br><span class=\"line\">                        var attributes=graphic.attributes;</span><br><span class=\"line\">                        //得到该属性信息转换成字符串</span><br><span class=\"line\">                        var result=jsonUtil.stringify(attributes)</span><br><span class=\"line\">                        //将结果弹出一下</span><br><span class=\"line\">                        alert(result);</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;mapDiv&quot; style=&quot;height:600px;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;添加动态图层&lt;/button&gt;</span><br><span class=\"line\">&lt;button id=&quot;attr&quot;&gt;用户弹出属性&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><h4 id=\"启用文件地理数据库三点不同\"><a href=\"#启用文件地理数据库三点不同\" class=\"headerlink\" title=\"启用文件地理数据库三点不同\"></a>启用文件地理数据库三点不同</h4><p>文件的目录<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/12.png\" alt=\"12.png\"><br>命名空间配置<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/13.png\" alt=\"13.png\"><br>注册文件夹配置<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/14.png\" alt=\"14.png\"><br>代码调用差别<br><img src=\"/2019/08/06/ArcGIS-API-for-JS18/15.png\" alt=\"15.png\"><br>注意：忽略了要素集的存在，即调用是lunkuoxian，而不是vector.lunkuoxian，调用的时候后面没有*.shp</p>\n"},{"title":"ArcGIS API For Javascript之编辑服务器端图层","date":"2019-08-06T09:19:00.000Z","_content":"在现实需求中，我们不仅仅需要编辑客户端图层，也有可能去编辑服务器端图层，要想编辑服务器端的图层，必须要将地图发布为：要素服务\n### 需求（服务器端图层编辑）\n关于服务器端图层的操作,基本就是增删改查操作，要素服务的查询前面已经介绍过，在此篇博客中主要记录一下关于要素服务的增删改操作,在ArcGIS API for JS中给我们提供了三个类用于要素的增Add,删Delete,改Update,接下来就用这三个类来实现我们的功能。\n\n* 我们操作的是要素服务的sushelou图层\n* 我们的服务：\n\n![01.png](01.png)\n注意：宿舍楼图层编号为1\n\n图层的属性信息\n![02.png](02.png)\n\n### 实现\n首先在页面添加三个按钮(用于实现用户的增删改操作)\n<button class=\"btn\">添加要素</button>\n<button class=\"btn\">删除要素</button>\n<button class=\"btn\">修改要素</button>\n<button class=\"btn\">查询要素</button>\n添加地图（省略）\n创建通用的对象，例如Draw\n```\n//用于操作的要素图层，注意我们是操作的宿舍楼图层\nvar featureLayer = new FeatureLayer(\"http://localhost:6080/arcgis/rest/services/Test/ft/FeatureServer/1\",\n                    {\n                            mode:FeatureLayer.MODE_SNAPSHOT,\n                            outFields: [\"*\"]\n                    });\n                    //在添加要素时，利用Draw工具获得geometry对象\n                    var d = new Draw(map, { showTooltips: true });\n                    //要操作的graphic\n                    var g;\n```\n给相应的按钮添加绑定事件\n```\nquery(\"button\").on(\"click\",function(event){\n                        //获得按钮的文本\n                        var value=this.innerHTML; \n                        //根据文本绑定不同的事件\n                        switch(value){\n                            case \"添加要素\":\n                                d.activate(Draw.POLYGON);\n                                break;\n                            case \"删除要素\":\n                                //创建Graphic对象，删除OBJECTID为34的元素，\n                                //因为OBJECTID是主键，所以只需要指定主键即可\n                                g=new Graphic(\"\",\"\",{\n                                    \"OBJECTID\":34\n                                });\n                                //创建删除对象\n                                var de=new Delete({\n                                    \"featureLayer\":featureLayer,\n                                    \"deletedGraphics\":[g]\n                                });\n                                //执行删除结果\n                                de.performRedo();\n                                //刷新图层\n                                layer.refresh();\n                                break;\n                            case \"修改要素\":\n                                //用于修改要素的函数,查询更新为36的要素\n                                updateFeature(36);\n                                break;                          \n                            case \"查询要素\":\n                                //用于查询要素的函数，查询主键为36的要素\n                                searchFeather(36);\n                                break;\n                        }\n                    });\n```\n如果是添加操作（利用draw添加geometry属性）\n```\n//当画图完毕时，添加要素\n                    on(d, \"draw-complete\", function (result) {\n                        //要素只赋予了geometry，属性信息为空\n                        var graphic = new Graphic(result.geometry, null,{});\n                        var add=new Add({\n                            \"featureLayer\":featureLayer,//给哪一个要素图层添加要素\n                            \"addedGraphics\":[graphic]//用于添加的要素\n                        })\n                        //执行添加函数\n                        add.performRedo();\n                        //刷新视图\n                        layer.refresh();\n                        //关闭绘图对象\n                        d.deactivate();\n                    });\n```\n如果是查询操作\n```\n//根据id查询要素\n            function searchFeather(id,callback){\n                        //得到要素图层的主键属性\n                        var idProperty = featureLayer.objectIdField;\n                        //定义查询参数\n                        var query = new Query();\n                        //是否返回几何形状\n                        query.returnGeometry = false;\n                        //图层的主键名称（根据自己要求修改）\n                        query.objectIds = [id];\n                        //查询条件1=1意思是：只根据主键查询，忽略where子句\n                        query.where = \"1=1\";\n                        //进行查询\n                        featureLayer.selectFeatures(query, FeatureLayer.SELECTION_NEW,function(result){\n                            //如果callback不存在，说明仅仅是查询操作\n                            if(!callback){\n                                //因为我们根据主键查询，一定只有一个元素\n                                var graphic=result[0];\n                                //获得属性\n                                var attributes=graphic.attributes;\n                                //得到该属性信息转换成字符串\n                                var result=jsonUtil.stringify(attributes)\n                                //将结果弹出一下\n                                alert(result);\n                            }else//如果callback存在，说明是更新操作\n                            {\n                                callback(result);\n                            }\n                            \n                        });\n                    }\n```\n如果是更新操作\n```\n//根据id修改要素\n                    function updateFeature(id){\n                        //注意:（第二个参数）这里传入一个回调函数，用于处理查询出来的数据\n                        searchFeather(id,function(result){\n                                //获得旧的要素\n                                var oldgraphic=result[0];\n                                //新的要素\n                                var newgraphic=new Graphic(oldgraphic.toJson());\n                                //将alias属性修改为:修改后的C区\n                                newgraphic.attributes.alias=\"修改后的C区\";\n                                //创建更新对象\n                                var update=new Update({\n                                    \"featureLayer\":featureLayer,\n                                    \"postUpdatedGraphics\":[newgraphic],//修改之后的要素\n                                    \"preUpdatedGraphics\":[oldgraphic]//修改之前的要素\n                                })\n                                //执行刷新操作\n                                update.performRedo();\n                                //刷新视图\n                                layer.refresh();\n                                alert(\"修改成功\");\n                                \n                        })\n                        \n                    }\n```\n#### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>WebGIS</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n        \"dojo/on\",\n        \"dojo/query\",\n        \"esri/layers/ArcGISDynamicMapServiceLayer\",\n        \"esri/toolbars/draw\",\n        \"esri/layers/FeatureLayer\",\n        \"esri/graphic\", \"esri/dijit/editing/Add\",\n        \"esri/dijit/editing/Delete\",\"esri/dijit/editing/Update\",\"esri/tasks/query\",\"dojo/json\",\n        \"dojo/domReady!\"],\n                function (Map,on,query, ArcGISDynamicMapServiceLayer, Draw,FeatureLayer,Graphic,Add,Delete,Update,Query,jsonUtil) {\n\n                    \n                    var map = new esri.Map(\"MyMapDiv\");\n                    var layer = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer\");\n                    map.addLayer(layer);\n                    //用于操作的要素图层，注意我们是操作的宿舍楼图层\n                    var featureLayer = new FeatureLayer(\"http://localhost:6080/arcgis/rest/services/Test/ft/FeatureServer/1\",\n                         {\n                            mode:FeatureLayer.MODE_SNAPSHOT,\n                            outFields: [\"*\"]\n                         });\n                    //在添加要素时，利用Draw工具获得geometry对象\n                    var d = new Draw(map, { showTooltips: true });\n                    //要操作的graphic\n                    var g;\n                    query(\"button\").on(\"click\",function(event){\n                        var value=this.innerHTML;\n                        switch(value){\n                            case \"添加要素\":\n                                d.activate(Draw.POLYGON);\n                                break;\n                            case \"删除要素\":\n                                //创建Graphic对象，删除OBJECTID为34的元素，\n                                //因为OBJECTID是主键，所以只需要指定主键即可\n                                g=new Graphic(\"\",\"\",{\n                                    \"OBJECTID\":34\n                                });\n                                //创建删除对象\n                                var de=new Delete({\n                                    \"featureLayer\":featureLayer,\n                                    \"deletedGraphics\":[g]\n                                });\n                                //执行删除结果\n                                de.performRedo();\n                                //刷新图层\n                                layer.refresh();\n                                break;\n                            case \"修改要素\":\n                                //用于修改要素的函数,查询更新为36的要素\n                                updateFeature(1);\n                                break;                          \n                            case \"查询要素\":\n                                //用于查询要素的函数，查询主键为36的要素\n                                searchFeather(1);\n                                break;\n                        }\n                    });\n                    //当画图完毕时，添加要素\n                    on(d, \"draw-complete\", function (result) {\n                        //要素只赋予了geometry，属性信息为空\n                        var graphic = new Graphic(result.geometry, null,{});\n                        var add=new Add({\n                            \"featureLayer\":featureLayer,//给哪一个要素图层添加要素\n                            \"addedGraphics\":[graphic]//用于添加的要素\n                        })\n                        //执行添加函数\n                        add.performRedo();\n                        //刷新视图\n                        layer.refresh();\n                        //关闭绘图对象\n                        d.deactivate();\n                    });\n                    //根据id修改要素\n                    function updateFeature(id){\n                        //注意:（第二个参数）这里传入一个回调函数，用于处理查询出来的数据\n                        searchFeather(id,function(result){\n                                //获得旧的要素\n                                var oldgraphic=result[0];\n                                //新的要素\n                                var newgraphic=new Graphic(oldgraphic.toJson());\n                                //将alias属性修改为:修改后的A区宿舍\n                                newgraphic.attributes.alias=\"修改后的A区宿舍\";\n                                //创建更新对象\n                                var update=new Update({\n                                    \"featureLayer\":featureLayer,\n                                    \"postUpdatedGraphics\":[newgraphic],//修改之后的要素\n                                    \"preUpdatedGraphics\":[oldgraphic]//修改之前的要素\n                                })\n                                //执行刷新操作\n                                update.performRedo();\n                                //刷新视图\n                                layer.refresh();\n                                alert(\"修改成功\");\n                                \n                        })\n                        \n                    }\n                    //根据id查询要素\n                    function searchFeather(id,callback){\n                        //得到要素图层的主键属性\n                        var idProperty = featureLayer.objectIdField;\n                        //定义查询参数\n                        var query = new Query();\n                        //是否返回几何形状\n                        query.returnGeometry = false;\n                        //图层的主键名称（根据自己要求修改）\n                        query.objectIds = [id];\n                        //查询条件1=1意思是：只根据主键查询，忽略where子句\n                        query.where = \"1=1\";\n                        //进行查询\n                        featureLayer.selectFeatures(query, FeatureLayer.SELECTION_NEW,function(result){\n                            //如果callback不存在，说明仅仅是查询操作\n                            if(!callback){\n                                //因为我们根据主键查询，一定只有一个元素\n                                var graphic=result[0];\n                                //获得属性\n                                var attributes=graphic.attributes;\n                                //得到该属性信息转换成字符串\n                                var result=jsonUtil.stringify(attributes)\n                                //将结果弹出一下\n                                alert(result);\n                            }else//如果callback存在，说明是更新操作\n                            {\n                                callback(result);\n                            }\n                            \n                        });\n                    }\n                });\n\n\n    </script>\n</head>\n<body>\n<div id=\"MyMapDiv\" class=\"MapClass\"></div>\n<button class=\"btn\">添加要素</button>\n<button class=\"btn\">删除要素</button>\n<button class=\"btn\">修改要素</button>\n<button class=\"btn\">查询要素</button>\n</body>\n</html>\n```","source":"_posts/ArcGIS-API-for-JS20.md","raw":"---\ntitle: ArcGIS API For Javascript之编辑服务器端图层\ndate: 2019-08-06 17:19:00\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n在现实需求中，我们不仅仅需要编辑客户端图层，也有可能去编辑服务器端图层，要想编辑服务器端的图层，必须要将地图发布为：要素服务\n### 需求（服务器端图层编辑）\n关于服务器端图层的操作,基本就是增删改查操作，要素服务的查询前面已经介绍过，在此篇博客中主要记录一下关于要素服务的增删改操作,在ArcGIS API for JS中给我们提供了三个类用于要素的增Add,删Delete,改Update,接下来就用这三个类来实现我们的功能。\n\n* 我们操作的是要素服务的sushelou图层\n* 我们的服务：\n\n![01.png](01.png)\n注意：宿舍楼图层编号为1\n\n图层的属性信息\n![02.png](02.png)\n\n### 实现\n首先在页面添加三个按钮(用于实现用户的增删改操作)\n<button class=\"btn\">添加要素</button>\n<button class=\"btn\">删除要素</button>\n<button class=\"btn\">修改要素</button>\n<button class=\"btn\">查询要素</button>\n添加地图（省略）\n创建通用的对象，例如Draw\n```\n//用于操作的要素图层，注意我们是操作的宿舍楼图层\nvar featureLayer = new FeatureLayer(\"http://localhost:6080/arcgis/rest/services/Test/ft/FeatureServer/1\",\n                    {\n                            mode:FeatureLayer.MODE_SNAPSHOT,\n                            outFields: [\"*\"]\n                    });\n                    //在添加要素时，利用Draw工具获得geometry对象\n                    var d = new Draw(map, { showTooltips: true });\n                    //要操作的graphic\n                    var g;\n```\n给相应的按钮添加绑定事件\n```\nquery(\"button\").on(\"click\",function(event){\n                        //获得按钮的文本\n                        var value=this.innerHTML; \n                        //根据文本绑定不同的事件\n                        switch(value){\n                            case \"添加要素\":\n                                d.activate(Draw.POLYGON);\n                                break;\n                            case \"删除要素\":\n                                //创建Graphic对象，删除OBJECTID为34的元素，\n                                //因为OBJECTID是主键，所以只需要指定主键即可\n                                g=new Graphic(\"\",\"\",{\n                                    \"OBJECTID\":34\n                                });\n                                //创建删除对象\n                                var de=new Delete({\n                                    \"featureLayer\":featureLayer,\n                                    \"deletedGraphics\":[g]\n                                });\n                                //执行删除结果\n                                de.performRedo();\n                                //刷新图层\n                                layer.refresh();\n                                break;\n                            case \"修改要素\":\n                                //用于修改要素的函数,查询更新为36的要素\n                                updateFeature(36);\n                                break;                          \n                            case \"查询要素\":\n                                //用于查询要素的函数，查询主键为36的要素\n                                searchFeather(36);\n                                break;\n                        }\n                    });\n```\n如果是添加操作（利用draw添加geometry属性）\n```\n//当画图完毕时，添加要素\n                    on(d, \"draw-complete\", function (result) {\n                        //要素只赋予了geometry，属性信息为空\n                        var graphic = new Graphic(result.geometry, null,{});\n                        var add=new Add({\n                            \"featureLayer\":featureLayer,//给哪一个要素图层添加要素\n                            \"addedGraphics\":[graphic]//用于添加的要素\n                        })\n                        //执行添加函数\n                        add.performRedo();\n                        //刷新视图\n                        layer.refresh();\n                        //关闭绘图对象\n                        d.deactivate();\n                    });\n```\n如果是查询操作\n```\n//根据id查询要素\n            function searchFeather(id,callback){\n                        //得到要素图层的主键属性\n                        var idProperty = featureLayer.objectIdField;\n                        //定义查询参数\n                        var query = new Query();\n                        //是否返回几何形状\n                        query.returnGeometry = false;\n                        //图层的主键名称（根据自己要求修改）\n                        query.objectIds = [id];\n                        //查询条件1=1意思是：只根据主键查询，忽略where子句\n                        query.where = \"1=1\";\n                        //进行查询\n                        featureLayer.selectFeatures(query, FeatureLayer.SELECTION_NEW,function(result){\n                            //如果callback不存在，说明仅仅是查询操作\n                            if(!callback){\n                                //因为我们根据主键查询，一定只有一个元素\n                                var graphic=result[0];\n                                //获得属性\n                                var attributes=graphic.attributes;\n                                //得到该属性信息转换成字符串\n                                var result=jsonUtil.stringify(attributes)\n                                //将结果弹出一下\n                                alert(result);\n                            }else//如果callback存在，说明是更新操作\n                            {\n                                callback(result);\n                            }\n                            \n                        });\n                    }\n```\n如果是更新操作\n```\n//根据id修改要素\n                    function updateFeature(id){\n                        //注意:（第二个参数）这里传入一个回调函数，用于处理查询出来的数据\n                        searchFeather(id,function(result){\n                                //获得旧的要素\n                                var oldgraphic=result[0];\n                                //新的要素\n                                var newgraphic=new Graphic(oldgraphic.toJson());\n                                //将alias属性修改为:修改后的C区\n                                newgraphic.attributes.alias=\"修改后的C区\";\n                                //创建更新对象\n                                var update=new Update({\n                                    \"featureLayer\":featureLayer,\n                                    \"postUpdatedGraphics\":[newgraphic],//修改之后的要素\n                                    \"preUpdatedGraphics\":[oldgraphic]//修改之前的要素\n                                })\n                                //执行刷新操作\n                                update.performRedo();\n                                //刷新视图\n                                layer.refresh();\n                                alert(\"修改成功\");\n                                \n                        })\n                        \n                    }\n```\n#### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>WebGIS</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n        \"dojo/on\",\n        \"dojo/query\",\n        \"esri/layers/ArcGISDynamicMapServiceLayer\",\n        \"esri/toolbars/draw\",\n        \"esri/layers/FeatureLayer\",\n        \"esri/graphic\", \"esri/dijit/editing/Add\",\n        \"esri/dijit/editing/Delete\",\"esri/dijit/editing/Update\",\"esri/tasks/query\",\"dojo/json\",\n        \"dojo/domReady!\"],\n                function (Map,on,query, ArcGISDynamicMapServiceLayer, Draw,FeatureLayer,Graphic,Add,Delete,Update,Query,jsonUtil) {\n\n                    \n                    var map = new esri.Map(\"MyMapDiv\");\n                    var layer = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer\");\n                    map.addLayer(layer);\n                    //用于操作的要素图层，注意我们是操作的宿舍楼图层\n                    var featureLayer = new FeatureLayer(\"http://localhost:6080/arcgis/rest/services/Test/ft/FeatureServer/1\",\n                         {\n                            mode:FeatureLayer.MODE_SNAPSHOT,\n                            outFields: [\"*\"]\n                         });\n                    //在添加要素时，利用Draw工具获得geometry对象\n                    var d = new Draw(map, { showTooltips: true });\n                    //要操作的graphic\n                    var g;\n                    query(\"button\").on(\"click\",function(event){\n                        var value=this.innerHTML;\n                        switch(value){\n                            case \"添加要素\":\n                                d.activate(Draw.POLYGON);\n                                break;\n                            case \"删除要素\":\n                                //创建Graphic对象，删除OBJECTID为34的元素，\n                                //因为OBJECTID是主键，所以只需要指定主键即可\n                                g=new Graphic(\"\",\"\",{\n                                    \"OBJECTID\":34\n                                });\n                                //创建删除对象\n                                var de=new Delete({\n                                    \"featureLayer\":featureLayer,\n                                    \"deletedGraphics\":[g]\n                                });\n                                //执行删除结果\n                                de.performRedo();\n                                //刷新图层\n                                layer.refresh();\n                                break;\n                            case \"修改要素\":\n                                //用于修改要素的函数,查询更新为36的要素\n                                updateFeature(1);\n                                break;                          \n                            case \"查询要素\":\n                                //用于查询要素的函数，查询主键为36的要素\n                                searchFeather(1);\n                                break;\n                        }\n                    });\n                    //当画图完毕时，添加要素\n                    on(d, \"draw-complete\", function (result) {\n                        //要素只赋予了geometry，属性信息为空\n                        var graphic = new Graphic(result.geometry, null,{});\n                        var add=new Add({\n                            \"featureLayer\":featureLayer,//给哪一个要素图层添加要素\n                            \"addedGraphics\":[graphic]//用于添加的要素\n                        })\n                        //执行添加函数\n                        add.performRedo();\n                        //刷新视图\n                        layer.refresh();\n                        //关闭绘图对象\n                        d.deactivate();\n                    });\n                    //根据id修改要素\n                    function updateFeature(id){\n                        //注意:（第二个参数）这里传入一个回调函数，用于处理查询出来的数据\n                        searchFeather(id,function(result){\n                                //获得旧的要素\n                                var oldgraphic=result[0];\n                                //新的要素\n                                var newgraphic=new Graphic(oldgraphic.toJson());\n                                //将alias属性修改为:修改后的A区宿舍\n                                newgraphic.attributes.alias=\"修改后的A区宿舍\";\n                                //创建更新对象\n                                var update=new Update({\n                                    \"featureLayer\":featureLayer,\n                                    \"postUpdatedGraphics\":[newgraphic],//修改之后的要素\n                                    \"preUpdatedGraphics\":[oldgraphic]//修改之前的要素\n                                })\n                                //执行刷新操作\n                                update.performRedo();\n                                //刷新视图\n                                layer.refresh();\n                                alert(\"修改成功\");\n                                \n                        })\n                        \n                    }\n                    //根据id查询要素\n                    function searchFeather(id,callback){\n                        //得到要素图层的主键属性\n                        var idProperty = featureLayer.objectIdField;\n                        //定义查询参数\n                        var query = new Query();\n                        //是否返回几何形状\n                        query.returnGeometry = false;\n                        //图层的主键名称（根据自己要求修改）\n                        query.objectIds = [id];\n                        //查询条件1=1意思是：只根据主键查询，忽略where子句\n                        query.where = \"1=1\";\n                        //进行查询\n                        featureLayer.selectFeatures(query, FeatureLayer.SELECTION_NEW,function(result){\n                            //如果callback不存在，说明仅仅是查询操作\n                            if(!callback){\n                                //因为我们根据主键查询，一定只有一个元素\n                                var graphic=result[0];\n                                //获得属性\n                                var attributes=graphic.attributes;\n                                //得到该属性信息转换成字符串\n                                var result=jsonUtil.stringify(attributes)\n                                //将结果弹出一下\n                                alert(result);\n                            }else//如果callback存在，说明是更新操作\n                            {\n                                callback(result);\n                            }\n                            \n                        });\n                    }\n                });\n\n\n    </script>\n</head>\n<body>\n<div id=\"MyMapDiv\" class=\"MapClass\"></div>\n<button class=\"btn\">添加要素</button>\n<button class=\"btn\">删除要素</button>\n<button class=\"btn\">修改要素</button>\n<button class=\"btn\">查询要素</button>\n</body>\n</html>\n```","slug":"ArcGIS-API-for-JS20","published":1,"updated":"2019-08-06T09:25:30.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cua001kt09z809cqhdn","content":"<p>在现实需求中，我们不仅仅需要编辑客户端图层，也有可能去编辑服务器端图层，要想编辑服务器端的图层，必须要将地图发布为：要素服务</p>\n<h3 id=\"需求（服务器端图层编辑）\"><a href=\"#需求（服务器端图层编辑）\" class=\"headerlink\" title=\"需求（服务器端图层编辑）\"></a>需求（服务器端图层编辑）</h3><p>关于服务器端图层的操作,基本就是增删改查操作，要素服务的查询前面已经介绍过，在此篇博客中主要记录一下关于要素服务的增删改操作,在ArcGIS API for JS中给我们提供了三个类用于要素的增Add,删Delete,改Update,接下来就用这三个类来实现我们的功能。</p>\n<ul>\n<li>我们操作的是要素服务的sushelou图层</li>\n<li>我们的服务：</li>\n</ul>\n<p><img src=\"/2019/08/06/ArcGIS-API-for-JS20/01.png\" alt=\"01.png\"><br>注意：宿舍楼图层编号为1</p>\n<p>图层的属性信息<br><img src=\"/2019/08/06/ArcGIS-API-for-JS20/02.png\" alt=\"02.png\"></p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>首先在页面添加三个按钮(用于实现用户的增删改操作)</p>\n<p><button class=\"btn\">添加要素</button></p>\n<p><button class=\"btn\">删除要素</button></p>\n<p><button class=\"btn\">修改要素</button></p>\n<p><button class=\"btn\">查询要素</button><br>添加地图（省略）<br>创建通用的对象，例如Draw<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//用于操作的要素图层，注意我们是操作的宿舍楼图层</span><br><span class=\"line\">var featureLayer = new FeatureLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/ft/FeatureServer/1&quot;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                            mode:FeatureLayer.MODE_SNAPSHOT,</span><br><span class=\"line\">                            outFields: [&quot;*&quot;]</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    //在添加要素时，利用Draw工具获得geometry对象</span><br><span class=\"line\">                    var d = new Draw(map, &#123; showTooltips: true &#125;);</span><br><span class=\"line\">                    //要操作的graphic</span><br><span class=\"line\">                    var g;</span><br></pre></td></tr></table></figure></p>\n<p>给相应的按钮添加绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query(&quot;button&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                        //获得按钮的文本</span><br><span class=\"line\">                        var value=this.innerHTML; </span><br><span class=\"line\">                        //根据文本绑定不同的事件</span><br><span class=\"line\">                        switch(value)&#123;</span><br><span class=\"line\">                            case &quot;添加要素&quot;:</span><br><span class=\"line\">                                d.activate(Draw.POLYGON);</span><br><span class=\"line\">                                break;</span><br><span class=\"line\">                            case &quot;删除要素&quot;:</span><br><span class=\"line\">                                //创建Graphic对象，删除OBJECTID为34的元素，</span><br><span class=\"line\">                                //因为OBJECTID是主键，所以只需要指定主键即可</span><br><span class=\"line\">                                g=new Graphic(&quot;&quot;,&quot;&quot;,&#123;</span><br><span class=\"line\">                                    &quot;OBJECTID&quot;:34</span><br><span class=\"line\">                                &#125;);</span><br><span class=\"line\">                                //创建删除对象</span><br><span class=\"line\">                                var de=new Delete(&#123;</span><br><span class=\"line\">                                    &quot;featureLayer&quot;:featureLayer,</span><br><span class=\"line\">                                    &quot;deletedGraphics&quot;:[g]</span><br><span class=\"line\">                                &#125;);</span><br><span class=\"line\">                                //执行删除结果</span><br><span class=\"line\">                                de.performRedo();</span><br><span class=\"line\">                                //刷新图层</span><br><span class=\"line\">                                layer.refresh();</span><br><span class=\"line\">                                break;</span><br><span class=\"line\">                            case &quot;修改要素&quot;:</span><br><span class=\"line\">                                //用于修改要素的函数,查询更新为36的要素</span><br><span class=\"line\">                                updateFeature(36);</span><br><span class=\"line\">                                break;                          </span><br><span class=\"line\">                            case &quot;查询要素&quot;:</span><br><span class=\"line\">                                //用于查询要素的函数，查询主键为36的要素</span><br><span class=\"line\">                                searchFeather(36);</span><br><span class=\"line\">                                break;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>如果是添加操作（利用draw添加geometry属性）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//当画图完毕时，添加要素</span><br><span class=\"line\">                    on(d, &quot;draw-complete&quot;, function (result) &#123;</span><br><span class=\"line\">                        //要素只赋予了geometry，属性信息为空</span><br><span class=\"line\">                        var graphic = new Graphic(result.geometry, null,&#123;&#125;);</span><br><span class=\"line\">                        var add=new Add(&#123;</span><br><span class=\"line\">                            &quot;featureLayer&quot;:featureLayer,//给哪一个要素图层添加要素</span><br><span class=\"line\">                            &quot;addedGraphics&quot;:[graphic]//用于添加的要素</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        //执行添加函数</span><br><span class=\"line\">                        add.performRedo();</span><br><span class=\"line\">                        //刷新视图</span><br><span class=\"line\">                        layer.refresh();</span><br><span class=\"line\">                        //关闭绘图对象</span><br><span class=\"line\">                        d.deactivate();</span><br><span class=\"line\">                    &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>如果是查询操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//根据id查询要素</span><br><span class=\"line\">            function searchFeather(id,callback)&#123;</span><br><span class=\"line\">                        //得到要素图层的主键属性</span><br><span class=\"line\">                        var idProperty = featureLayer.objectIdField;</span><br><span class=\"line\">                        //定义查询参数</span><br><span class=\"line\">                        var query = new Query();</span><br><span class=\"line\">                        //是否返回几何形状</span><br><span class=\"line\">                        query.returnGeometry = false;</span><br><span class=\"line\">                        //图层的主键名称（根据自己要求修改）</span><br><span class=\"line\">                        query.objectIds = [id];</span><br><span class=\"line\">                        //查询条件1=1意思是：只根据主键查询，忽略where子句</span><br><span class=\"line\">                        query.where = &quot;1=1&quot;;</span><br><span class=\"line\">                        //进行查询</span><br><span class=\"line\">                        featureLayer.selectFeatures(query, FeatureLayer.SELECTION_NEW,function(result)&#123;</span><br><span class=\"line\">                            //如果callback不存在，说明仅仅是查询操作</span><br><span class=\"line\">                            if(!callback)&#123;</span><br><span class=\"line\">                                //因为我们根据主键查询，一定只有一个元素</span><br><span class=\"line\">                                var graphic=result[0];</span><br><span class=\"line\">                                //获得属性</span><br><span class=\"line\">                                var attributes=graphic.attributes;</span><br><span class=\"line\">                                //得到该属性信息转换成字符串</span><br><span class=\"line\">                                var result=jsonUtil.stringify(attributes)</span><br><span class=\"line\">                                //将结果弹出一下</span><br><span class=\"line\">                                alert(result);</span><br><span class=\"line\">                            &#125;else//如果callback存在，说明是更新操作</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                callback(result);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            </span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果是更新操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//根据id修改要素</span><br><span class=\"line\">                    function updateFeature(id)&#123;</span><br><span class=\"line\">                        //注意:（第二个参数）这里传入一个回调函数，用于处理查询出来的数据</span><br><span class=\"line\">                        searchFeather(id,function(result)&#123;</span><br><span class=\"line\">                                //获得旧的要素</span><br><span class=\"line\">                                var oldgraphic=result[0];</span><br><span class=\"line\">                                //新的要素</span><br><span class=\"line\">                                var newgraphic=new Graphic(oldgraphic.toJson());</span><br><span class=\"line\">                                //将alias属性修改为:修改后的C区</span><br><span class=\"line\">                                newgraphic.attributes.alias=&quot;修改后的C区&quot;;</span><br><span class=\"line\">                                //创建更新对象</span><br><span class=\"line\">                                var update=new Update(&#123;</span><br><span class=\"line\">                                    &quot;featureLayer&quot;:featureLayer,</span><br><span class=\"line\">                                    &quot;postUpdatedGraphics&quot;:[newgraphic],//修改之后的要素</span><br><span class=\"line\">                                    &quot;preUpdatedGraphics&quot;:[oldgraphic]//修改之前的要素</span><br><span class=\"line\">                                &#125;)</span><br><span class=\"line\">                                //执行刷新操作</span><br><span class=\"line\">                                update.performRedo();</span><br><span class=\"line\">                                //刷新视图</span><br><span class=\"line\">                                layer.refresh();</span><br><span class=\"line\">                                alert(&quot;修改成功&quot;);</span><br><span class=\"line\">                                </span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        </span><br><span class=\"line\">                    &#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;WebGIS&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">        &quot;dojo/on&quot;,</span><br><span class=\"line\">        &quot;dojo/query&quot;,</span><br><span class=\"line\">        &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">        &quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">        &quot;esri/layers/FeatureLayer&quot;,</span><br><span class=\"line\">        &quot;esri/graphic&quot;, &quot;esri/dijit/editing/Add&quot;,</span><br><span class=\"line\">        &quot;esri/dijit/editing/Delete&quot;,&quot;esri/dijit/editing/Update&quot;,&quot;esri/tasks/query&quot;,&quot;dojo/json&quot;,</span><br><span class=\"line\">        &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function (Map,on,query, ArcGISDynamicMapServiceLayer, Draw,FeatureLayer,Graphic,Add,Delete,Update,Query,jsonUtil) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    </span><br><span class=\"line\">                    var map = new esri.Map(&quot;MyMapDiv&quot;);</span><br><span class=\"line\">                    var layer = new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer&quot;);</span><br><span class=\"line\">                    map.addLayer(layer);</span><br><span class=\"line\">                    //用于操作的要素图层，注意我们是操作的宿舍楼图层</span><br><span class=\"line\">                    var featureLayer = new FeatureLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/ft/FeatureServer/1&quot;,</span><br><span class=\"line\">                         &#123;</span><br><span class=\"line\">                            mode:FeatureLayer.MODE_SNAPSHOT,</span><br><span class=\"line\">                            outFields: [&quot;*&quot;]</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">                    //在添加要素时，利用Draw工具获得geometry对象</span><br><span class=\"line\">                    var d = new Draw(map, &#123; showTooltips: true &#125;);</span><br><span class=\"line\">                    //要操作的graphic</span><br><span class=\"line\">                    var g;</span><br><span class=\"line\">                    query(&quot;button&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                        var value=this.innerHTML;</span><br><span class=\"line\">                        switch(value)&#123;</span><br><span class=\"line\">                            case &quot;添加要素&quot;:</span><br><span class=\"line\">                                d.activate(Draw.POLYGON);</span><br><span class=\"line\">                                break;</span><br><span class=\"line\">                            case &quot;删除要素&quot;:</span><br><span class=\"line\">                                //创建Graphic对象，删除OBJECTID为34的元素，</span><br><span class=\"line\">                                //因为OBJECTID是主键，所以只需要指定主键即可</span><br><span class=\"line\">                                g=new Graphic(&quot;&quot;,&quot;&quot;,&#123;</span><br><span class=\"line\">                                    &quot;OBJECTID&quot;:34</span><br><span class=\"line\">                                &#125;);</span><br><span class=\"line\">                                //创建删除对象</span><br><span class=\"line\">                                var de=new Delete(&#123;</span><br><span class=\"line\">                                    &quot;featureLayer&quot;:featureLayer,</span><br><span class=\"line\">                                    &quot;deletedGraphics&quot;:[g]</span><br><span class=\"line\">                                &#125;);</span><br><span class=\"line\">                                //执行删除结果</span><br><span class=\"line\">                                de.performRedo();</span><br><span class=\"line\">                                //刷新图层</span><br><span class=\"line\">                                layer.refresh();</span><br><span class=\"line\">                                break;</span><br><span class=\"line\">                            case &quot;修改要素&quot;:</span><br><span class=\"line\">                                //用于修改要素的函数,查询更新为36的要素</span><br><span class=\"line\">                                updateFeature(1);</span><br><span class=\"line\">                                break;                          </span><br><span class=\"line\">                            case &quot;查询要素&quot;:</span><br><span class=\"line\">                                //用于查询要素的函数，查询主键为36的要素</span><br><span class=\"line\">                                searchFeather(1);</span><br><span class=\"line\">                                break;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    //当画图完毕时，添加要素</span><br><span class=\"line\">                    on(d, &quot;draw-complete&quot;, function (result) &#123;</span><br><span class=\"line\">                        //要素只赋予了geometry，属性信息为空</span><br><span class=\"line\">                        var graphic = new Graphic(result.geometry, null,&#123;&#125;);</span><br><span class=\"line\">                        var add=new Add(&#123;</span><br><span class=\"line\">                            &quot;featureLayer&quot;:featureLayer,//给哪一个要素图层添加要素</span><br><span class=\"line\">                            &quot;addedGraphics&quot;:[graphic]//用于添加的要素</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        //执行添加函数</span><br><span class=\"line\">                        add.performRedo();</span><br><span class=\"line\">                        //刷新视图</span><br><span class=\"line\">                        layer.refresh();</span><br><span class=\"line\">                        //关闭绘图对象</span><br><span class=\"line\">                        d.deactivate();</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    //根据id修改要素</span><br><span class=\"line\">                    function updateFeature(id)&#123;</span><br><span class=\"line\">                        //注意:（第二个参数）这里传入一个回调函数，用于处理查询出来的数据</span><br><span class=\"line\">                        searchFeather(id,function(result)&#123;</span><br><span class=\"line\">                                //获得旧的要素</span><br><span class=\"line\">                                var oldgraphic=result[0];</span><br><span class=\"line\">                                //新的要素</span><br><span class=\"line\">                                var newgraphic=new Graphic(oldgraphic.toJson());</span><br><span class=\"line\">                                //将alias属性修改为:修改后的A区宿舍</span><br><span class=\"line\">                                newgraphic.attributes.alias=&quot;修改后的A区宿舍&quot;;</span><br><span class=\"line\">                                //创建更新对象</span><br><span class=\"line\">                                var update=new Update(&#123;</span><br><span class=\"line\">                                    &quot;featureLayer&quot;:featureLayer,</span><br><span class=\"line\">                                    &quot;postUpdatedGraphics&quot;:[newgraphic],//修改之后的要素</span><br><span class=\"line\">                                    &quot;preUpdatedGraphics&quot;:[oldgraphic]//修改之前的要素</span><br><span class=\"line\">                                &#125;)</span><br><span class=\"line\">                                //执行刷新操作</span><br><span class=\"line\">                                update.performRedo();</span><br><span class=\"line\">                                //刷新视图</span><br><span class=\"line\">                                layer.refresh();</span><br><span class=\"line\">                                alert(&quot;修改成功&quot;);</span><br><span class=\"line\">                                </span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //根据id查询要素</span><br><span class=\"line\">                    function searchFeather(id,callback)&#123;</span><br><span class=\"line\">                        //得到要素图层的主键属性</span><br><span class=\"line\">                        var idProperty = featureLayer.objectIdField;</span><br><span class=\"line\">                        //定义查询参数</span><br><span class=\"line\">                        var query = new Query();</span><br><span class=\"line\">                        //是否返回几何形状</span><br><span class=\"line\">                        query.returnGeometry = false;</span><br><span class=\"line\">                        //图层的主键名称（根据自己要求修改）</span><br><span class=\"line\">                        query.objectIds = [id];</span><br><span class=\"line\">                        //查询条件1=1意思是：只根据主键查询，忽略where子句</span><br><span class=\"line\">                        query.where = &quot;1=1&quot;;</span><br><span class=\"line\">                        //进行查询</span><br><span class=\"line\">                        featureLayer.selectFeatures(query, FeatureLayer.SELECTION_NEW,function(result)&#123;</span><br><span class=\"line\">                            //如果callback不存在，说明仅仅是查询操作</span><br><span class=\"line\">                            if(!callback)&#123;</span><br><span class=\"line\">                                //因为我们根据主键查询，一定只有一个元素</span><br><span class=\"line\">                                var graphic=result[0];</span><br><span class=\"line\">                                //获得属性</span><br><span class=\"line\">                                var attributes=graphic.attributes;</span><br><span class=\"line\">                                //得到该属性信息转换成字符串</span><br><span class=\"line\">                                var result=jsonUtil.stringify(attributes)</span><br><span class=\"line\">                                //将结果弹出一下</span><br><span class=\"line\">                                alert(result);</span><br><span class=\"line\">                            &#125;else//如果callback存在，说明是更新操作</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                callback(result);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            </span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;MyMapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;button class=&quot;btn&quot;&gt;添加要素&lt;/button&gt;</span><br><span class=\"line\">&lt;button class=&quot;btn&quot;&gt;删除要素&lt;/button&gt;</span><br><span class=\"line\">&lt;button class=&quot;btn&quot;&gt;修改要素&lt;/button&gt;</span><br><span class=\"line\">&lt;button class=&quot;btn&quot;&gt;查询要素&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>在现实需求中，我们不仅仅需要编辑客户端图层，也有可能去编辑服务器端图层，要想编辑服务器端的图层，必须要将地图发布为：要素服务</p>\n<h3 id=\"需求（服务器端图层编辑）\"><a href=\"#需求（服务器端图层编辑）\" class=\"headerlink\" title=\"需求（服务器端图层编辑）\"></a>需求（服务器端图层编辑）</h3><p>关于服务器端图层的操作,基本就是增删改查操作，要素服务的查询前面已经介绍过，在此篇博客中主要记录一下关于要素服务的增删改操作,在ArcGIS API for JS中给我们提供了三个类用于要素的增Add,删Delete,改Update,接下来就用这三个类来实现我们的功能。</p>\n<ul>\n<li>我们操作的是要素服务的sushelou图层</li>\n<li>我们的服务：</li>\n</ul>\n<p><img src=\"/2019/08/06/ArcGIS-API-for-JS20/01.png\" alt=\"01.png\"><br>注意：宿舍楼图层编号为1</p>\n<p>图层的属性信息<br><img src=\"/2019/08/06/ArcGIS-API-for-JS20/02.png\" alt=\"02.png\"></p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><p>首先在页面添加三个按钮(用于实现用户的增删改操作)</p>\n<p><button class=\"btn\">添加要素</button></p>\n<p><button class=\"btn\">删除要素</button></p>\n<p><button class=\"btn\">修改要素</button></p>\n<p><button class=\"btn\">查询要素</button><br>添加地图（省略）<br>创建通用的对象，例如Draw<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//用于操作的要素图层，注意我们是操作的宿舍楼图层</span><br><span class=\"line\">var featureLayer = new FeatureLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/ft/FeatureServer/1&quot;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                            mode:FeatureLayer.MODE_SNAPSHOT,</span><br><span class=\"line\">                            outFields: [&quot;*&quot;]</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    //在添加要素时，利用Draw工具获得geometry对象</span><br><span class=\"line\">                    var d = new Draw(map, &#123; showTooltips: true &#125;);</span><br><span class=\"line\">                    //要操作的graphic</span><br><span class=\"line\">                    var g;</span><br></pre></td></tr></table></figure></p>\n<p>给相应的按钮添加绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">query(&quot;button&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                        //获得按钮的文本</span><br><span class=\"line\">                        var value=this.innerHTML; </span><br><span class=\"line\">                        //根据文本绑定不同的事件</span><br><span class=\"line\">                        switch(value)&#123;</span><br><span class=\"line\">                            case &quot;添加要素&quot;:</span><br><span class=\"line\">                                d.activate(Draw.POLYGON);</span><br><span class=\"line\">                                break;</span><br><span class=\"line\">                            case &quot;删除要素&quot;:</span><br><span class=\"line\">                                //创建Graphic对象，删除OBJECTID为34的元素，</span><br><span class=\"line\">                                //因为OBJECTID是主键，所以只需要指定主键即可</span><br><span class=\"line\">                                g=new Graphic(&quot;&quot;,&quot;&quot;,&#123;</span><br><span class=\"line\">                                    &quot;OBJECTID&quot;:34</span><br><span class=\"line\">                                &#125;);</span><br><span class=\"line\">                                //创建删除对象</span><br><span class=\"line\">                                var de=new Delete(&#123;</span><br><span class=\"line\">                                    &quot;featureLayer&quot;:featureLayer,</span><br><span class=\"line\">                                    &quot;deletedGraphics&quot;:[g]</span><br><span class=\"line\">                                &#125;);</span><br><span class=\"line\">                                //执行删除结果</span><br><span class=\"line\">                                de.performRedo();</span><br><span class=\"line\">                                //刷新图层</span><br><span class=\"line\">                                layer.refresh();</span><br><span class=\"line\">                                break;</span><br><span class=\"line\">                            case &quot;修改要素&quot;:</span><br><span class=\"line\">                                //用于修改要素的函数,查询更新为36的要素</span><br><span class=\"line\">                                updateFeature(36);</span><br><span class=\"line\">                                break;                          </span><br><span class=\"line\">                            case &quot;查询要素&quot;:</span><br><span class=\"line\">                                //用于查询要素的函数，查询主键为36的要素</span><br><span class=\"line\">                                searchFeather(36);</span><br><span class=\"line\">                                break;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>如果是添加操作（利用draw添加geometry属性）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//当画图完毕时，添加要素</span><br><span class=\"line\">                    on(d, &quot;draw-complete&quot;, function (result) &#123;</span><br><span class=\"line\">                        //要素只赋予了geometry，属性信息为空</span><br><span class=\"line\">                        var graphic = new Graphic(result.geometry, null,&#123;&#125;);</span><br><span class=\"line\">                        var add=new Add(&#123;</span><br><span class=\"line\">                            &quot;featureLayer&quot;:featureLayer,//给哪一个要素图层添加要素</span><br><span class=\"line\">                            &quot;addedGraphics&quot;:[graphic]//用于添加的要素</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        //执行添加函数</span><br><span class=\"line\">                        add.performRedo();</span><br><span class=\"line\">                        //刷新视图</span><br><span class=\"line\">                        layer.refresh();</span><br><span class=\"line\">                        //关闭绘图对象</span><br><span class=\"line\">                        d.deactivate();</span><br><span class=\"line\">                    &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>如果是查询操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//根据id查询要素</span><br><span class=\"line\">            function searchFeather(id,callback)&#123;</span><br><span class=\"line\">                        //得到要素图层的主键属性</span><br><span class=\"line\">                        var idProperty = featureLayer.objectIdField;</span><br><span class=\"line\">                        //定义查询参数</span><br><span class=\"line\">                        var query = new Query();</span><br><span class=\"line\">                        //是否返回几何形状</span><br><span class=\"line\">                        query.returnGeometry = false;</span><br><span class=\"line\">                        //图层的主键名称（根据自己要求修改）</span><br><span class=\"line\">                        query.objectIds = [id];</span><br><span class=\"line\">                        //查询条件1=1意思是：只根据主键查询，忽略where子句</span><br><span class=\"line\">                        query.where = &quot;1=1&quot;;</span><br><span class=\"line\">                        //进行查询</span><br><span class=\"line\">                        featureLayer.selectFeatures(query, FeatureLayer.SELECTION_NEW,function(result)&#123;</span><br><span class=\"line\">                            //如果callback不存在，说明仅仅是查询操作</span><br><span class=\"line\">                            if(!callback)&#123;</span><br><span class=\"line\">                                //因为我们根据主键查询，一定只有一个元素</span><br><span class=\"line\">                                var graphic=result[0];</span><br><span class=\"line\">                                //获得属性</span><br><span class=\"line\">                                var attributes=graphic.attributes;</span><br><span class=\"line\">                                //得到该属性信息转换成字符串</span><br><span class=\"line\">                                var result=jsonUtil.stringify(attributes)</span><br><span class=\"line\">                                //将结果弹出一下</span><br><span class=\"line\">                                alert(result);</span><br><span class=\"line\">                            &#125;else//如果callback存在，说明是更新操作</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                callback(result);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            </span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果是更新操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//根据id修改要素</span><br><span class=\"line\">                    function updateFeature(id)&#123;</span><br><span class=\"line\">                        //注意:（第二个参数）这里传入一个回调函数，用于处理查询出来的数据</span><br><span class=\"line\">                        searchFeather(id,function(result)&#123;</span><br><span class=\"line\">                                //获得旧的要素</span><br><span class=\"line\">                                var oldgraphic=result[0];</span><br><span class=\"line\">                                //新的要素</span><br><span class=\"line\">                                var newgraphic=new Graphic(oldgraphic.toJson());</span><br><span class=\"line\">                                //将alias属性修改为:修改后的C区</span><br><span class=\"line\">                                newgraphic.attributes.alias=&quot;修改后的C区&quot;;</span><br><span class=\"line\">                                //创建更新对象</span><br><span class=\"line\">                                var update=new Update(&#123;</span><br><span class=\"line\">                                    &quot;featureLayer&quot;:featureLayer,</span><br><span class=\"line\">                                    &quot;postUpdatedGraphics&quot;:[newgraphic],//修改之后的要素</span><br><span class=\"line\">                                    &quot;preUpdatedGraphics&quot;:[oldgraphic]//修改之前的要素</span><br><span class=\"line\">                                &#125;)</span><br><span class=\"line\">                                //执行刷新操作</span><br><span class=\"line\">                                update.performRedo();</span><br><span class=\"line\">                                //刷新视图</span><br><span class=\"line\">                                layer.refresh();</span><br><span class=\"line\">                                alert(&quot;修改成功&quot;);</span><br><span class=\"line\">                                </span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        </span><br><span class=\"line\">                    &#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;WebGIS&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">        &quot;dojo/on&quot;,</span><br><span class=\"line\">        &quot;dojo/query&quot;,</span><br><span class=\"line\">        &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">        &quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">        &quot;esri/layers/FeatureLayer&quot;,</span><br><span class=\"line\">        &quot;esri/graphic&quot;, &quot;esri/dijit/editing/Add&quot;,</span><br><span class=\"line\">        &quot;esri/dijit/editing/Delete&quot;,&quot;esri/dijit/editing/Update&quot;,&quot;esri/tasks/query&quot;,&quot;dojo/json&quot;,</span><br><span class=\"line\">        &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function (Map,on,query, ArcGISDynamicMapServiceLayer, Draw,FeatureLayer,Graphic,Add,Delete,Update,Query,jsonUtil) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    </span><br><span class=\"line\">                    var map = new esri.Map(&quot;MyMapDiv&quot;);</span><br><span class=\"line\">                    var layer = new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer&quot;);</span><br><span class=\"line\">                    map.addLayer(layer);</span><br><span class=\"line\">                    //用于操作的要素图层，注意我们是操作的宿舍楼图层</span><br><span class=\"line\">                    var featureLayer = new FeatureLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/ft/FeatureServer/1&quot;,</span><br><span class=\"line\">                         &#123;</span><br><span class=\"line\">                            mode:FeatureLayer.MODE_SNAPSHOT,</span><br><span class=\"line\">                            outFields: [&quot;*&quot;]</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">                    //在添加要素时，利用Draw工具获得geometry对象</span><br><span class=\"line\">                    var d = new Draw(map, &#123; showTooltips: true &#125;);</span><br><span class=\"line\">                    //要操作的graphic</span><br><span class=\"line\">                    var g;</span><br><span class=\"line\">                    query(&quot;button&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                        var value=this.innerHTML;</span><br><span class=\"line\">                        switch(value)&#123;</span><br><span class=\"line\">                            case &quot;添加要素&quot;:</span><br><span class=\"line\">                                d.activate(Draw.POLYGON);</span><br><span class=\"line\">                                break;</span><br><span class=\"line\">                            case &quot;删除要素&quot;:</span><br><span class=\"line\">                                //创建Graphic对象，删除OBJECTID为34的元素，</span><br><span class=\"line\">                                //因为OBJECTID是主键，所以只需要指定主键即可</span><br><span class=\"line\">                                g=new Graphic(&quot;&quot;,&quot;&quot;,&#123;</span><br><span class=\"line\">                                    &quot;OBJECTID&quot;:34</span><br><span class=\"line\">                                &#125;);</span><br><span class=\"line\">                                //创建删除对象</span><br><span class=\"line\">                                var de=new Delete(&#123;</span><br><span class=\"line\">                                    &quot;featureLayer&quot;:featureLayer,</span><br><span class=\"line\">                                    &quot;deletedGraphics&quot;:[g]</span><br><span class=\"line\">                                &#125;);</span><br><span class=\"line\">                                //执行删除结果</span><br><span class=\"line\">                                de.performRedo();</span><br><span class=\"line\">                                //刷新图层</span><br><span class=\"line\">                                layer.refresh();</span><br><span class=\"line\">                                break;</span><br><span class=\"line\">                            case &quot;修改要素&quot;:</span><br><span class=\"line\">                                //用于修改要素的函数,查询更新为36的要素</span><br><span class=\"line\">                                updateFeature(1);</span><br><span class=\"line\">                                break;                          </span><br><span class=\"line\">                            case &quot;查询要素&quot;:</span><br><span class=\"line\">                                //用于查询要素的函数，查询主键为36的要素</span><br><span class=\"line\">                                searchFeather(1);</span><br><span class=\"line\">                                break;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    //当画图完毕时，添加要素</span><br><span class=\"line\">                    on(d, &quot;draw-complete&quot;, function (result) &#123;</span><br><span class=\"line\">                        //要素只赋予了geometry，属性信息为空</span><br><span class=\"line\">                        var graphic = new Graphic(result.geometry, null,&#123;&#125;);</span><br><span class=\"line\">                        var add=new Add(&#123;</span><br><span class=\"line\">                            &quot;featureLayer&quot;:featureLayer,//给哪一个要素图层添加要素</span><br><span class=\"line\">                            &quot;addedGraphics&quot;:[graphic]//用于添加的要素</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        //执行添加函数</span><br><span class=\"line\">                        add.performRedo();</span><br><span class=\"line\">                        //刷新视图</span><br><span class=\"line\">                        layer.refresh();</span><br><span class=\"line\">                        //关闭绘图对象</span><br><span class=\"line\">                        d.deactivate();</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    //根据id修改要素</span><br><span class=\"line\">                    function updateFeature(id)&#123;</span><br><span class=\"line\">                        //注意:（第二个参数）这里传入一个回调函数，用于处理查询出来的数据</span><br><span class=\"line\">                        searchFeather(id,function(result)&#123;</span><br><span class=\"line\">                                //获得旧的要素</span><br><span class=\"line\">                                var oldgraphic=result[0];</span><br><span class=\"line\">                                //新的要素</span><br><span class=\"line\">                                var newgraphic=new Graphic(oldgraphic.toJson());</span><br><span class=\"line\">                                //将alias属性修改为:修改后的A区宿舍</span><br><span class=\"line\">                                newgraphic.attributes.alias=&quot;修改后的A区宿舍&quot;;</span><br><span class=\"line\">                                //创建更新对象</span><br><span class=\"line\">                                var update=new Update(&#123;</span><br><span class=\"line\">                                    &quot;featureLayer&quot;:featureLayer,</span><br><span class=\"line\">                                    &quot;postUpdatedGraphics&quot;:[newgraphic],//修改之后的要素</span><br><span class=\"line\">                                    &quot;preUpdatedGraphics&quot;:[oldgraphic]//修改之前的要素</span><br><span class=\"line\">                                &#125;)</span><br><span class=\"line\">                                //执行刷新操作</span><br><span class=\"line\">                                update.performRedo();</span><br><span class=\"line\">                                //刷新视图</span><br><span class=\"line\">                                layer.refresh();</span><br><span class=\"line\">                                alert(&quot;修改成功&quot;);</span><br><span class=\"line\">                                </span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                        </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //根据id查询要素</span><br><span class=\"line\">                    function searchFeather(id,callback)&#123;</span><br><span class=\"line\">                        //得到要素图层的主键属性</span><br><span class=\"line\">                        var idProperty = featureLayer.objectIdField;</span><br><span class=\"line\">                        //定义查询参数</span><br><span class=\"line\">                        var query = new Query();</span><br><span class=\"line\">                        //是否返回几何形状</span><br><span class=\"line\">                        query.returnGeometry = false;</span><br><span class=\"line\">                        //图层的主键名称（根据自己要求修改）</span><br><span class=\"line\">                        query.objectIds = [id];</span><br><span class=\"line\">                        //查询条件1=1意思是：只根据主键查询，忽略where子句</span><br><span class=\"line\">                        query.where = &quot;1=1&quot;;</span><br><span class=\"line\">                        //进行查询</span><br><span class=\"line\">                        featureLayer.selectFeatures(query, FeatureLayer.SELECTION_NEW,function(result)&#123;</span><br><span class=\"line\">                            //如果callback不存在，说明仅仅是查询操作</span><br><span class=\"line\">                            if(!callback)&#123;</span><br><span class=\"line\">                                //因为我们根据主键查询，一定只有一个元素</span><br><span class=\"line\">                                var graphic=result[0];</span><br><span class=\"line\">                                //获得属性</span><br><span class=\"line\">                                var attributes=graphic.attributes;</span><br><span class=\"line\">                                //得到该属性信息转换成字符串</span><br><span class=\"line\">                                var result=jsonUtil.stringify(attributes)</span><br><span class=\"line\">                                //将结果弹出一下</span><br><span class=\"line\">                                alert(result);</span><br><span class=\"line\">                            &#125;else//如果callback存在，说明是更新操作</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                callback(result);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            </span><br><span class=\"line\">                        &#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;MyMapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;button class=&quot;btn&quot;&gt;添加要素&lt;/button&gt;</span><br><span class=\"line\">&lt;button class=&quot;btn&quot;&gt;删除要素&lt;/button&gt;</span><br><span class=\"line\">&lt;button class=&quot;btn&quot;&gt;修改要素&lt;/button&gt;</span><br><span class=\"line\">&lt;button class=&quot;btn&quot;&gt;查询要素&lt;/button&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ArcGIS API For Javascript之网络分析","date":"2019-08-06T09:27:59.000Z","_content":"在WebGIS中网络分析一直是比较常用的功能，比如：路径分析，服务点分析等等,在WebGIS中想要实现相应的功能需要将我们的服务发布为网络服务。\n### 路径分析\n在路径分析中，主要有两个比较关键的参数：\n\n* 停靠点\n* 障碍点\n* \n总体来说，路径分析的步骤主要有以下几步：\n\n* 发布网络分析服务\n* 在Web端创建路径分析对象\n* 构建路径分析参数。\n（1）停靠点\n（2）障碍点\n* 获得结果，进行处理。\n\n####　代码实现\n创建三个按钮（停靠点，障碍点，分析）\n```\n    <input id=\"Stop\" type=\"button\" value=\"停靠点\" />\n    <input id=\"barriers\" type=\"button\" value=\"障碍点\" />\n    <input id=\"Analyse\" type=\"button\" value=\"分析\" />\n```\n添加地图（步骤省略）\n创建路径分析对象，创建路径分析参数对象（注意：还缺少两个重要的参数，停靠点，障碍点）\n```\n//创建路径分析对象\n                var shortestAnalyst = new RouteTask(\"http://localhost:6080/arcgis/rest/services/Test/mynet/NAServer/Route\");\n                //创建路径参数对象\n                var routeParas = new RouteParameters();\n                //障碍点，但是此时障碍点为空\n                routeParas.barriers = new FeatureSet();\n                //停靠点，但是此时停靠点为空\n                routeParas.stops = new FeatureSet();\n                //路径是否有方向\n                routeParas.returnDirections = false;\n                //是否返回路径，此处必须返回\n                routeParas.returnRoutes = true;\n                //空间参考\n                routeParas.outSpatialReference = map.SpatialReference;\n```\n给停靠点按钮和障碍点按钮绑定点击事件\n```\n//定义一个标志\n                //selectPointID=0什么都不做\n                //selectPointID=1说明是添加停靠点\n                //selectPointID=2说明是添加障碍点\n                var selectPointID;\n                //给停靠点按钮添加点击事件\n                on(dom.byId(\"stop\"),\"click\",function(){\n                    selectPointID = 1;\n                })\n                //给障碍点按钮添加点击事件\n                on(dom.byId(\"barriers\"),\"click\",function(){\n                    selectPointID = 2;\n                })\n```\n给地图绑定点击事件（为了获得点的坐标–>构建停靠点或者障碍点）\n```\n//定义停靠点的符号\n                var stopSymbol = new SimpleMarkerSymbol();\n                stopSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;\n                stopSymbol.setSize(8);\n                stopSymbol.setColor(new Color(\"#FFFFCC\"));\n                //定义障碍点的符号\n                var barrierSymbol = new SimpleMarkerSymbol();\n                barrierSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;\n                barrierSymbol.setSize(8);\n                barrierSymbol.setColor(new Color(\"#f1a340\"));\n                on(map, \"mouse-down\", function(evt){\n                    //通过selectPointID判断是添加是停靠点还是障碍点\n                    switch (selectPointID) {\n                        case 0:\n                            break;\n                        case 1:\n                            //获得停靠点的坐标\n                            var pointStop=evt.mapPoint;\n                            var gr=new Graphic(pointStop,stopSymbol);\n                            //构建停靠点的参数\n                            routeParas.stops.features.push(gr);\n                            break;\n                        case 2:\n                            //获得障碍点的坐标\n                            var pointBarrier=evt.mapPoint;\n                            var gr=new Graphic(pointBarrier,barrierSymbol);\n                            //构建障碍点的参数\n                            routeParas.barriers.features.push(gr);\n                            break;\n                    }\n                    //如果selectPointID不等于0，将点的坐标在地图上显示出来\n                    if (selectPointID != 0) {\n                        addTextPoint(\"停靠点\", pointStop, stopSymbol);\n                        addTextPoint(\"障碍点\", pointBarrier, barrierSymbol);\n                        selectPointID = 0;\n                    }\n                });\n                //文本符号：文本信息，点坐标，符号\n                function addTextPoint(text,point,symbol) {\n                    var textSymbol = new TextSymbol(text);\n                    textSymbol.setColor(new Color([128, 0, 0]));              \n                    var graphicText = Graphic(point, textSymbol);\n                    var graphicpoint = new Graphic(point, symbol);\n                    //用默认的图层添加\n                    map.graphics.add(graphicpoint);\n                    //用默认的图层添加\n                    map.graphics.add(graphicText);\n                }\n```\n给分析按钮绑定点击事件\n```\n//给分析按钮添加点击事件\n                on(dom.byId(\"analyse\"),\"click\",function(){\n                    //如果障碍点或者停靠点的个数有一个为0，提示用户参数输入不对\n                    if  (routeParas.stops.features.length  ==  0  || routeParas.barriers.features.length==0)\n                    {\n                        alert(\"输入参数不全，无法分析\");\n                        return;\n                    }\n                    //执行路径分析函数\n                    shortestAnalyst.solve(routeParas, showRoute)\n                })\n```\n获得结果，处理路径分析返回的结果。\n```\n//处理路径分析返回的结果。\n                function showRoute(solveResult) {\n                    //路径分析的结果\n                    var routeResults = solveResult.routeResults;\n                    //路径分析的长度\n                    var res = routeResults.length;\n                    //路径的符号\n                    routeSymbol  = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                    if (res > 0) {\n                        for (var i = 0; i < res; i++) {\n                            var graphicroute = routeResults[i];\n                            var graphic = graphicroute.route;\n                            graphic.setSymbol(routeSymbol);\n                            map.graphics.add(graphic);\n                        }\n                    }\n                    else {\n                        alert(\"没有返回结果\");\n                    }\n                }\n```\n#### 运行结果\n添加停靠点\n![01.png](01.png)\n添加障碍点\n![02.png](02.png)\n分析获得结果\n![03.png](03.png)\n#### 完整代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>Geometric _Network</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"dojo/on\",\n            \"dojo/dom\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/tasks/RouteTask\",\n            \"esri/tasks/FeatureSet\",\n            \"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/symbols/TextSymbol\",\n            \"esri/toolbars/draw\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/tasks/RouteParameters\",\n            \"dojo/colors\",\n            \"esri/graphic\",\n            \"dojo/domReady!\"],\n            function (Map,on,dom,\n                ArcGISDynamicMapServiceLayer,\n                RouteTask,\n                FeatureSet,\n                SimpleMarkerSymbol,\n                TextSymbol,\n                Draw,\n                SimpleLineSymbol,\n                RouteParameters,\n                Color,\n                Graphic\n                ) {\n                var map = new Map(\"MyMapDiv\");\n                var layer = new ArcGISDynamicMapServiceLayer\n                (\"http://localhost:6080/arcgis/rest/services/Test/mynet/MapServer\");\n                map.addLayer(layer)\n                //创建路径分析对象\n                var shortestAnalyst = new RouteTask(\"http://localhost:6080/arcgis/rest/services/Test/mynet/NAServer/Route\");\n                //创建路径参数对象\n                var routeParas = new RouteParameters();\n                //障碍点，但是此时障碍点为空\n                routeParas.barriers = new FeatureSet();\n                //停靠点，但是此时停靠点为空\n                routeParas.stops = new FeatureSet();\n                //路径是否有方向\n                routeParas.returnDirections = false;\n                //是否返回路径，此处必须返回\n                routeParas.returnRoutes = true;\n                //空间参考\n                routeParas.outSpatialReference = map.SpatialReference;\n                //定义一个标志\n                //selectPointID=0什么都不做\n                //selectPointID=1说明是添加停靠点\n                //selectPointID=2说明是添加障碍点\n                var selectPointID;\n                //给停靠点按钮添加点击事件\n                on(dom.byId(\"stop\"),\"click\",function(){\n                    selectPointID = 1;\n                })\n                //给障碍点按钮添加点击事件\n                on(dom.byId(\"barriers\"),\"click\",function(){\n                    selectPointID = 2;\n                })\n                //定义停靠点的符号\n                var stopSymbol = new SimpleMarkerSymbol();\n                stopSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;\n                stopSymbol.setSize(8);\n                stopSymbol.setColor(new Color(\"#FFFFCC\"));\n                //定义障碍点的符号\n                var barrierSymbol = new SimpleMarkerSymbol();\n                barrierSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;\n                barrierSymbol.setSize(8);\n                barrierSymbol.setColor(new Color(\"#f1a340\"));\n                on(map, \"mouse-down\", function(evt){\n                    //通过selectPointID判断是添加是停靠点还是障碍点\n                    switch (selectPointID) {\n                        case 0:\n                            break;\n                        case 1:\n                            //获得停靠点的坐标\n                            var pointStop=evt.mapPoint;\n                            var gr=new Graphic(pointStop,stopSymbol);\n                            //构建停靠点的参数\n                            routeParas.stops.features.push(gr);\n                            break;\n                        case 2:\n                            //获得障碍点的坐标\n                            var pointBarrier=evt.mapPoint;\n                            var gr=new Graphic(pointBarrier,barrierSymbol);\n                            //构建障碍点的参数\n                            routeParas.barriers.features.push(gr);\n                            break;\n                    }\n                    //如果selectPointID不等于0，将点的坐标在地图上显示出来\n                    if (selectPointID != 0) {\n                        addTextPoint(\"停靠点\", pointStop, stopSymbol);\n                        addTextPoint(\"障碍点\", pointBarrier, barrierSymbol);\n                        selectPointID = 0;\n                    }\n                });\n                //文本符号：文本信息，点坐标，符号\n                function addTextPoint(text,point,symbol) {\n                    var textSymbol = new TextSymbol(text);\n                    textSymbol.setColor(new Color([128, 0, 0]));              \n                    var graphicText = Graphic(point, textSymbol);\n                    var graphicpoint = new Graphic(point, symbol);\n                    //用默认的图层添加\n                    map.graphics.add(graphicpoint);\n                    map.graphics.add(graphicText);\n                }\n                //给分析按钮添加点击事件\n                on(dom.byId(\"analyse\"),\"click\",function(){\n                    //如果障碍点或者停靠点的个数有一个为0，提示用户参数输入不对\n                    if  (routeParas.stops.features.length  ==  0  || routeParas.barriers.features.length==0)\n                    {\n                        alert(\"输入参数不全，无法分析\");\n                        return;\n                    }\n                    //执行路径分析函数\n                    shortestAnalyst.solve(routeParas, showRoute)\n                })\n                //处理路径分析返回的结果。\n                function showRoute(solveResult) {\n                    //路径分析的结果\n                    var routeResults = solveResult.routeResults;\n                    //路径分析的长度\n                    var res = routeResults.length;\n                    //路径的符号\n                    routeSymbol  = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                    if (res > 0) {\n                        for (var i = 0; i < res; i++) {\n                            var graphicroute = routeResults[i];\n                            var graphic = graphicroute.route;\n                            graphic.setSymbol(routeSymbol);\n                            map.graphics.add(graphic);\n                        }\n                    }\n                    else {\n                        alert(\"没有返回结果\");\n                    }\n                }               \n            });\n\n\n    </script>\n</head>\n<body>\n    <div id=\"MyMapDiv\" class=\"MapClass\"></div>\n    <input id=\"stop\" type=\"button\" value=\"停靠点\" />\n    <input id=\"barriers\" type=\"button\" value=\"障碍点\" />\n    <input id=\"analyse\" type=\"button\" value=\"分析\" />\n    \n</body>\n</html>\n```","source":"_posts/ArcGIS-API-for-JS21.md","raw":"---\ntitle: ArcGIS API For Javascript之网络分析\ndate: 2019-08-06 17:27:59\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n在WebGIS中网络分析一直是比较常用的功能，比如：路径分析，服务点分析等等,在WebGIS中想要实现相应的功能需要将我们的服务发布为网络服务。\n### 路径分析\n在路径分析中，主要有两个比较关键的参数：\n\n* 停靠点\n* 障碍点\n* \n总体来说，路径分析的步骤主要有以下几步：\n\n* 发布网络分析服务\n* 在Web端创建路径分析对象\n* 构建路径分析参数。\n（1）停靠点\n（2）障碍点\n* 获得结果，进行处理。\n\n####　代码实现\n创建三个按钮（停靠点，障碍点，分析）\n```\n    <input id=\"Stop\" type=\"button\" value=\"停靠点\" />\n    <input id=\"barriers\" type=\"button\" value=\"障碍点\" />\n    <input id=\"Analyse\" type=\"button\" value=\"分析\" />\n```\n添加地图（步骤省略）\n创建路径分析对象，创建路径分析参数对象（注意：还缺少两个重要的参数，停靠点，障碍点）\n```\n//创建路径分析对象\n                var shortestAnalyst = new RouteTask(\"http://localhost:6080/arcgis/rest/services/Test/mynet/NAServer/Route\");\n                //创建路径参数对象\n                var routeParas = new RouteParameters();\n                //障碍点，但是此时障碍点为空\n                routeParas.barriers = new FeatureSet();\n                //停靠点，但是此时停靠点为空\n                routeParas.stops = new FeatureSet();\n                //路径是否有方向\n                routeParas.returnDirections = false;\n                //是否返回路径，此处必须返回\n                routeParas.returnRoutes = true;\n                //空间参考\n                routeParas.outSpatialReference = map.SpatialReference;\n```\n给停靠点按钮和障碍点按钮绑定点击事件\n```\n//定义一个标志\n                //selectPointID=0什么都不做\n                //selectPointID=1说明是添加停靠点\n                //selectPointID=2说明是添加障碍点\n                var selectPointID;\n                //给停靠点按钮添加点击事件\n                on(dom.byId(\"stop\"),\"click\",function(){\n                    selectPointID = 1;\n                })\n                //给障碍点按钮添加点击事件\n                on(dom.byId(\"barriers\"),\"click\",function(){\n                    selectPointID = 2;\n                })\n```\n给地图绑定点击事件（为了获得点的坐标–>构建停靠点或者障碍点）\n```\n//定义停靠点的符号\n                var stopSymbol = new SimpleMarkerSymbol();\n                stopSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;\n                stopSymbol.setSize(8);\n                stopSymbol.setColor(new Color(\"#FFFFCC\"));\n                //定义障碍点的符号\n                var barrierSymbol = new SimpleMarkerSymbol();\n                barrierSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;\n                barrierSymbol.setSize(8);\n                barrierSymbol.setColor(new Color(\"#f1a340\"));\n                on(map, \"mouse-down\", function(evt){\n                    //通过selectPointID判断是添加是停靠点还是障碍点\n                    switch (selectPointID) {\n                        case 0:\n                            break;\n                        case 1:\n                            //获得停靠点的坐标\n                            var pointStop=evt.mapPoint;\n                            var gr=new Graphic(pointStop,stopSymbol);\n                            //构建停靠点的参数\n                            routeParas.stops.features.push(gr);\n                            break;\n                        case 2:\n                            //获得障碍点的坐标\n                            var pointBarrier=evt.mapPoint;\n                            var gr=new Graphic(pointBarrier,barrierSymbol);\n                            //构建障碍点的参数\n                            routeParas.barriers.features.push(gr);\n                            break;\n                    }\n                    //如果selectPointID不等于0，将点的坐标在地图上显示出来\n                    if (selectPointID != 0) {\n                        addTextPoint(\"停靠点\", pointStop, stopSymbol);\n                        addTextPoint(\"障碍点\", pointBarrier, barrierSymbol);\n                        selectPointID = 0;\n                    }\n                });\n                //文本符号：文本信息，点坐标，符号\n                function addTextPoint(text,point,symbol) {\n                    var textSymbol = new TextSymbol(text);\n                    textSymbol.setColor(new Color([128, 0, 0]));              \n                    var graphicText = Graphic(point, textSymbol);\n                    var graphicpoint = new Graphic(point, symbol);\n                    //用默认的图层添加\n                    map.graphics.add(graphicpoint);\n                    //用默认的图层添加\n                    map.graphics.add(graphicText);\n                }\n```\n给分析按钮绑定点击事件\n```\n//给分析按钮添加点击事件\n                on(dom.byId(\"analyse\"),\"click\",function(){\n                    //如果障碍点或者停靠点的个数有一个为0，提示用户参数输入不对\n                    if  (routeParas.stops.features.length  ==  0  || routeParas.barriers.features.length==0)\n                    {\n                        alert(\"输入参数不全，无法分析\");\n                        return;\n                    }\n                    //执行路径分析函数\n                    shortestAnalyst.solve(routeParas, showRoute)\n                })\n```\n获得结果，处理路径分析返回的结果。\n```\n//处理路径分析返回的结果。\n                function showRoute(solveResult) {\n                    //路径分析的结果\n                    var routeResults = solveResult.routeResults;\n                    //路径分析的长度\n                    var res = routeResults.length;\n                    //路径的符号\n                    routeSymbol  = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                    if (res > 0) {\n                        for (var i = 0; i < res; i++) {\n                            var graphicroute = routeResults[i];\n                            var graphic = graphicroute.route;\n                            graphic.setSymbol(routeSymbol);\n                            map.graphics.add(graphic);\n                        }\n                    }\n                    else {\n                        alert(\"没有返回结果\");\n                    }\n                }\n```\n#### 运行结果\n添加停靠点\n![01.png](01.png)\n添加障碍点\n![02.png](02.png)\n分析获得结果\n![03.png](03.png)\n#### 完整代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>Geometric _Network</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:600px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"dojo/on\",\n            \"dojo/dom\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/tasks/RouteTask\",\n            \"esri/tasks/FeatureSet\",\n            \"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/symbols/TextSymbol\",\n            \"esri/toolbars/draw\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/tasks/RouteParameters\",\n            \"dojo/colors\",\n            \"esri/graphic\",\n            \"dojo/domReady!\"],\n            function (Map,on,dom,\n                ArcGISDynamicMapServiceLayer,\n                RouteTask,\n                FeatureSet,\n                SimpleMarkerSymbol,\n                TextSymbol,\n                Draw,\n                SimpleLineSymbol,\n                RouteParameters,\n                Color,\n                Graphic\n                ) {\n                var map = new Map(\"MyMapDiv\");\n                var layer = new ArcGISDynamicMapServiceLayer\n                (\"http://localhost:6080/arcgis/rest/services/Test/mynet/MapServer\");\n                map.addLayer(layer)\n                //创建路径分析对象\n                var shortestAnalyst = new RouteTask(\"http://localhost:6080/arcgis/rest/services/Test/mynet/NAServer/Route\");\n                //创建路径参数对象\n                var routeParas = new RouteParameters();\n                //障碍点，但是此时障碍点为空\n                routeParas.barriers = new FeatureSet();\n                //停靠点，但是此时停靠点为空\n                routeParas.stops = new FeatureSet();\n                //路径是否有方向\n                routeParas.returnDirections = false;\n                //是否返回路径，此处必须返回\n                routeParas.returnRoutes = true;\n                //空间参考\n                routeParas.outSpatialReference = map.SpatialReference;\n                //定义一个标志\n                //selectPointID=0什么都不做\n                //selectPointID=1说明是添加停靠点\n                //selectPointID=2说明是添加障碍点\n                var selectPointID;\n                //给停靠点按钮添加点击事件\n                on(dom.byId(\"stop\"),\"click\",function(){\n                    selectPointID = 1;\n                })\n                //给障碍点按钮添加点击事件\n                on(dom.byId(\"barriers\"),\"click\",function(){\n                    selectPointID = 2;\n                })\n                //定义停靠点的符号\n                var stopSymbol = new SimpleMarkerSymbol();\n                stopSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;\n                stopSymbol.setSize(8);\n                stopSymbol.setColor(new Color(\"#FFFFCC\"));\n                //定义障碍点的符号\n                var barrierSymbol = new SimpleMarkerSymbol();\n                barrierSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;\n                barrierSymbol.setSize(8);\n                barrierSymbol.setColor(new Color(\"#f1a340\"));\n                on(map, \"mouse-down\", function(evt){\n                    //通过selectPointID判断是添加是停靠点还是障碍点\n                    switch (selectPointID) {\n                        case 0:\n                            break;\n                        case 1:\n                            //获得停靠点的坐标\n                            var pointStop=evt.mapPoint;\n                            var gr=new Graphic(pointStop,stopSymbol);\n                            //构建停靠点的参数\n                            routeParas.stops.features.push(gr);\n                            break;\n                        case 2:\n                            //获得障碍点的坐标\n                            var pointBarrier=evt.mapPoint;\n                            var gr=new Graphic(pointBarrier,barrierSymbol);\n                            //构建障碍点的参数\n                            routeParas.barriers.features.push(gr);\n                            break;\n                    }\n                    //如果selectPointID不等于0，将点的坐标在地图上显示出来\n                    if (selectPointID != 0) {\n                        addTextPoint(\"停靠点\", pointStop, stopSymbol);\n                        addTextPoint(\"障碍点\", pointBarrier, barrierSymbol);\n                        selectPointID = 0;\n                    }\n                });\n                //文本符号：文本信息，点坐标，符号\n                function addTextPoint(text,point,symbol) {\n                    var textSymbol = new TextSymbol(text);\n                    textSymbol.setColor(new Color([128, 0, 0]));              \n                    var graphicText = Graphic(point, textSymbol);\n                    var graphicpoint = new Graphic(point, symbol);\n                    //用默认的图层添加\n                    map.graphics.add(graphicpoint);\n                    map.graphics.add(graphicText);\n                }\n                //给分析按钮添加点击事件\n                on(dom.byId(\"analyse\"),\"click\",function(){\n                    //如果障碍点或者停靠点的个数有一个为0，提示用户参数输入不对\n                    if  (routeParas.stops.features.length  ==  0  || routeParas.barriers.features.length==0)\n                    {\n                        alert(\"输入参数不全，无法分析\");\n                        return;\n                    }\n                    //执行路径分析函数\n                    shortestAnalyst.solve(routeParas, showRoute)\n                })\n                //处理路径分析返回的结果。\n                function showRoute(solveResult) {\n                    //路径分析的结果\n                    var routeResults = solveResult.routeResults;\n                    //路径分析的长度\n                    var res = routeResults.length;\n                    //路径的符号\n                    routeSymbol  = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                    if (res > 0) {\n                        for (var i = 0; i < res; i++) {\n                            var graphicroute = routeResults[i];\n                            var graphic = graphicroute.route;\n                            graphic.setSymbol(routeSymbol);\n                            map.graphics.add(graphic);\n                        }\n                    }\n                    else {\n                        alert(\"没有返回结果\");\n                    }\n                }               \n            });\n\n\n    </script>\n</head>\n<body>\n    <div id=\"MyMapDiv\" class=\"MapClass\"></div>\n    <input id=\"stop\" type=\"button\" value=\"停靠点\" />\n    <input id=\"barriers\" type=\"button\" value=\"障碍点\" />\n    <input id=\"analyse\" type=\"button\" value=\"分析\" />\n    \n</body>\n</html>\n```","slug":"ArcGIS-API-for-JS21","published":1,"updated":"2019-08-06T09:42:42.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cuc001nt09zqn06fsj0","content":"<p>在WebGIS中网络分析一直是比较常用的功能，比如：路径分析，服务点分析等等,在WebGIS中想要实现相应的功能需要将我们的服务发布为网络服务。</p>\n<h3 id=\"路径分析\"><a href=\"#路径分析\" class=\"headerlink\" title=\"路径分析\"></a>路径分析</h3><p>在路径分析中，主要有两个比较关键的参数：</p>\n<ul>\n<li>停靠点</li>\n<li>障碍点</li>\n<li><p>总体来说，路径分析的步骤主要有以下几步：</p>\n</li>\n<li><p>发布网络分析服务</p>\n</li>\n<li>在Web端创建路径分析对象</li>\n<li>构建路径分析参数。<br>（1）停靠点<br>（2）障碍点</li>\n<li>获得结果，进行处理。</li>\n</ul>\n<p>####　代码实现<br>创建三个按钮（停靠点，障碍点，分析）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input id=&quot;Stop&quot; type=&quot;button&quot; value=&quot;停靠点&quot; /&gt;</span><br><span class=\"line\">&lt;input id=&quot;barriers&quot; type=&quot;button&quot; value=&quot;障碍点&quot; /&gt;</span><br><span class=\"line\">&lt;input id=&quot;Analyse&quot; type=&quot;button&quot; value=&quot;分析&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>添加地图（步骤省略）<br>创建路径分析对象，创建路径分析参数对象（注意：还缺少两个重要的参数，停靠点，障碍点）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建路径分析对象</span><br><span class=\"line\">                var shortestAnalyst = new RouteTask(&quot;http://localhost:6080/arcgis/rest/services/Test/mynet/NAServer/Route&quot;);</span><br><span class=\"line\">                //创建路径参数对象</span><br><span class=\"line\">                var routeParas = new RouteParameters();</span><br><span class=\"line\">                //障碍点，但是此时障碍点为空</span><br><span class=\"line\">                routeParas.barriers = new FeatureSet();</span><br><span class=\"line\">                //停靠点，但是此时停靠点为空</span><br><span class=\"line\">                routeParas.stops = new FeatureSet();</span><br><span class=\"line\">                //路径是否有方向</span><br><span class=\"line\">                routeParas.returnDirections = false;</span><br><span class=\"line\">                //是否返回路径，此处必须返回</span><br><span class=\"line\">                routeParas.returnRoutes = true;</span><br><span class=\"line\">                //空间参考</span><br><span class=\"line\">                routeParas.outSpatialReference = map.SpatialReference;</span><br></pre></td></tr></table></figure></p>\n<p>给停靠点按钮和障碍点按钮绑定点击事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义一个标志</span><br><span class=\"line\">                //selectPointID=0什么都不做</span><br><span class=\"line\">                //selectPointID=1说明是添加停靠点</span><br><span class=\"line\">                //selectPointID=2说明是添加障碍点</span><br><span class=\"line\">                var selectPointID;</span><br><span class=\"line\">                //给停靠点按钮添加点击事件</span><br><span class=\"line\">                on(dom.byId(&quot;stop&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    selectPointID = 1;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //给障碍点按钮添加点击事件</span><br><span class=\"line\">                on(dom.byId(&quot;barriers&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    selectPointID = 2;</span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>给地图绑定点击事件（为了获得点的坐标–&gt;构建停靠点或者障碍点）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义停靠点的符号</span><br><span class=\"line\">                var stopSymbol = new SimpleMarkerSymbol();</span><br><span class=\"line\">                stopSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;</span><br><span class=\"line\">                stopSymbol.setSize(8);</span><br><span class=\"line\">                stopSymbol.setColor(new Color(&quot;#FFFFCC&quot;));</span><br><span class=\"line\">                //定义障碍点的符号</span><br><span class=\"line\">                var barrierSymbol = new SimpleMarkerSymbol();</span><br><span class=\"line\">                barrierSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;</span><br><span class=\"line\">                barrierSymbol.setSize(8);</span><br><span class=\"line\">                barrierSymbol.setColor(new Color(&quot;#f1a340&quot;));</span><br><span class=\"line\">                on(map, &quot;mouse-down&quot;, function(evt)&#123;</span><br><span class=\"line\">                    //通过selectPointID判断是添加是停靠点还是障碍点</span><br><span class=\"line\">                    switch (selectPointID) &#123;</span><br><span class=\"line\">                        case 0:</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        case 1:</span><br><span class=\"line\">                            //获得停靠点的坐标</span><br><span class=\"line\">                            var pointStop=evt.mapPoint;</span><br><span class=\"line\">                            var gr=new Graphic(pointStop,stopSymbol);</span><br><span class=\"line\">                            //构建停靠点的参数</span><br><span class=\"line\">                            routeParas.stops.features.push(gr);</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        case 2:</span><br><span class=\"line\">                            //获得障碍点的坐标</span><br><span class=\"line\">                            var pointBarrier=evt.mapPoint;</span><br><span class=\"line\">                            var gr=new Graphic(pointBarrier,barrierSymbol);</span><br><span class=\"line\">                            //构建障碍点的参数</span><br><span class=\"line\">                            routeParas.barriers.features.push(gr);</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //如果selectPointID不等于0，将点的坐标在地图上显示出来</span><br><span class=\"line\">                    if (selectPointID != 0) &#123;</span><br><span class=\"line\">                        addTextPoint(&quot;停靠点&quot;, pointStop, stopSymbol);</span><br><span class=\"line\">                        addTextPoint(&quot;障碍点&quot;, pointBarrier, barrierSymbol);</span><br><span class=\"line\">                        selectPointID = 0;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                //文本符号：文本信息，点坐标，符号</span><br><span class=\"line\">                function addTextPoint(text,point,symbol) &#123;</span><br><span class=\"line\">                    var textSymbol = new TextSymbol(text);</span><br><span class=\"line\">                    textSymbol.setColor(new Color([128, 0, 0]));              </span><br><span class=\"line\">                    var graphicText = Graphic(point, textSymbol);</span><br><span class=\"line\">                    var graphicpoint = new Graphic(point, symbol);</span><br><span class=\"line\">                    //用默认的图层添加</span><br><span class=\"line\">                    map.graphics.add(graphicpoint);</span><br><span class=\"line\">                    //用默认的图层添加</span><br><span class=\"line\">                    map.graphics.add(graphicText);</span><br><span class=\"line\">                &#125;</span><br></pre></td></tr></table></figure></p>\n<p>给分析按钮绑定点击事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给分析按钮添加点击事件</span><br><span class=\"line\">                on(dom.byId(&quot;analyse&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //如果障碍点或者停靠点的个数有一个为0，提示用户参数输入不对</span><br><span class=\"line\">                    if  (routeParas.stops.features.length  ==  0  || routeParas.barriers.features.length==0)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        alert(&quot;输入参数不全，无法分析&quot;);</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //执行路径分析函数</span><br><span class=\"line\">                    shortestAnalyst.solve(routeParas, showRoute)</span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>获得结果，处理路径分析返回的结果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//处理路径分析返回的结果。</span><br><span class=\"line\">                function showRoute(solveResult) &#123;</span><br><span class=\"line\">                    //路径分析的结果</span><br><span class=\"line\">                    var routeResults = solveResult.routeResults;</span><br><span class=\"line\">                    //路径分析的长度</span><br><span class=\"line\">                    var res = routeResults.length;</span><br><span class=\"line\">                    //路径的符号</span><br><span class=\"line\">                    routeSymbol  = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                    if (res &gt; 0) &#123;</span><br><span class=\"line\">                        for (var i = 0; i &lt; res; i++) &#123;</span><br><span class=\"line\">                            var graphicroute = routeResults[i];</span><br><span class=\"line\">                            var graphic = graphicroute.route;</span><br><span class=\"line\">                            graphic.setSymbol(routeSymbol);</span><br><span class=\"line\">                            map.graphics.add(graphic);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else &#123;</span><br><span class=\"line\">                        alert(&quot;没有返回结果&quot;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p>添加停靠点<br><img src=\"/2019/08/06/ArcGIS-API-for-JS21/01.png\" alt=\"01.png\"><br>添加障碍点<br><img src=\"/2019/08/06/ArcGIS-API-for-JS21/02.png\" alt=\"02.png\"><br>分析获得结果<br><img src=\"/2019/08/06/ArcGIS-API-for-JS21/03.png\" alt=\"03.png\"></p>\n<h4 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;Geometric _Network&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/RouteTask&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/FeatureSet&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/TextSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/RouteParameters&quot;,</span><br><span class=\"line\">            &quot;dojo/colors&quot;,</span><br><span class=\"line\">            &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map,on,dom,</span><br><span class=\"line\">                ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                RouteTask,</span><br><span class=\"line\">                FeatureSet,</span><br><span class=\"line\">                SimpleMarkerSymbol,</span><br><span class=\"line\">                TextSymbol,</span><br><span class=\"line\">                Draw,</span><br><span class=\"line\">                SimpleLineSymbol,</span><br><span class=\"line\">                RouteParameters,</span><br><span class=\"line\">                Color,</span><br><span class=\"line\">                Graphic</span><br><span class=\"line\">                ) &#123;</span><br><span class=\"line\">                var map = new Map(&quot;MyMapDiv&quot;);</span><br><span class=\"line\">                var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">                (&quot;http://localhost:6080/arcgis/rest/services/Test/mynet/MapServer&quot;);</span><br><span class=\"line\">                map.addLayer(layer)</span><br><span class=\"line\">                //创建路径分析对象</span><br><span class=\"line\">                var shortestAnalyst = new RouteTask(&quot;http://localhost:6080/arcgis/rest/services/Test/mynet/NAServer/Route&quot;);</span><br><span class=\"line\">                //创建路径参数对象</span><br><span class=\"line\">                var routeParas = new RouteParameters();</span><br><span class=\"line\">                //障碍点，但是此时障碍点为空</span><br><span class=\"line\">                routeParas.barriers = new FeatureSet();</span><br><span class=\"line\">                //停靠点，但是此时停靠点为空</span><br><span class=\"line\">                routeParas.stops = new FeatureSet();</span><br><span class=\"line\">                //路径是否有方向</span><br><span class=\"line\">                routeParas.returnDirections = false;</span><br><span class=\"line\">                //是否返回路径，此处必须返回</span><br><span class=\"line\">                routeParas.returnRoutes = true;</span><br><span class=\"line\">                //空间参考</span><br><span class=\"line\">                routeParas.outSpatialReference = map.SpatialReference;</span><br><span class=\"line\">                //定义一个标志</span><br><span class=\"line\">                //selectPointID=0什么都不做</span><br><span class=\"line\">                //selectPointID=1说明是添加停靠点</span><br><span class=\"line\">                //selectPointID=2说明是添加障碍点</span><br><span class=\"line\">                var selectPointID;</span><br><span class=\"line\">                //给停靠点按钮添加点击事件</span><br><span class=\"line\">                on(dom.byId(&quot;stop&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    selectPointID = 1;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //给障碍点按钮添加点击事件</span><br><span class=\"line\">                on(dom.byId(&quot;barriers&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    selectPointID = 2;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //定义停靠点的符号</span><br><span class=\"line\">                var stopSymbol = new SimpleMarkerSymbol();</span><br><span class=\"line\">                stopSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;</span><br><span class=\"line\">                stopSymbol.setSize(8);</span><br><span class=\"line\">                stopSymbol.setColor(new Color(&quot;#FFFFCC&quot;));</span><br><span class=\"line\">                //定义障碍点的符号</span><br><span class=\"line\">                var barrierSymbol = new SimpleMarkerSymbol();</span><br><span class=\"line\">                barrierSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;</span><br><span class=\"line\">                barrierSymbol.setSize(8);</span><br><span class=\"line\">                barrierSymbol.setColor(new Color(&quot;#f1a340&quot;));</span><br><span class=\"line\">                on(map, &quot;mouse-down&quot;, function(evt)&#123;</span><br><span class=\"line\">                    //通过selectPointID判断是添加是停靠点还是障碍点</span><br><span class=\"line\">                    switch (selectPointID) &#123;</span><br><span class=\"line\">                        case 0:</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        case 1:</span><br><span class=\"line\">                            //获得停靠点的坐标</span><br><span class=\"line\">                            var pointStop=evt.mapPoint;</span><br><span class=\"line\">                            var gr=new Graphic(pointStop,stopSymbol);</span><br><span class=\"line\">                            //构建停靠点的参数</span><br><span class=\"line\">                            routeParas.stops.features.push(gr);</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        case 2:</span><br><span class=\"line\">                            //获得障碍点的坐标</span><br><span class=\"line\">                            var pointBarrier=evt.mapPoint;</span><br><span class=\"line\">                            var gr=new Graphic(pointBarrier,barrierSymbol);</span><br><span class=\"line\">                            //构建障碍点的参数</span><br><span class=\"line\">                            routeParas.barriers.features.push(gr);</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //如果selectPointID不等于0，将点的坐标在地图上显示出来</span><br><span class=\"line\">                    if (selectPointID != 0) &#123;</span><br><span class=\"line\">                        addTextPoint(&quot;停靠点&quot;, pointStop, stopSymbol);</span><br><span class=\"line\">                        addTextPoint(&quot;障碍点&quot;, pointBarrier, barrierSymbol);</span><br><span class=\"line\">                        selectPointID = 0;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                //文本符号：文本信息，点坐标，符号</span><br><span class=\"line\">                function addTextPoint(text,point,symbol) &#123;</span><br><span class=\"line\">                    var textSymbol = new TextSymbol(text);</span><br><span class=\"line\">                    textSymbol.setColor(new Color([128, 0, 0]));              </span><br><span class=\"line\">                    var graphicText = Graphic(point, textSymbol);</span><br><span class=\"line\">                    var graphicpoint = new Graphic(point, symbol);</span><br><span class=\"line\">                    //用默认的图层添加</span><br><span class=\"line\">                    map.graphics.add(graphicpoint);</span><br><span class=\"line\">                    map.graphics.add(graphicText);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //给分析按钮添加点击事件</span><br><span class=\"line\">                on(dom.byId(&quot;analyse&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //如果障碍点或者停靠点的个数有一个为0，提示用户参数输入不对</span><br><span class=\"line\">                    if  (routeParas.stops.features.length  ==  0  || routeParas.barriers.features.length==0)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        alert(&quot;输入参数不全，无法分析&quot;);</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //执行路径分析函数</span><br><span class=\"line\">                    shortestAnalyst.solve(routeParas, showRoute)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //处理路径分析返回的结果。</span><br><span class=\"line\">                function showRoute(solveResult) &#123;</span><br><span class=\"line\">                    //路径分析的结果</span><br><span class=\"line\">                    var routeResults = solveResult.routeResults;</span><br><span class=\"line\">                    //路径分析的长度</span><br><span class=\"line\">                    var res = routeResults.length;</span><br><span class=\"line\">                    //路径的符号</span><br><span class=\"line\">                    routeSymbol  = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                    if (res &gt; 0) &#123;</span><br><span class=\"line\">                        for (var i = 0; i &lt; res; i++) &#123;</span><br><span class=\"line\">                            var graphicroute = routeResults[i];</span><br><span class=\"line\">                            var graphic = graphicroute.route;</span><br><span class=\"line\">                            graphic.setSymbol(routeSymbol);</span><br><span class=\"line\">                            map.graphics.add(graphic);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else &#123;</span><br><span class=\"line\">                        alert(&quot;没有返回结果&quot;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;               </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;MyMapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;input id=&quot;stop&quot; type=&quot;button&quot; value=&quot;停靠点&quot; /&gt;</span><br><span class=\"line\">    &lt;input id=&quot;barriers&quot; type=&quot;button&quot; value=&quot;障碍点&quot; /&gt;</span><br><span class=\"line\">    &lt;input id=&quot;analyse&quot; type=&quot;button&quot; value=&quot;分析&quot; /&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>在WebGIS中网络分析一直是比较常用的功能，比如：路径分析，服务点分析等等,在WebGIS中想要实现相应的功能需要将我们的服务发布为网络服务。</p>\n<h3 id=\"路径分析\"><a href=\"#路径分析\" class=\"headerlink\" title=\"路径分析\"></a>路径分析</h3><p>在路径分析中，主要有两个比较关键的参数：</p>\n<ul>\n<li>停靠点</li>\n<li>障碍点</li>\n<li><p>总体来说，路径分析的步骤主要有以下几步：</p>\n</li>\n<li><p>发布网络分析服务</p>\n</li>\n<li>在Web端创建路径分析对象</li>\n<li>构建路径分析参数。<br>（1）停靠点<br>（2）障碍点</li>\n<li>获得结果，进行处理。</li>\n</ul>\n<p>####　代码实现<br>创建三个按钮（停靠点，障碍点，分析）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input id=&quot;Stop&quot; type=&quot;button&quot; value=&quot;停靠点&quot; /&gt;</span><br><span class=\"line\">&lt;input id=&quot;barriers&quot; type=&quot;button&quot; value=&quot;障碍点&quot; /&gt;</span><br><span class=\"line\">&lt;input id=&quot;Analyse&quot; type=&quot;button&quot; value=&quot;分析&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>添加地图（步骤省略）<br>创建路径分析对象，创建路径分析参数对象（注意：还缺少两个重要的参数，停靠点，障碍点）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建路径分析对象</span><br><span class=\"line\">                var shortestAnalyst = new RouteTask(&quot;http://localhost:6080/arcgis/rest/services/Test/mynet/NAServer/Route&quot;);</span><br><span class=\"line\">                //创建路径参数对象</span><br><span class=\"line\">                var routeParas = new RouteParameters();</span><br><span class=\"line\">                //障碍点，但是此时障碍点为空</span><br><span class=\"line\">                routeParas.barriers = new FeatureSet();</span><br><span class=\"line\">                //停靠点，但是此时停靠点为空</span><br><span class=\"line\">                routeParas.stops = new FeatureSet();</span><br><span class=\"line\">                //路径是否有方向</span><br><span class=\"line\">                routeParas.returnDirections = false;</span><br><span class=\"line\">                //是否返回路径，此处必须返回</span><br><span class=\"line\">                routeParas.returnRoutes = true;</span><br><span class=\"line\">                //空间参考</span><br><span class=\"line\">                routeParas.outSpatialReference = map.SpatialReference;</span><br></pre></td></tr></table></figure></p>\n<p>给停靠点按钮和障碍点按钮绑定点击事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义一个标志</span><br><span class=\"line\">                //selectPointID=0什么都不做</span><br><span class=\"line\">                //selectPointID=1说明是添加停靠点</span><br><span class=\"line\">                //selectPointID=2说明是添加障碍点</span><br><span class=\"line\">                var selectPointID;</span><br><span class=\"line\">                //给停靠点按钮添加点击事件</span><br><span class=\"line\">                on(dom.byId(&quot;stop&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    selectPointID = 1;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //给障碍点按钮添加点击事件</span><br><span class=\"line\">                on(dom.byId(&quot;barriers&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    selectPointID = 2;</span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>给地图绑定点击事件（为了获得点的坐标–&gt;构建停靠点或者障碍点）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义停靠点的符号</span><br><span class=\"line\">                var stopSymbol = new SimpleMarkerSymbol();</span><br><span class=\"line\">                stopSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;</span><br><span class=\"line\">                stopSymbol.setSize(8);</span><br><span class=\"line\">                stopSymbol.setColor(new Color(&quot;#FFFFCC&quot;));</span><br><span class=\"line\">                //定义障碍点的符号</span><br><span class=\"line\">                var barrierSymbol = new SimpleMarkerSymbol();</span><br><span class=\"line\">                barrierSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;</span><br><span class=\"line\">                barrierSymbol.setSize(8);</span><br><span class=\"line\">                barrierSymbol.setColor(new Color(&quot;#f1a340&quot;));</span><br><span class=\"line\">                on(map, &quot;mouse-down&quot;, function(evt)&#123;</span><br><span class=\"line\">                    //通过selectPointID判断是添加是停靠点还是障碍点</span><br><span class=\"line\">                    switch (selectPointID) &#123;</span><br><span class=\"line\">                        case 0:</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        case 1:</span><br><span class=\"line\">                            //获得停靠点的坐标</span><br><span class=\"line\">                            var pointStop=evt.mapPoint;</span><br><span class=\"line\">                            var gr=new Graphic(pointStop,stopSymbol);</span><br><span class=\"line\">                            //构建停靠点的参数</span><br><span class=\"line\">                            routeParas.stops.features.push(gr);</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        case 2:</span><br><span class=\"line\">                            //获得障碍点的坐标</span><br><span class=\"line\">                            var pointBarrier=evt.mapPoint;</span><br><span class=\"line\">                            var gr=new Graphic(pointBarrier,barrierSymbol);</span><br><span class=\"line\">                            //构建障碍点的参数</span><br><span class=\"line\">                            routeParas.barriers.features.push(gr);</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //如果selectPointID不等于0，将点的坐标在地图上显示出来</span><br><span class=\"line\">                    if (selectPointID != 0) &#123;</span><br><span class=\"line\">                        addTextPoint(&quot;停靠点&quot;, pointStop, stopSymbol);</span><br><span class=\"line\">                        addTextPoint(&quot;障碍点&quot;, pointBarrier, barrierSymbol);</span><br><span class=\"line\">                        selectPointID = 0;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                //文本符号：文本信息，点坐标，符号</span><br><span class=\"line\">                function addTextPoint(text,point,symbol) &#123;</span><br><span class=\"line\">                    var textSymbol = new TextSymbol(text);</span><br><span class=\"line\">                    textSymbol.setColor(new Color([128, 0, 0]));              </span><br><span class=\"line\">                    var graphicText = Graphic(point, textSymbol);</span><br><span class=\"line\">                    var graphicpoint = new Graphic(point, symbol);</span><br><span class=\"line\">                    //用默认的图层添加</span><br><span class=\"line\">                    map.graphics.add(graphicpoint);</span><br><span class=\"line\">                    //用默认的图层添加</span><br><span class=\"line\">                    map.graphics.add(graphicText);</span><br><span class=\"line\">                &#125;</span><br></pre></td></tr></table></figure></p>\n<p>给分析按钮绑定点击事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给分析按钮添加点击事件</span><br><span class=\"line\">                on(dom.byId(&quot;analyse&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //如果障碍点或者停靠点的个数有一个为0，提示用户参数输入不对</span><br><span class=\"line\">                    if  (routeParas.stops.features.length  ==  0  || routeParas.barriers.features.length==0)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        alert(&quot;输入参数不全，无法分析&quot;);</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //执行路径分析函数</span><br><span class=\"line\">                    shortestAnalyst.solve(routeParas, showRoute)</span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>获得结果，处理路径分析返回的结果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//处理路径分析返回的结果。</span><br><span class=\"line\">                function showRoute(solveResult) &#123;</span><br><span class=\"line\">                    //路径分析的结果</span><br><span class=\"line\">                    var routeResults = solveResult.routeResults;</span><br><span class=\"line\">                    //路径分析的长度</span><br><span class=\"line\">                    var res = routeResults.length;</span><br><span class=\"line\">                    //路径的符号</span><br><span class=\"line\">                    routeSymbol  = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                    if (res &gt; 0) &#123;</span><br><span class=\"line\">                        for (var i = 0; i &lt; res; i++) &#123;</span><br><span class=\"line\">                            var graphicroute = routeResults[i];</span><br><span class=\"line\">                            var graphic = graphicroute.route;</span><br><span class=\"line\">                            graphic.setSymbol(routeSymbol);</span><br><span class=\"line\">                            map.graphics.add(graphic);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else &#123;</span><br><span class=\"line\">                        alert(&quot;没有返回结果&quot;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p>添加停靠点<br><img src=\"/2019/08/06/ArcGIS-API-for-JS21/01.png\" alt=\"01.png\"><br>添加障碍点<br><img src=\"/2019/08/06/ArcGIS-API-for-JS21/02.png\" alt=\"02.png\"><br>分析获得结果<br><img src=\"/2019/08/06/ArcGIS-API-for-JS21/03.png\" alt=\"03.png\"></p>\n<h4 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;Geometric _Network&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:600px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/RouteTask&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/FeatureSet&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/TextSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/RouteParameters&quot;,</span><br><span class=\"line\">            &quot;dojo/colors&quot;,</span><br><span class=\"line\">            &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map,on,dom,</span><br><span class=\"line\">                ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                RouteTask,</span><br><span class=\"line\">                FeatureSet,</span><br><span class=\"line\">                SimpleMarkerSymbol,</span><br><span class=\"line\">                TextSymbol,</span><br><span class=\"line\">                Draw,</span><br><span class=\"line\">                SimpleLineSymbol,</span><br><span class=\"line\">                RouteParameters,</span><br><span class=\"line\">                Color,</span><br><span class=\"line\">                Graphic</span><br><span class=\"line\">                ) &#123;</span><br><span class=\"line\">                var map = new Map(&quot;MyMapDiv&quot;);</span><br><span class=\"line\">                var layer = new ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">                (&quot;http://localhost:6080/arcgis/rest/services/Test/mynet/MapServer&quot;);</span><br><span class=\"line\">                map.addLayer(layer)</span><br><span class=\"line\">                //创建路径分析对象</span><br><span class=\"line\">                var shortestAnalyst = new RouteTask(&quot;http://localhost:6080/arcgis/rest/services/Test/mynet/NAServer/Route&quot;);</span><br><span class=\"line\">                //创建路径参数对象</span><br><span class=\"line\">                var routeParas = new RouteParameters();</span><br><span class=\"line\">                //障碍点，但是此时障碍点为空</span><br><span class=\"line\">                routeParas.barriers = new FeatureSet();</span><br><span class=\"line\">                //停靠点，但是此时停靠点为空</span><br><span class=\"line\">                routeParas.stops = new FeatureSet();</span><br><span class=\"line\">                //路径是否有方向</span><br><span class=\"line\">                routeParas.returnDirections = false;</span><br><span class=\"line\">                //是否返回路径，此处必须返回</span><br><span class=\"line\">                routeParas.returnRoutes = true;</span><br><span class=\"line\">                //空间参考</span><br><span class=\"line\">                routeParas.outSpatialReference = map.SpatialReference;</span><br><span class=\"line\">                //定义一个标志</span><br><span class=\"line\">                //selectPointID=0什么都不做</span><br><span class=\"line\">                //selectPointID=1说明是添加停靠点</span><br><span class=\"line\">                //selectPointID=2说明是添加障碍点</span><br><span class=\"line\">                var selectPointID;</span><br><span class=\"line\">                //给停靠点按钮添加点击事件</span><br><span class=\"line\">                on(dom.byId(&quot;stop&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    selectPointID = 1;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //给障碍点按钮添加点击事件</span><br><span class=\"line\">                on(dom.byId(&quot;barriers&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    selectPointID = 2;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //定义停靠点的符号</span><br><span class=\"line\">                var stopSymbol = new SimpleMarkerSymbol();</span><br><span class=\"line\">                stopSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;</span><br><span class=\"line\">                stopSymbol.setSize(8);</span><br><span class=\"line\">                stopSymbol.setColor(new Color(&quot;#FFFFCC&quot;));</span><br><span class=\"line\">                //定义障碍点的符号</span><br><span class=\"line\">                var barrierSymbol = new SimpleMarkerSymbol();</span><br><span class=\"line\">                barrierSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;</span><br><span class=\"line\">                barrierSymbol.setSize(8);</span><br><span class=\"line\">                barrierSymbol.setColor(new Color(&quot;#f1a340&quot;));</span><br><span class=\"line\">                on(map, &quot;mouse-down&quot;, function(evt)&#123;</span><br><span class=\"line\">                    //通过selectPointID判断是添加是停靠点还是障碍点</span><br><span class=\"line\">                    switch (selectPointID) &#123;</span><br><span class=\"line\">                        case 0:</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        case 1:</span><br><span class=\"line\">                            //获得停靠点的坐标</span><br><span class=\"line\">                            var pointStop=evt.mapPoint;</span><br><span class=\"line\">                            var gr=new Graphic(pointStop,stopSymbol);</span><br><span class=\"line\">                            //构建停靠点的参数</span><br><span class=\"line\">                            routeParas.stops.features.push(gr);</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        case 2:</span><br><span class=\"line\">                            //获得障碍点的坐标</span><br><span class=\"line\">                            var pointBarrier=evt.mapPoint;</span><br><span class=\"line\">                            var gr=new Graphic(pointBarrier,barrierSymbol);</span><br><span class=\"line\">                            //构建障碍点的参数</span><br><span class=\"line\">                            routeParas.barriers.features.push(gr);</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //如果selectPointID不等于0，将点的坐标在地图上显示出来</span><br><span class=\"line\">                    if (selectPointID != 0) &#123;</span><br><span class=\"line\">                        addTextPoint(&quot;停靠点&quot;, pointStop, stopSymbol);</span><br><span class=\"line\">                        addTextPoint(&quot;障碍点&quot;, pointBarrier, barrierSymbol);</span><br><span class=\"line\">                        selectPointID = 0;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                //文本符号：文本信息，点坐标，符号</span><br><span class=\"line\">                function addTextPoint(text,point,symbol) &#123;</span><br><span class=\"line\">                    var textSymbol = new TextSymbol(text);</span><br><span class=\"line\">                    textSymbol.setColor(new Color([128, 0, 0]));              </span><br><span class=\"line\">                    var graphicText = Graphic(point, textSymbol);</span><br><span class=\"line\">                    var graphicpoint = new Graphic(point, symbol);</span><br><span class=\"line\">                    //用默认的图层添加</span><br><span class=\"line\">                    map.graphics.add(graphicpoint);</span><br><span class=\"line\">                    map.graphics.add(graphicText);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                //给分析按钮添加点击事件</span><br><span class=\"line\">                on(dom.byId(&quot;analyse&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //如果障碍点或者停靠点的个数有一个为0，提示用户参数输入不对</span><br><span class=\"line\">                    if  (routeParas.stops.features.length  ==  0  || routeParas.barriers.features.length==0)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        alert(&quot;输入参数不全，无法分析&quot;);</span><br><span class=\"line\">                        return;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //执行路径分析函数</span><br><span class=\"line\">                    shortestAnalyst.solve(routeParas, showRoute)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //处理路径分析返回的结果。</span><br><span class=\"line\">                function showRoute(solveResult) &#123;</span><br><span class=\"line\">                    //路径分析的结果</span><br><span class=\"line\">                    var routeResults = solveResult.routeResults;</span><br><span class=\"line\">                    //路径分析的长度</span><br><span class=\"line\">                    var res = routeResults.length;</span><br><span class=\"line\">                    //路径的符号</span><br><span class=\"line\">                    routeSymbol  = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                    if (res &gt; 0) &#123;</span><br><span class=\"line\">                        for (var i = 0; i &lt; res; i++) &#123;</span><br><span class=\"line\">                            var graphicroute = routeResults[i];</span><br><span class=\"line\">                            var graphic = graphicroute.route;</span><br><span class=\"line\">                            graphic.setSymbol(routeSymbol);</span><br><span class=\"line\">                            map.graphics.add(graphic);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else &#123;</span><br><span class=\"line\">                        alert(&quot;没有返回结果&quot;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;               </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;MyMapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;input id=&quot;stop&quot; type=&quot;button&quot; value=&quot;停靠点&quot; /&gt;</span><br><span class=\"line\">    &lt;input id=&quot;barriers&quot; type=&quot;button&quot; value=&quot;障碍点&quot; /&gt;</span><br><span class=\"line\">    &lt;input id=&quot;analyse&quot; type=&quot;button&quot; value=&quot;分析&quot; /&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ArcGIS API For Javascript之调用地理编码服务","date":"2019-08-06T10:03:13.000Z","_content":"地理编码（Geocoding）指建立地理位置坐标与给定地址一致性的过程，简单的说就是将一个地址的描述信息映射为地图上该地址所对应的空间位置。\n      根据输入的地址找到对应的空间信息。当输入一个地址的时候，可能会查到好多个空间位置，程序会给每一个位置一个打分，匹配的越完全的比分越高。（注意这里说的）\n### 调用地理编码服务\n#### 查看我们发布的服务\n首先看一下发布的服务数据\n![01.png](01.png)\n我发布的地理编码服务是：name为主键\n\n注意应该输入的参数\n![02.png](02.png)\n#### 代码实现\n添加地图（略）\n创建三个html要素\n```\n    Name:<input class=\"nm\" type=\"text\">\n    <input id=\"btn\" type=\"button\" value=\"定位\">\n    <div id=\"divShowResult\"></div>\n```\n给定位按钮添加绑定事件\n```\n//执行方法\n                        locator.addressToLocations(options,function(candidates){\n                            //获得运行之后的信息\n                            if (candidates.length > 0){\n                                    //拼接字符串\n                                    var htmls = \"<table style='width: 100%'>\"; \n                                    htmls = htmls + \"<tr bgcolor='#E0E0E0'><td>X 坐标</td><td>Y 坐标</td><td>得分</td></tr>\"; \n                                    array.forEach(candidates, function (candidate, index) {  \n                                        if (index % 2 == 1) { \n                                            htmls = htmls + \"<tr  bgcolor='#E0E0E0'><td style='width: 60px'>\" + candidate.location.x + \"</td><td style='width: 60px'>\" + candidate.location.y+ \"</td><td>\" + candidate.score + \"</td></tr>\"; \n                                        } else { \n                                            htmls = htmls + \"<tr><td style='width: 60px'>\" + candidate.location.x + \"</td><td style='width: 60px'>\" + candidate.location.y+ \"</td><td>\" + candidate.score + \"</td></tr>\";\n                                        }                                       \n                                    }); \n                                    htmls = htmls + \"</table>\"; \n                                    //将拼接的字符串显示在页面上\n                                    dom.byId(\"divShowResult\").innerHTML = htmls;\n                            }\n                        },function(error){alert(error)});   \n```\n#### 运行结果\n![03.png](03.png)\n#### 全部代码\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"gbk\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script type=\"text/javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <script>\n\n\n        require([\"esri/map\",\"dojo/query\",\"dojo/on\",\"dojo/_base/array\",\"dojo/dom\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/tasks/locator\",\n            \"esri/symbols/SimpleMarkerSymbol\",\n            \"dojo/colors\",\n            \"esri/InfoTemplate\",\"esri/graphic\",\n            \"dojo/domReady!\"],\n                function(Map,query,on,array,dom,ArcGISDynamicMapServiceLayer,Locator,SimpleMarkerSymbol,Color,InfoTemplate,Graphic){\n                    var map = new Map(\"mapDiv\");\n                    var layer=new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\");\n                    map.addLayer(layer);\n                    query(\"#btn\").on(\"click\",function(){\n                        //获得教学楼的名称\n                        var name=query(\".nm\")[0].value;\n                        //创建地理编码对象\n                        var locator = new Locator(\"http://localhost:6080/arcgis/rest/services/Test/nameLoc/GeocodeServer\");\n                        //注意这里的参数要和服务的参数对应\n                        var address = { \"Single Line Input\": name}; \n                        //输出的空间参考\n                        locator.outSpatialReference = map.spatialReference; \n                        var options = { \n                            address: address, \n                            outFields: [\"*\"] \n                        } \n                        //执行方法\n                        locator.addressToLocations(options,function(candidates){\n                            //获得运行之后的信息\n                            if (candidates.length > 0){\n                                    //拼接字符串\n                                    var htmls = \"<table style='width: 100%'>\"; \n                                    htmls = htmls + \"<tr bgcolor='#E0E0E0'><td>X 坐标</td><td>Y 坐标</td><td>得分</td></tr>\"; \n                                    array.forEach(candidates, function (candidate, index) {  \n                                        if (index % 2 == 1) { \n                                            htmls = htmls + \"<tr  bgcolor='#E0E0E0'><td style='width: 60px'>\" + candidate.location.x + \"</td><td style='width: 60px'>\" + candidate.location.y+ \"</td><td>\" + candidate.score + \"</td></tr>\"; \n                                        } else { \n                                            htmls = htmls + \"<tr><td style='width: 60px'>\" + candidate.location.x + \"</td><td style='width: 60px'>\" + candidate.location.y+ \"</td><td>\" + candidate.score + \"</td></tr>\";\n                                        }                                       \n                                    }); \n                                    htmls = htmls + \"</table>\"; \n                                    //将拼接的字符串显示在页面上\n                                    dom.byId(\"divShowResult\").innerHTML = htmls;\n                            }\n                        },function(error){alert(error)});                               });                             \n                });\n                       \n                              \n    </script>\n</head>\n<body class=\"tundra\">\n<div id=\"mapDiv\" style=\"width:900px; height:580px; border:1px solid #000;\"></div>\n    Name:<input class=\"nm\" type=\"text\">\n    <input id=\"btn\" type=\"button\" value=\"定位\">\n    <div id=\"divShowResult\"></div>\n</body>\n</html>\n```","source":"_posts/ArcGIS-API-for-JS24.md","raw":"---\ntitle: ArcGIS API For Javascript之调用地理编码服务\ndate: 2019-08-06 18:03:13\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n地理编码（Geocoding）指建立地理位置坐标与给定地址一致性的过程，简单的说就是将一个地址的描述信息映射为地图上该地址所对应的空间位置。\n      根据输入的地址找到对应的空间信息。当输入一个地址的时候，可能会查到好多个空间位置，程序会给每一个位置一个打分，匹配的越完全的比分越高。（注意这里说的）\n### 调用地理编码服务\n#### 查看我们发布的服务\n首先看一下发布的服务数据\n![01.png](01.png)\n我发布的地理编码服务是：name为主键\n\n注意应该输入的参数\n![02.png](02.png)\n#### 代码实现\n添加地图（略）\n创建三个html要素\n```\n    Name:<input class=\"nm\" type=\"text\">\n    <input id=\"btn\" type=\"button\" value=\"定位\">\n    <div id=\"divShowResult\"></div>\n```\n给定位按钮添加绑定事件\n```\n//执行方法\n                        locator.addressToLocations(options,function(candidates){\n                            //获得运行之后的信息\n                            if (candidates.length > 0){\n                                    //拼接字符串\n                                    var htmls = \"<table style='width: 100%'>\"; \n                                    htmls = htmls + \"<tr bgcolor='#E0E0E0'><td>X 坐标</td><td>Y 坐标</td><td>得分</td></tr>\"; \n                                    array.forEach(candidates, function (candidate, index) {  \n                                        if (index % 2 == 1) { \n                                            htmls = htmls + \"<tr  bgcolor='#E0E0E0'><td style='width: 60px'>\" + candidate.location.x + \"</td><td style='width: 60px'>\" + candidate.location.y+ \"</td><td>\" + candidate.score + \"</td></tr>\"; \n                                        } else { \n                                            htmls = htmls + \"<tr><td style='width: 60px'>\" + candidate.location.x + \"</td><td style='width: 60px'>\" + candidate.location.y+ \"</td><td>\" + candidate.score + \"</td></tr>\";\n                                        }                                       \n                                    }); \n                                    htmls = htmls + \"</table>\"; \n                                    //将拼接的字符串显示在页面上\n                                    dom.byId(\"divShowResult\").innerHTML = htmls;\n                            }\n                        },function(error){alert(error)});   \n```\n#### 运行结果\n![03.png](03.png)\n#### 全部代码\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"gbk\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script type=\"text/javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <script>\n\n\n        require([\"esri/map\",\"dojo/query\",\"dojo/on\",\"dojo/_base/array\",\"dojo/dom\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/tasks/locator\",\n            \"esri/symbols/SimpleMarkerSymbol\",\n            \"dojo/colors\",\n            \"esri/InfoTemplate\",\"esri/graphic\",\n            \"dojo/domReady!\"],\n                function(Map,query,on,array,dom,ArcGISDynamicMapServiceLayer,Locator,SimpleMarkerSymbol,Color,InfoTemplate,Graphic){\n                    var map = new Map(\"mapDiv\");\n                    var layer=new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer\");\n                    map.addLayer(layer);\n                    query(\"#btn\").on(\"click\",function(){\n                        //获得教学楼的名称\n                        var name=query(\".nm\")[0].value;\n                        //创建地理编码对象\n                        var locator = new Locator(\"http://localhost:6080/arcgis/rest/services/Test/nameLoc/GeocodeServer\");\n                        //注意这里的参数要和服务的参数对应\n                        var address = { \"Single Line Input\": name}; \n                        //输出的空间参考\n                        locator.outSpatialReference = map.spatialReference; \n                        var options = { \n                            address: address, \n                            outFields: [\"*\"] \n                        } \n                        //执行方法\n                        locator.addressToLocations(options,function(candidates){\n                            //获得运行之后的信息\n                            if (candidates.length > 0){\n                                    //拼接字符串\n                                    var htmls = \"<table style='width: 100%'>\"; \n                                    htmls = htmls + \"<tr bgcolor='#E0E0E0'><td>X 坐标</td><td>Y 坐标</td><td>得分</td></tr>\"; \n                                    array.forEach(candidates, function (candidate, index) {  \n                                        if (index % 2 == 1) { \n                                            htmls = htmls + \"<tr  bgcolor='#E0E0E0'><td style='width: 60px'>\" + candidate.location.x + \"</td><td style='width: 60px'>\" + candidate.location.y+ \"</td><td>\" + candidate.score + \"</td></tr>\"; \n                                        } else { \n                                            htmls = htmls + \"<tr><td style='width: 60px'>\" + candidate.location.x + \"</td><td style='width: 60px'>\" + candidate.location.y+ \"</td><td>\" + candidate.score + \"</td></tr>\";\n                                        }                                       \n                                    }); \n                                    htmls = htmls + \"</table>\"; \n                                    //将拼接的字符串显示在页面上\n                                    dom.byId(\"divShowResult\").innerHTML = htmls;\n                            }\n                        },function(error){alert(error)});                               });                             \n                });\n                       \n                              \n    </script>\n</head>\n<body class=\"tundra\">\n<div id=\"mapDiv\" style=\"width:900px; height:580px; border:1px solid #000;\"></div>\n    Name:<input class=\"nm\" type=\"text\">\n    <input id=\"btn\" type=\"button\" value=\"定位\">\n    <div id=\"divShowResult\"></div>\n</body>\n</html>\n```","slug":"ArcGIS-API-for-JS24","published":1,"updated":"2019-08-06T10:08:01.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cuf001qt09zohzcuao7","content":"<p>地理编码（Geocoding）指建立地理位置坐标与给定地址一致性的过程，简单的说就是将一个地址的描述信息映射为地图上该地址所对应的空间位置。<br>      根据输入的地址找到对应的空间信息。当输入一个地址的时候，可能会查到好多个空间位置，程序会给每一个位置一个打分，匹配的越完全的比分越高。（注意这里说的）</p>\n<h3 id=\"调用地理编码服务\"><a href=\"#调用地理编码服务\" class=\"headerlink\" title=\"调用地理编码服务\"></a>调用地理编码服务</h3><h4 id=\"查看我们发布的服务\"><a href=\"#查看我们发布的服务\" class=\"headerlink\" title=\"查看我们发布的服务\"></a>查看我们发布的服务</h4><p>首先看一下发布的服务数据<br><img src=\"/2019/08/06/ArcGIS-API-for-JS24/01.png\" alt=\"01.png\"><br>我发布的地理编码服务是：name为主键</p>\n<p>注意应该输入的参数<br><img src=\"/2019/08/06/ArcGIS-API-for-JS24/02.png\" alt=\"02.png\"></p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>添加地图（略）<br>创建三个html要素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name:&lt;input class=&quot;nm&quot; type=&quot;text&quot;&gt;</span><br><span class=\"line\">&lt;input id=&quot;btn&quot; type=&quot;button&quot; value=&quot;定位&quot;&gt;</span><br><span class=\"line\">&lt;div id=&quot;divShowResult&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>给定位按钮添加绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//执行方法</span><br><span class=\"line\">                        locator.addressToLocations(options,function(candidates)&#123;</span><br><span class=\"line\">                            //获得运行之后的信息</span><br><span class=\"line\">                            if (candidates.length &gt; 0)&#123;</span><br><span class=\"line\">                                    //拼接字符串</span><br><span class=\"line\">                                    var htmls = &quot;&lt;table style=&apos;width: 100%&apos;&gt;&quot;; </span><br><span class=\"line\">                                    htmls = htmls + &quot;&lt;tr bgcolor=&apos;#E0E0E0&apos;&gt;&lt;td&gt;X 坐标&lt;/td&gt;&lt;td&gt;Y 坐标&lt;/td&gt;&lt;td&gt;得分&lt;/td&gt;&lt;/tr&gt;&quot;; </span><br><span class=\"line\">                                    array.forEach(candidates, function (candidate, index) &#123;  </span><br><span class=\"line\">                                        if (index % 2 == 1) &#123; </span><br><span class=\"line\">                                            htmls = htmls + &quot;&lt;tr  bgcolor=&apos;#E0E0E0&apos;&gt;&lt;td style=&apos;width: 60px&apos;&gt;&quot; + candidate.location.x + &quot;&lt;/td&gt;&lt;td style=&apos;width: 60px&apos;&gt;&quot; + candidate.location.y+ &quot;&lt;/td&gt;&lt;td&gt;&quot; + candidate.score + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;; </span><br><span class=\"line\">                                        &#125; else &#123; </span><br><span class=\"line\">                                            htmls = htmls + &quot;&lt;tr&gt;&lt;td style=&apos;width: 60px&apos;&gt;&quot; + candidate.location.x + &quot;&lt;/td&gt;&lt;td style=&apos;width: 60px&apos;&gt;&quot; + candidate.location.y+ &quot;&lt;/td&gt;&lt;td&gt;&quot; + candidate.score + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                                        &#125;                                       </span><br><span class=\"line\">                                    &#125;); </span><br><span class=\"line\">                                    htmls = htmls + &quot;&lt;/table&gt;&quot;; </span><br><span class=\"line\">                                    //将拼接的字符串显示在页面上</span><br><span class=\"line\">                                    dom.byId(&quot;divShowResult&quot;).innerHTML = htmls;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,function(error)&#123;alert(error)&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"/2019/08/06/ArcGIS-API-for-JS24/03.png\" alt=\"03.png\"></p>\n<h4 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;gbk&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;dojo/query&quot;,&quot;dojo/on&quot;,&quot;dojo/_base/array&quot;,&quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/locator&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;dojo/colors&quot;,</span><br><span class=\"line\">            &quot;esri/InfoTemplate&quot;,&quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function(Map,query,on,array,dom,ArcGISDynamicMapServiceLayer,Locator,SimpleMarkerSymbol,Color,InfoTemplate,Graphic)&#123;</span><br><span class=\"line\">                    var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                    var layer=new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;);</span><br><span class=\"line\">                    map.addLayer(layer);</span><br><span class=\"line\">                    query(&quot;#btn&quot;).on(&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                        //获得教学楼的名称</span><br><span class=\"line\">                        var name=query(&quot;.nm&quot;)[0].value;</span><br><span class=\"line\">                        //创建地理编码对象</span><br><span class=\"line\">                        var locator = new Locator(&quot;http://localhost:6080/arcgis/rest/services/Test/nameLoc/GeocodeServer&quot;);</span><br><span class=\"line\">                        //注意这里的参数要和服务的参数对应</span><br><span class=\"line\">                        var address = &#123; &quot;Single Line Input&quot;: name&#125;; </span><br><span class=\"line\">                        //输出的空间参考</span><br><span class=\"line\">                        locator.outSpatialReference = map.spatialReference; </span><br><span class=\"line\">                        var options = &#123; </span><br><span class=\"line\">                            address: address, </span><br><span class=\"line\">                            outFields: [&quot;*&quot;] </span><br><span class=\"line\">                        &#125; </span><br><span class=\"line\">                        //执行方法</span><br><span class=\"line\">                        locator.addressToLocations(options,function(candidates)&#123;</span><br><span class=\"line\">                            //获得运行之后的信息</span><br><span class=\"line\">                            if (candidates.length &gt; 0)&#123;</span><br><span class=\"line\">                                    //拼接字符串</span><br><span class=\"line\">                                    var htmls = &quot;&lt;table style=&apos;width: 100%&apos;&gt;&quot;; </span><br><span class=\"line\">                                    htmls = htmls + &quot;&lt;tr bgcolor=&apos;#E0E0E0&apos;&gt;&lt;td&gt;X 坐标&lt;/td&gt;&lt;td&gt;Y 坐标&lt;/td&gt;&lt;td&gt;得分&lt;/td&gt;&lt;/tr&gt;&quot;; </span><br><span class=\"line\">                                    array.forEach(candidates, function (candidate, index) &#123;  </span><br><span class=\"line\">                                        if (index % 2 == 1) &#123; </span><br><span class=\"line\">                                            htmls = htmls + &quot;&lt;tr  bgcolor=&apos;#E0E0E0&apos;&gt;&lt;td style=&apos;width: 60px&apos;&gt;&quot; + candidate.location.x + &quot;&lt;/td&gt;&lt;td style=&apos;width: 60px&apos;&gt;&quot; + candidate.location.y+ &quot;&lt;/td&gt;&lt;td&gt;&quot; + candidate.score + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;; </span><br><span class=\"line\">                                        &#125; else &#123; </span><br><span class=\"line\">                                            htmls = htmls + &quot;&lt;tr&gt;&lt;td style=&apos;width: 60px&apos;&gt;&quot; + candidate.location.x + &quot;&lt;/td&gt;&lt;td style=&apos;width: 60px&apos;&gt;&quot; + candidate.location.y+ &quot;&lt;/td&gt;&lt;td&gt;&quot; + candidate.score + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                                        &#125;                                       </span><br><span class=\"line\">                                    &#125;); </span><br><span class=\"line\">                                    htmls = htmls + &quot;&lt;/table&gt;&quot;; </span><br><span class=\"line\">                                    //将拼接的字符串显示在页面上</span><br><span class=\"line\">                                    dom.byId(&quot;divShowResult&quot;).innerHTML = htmls;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,function(error)&#123;alert(error)&#125;);                               &#125;);                             </span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                       </span><br><span class=\"line\">                              </span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body class=&quot;tundra&quot;&gt;</span><br><span class=\"line\">&lt;div id=&quot;mapDiv&quot; style=&quot;width:900px; height:580px; border:1px solid #000;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    Name:&lt;input class=&quot;nm&quot; type=&quot;text&quot;&gt;</span><br><span class=\"line\">    &lt;input id=&quot;btn&quot; type=&quot;button&quot; value=&quot;定位&quot;&gt;</span><br><span class=\"line\">    &lt;div id=&quot;divShowResult&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>地理编码（Geocoding）指建立地理位置坐标与给定地址一致性的过程，简单的说就是将一个地址的描述信息映射为地图上该地址所对应的空间位置。<br>      根据输入的地址找到对应的空间信息。当输入一个地址的时候，可能会查到好多个空间位置，程序会给每一个位置一个打分，匹配的越完全的比分越高。（注意这里说的）</p>\n<h3 id=\"调用地理编码服务\"><a href=\"#调用地理编码服务\" class=\"headerlink\" title=\"调用地理编码服务\"></a>调用地理编码服务</h3><h4 id=\"查看我们发布的服务\"><a href=\"#查看我们发布的服务\" class=\"headerlink\" title=\"查看我们发布的服务\"></a>查看我们发布的服务</h4><p>首先看一下发布的服务数据<br><img src=\"/2019/08/06/ArcGIS-API-for-JS24/01.png\" alt=\"01.png\"><br>我发布的地理编码服务是：name为主键</p>\n<p>注意应该输入的参数<br><img src=\"/2019/08/06/ArcGIS-API-for-JS24/02.png\" alt=\"02.png\"></p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>添加地图（略）<br>创建三个html要素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name:&lt;input class=&quot;nm&quot; type=&quot;text&quot;&gt;</span><br><span class=\"line\">&lt;input id=&quot;btn&quot; type=&quot;button&quot; value=&quot;定位&quot;&gt;</span><br><span class=\"line\">&lt;div id=&quot;divShowResult&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>给定位按钮添加绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//执行方法</span><br><span class=\"line\">                        locator.addressToLocations(options,function(candidates)&#123;</span><br><span class=\"line\">                            //获得运行之后的信息</span><br><span class=\"line\">                            if (candidates.length &gt; 0)&#123;</span><br><span class=\"line\">                                    //拼接字符串</span><br><span class=\"line\">                                    var htmls = &quot;&lt;table style=&apos;width: 100%&apos;&gt;&quot;; </span><br><span class=\"line\">                                    htmls = htmls + &quot;&lt;tr bgcolor=&apos;#E0E0E0&apos;&gt;&lt;td&gt;X 坐标&lt;/td&gt;&lt;td&gt;Y 坐标&lt;/td&gt;&lt;td&gt;得分&lt;/td&gt;&lt;/tr&gt;&quot;; </span><br><span class=\"line\">                                    array.forEach(candidates, function (candidate, index) &#123;  </span><br><span class=\"line\">                                        if (index % 2 == 1) &#123; </span><br><span class=\"line\">                                            htmls = htmls + &quot;&lt;tr  bgcolor=&apos;#E0E0E0&apos;&gt;&lt;td style=&apos;width: 60px&apos;&gt;&quot; + candidate.location.x + &quot;&lt;/td&gt;&lt;td style=&apos;width: 60px&apos;&gt;&quot; + candidate.location.y+ &quot;&lt;/td&gt;&lt;td&gt;&quot; + candidate.score + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;; </span><br><span class=\"line\">                                        &#125; else &#123; </span><br><span class=\"line\">                                            htmls = htmls + &quot;&lt;tr&gt;&lt;td style=&apos;width: 60px&apos;&gt;&quot; + candidate.location.x + &quot;&lt;/td&gt;&lt;td style=&apos;width: 60px&apos;&gt;&quot; + candidate.location.y+ &quot;&lt;/td&gt;&lt;td&gt;&quot; + candidate.score + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                                        &#125;                                       </span><br><span class=\"line\">                                    &#125;); </span><br><span class=\"line\">                                    htmls = htmls + &quot;&lt;/table&gt;&quot;; </span><br><span class=\"line\">                                    //将拼接的字符串显示在页面上</span><br><span class=\"line\">                                    dom.byId(&quot;divShowResult&quot;).innerHTML = htmls;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,function(error)&#123;alert(error)&#125;);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"/2019/08/06/ArcGIS-API-for-JS24/03.png\" alt=\"03.png\"></p>\n<h4 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;gbk&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Hello World&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;dojo/query&quot;,&quot;dojo/on&quot;,&quot;dojo/_base/array&quot;,&quot;dojo/dom&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/locator&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;dojo/colors&quot;,</span><br><span class=\"line\">            &quot;esri/InfoTemplate&quot;,&quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">                function(Map,query,on,array,dom,ArcGISDynamicMapServiceLayer,Locator,SimpleMarkerSymbol,Color,InfoTemplate,Graphic)&#123;</span><br><span class=\"line\">                    var map = new Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                    var layer=new ArcGISDynamicMapServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/MyService/MapServer&quot;);</span><br><span class=\"line\">                    map.addLayer(layer);</span><br><span class=\"line\">                    query(&quot;#btn&quot;).on(&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                        //获得教学楼的名称</span><br><span class=\"line\">                        var name=query(&quot;.nm&quot;)[0].value;</span><br><span class=\"line\">                        //创建地理编码对象</span><br><span class=\"line\">                        var locator = new Locator(&quot;http://localhost:6080/arcgis/rest/services/Test/nameLoc/GeocodeServer&quot;);</span><br><span class=\"line\">                        //注意这里的参数要和服务的参数对应</span><br><span class=\"line\">                        var address = &#123; &quot;Single Line Input&quot;: name&#125;; </span><br><span class=\"line\">                        //输出的空间参考</span><br><span class=\"line\">                        locator.outSpatialReference = map.spatialReference; </span><br><span class=\"line\">                        var options = &#123; </span><br><span class=\"line\">                            address: address, </span><br><span class=\"line\">                            outFields: [&quot;*&quot;] </span><br><span class=\"line\">                        &#125; </span><br><span class=\"line\">                        //执行方法</span><br><span class=\"line\">                        locator.addressToLocations(options,function(candidates)&#123;</span><br><span class=\"line\">                            //获得运行之后的信息</span><br><span class=\"line\">                            if (candidates.length &gt; 0)&#123;</span><br><span class=\"line\">                                    //拼接字符串</span><br><span class=\"line\">                                    var htmls = &quot;&lt;table style=&apos;width: 100%&apos;&gt;&quot;; </span><br><span class=\"line\">                                    htmls = htmls + &quot;&lt;tr bgcolor=&apos;#E0E0E0&apos;&gt;&lt;td&gt;X 坐标&lt;/td&gt;&lt;td&gt;Y 坐标&lt;/td&gt;&lt;td&gt;得分&lt;/td&gt;&lt;/tr&gt;&quot;; </span><br><span class=\"line\">                                    array.forEach(candidates, function (candidate, index) &#123;  </span><br><span class=\"line\">                                        if (index % 2 == 1) &#123; </span><br><span class=\"line\">                                            htmls = htmls + &quot;&lt;tr  bgcolor=&apos;#E0E0E0&apos;&gt;&lt;td style=&apos;width: 60px&apos;&gt;&quot; + candidate.location.x + &quot;&lt;/td&gt;&lt;td style=&apos;width: 60px&apos;&gt;&quot; + candidate.location.y+ &quot;&lt;/td&gt;&lt;td&gt;&quot; + candidate.score + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;; </span><br><span class=\"line\">                                        &#125; else &#123; </span><br><span class=\"line\">                                            htmls = htmls + &quot;&lt;tr&gt;&lt;td style=&apos;width: 60px&apos;&gt;&quot; + candidate.location.x + &quot;&lt;/td&gt;&lt;td style=&apos;width: 60px&apos;&gt;&quot; + candidate.location.y+ &quot;&lt;/td&gt;&lt;td&gt;&quot; + candidate.score + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;;</span><br><span class=\"line\">                                        &#125;                                       </span><br><span class=\"line\">                                    &#125;); </span><br><span class=\"line\">                                    htmls = htmls + &quot;&lt;/table&gt;&quot;; </span><br><span class=\"line\">                                    //将拼接的字符串显示在页面上</span><br><span class=\"line\">                                    dom.byId(&quot;divShowResult&quot;).innerHTML = htmls;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,function(error)&#123;alert(error)&#125;);                               &#125;);                             </span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                       </span><br><span class=\"line\">                              </span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body class=&quot;tundra&quot;&gt;</span><br><span class=\"line\">&lt;div id=&quot;mapDiv&quot; style=&quot;width:900px; height:580px; border:1px solid #000;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    Name:&lt;input class=&quot;nm&quot; type=&quot;text&quot;&gt;</span><br><span class=\"line\">    &lt;input id=&quot;btn&quot; type=&quot;button&quot; value=&quot;定位&quot;&gt;</span><br><span class=\"line\">    &lt;div id=&quot;divShowResult&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ArcGIS","date":"2019-07-13T13:35:13.000Z","_content":"","source":"_posts/ArcGIS.md","raw":"---\ntitle: ArcGIS\ndate: 2019-7-13 21:35:13\ncategories:\n- ArcGIS\ntags: \n    - ArcGIS\n---","slug":"ArcGIS","published":1,"updated":"2019-07-13T03:09:13.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cuh001tt09zcy417wb4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"ES6","_content":"","source":"_posts/ES6.md","raw":"---\ntitle: ES6\n---","slug":"ES6","published":1,"date":"2019-09-22T08:27:45.701Z","updated":"2019-01-02T02:08:57.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cuj001wt09zb0gitrpv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"ArcGIS API For Javascript之几何服务","date":"2019-08-06T09:43:13.000Z","_content":"什么是几何服务（GeometryService）？从字面意义上来说是和几何（Geometry）相关的服务，具体一点讲我们可以用这个类实现一些简单的图形操作。例如：\n\n* 测量直线的距离\n* 形状的缓冲区分析\n* 判断两个形状之间的关系（相交，相离等等）\n* 两个形状求交\n* 对形状的裁剪等等\n\n在此以缓冲区分析和图形求交来介绍几何服务的使用.\n### 启用几何服务\n当我们安装好ArcGIS Server的时候，几何服务就已经存在了，因此几何服务不需要我们发布，但是在默认情况下几何服务是关闭的，因此我们首先启动几何服务，步骤如下：\n\n登录我们的ArcGIS Server Manager\n![01.png](01.png)\n启动成功\n![02.png](02.png)\n几何服务的URL\n![03.png](03.png)\n### 利用几何服务进行缓冲区分析\n几何服务的使用一般分为四个步骤：\n\n* 创建几何服务对象\n* 创建参数\n* 构建参数对象\n* 执行相应的方法，并处理返回的结果\n\n#### 代码实现\n加载地图（省略）\n创建两个按钮–一个按钮用于画点，另外一个按钮用于缓冲区分析\n```\n<input id=\"point\" type=\"button\" value=\"点\"/>\n<input id=\"Btn\" type=\"button\" />\n```\n创建相关对象（例如符号对象，Draw对象等等）\n```\n//使用toolbar上的绘图工具\n                var toolBar = new Draw(map);\n                //创建点符号\n                var pointSymbol = new SimpleMarkerSymbol();\n                pointSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;\n                pointSymbol.setSize(12);\n                pointSymbol.setColor(new Color(\"#FFFFCC\"));\n                //线符号\n                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //面符号\n                polygonSymbol= new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 255, 0, 0.25]));\n```\n创建几何服务对象，创建相应的缓冲区参数对象\n```\nvar geometryServices = new GeometryService(\"http://localhost:6080/arcgis/rest/services/Utilities/Geometry/GeometryServer\");\nvar params = new BufferParameters();\n```\n给画点按钮绑定事件\n```\n//给画点按钮绑定事件\n                on(dom.byId(\"point\"),\"click\",function(){\n                    //激活画点工具\n                    toolBar.activate(Draw.POINT, {\n                        showTooltips:true\n                    })\n                    \n                })\n\n                //绘图结束绑定事件\n                on(toolBar,\"draw-end\",function(result){\n                    //获得点形状\n                    var geometry=result.geometry;\n                    //创建Graphic\n                    var graphicpoint = new Graphic(geometry, pointSymbol);\n                    map.graphics.add(graphicpoint); \n                    //关闭绘图工具\n                    toolBar.deactivate();\n                    //很重要！！！在这里构建缓冲区分析的形状属性\n                    //注意这里可以放一个数组，此处为了方便我们只对一个形状进行缓冲区分析\n                    params.geometries  = [ geometry ];\n\n                    \n                })\n```\n给缓冲区分析按钮绑定事件\n```\n//给缓冲区分析按钮绑定事件\n                on(dom.byId(\"Btn\"),\"click\",function(){\n                    //缓冲距离\n                    params.distances = [ \"80\" ];\n                    //空间参考\n                    params.bufferSpatialReference = map.spatialReference;\n                    params.outSpatialReference = map.spatialReference;\n                    //执行分析处理结果\n                    geometryServices.buffer(params,function(result){\n                        //处理缓冲区分析得到的结果\n                        for(var idx in result)\n                        {   \n                            //创建Graphic\n                            var graphic=new Graphic(result[idx],polygonSymbol)\n                            //将每一个结果都放在map中\n                            map.graphics.add(graphic)\n                        }\n                    });\n                })\n```\n#### 运行结果\n![04.png](04.png)\n#### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>缓冲区分析</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"dojo/dom\",\"dojo/on\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/symbols/SimpleFillSymbol\",\n            \"esri/toolbars/draw\",\n            \"esri/graphic\",\n            \"esri/tasks/GeometryService\",\n            \"esri/tasks/BufferParameters\",\n            \"dojo/colors\",\n            \"dojo/domReady!\"],\n            function (Map,dom,on,\n                ArcGISDynamicMapServiceLayer,\n                SimpleMarkerSymbol,\n                SimpleLineSymbol,\n                SimpleFillSymbol,\n                Draw,\n                Graphic,\n                GeometryService,\n                BufferParameters,Color) {\n                var map = new esri.Map(\"mapDiv\");\n                var layer = new esri.layers.ArcGISDynamicMapServiceLayer\n                (\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer\");\n                map.addLayer(layer);\n                //创建几何服务对象\n                var geometryServices = new GeometryService(\"http://localhost:6080/arcgis/rest/services/Utilities/Geometry/GeometryServer\");\n                //创建缓存参数对象\n                var params = new BufferParameters();\n                \n                //使用toolbar上的绘图工具\n                var toolBar = new Draw(map);\n                //创建点符号\n                var pointSymbol = new SimpleMarkerSymbol();\n                pointSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;\n                pointSymbol.setSize(12);\n                pointSymbol.setColor(new Color(\"#FFFFCC\"));\n                //线符号\n                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //面符号\n                polygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 255, 0, 0.25]));\n                //给画点按钮绑定事件\n                on(dom.byId(\"point\"),\"click\",function(){\n                    //激活画点工具\n                    toolBar.activate(Draw.POINT, {\n                        showTooltips:true\n                    })\n                    \n                })\n                //绘图结束绑定事件\n                on(toolBar,\"draw-end\",function(result){\n                    //获得点形状\n                    var geometry=result.geometry;\n                    //创建Graphic\n                    var graphicpoint = new Graphic(geometry, pointSymbol);\n                    map.graphics.add(graphicpoint); \n                    //关闭绘图工具\n                    toolBar.deactivate();\n                    //很重要！！！在这里构建缓冲区分析的形状属性\n                    //注意这里可以放一个数组，此处为了方便我们只对一个形状进行缓冲区分析\n                    params.geometries  = [ geometry ];\n\n                    \n                })\n                //给缓冲区分析按钮绑定事件\n                on(dom.byId(\"Btn\"),\"click\",function(){\n                    //缓冲距离\n                    params.distances = [ \"80\" ];\n                    //空间参考\n                    params.bufferSpatialReference = map.spatialReference;\n                    params.outSpatialReference = map.spatialReference;\n                    //执行分析处理结果\n                    geometryServices.buffer(params,function(result){\n                        //处理缓冲区分析得到的结果\n                        for(var idx in result)\n                        {   \n                            //创建Graphic\n                            var graphic=new Graphic(result[idx],polygonSymbol)\n                            //将每一个结果都放在map中\n                            map.graphics.add(graphic)\n                        }\n                    });\n\n\n                })\n               \n            });\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n    <input id=\"point\" type=\"button\" value=\"点\"/>\n    <input id=\"Btn\" type=\"button\" value=\"缓冲区分析\" />\n</body>\n</html>\n```\n### 利用几何服务进行多边形求交\n首先我们先看看求交这一个方法\n```\nGeometryService.intersect(geometries, geometry, callback?, errback?)\n```\n解释： \n```\n此方法有四个参数，\n第一个参数是   形状的集合(多个形状)\n第二个参数是   一个形状\n第三个参数是   运行成功之后的结果\n第四个参数是   运行失败之后的结果\n```\n方法的使用：用第二个参数的形状与第一个参数的多个形状进行求交，从而返回运行的结果\n#### 代码实现\n加载地图（略）\n创建三个按钮\n```\n    <button class=\"pbtn\" >第一个参数</button>\n    <button class=\"pbtn\" >第二个参数</button>\n    <input id=\"Btn\" type=\"button\" value=\"求交分析\" />\n```\n创建相关对象（符号对象，绘图对象）\n```\n//一个标志位，用于记录是绘制第几个参数\n                //1代表第一个参数\n                //2代表第二个参数\n                var flag;\n                //第一个参数  注意第一个参数是多个形状\n                var geometries=[];\n                //第二个参数  注意第二个参数是一个形状\n                var paramGeometry;\n                //使用toolbar上的绘图工具\n                var toolBar = new Draw(map);\n                \n                //线符号\n                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //第一个参数的面符号\n                polygonSymbol1 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 0, 0, 0.25]));\n                //第二个参数的面符号\n                polygonSymbol2 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([0, 255, 0, 0.25]));\n                //求交之后的面符号\n                polygonSymbol3 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([0, 0, 255, 0.25]));\n```\n给画图形的按钮绑定事件\n```\n//给绘制polygon的按钮绑定事件\n                query(\".pbtn\").on(\"click\",function(event){\n                    var value=this.innerHTML;\n                    switch(value){\n                        case \"第一个参数\":{\n                            flag=1;\n                            break;\n                            \n                        }\n                        case \"第二个参数\":{\n                            flag=2;\n                            break;\n                        }   \n                    }\n                    //激活绘制多边形\n                    toolBar.activate(Draw.POLYGON, {\n                        showTooltips:true\n                    })\n                    \n                })\n                //绘图结束绑定事件\n                on(toolBar,\"draw-end\",function(result){\n                    //获得面形状\n                    var geometry=result.geometry;\n                    //创建Graphic\n                    var graphicpoint;\n\n                    //很重要！！！在这里构建参数对象\n                    if(flag==1)\n                    {\n                        //创建Graphic\n                        graphicpoint = new Graphic(geometry, polygonSymbol1);\n                        geometries.push(geometry)\n                    }\n                    else if(flag==2)\n                    {\n                        //创建Graphic\n                        graphicpoint = new Graphic(geometry, polygonSymbol2);\n                        paramGeometry=geometry;\n                    }   \n                    map.graphics.add(graphicpoint); \n                    //关闭绘图工具\n                    toolBar.deactivate();                   \n                })\n```\n给求交按钮绑定事件\n```\n//给求交按钮绑定事件\n                on(dom.byId(\"Btn\"),\"click\",function(){\n                    //在这里在说一边，第一个参数是图形集合，第二个参数是一个图形\n                    geometryServices.intersect(geometries,paramGeometry,function(result){\n                        for(var idx in result)\n                        {\n                            //创建Graphic\n                            var graphic=new Graphic(result[idx],polygonSymbol3)\n                            //将每一个结果都放在map中\n                            map.graphics.add(graphic)\n                        }\n                    })\n                })\n```\n#### 运行结果\n![05.png](05.png)\n#### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>多边形求交</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"dojo/dom\",\"dojo/on\",\"dojo/query\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/symbols/SimpleFillSymbol\",\n            \"esri/toolbars/draw\",\n            \"esri/graphic\",\n            \"esri/tasks/GeometryService\",\n            \"dojo/colors\",\n            \"dojo/domReady!\"],\n            function (Map,dom,on,query,\n                ArcGISDynamicMapServiceLayer,\n                SimpleMarkerSymbol,\n                SimpleLineSymbol,\n                SimpleFillSymbol,\n                Draw,\n                Graphic,\n                GeometryService,\n                Color) {\n                var map = new esri.Map(\"mapDiv\");\n                var layer = new esri.layers.ArcGISDynamicMapServiceLayer\n                (\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer\");\n                map.addLayer(layer);\n                //创建几何服务对象\n                var geometryServices = new GeometryService(\"http://localhost:6080/arcgis/rest/services/Utilities/Geometry/GeometryServer\");\n                //一个标志位，用于记录是绘制第几个参数\n                //1代表第一个参数\n                //2代表第二个参数\n                var flag;\n                //第一个参数  注意第一个参数是多个形状\n                var geometries=[];\n                //第二个参数  注意第二个参数是一个形状\n                var paramGeometry;\n                //使用toolbar上的绘图工具\n                var toolBar = new Draw(map);\n                \n                //线符号\n                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //第一个参数的面符号\n                polygonSymbol1 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 0, 0, 0.25]));\n                //第二个参数的面符号\n                polygonSymbol2 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([0, 255, 0, 0.25]));\n                //求交之后的面符号\n                polygonSymbol3 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([0, 0, 255, 0.25]));\n                //给绘制polygon的按钮绑定事件\n                query(\".pbtn\").on(\"click\",function(event){\n                    var value=this.innerHTML;\n                    switch(value){\n                        case \"第一个参数\":{\n                            flag=1;\n                            break;\n                            \n                        }\n                        case \"第二个参数\":{\n                            flag=2;\n                            break;\n                        }   \n                    }\n                    //激活绘制多边形\n                    toolBar.activate(Draw.POLYGON, {\n                        showTooltips:true\n                    })\n                    \n                })\n                //绘图结束绑定事件\n                on(toolBar,\"draw-end\",function(result){\n                    //获得面形状\n                    var geometry=result.geometry;\n                    //创建Graphic\n                    var graphicpoint;\n\n                    //很重要！！！在这里构建参数对象\n                    if(flag==1)\n                    {\n                        //创建Graphic\n                        graphicpoint = new Graphic(geometry, polygonSymbol1);\n                        geometries.push(geometry)\n                    }\n                    else if(flag==2)\n                    {\n                        //创建Graphic\n                        graphicpoint = new Graphic(geometry, polygonSymbol2);\n                        paramGeometry=geometry;\n                    }   \n                    map.graphics.add(graphicpoint); \n                    //关闭绘图工具\n                    toolBar.deactivate();                   \n                })\n                //给求交按钮绑定事件\n                on(dom.byId(\"Btn\"),\"click\",function(){\n                    //在这里在说一边，第一个参数是图形集合，第二个参数是一个图形\n                    geometryServices.intersect(geometries,paramGeometry,function(result){\n                        for(var idx in result)\n                        {\n                            //创建Graphic\n                            var graphic=new Graphic(result[idx],polygonSymbol3)\n                            //将每一个结果都放在map中\n                            map.graphics.add(graphic)\n                        }\n                    })\n                })\n               \n            });\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n    <button class=\"pbtn\" >第一个参数</button>\n    <button class=\"pbtn\" >第二个参数</button>\n    <input id=\"Btn\" type=\"button\" value=\"求交分析\" />\n</body>\n</html>\n```","source":"_posts/ArcGIS-API-for-JS22.md","raw":"---\ntitle: ArcGIS API For Javascript之几何服务\ndate: 2019-08-06 17:43:13\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n什么是几何服务（GeometryService）？从字面意义上来说是和几何（Geometry）相关的服务，具体一点讲我们可以用这个类实现一些简单的图形操作。例如：\n\n* 测量直线的距离\n* 形状的缓冲区分析\n* 判断两个形状之间的关系（相交，相离等等）\n* 两个形状求交\n* 对形状的裁剪等等\n\n在此以缓冲区分析和图形求交来介绍几何服务的使用.\n### 启用几何服务\n当我们安装好ArcGIS Server的时候，几何服务就已经存在了，因此几何服务不需要我们发布，但是在默认情况下几何服务是关闭的，因此我们首先启动几何服务，步骤如下：\n\n登录我们的ArcGIS Server Manager\n![01.png](01.png)\n启动成功\n![02.png](02.png)\n几何服务的URL\n![03.png](03.png)\n### 利用几何服务进行缓冲区分析\n几何服务的使用一般分为四个步骤：\n\n* 创建几何服务对象\n* 创建参数\n* 构建参数对象\n* 执行相应的方法，并处理返回的结果\n\n#### 代码实现\n加载地图（省略）\n创建两个按钮–一个按钮用于画点，另外一个按钮用于缓冲区分析\n```\n<input id=\"point\" type=\"button\" value=\"点\"/>\n<input id=\"Btn\" type=\"button\" />\n```\n创建相关对象（例如符号对象，Draw对象等等）\n```\n//使用toolbar上的绘图工具\n                var toolBar = new Draw(map);\n                //创建点符号\n                var pointSymbol = new SimpleMarkerSymbol();\n                pointSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;\n                pointSymbol.setSize(12);\n                pointSymbol.setColor(new Color(\"#FFFFCC\"));\n                //线符号\n                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //面符号\n                polygonSymbol= new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 255, 0, 0.25]));\n```\n创建几何服务对象，创建相应的缓冲区参数对象\n```\nvar geometryServices = new GeometryService(\"http://localhost:6080/arcgis/rest/services/Utilities/Geometry/GeometryServer\");\nvar params = new BufferParameters();\n```\n给画点按钮绑定事件\n```\n//给画点按钮绑定事件\n                on(dom.byId(\"point\"),\"click\",function(){\n                    //激活画点工具\n                    toolBar.activate(Draw.POINT, {\n                        showTooltips:true\n                    })\n                    \n                })\n\n                //绘图结束绑定事件\n                on(toolBar,\"draw-end\",function(result){\n                    //获得点形状\n                    var geometry=result.geometry;\n                    //创建Graphic\n                    var graphicpoint = new Graphic(geometry, pointSymbol);\n                    map.graphics.add(graphicpoint); \n                    //关闭绘图工具\n                    toolBar.deactivate();\n                    //很重要！！！在这里构建缓冲区分析的形状属性\n                    //注意这里可以放一个数组，此处为了方便我们只对一个形状进行缓冲区分析\n                    params.geometries  = [ geometry ];\n\n                    \n                })\n```\n给缓冲区分析按钮绑定事件\n```\n//给缓冲区分析按钮绑定事件\n                on(dom.byId(\"Btn\"),\"click\",function(){\n                    //缓冲距离\n                    params.distances = [ \"80\" ];\n                    //空间参考\n                    params.bufferSpatialReference = map.spatialReference;\n                    params.outSpatialReference = map.spatialReference;\n                    //执行分析处理结果\n                    geometryServices.buffer(params,function(result){\n                        //处理缓冲区分析得到的结果\n                        for(var idx in result)\n                        {   \n                            //创建Graphic\n                            var graphic=new Graphic(result[idx],polygonSymbol)\n                            //将每一个结果都放在map中\n                            map.graphics.add(graphic)\n                        }\n                    });\n                })\n```\n#### 运行结果\n![04.png](04.png)\n#### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>缓冲区分析</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"dojo/dom\",\"dojo/on\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/symbols/SimpleFillSymbol\",\n            \"esri/toolbars/draw\",\n            \"esri/graphic\",\n            \"esri/tasks/GeometryService\",\n            \"esri/tasks/BufferParameters\",\n            \"dojo/colors\",\n            \"dojo/domReady!\"],\n            function (Map,dom,on,\n                ArcGISDynamicMapServiceLayer,\n                SimpleMarkerSymbol,\n                SimpleLineSymbol,\n                SimpleFillSymbol,\n                Draw,\n                Graphic,\n                GeometryService,\n                BufferParameters,Color) {\n                var map = new esri.Map(\"mapDiv\");\n                var layer = new esri.layers.ArcGISDynamicMapServiceLayer\n                (\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer\");\n                map.addLayer(layer);\n                //创建几何服务对象\n                var geometryServices = new GeometryService(\"http://localhost:6080/arcgis/rest/services/Utilities/Geometry/GeometryServer\");\n                //创建缓存参数对象\n                var params = new BufferParameters();\n                \n                //使用toolbar上的绘图工具\n                var toolBar = new Draw(map);\n                //创建点符号\n                var pointSymbol = new SimpleMarkerSymbol();\n                pointSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;\n                pointSymbol.setSize(12);\n                pointSymbol.setColor(new Color(\"#FFFFCC\"));\n                //线符号\n                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //面符号\n                polygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 255, 0, 0.25]));\n                //给画点按钮绑定事件\n                on(dom.byId(\"point\"),\"click\",function(){\n                    //激活画点工具\n                    toolBar.activate(Draw.POINT, {\n                        showTooltips:true\n                    })\n                    \n                })\n                //绘图结束绑定事件\n                on(toolBar,\"draw-end\",function(result){\n                    //获得点形状\n                    var geometry=result.geometry;\n                    //创建Graphic\n                    var graphicpoint = new Graphic(geometry, pointSymbol);\n                    map.graphics.add(graphicpoint); \n                    //关闭绘图工具\n                    toolBar.deactivate();\n                    //很重要！！！在这里构建缓冲区分析的形状属性\n                    //注意这里可以放一个数组，此处为了方便我们只对一个形状进行缓冲区分析\n                    params.geometries  = [ geometry ];\n\n                    \n                })\n                //给缓冲区分析按钮绑定事件\n                on(dom.byId(\"Btn\"),\"click\",function(){\n                    //缓冲距离\n                    params.distances = [ \"80\" ];\n                    //空间参考\n                    params.bufferSpatialReference = map.spatialReference;\n                    params.outSpatialReference = map.spatialReference;\n                    //执行分析处理结果\n                    geometryServices.buffer(params,function(result){\n                        //处理缓冲区分析得到的结果\n                        for(var idx in result)\n                        {   \n                            //创建Graphic\n                            var graphic=new Graphic(result[idx],polygonSymbol)\n                            //将每一个结果都放在map中\n                            map.graphics.add(graphic)\n                        }\n                    });\n\n\n                })\n               \n            });\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n    <input id=\"point\" type=\"button\" value=\"点\"/>\n    <input id=\"Btn\" type=\"button\" value=\"缓冲区分析\" />\n</body>\n</html>\n```\n### 利用几何服务进行多边形求交\n首先我们先看看求交这一个方法\n```\nGeometryService.intersect(geometries, geometry, callback?, errback?)\n```\n解释： \n```\n此方法有四个参数，\n第一个参数是   形状的集合(多个形状)\n第二个参数是   一个形状\n第三个参数是   运行成功之后的结果\n第四个参数是   运行失败之后的结果\n```\n方法的使用：用第二个参数的形状与第一个参数的多个形状进行求交，从而返回运行的结果\n#### 代码实现\n加载地图（略）\n创建三个按钮\n```\n    <button class=\"pbtn\" >第一个参数</button>\n    <button class=\"pbtn\" >第二个参数</button>\n    <input id=\"Btn\" type=\"button\" value=\"求交分析\" />\n```\n创建相关对象（符号对象，绘图对象）\n```\n//一个标志位，用于记录是绘制第几个参数\n                //1代表第一个参数\n                //2代表第二个参数\n                var flag;\n                //第一个参数  注意第一个参数是多个形状\n                var geometries=[];\n                //第二个参数  注意第二个参数是一个形状\n                var paramGeometry;\n                //使用toolbar上的绘图工具\n                var toolBar = new Draw(map);\n                \n                //线符号\n                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //第一个参数的面符号\n                polygonSymbol1 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 0, 0, 0.25]));\n                //第二个参数的面符号\n                polygonSymbol2 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([0, 255, 0, 0.25]));\n                //求交之后的面符号\n                polygonSymbol3 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([0, 0, 255, 0.25]));\n```\n给画图形的按钮绑定事件\n```\n//给绘制polygon的按钮绑定事件\n                query(\".pbtn\").on(\"click\",function(event){\n                    var value=this.innerHTML;\n                    switch(value){\n                        case \"第一个参数\":{\n                            flag=1;\n                            break;\n                            \n                        }\n                        case \"第二个参数\":{\n                            flag=2;\n                            break;\n                        }   \n                    }\n                    //激活绘制多边形\n                    toolBar.activate(Draw.POLYGON, {\n                        showTooltips:true\n                    })\n                    \n                })\n                //绘图结束绑定事件\n                on(toolBar,\"draw-end\",function(result){\n                    //获得面形状\n                    var geometry=result.geometry;\n                    //创建Graphic\n                    var graphicpoint;\n\n                    //很重要！！！在这里构建参数对象\n                    if(flag==1)\n                    {\n                        //创建Graphic\n                        graphicpoint = new Graphic(geometry, polygonSymbol1);\n                        geometries.push(geometry)\n                    }\n                    else if(flag==2)\n                    {\n                        //创建Graphic\n                        graphicpoint = new Graphic(geometry, polygonSymbol2);\n                        paramGeometry=geometry;\n                    }   \n                    map.graphics.add(graphicpoint); \n                    //关闭绘图工具\n                    toolBar.deactivate();                   \n                })\n```\n给求交按钮绑定事件\n```\n//给求交按钮绑定事件\n                on(dom.byId(\"Btn\"),\"click\",function(){\n                    //在这里在说一边，第一个参数是图形集合，第二个参数是一个图形\n                    geometryServices.intersect(geometries,paramGeometry,function(result){\n                        for(var idx in result)\n                        {\n                            //创建Graphic\n                            var graphic=new Graphic(result[idx],polygonSymbol3)\n                            //将每一个结果都放在map中\n                            map.graphics.add(graphic)\n                        }\n                    })\n                })\n```\n#### 运行结果\n![05.png](05.png)\n#### 全部代码\n```\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>多边形求交</title>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <style type=\"text/css\">\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script type=\"text/javascript\">\n\n        require([\"esri/map\",\n            \"dojo/dom\",\"dojo/on\",\"dojo/query\",\n            \"esri/layers/ArcGISDynamicMapServiceLayer\",\n            \"esri/symbols/SimpleMarkerSymbol\",\n            \"esri/symbols/SimpleLineSymbol\",\n            \"esri/symbols/SimpleFillSymbol\",\n            \"esri/toolbars/draw\",\n            \"esri/graphic\",\n            \"esri/tasks/GeometryService\",\n            \"dojo/colors\",\n            \"dojo/domReady!\"],\n            function (Map,dom,on,query,\n                ArcGISDynamicMapServiceLayer,\n                SimpleMarkerSymbol,\n                SimpleLineSymbol,\n                SimpleFillSymbol,\n                Draw,\n                Graphic,\n                GeometryService,\n                Color) {\n                var map = new esri.Map(\"mapDiv\");\n                var layer = new esri.layers.ArcGISDynamicMapServiceLayer\n                (\"http://localhost:6080/arcgis/rest/services/Test/ft/MapServer\");\n                map.addLayer(layer);\n                //创建几何服务对象\n                var geometryServices = new GeometryService(\"http://localhost:6080/arcgis/rest/services/Utilities/Geometry/GeometryServer\");\n                //一个标志位，用于记录是绘制第几个参数\n                //1代表第一个参数\n                //2代表第二个参数\n                var flag;\n                //第一个参数  注意第一个参数是多个形状\n                var geometries=[];\n                //第二个参数  注意第二个参数是一个形状\n                var paramGeometry;\n                //使用toolbar上的绘图工具\n                var toolBar = new Draw(map);\n                \n                //线符号\n                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);\n                //第一个参数的面符号\n                polygonSymbol1 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 0, 0, 0.25]));\n                //第二个参数的面符号\n                polygonSymbol2 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([0, 255, 0, 0.25]));\n                //求交之后的面符号\n                polygonSymbol3 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([0, 0, 255, 0.25]));\n                //给绘制polygon的按钮绑定事件\n                query(\".pbtn\").on(\"click\",function(event){\n                    var value=this.innerHTML;\n                    switch(value){\n                        case \"第一个参数\":{\n                            flag=1;\n                            break;\n                            \n                        }\n                        case \"第二个参数\":{\n                            flag=2;\n                            break;\n                        }   \n                    }\n                    //激活绘制多边形\n                    toolBar.activate(Draw.POLYGON, {\n                        showTooltips:true\n                    })\n                    \n                })\n                //绘图结束绑定事件\n                on(toolBar,\"draw-end\",function(result){\n                    //获得面形状\n                    var geometry=result.geometry;\n                    //创建Graphic\n                    var graphicpoint;\n\n                    //很重要！！！在这里构建参数对象\n                    if(flag==1)\n                    {\n                        //创建Graphic\n                        graphicpoint = new Graphic(geometry, polygonSymbol1);\n                        geometries.push(geometry)\n                    }\n                    else if(flag==2)\n                    {\n                        //创建Graphic\n                        graphicpoint = new Graphic(geometry, polygonSymbol2);\n                        paramGeometry=geometry;\n                    }   \n                    map.graphics.add(graphicpoint); \n                    //关闭绘图工具\n                    toolBar.deactivate();                   \n                })\n                //给求交按钮绑定事件\n                on(dom.byId(\"Btn\"),\"click\",function(){\n                    //在这里在说一边，第一个参数是图形集合，第二个参数是一个图形\n                    geometryServices.intersect(geometries,paramGeometry,function(result){\n                        for(var idx in result)\n                        {\n                            //创建Graphic\n                            var graphic=new Graphic(result[idx],polygonSymbol3)\n                            //将每一个结果都放在map中\n                            map.graphics.add(graphic)\n                        }\n                    })\n                })\n               \n            });\n    </script>\n</head>\n<body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n    <button class=\"pbtn\" >第一个参数</button>\n    <button class=\"pbtn\" >第二个参数</button>\n    <input id=\"Btn\" type=\"button\" value=\"求交分析\" />\n</body>\n</html>\n```","slug":"ArcGIS-API-for-JS22","published":1,"updated":"2019-08-06T09:53:01.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cul0020t09zfy3fqjgc","content":"<p>什么是几何服务（GeometryService）？从字面意义上来说是和几何（Geometry）相关的服务，具体一点讲我们可以用这个类实现一些简单的图形操作。例如：</p>\n<ul>\n<li>测量直线的距离</li>\n<li>形状的缓冲区分析</li>\n<li>判断两个形状之间的关系（相交，相离等等）</li>\n<li>两个形状求交</li>\n<li>对形状的裁剪等等</li>\n</ul>\n<p>在此以缓冲区分析和图形求交来介绍几何服务的使用.</p>\n<h3 id=\"启用几何服务\"><a href=\"#启用几何服务\" class=\"headerlink\" title=\"启用几何服务\"></a>启用几何服务</h3><p>当我们安装好ArcGIS Server的时候，几何服务就已经存在了，因此几何服务不需要我们发布，但是在默认情况下几何服务是关闭的，因此我们首先启动几何服务，步骤如下：</p>\n<p>登录我们的ArcGIS Server Manager<br><img src=\"/2019/08/06/ArcGIS-API-for-JS22/01.png\" alt=\"01.png\"><br>启动成功<br><img src=\"/2019/08/06/ArcGIS-API-for-JS22/02.png\" alt=\"02.png\"><br>几何服务的URL<br><img src=\"/2019/08/06/ArcGIS-API-for-JS22/03.png\" alt=\"03.png\"></p>\n<h3 id=\"利用几何服务进行缓冲区分析\"><a href=\"#利用几何服务进行缓冲区分析\" class=\"headerlink\" title=\"利用几何服务进行缓冲区分析\"></a>利用几何服务进行缓冲区分析</h3><p>几何服务的使用一般分为四个步骤：</p>\n<ul>\n<li>创建几何服务对象</li>\n<li>创建参数</li>\n<li>构建参数对象</li>\n<li>执行相应的方法，并处理返回的结果</li>\n</ul>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>加载地图（省略）<br>创建两个按钮–一个按钮用于画点，另外一个按钮用于缓冲区分析<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input id=&quot;point&quot; type=&quot;button&quot; value=&quot;点&quot;/&gt;</span><br><span class=\"line\">&lt;input id=&quot;Btn&quot; type=&quot;button&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建相关对象（例如符号对象，Draw对象等等）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用toolbar上的绘图工具</span><br><span class=\"line\">                var toolBar = new Draw(map);</span><br><span class=\"line\">                //创建点符号</span><br><span class=\"line\">                var pointSymbol = new SimpleMarkerSymbol();</span><br><span class=\"line\">                pointSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;</span><br><span class=\"line\">                pointSymbol.setSize(12);</span><br><span class=\"line\">                pointSymbol.setColor(new Color(&quot;#FFFFCC&quot;));</span><br><span class=\"line\">                //线符号</span><br><span class=\"line\">                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //面符号</span><br><span class=\"line\">                polygonSymbol= new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 255, 0, 0.25]));</span><br></pre></td></tr></table></figure></p>\n<p>创建几何服务对象，创建相应的缓冲区参数对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var geometryServices = new GeometryService(&quot;http://localhost:6080/arcgis/rest/services/Utilities/Geometry/GeometryServer&quot;);</span><br><span class=\"line\">var params = new BufferParameters();</span><br></pre></td></tr></table></figure></p>\n<p>给画点按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给画点按钮绑定事件</span><br><span class=\"line\">                on(dom.byId(&quot;point&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //激活画点工具</span><br><span class=\"line\">                    toolBar.activate(Draw.POINT, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">                //绘图结束绑定事件</span><br><span class=\"line\">                on(toolBar,&quot;draw-end&quot;,function(result)&#123;</span><br><span class=\"line\">                    //获得点形状</span><br><span class=\"line\">                    var geometry=result.geometry;</span><br><span class=\"line\">                    //创建Graphic</span><br><span class=\"line\">                    var graphicpoint = new Graphic(geometry, pointSymbol);</span><br><span class=\"line\">                    map.graphics.add(graphicpoint); </span><br><span class=\"line\">                    //关闭绘图工具</span><br><span class=\"line\">                    toolBar.deactivate();</span><br><span class=\"line\">                    //很重要！！！在这里构建缓冲区分析的形状属性</span><br><span class=\"line\">                    //注意这里可以放一个数组，此处为了方便我们只对一个形状进行缓冲区分析</span><br><span class=\"line\">                    params.geometries  = [ geometry ];</span><br><span class=\"line\"></span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>给缓冲区分析按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给缓冲区分析按钮绑定事件</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //缓冲距离</span><br><span class=\"line\">                    params.distances = [ &quot;80&quot; ];</span><br><span class=\"line\">                    //空间参考</span><br><span class=\"line\">                    params.bufferSpatialReference = map.spatialReference;</span><br><span class=\"line\">                    params.outSpatialReference = map.spatialReference;</span><br><span class=\"line\">                    //执行分析处理结果</span><br><span class=\"line\">                    geometryServices.buffer(params,function(result)&#123;</span><br><span class=\"line\">                        //处理缓冲区分析得到的结果</span><br><span class=\"line\">                        for(var idx in result)</span><br><span class=\"line\">                        &#123;   </span><br><span class=\"line\">                            //创建Graphic</span><br><span class=\"line\">                            var graphic=new Graphic(result[idx],polygonSymbol)</span><br><span class=\"line\">                            //将每一个结果都放在map中</span><br><span class=\"line\">                            map.graphics.add(graphic)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"/2019/08/06/ArcGIS-API-for-JS22/04.png\" alt=\"04.png\"></p>\n<h4 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;缓冲区分析&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,&quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">            &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/GeometryService&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/BufferParameters&quot;,</span><br><span class=\"line\">            &quot;dojo/colors&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map,dom,on,</span><br><span class=\"line\">                ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                SimpleMarkerSymbol,</span><br><span class=\"line\">                SimpleLineSymbol,</span><br><span class=\"line\">                SimpleFillSymbol,</span><br><span class=\"line\">                Draw,</span><br><span class=\"line\">                Graphic,</span><br><span class=\"line\">                GeometryService,</span><br><span class=\"line\">                BufferParameters,Color) &#123;</span><br><span class=\"line\">                var map = new esri.Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                var layer = new esri.layers.ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">                (&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer&quot;);</span><br><span class=\"line\">                map.addLayer(layer);</span><br><span class=\"line\">                //创建几何服务对象</span><br><span class=\"line\">                var geometryServices = new GeometryService(&quot;http://localhost:6080/arcgis/rest/services/Utilities/Geometry/GeometryServer&quot;);</span><br><span class=\"line\">                //创建缓存参数对象</span><br><span class=\"line\">                var params = new BufferParameters();</span><br><span class=\"line\">                </span><br><span class=\"line\">                //使用toolbar上的绘图工具</span><br><span class=\"line\">                var toolBar = new Draw(map);</span><br><span class=\"line\">                //创建点符号</span><br><span class=\"line\">                var pointSymbol = new SimpleMarkerSymbol();</span><br><span class=\"line\">                pointSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;</span><br><span class=\"line\">                pointSymbol.setSize(12);</span><br><span class=\"line\">                pointSymbol.setColor(new Color(&quot;#FFFFCC&quot;));</span><br><span class=\"line\">                //线符号</span><br><span class=\"line\">                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //面符号</span><br><span class=\"line\">                polygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 255, 0, 0.25]));</span><br><span class=\"line\">                //给画点按钮绑定事件</span><br><span class=\"line\">                on(dom.byId(&quot;point&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //激活画点工具</span><br><span class=\"line\">                    toolBar.activate(Draw.POINT, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //绘图结束绑定事件</span><br><span class=\"line\">                on(toolBar,&quot;draw-end&quot;,function(result)&#123;</span><br><span class=\"line\">                    //获得点形状</span><br><span class=\"line\">                    var geometry=result.geometry;</span><br><span class=\"line\">                    //创建Graphic</span><br><span class=\"line\">                    var graphicpoint = new Graphic(geometry, pointSymbol);</span><br><span class=\"line\">                    map.graphics.add(graphicpoint); </span><br><span class=\"line\">                    //关闭绘图工具</span><br><span class=\"line\">                    toolBar.deactivate();</span><br><span class=\"line\">                    //很重要！！！在这里构建缓冲区分析的形状属性</span><br><span class=\"line\">                    //注意这里可以放一个数组，此处为了方便我们只对一个形状进行缓冲区分析</span><br><span class=\"line\">                    params.geometries  = [ geometry ];</span><br><span class=\"line\"></span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //给缓冲区分析按钮绑定事件</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //缓冲距离</span><br><span class=\"line\">                    params.distances = [ &quot;80&quot; ];</span><br><span class=\"line\">                    //空间参考</span><br><span class=\"line\">                    params.bufferSpatialReference = map.spatialReference;</span><br><span class=\"line\">                    params.outSpatialReference = map.spatialReference;</span><br><span class=\"line\">                    //执行分析处理结果</span><br><span class=\"line\">                    geometryServices.buffer(params,function(result)&#123;</span><br><span class=\"line\">                        //处理缓冲区分析得到的结果</span><br><span class=\"line\">                        for(var idx in result)</span><br><span class=\"line\">                        &#123;   </span><br><span class=\"line\">                            //创建Graphic</span><br><span class=\"line\">                            var graphic=new Graphic(result[idx],polygonSymbol)</span><br><span class=\"line\">                            //将每一个结果都放在map中</span><br><span class=\"line\">                            map.graphics.add(graphic)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;input id=&quot;point&quot; type=&quot;button&quot; value=&quot;点&quot;/&gt;</span><br><span class=\"line\">    &lt;input id=&quot;Btn&quot; type=&quot;button&quot; value=&quot;缓冲区分析&quot; /&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用几何服务进行多边形求交\"><a href=\"#利用几何服务进行多边形求交\" class=\"headerlink\" title=\"利用几何服务进行多边形求交\"></a>利用几何服务进行多边形求交</h3><p>首先我们先看看求交这一个方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GeometryService.intersect(geometries, geometry, callback?, errback?)</span><br></pre></td></tr></table></figure></p>\n<p>解释：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此方法有四个参数，</span><br><span class=\"line\">第一个参数是   形状的集合(多个形状)</span><br><span class=\"line\">第二个参数是   一个形状</span><br><span class=\"line\">第三个参数是   运行成功之后的结果</span><br><span class=\"line\">第四个参数是   运行失败之后的结果</span><br></pre></td></tr></table></figure></p>\n<p>方法的使用：用第二个参数的形状与第一个参数的多个形状进行求交，从而返回运行的结果</p>\n<h4 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>加载地图（略）<br>创建三个按钮<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button class=&quot;pbtn&quot; &gt;第一个参数&lt;/button&gt;</span><br><span class=\"line\">&lt;button class=&quot;pbtn&quot; &gt;第二个参数&lt;/button&gt;</span><br><span class=\"line\">&lt;input id=&quot;Btn&quot; type=&quot;button&quot; value=&quot;求交分析&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建相关对象（符号对象，绘图对象）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//一个标志位，用于记录是绘制第几个参数</span><br><span class=\"line\">                //1代表第一个参数</span><br><span class=\"line\">                //2代表第二个参数</span><br><span class=\"line\">                var flag;</span><br><span class=\"line\">                //第一个参数  注意第一个参数是多个形状</span><br><span class=\"line\">                var geometries=[];</span><br><span class=\"line\">                //第二个参数  注意第二个参数是一个形状</span><br><span class=\"line\">                var paramGeometry;</span><br><span class=\"line\">                //使用toolbar上的绘图工具</span><br><span class=\"line\">                var toolBar = new Draw(map);</span><br><span class=\"line\">                </span><br><span class=\"line\">                //线符号</span><br><span class=\"line\">                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //第一个参数的面符号</span><br><span class=\"line\">                polygonSymbol1 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 0, 0, 0.25]));</span><br><span class=\"line\">                //第二个参数的面符号</span><br><span class=\"line\">                polygonSymbol2 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([0, 255, 0, 0.25]));</span><br><span class=\"line\">                //求交之后的面符号</span><br><span class=\"line\">                polygonSymbol3 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([0, 0, 255, 0.25]));</span><br></pre></td></tr></table></figure></p>\n<p>给画图形的按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给绘制polygon的按钮绑定事件</span><br><span class=\"line\">                query(&quot;.pbtn&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                    var value=this.innerHTML;</span><br><span class=\"line\">                    switch(value)&#123;</span><br><span class=\"line\">                        case &quot;第一个参数&quot;:&#123;</span><br><span class=\"line\">                            flag=1;</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                            </span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        case &quot;第二个参数&quot;:&#123;</span><br><span class=\"line\">                            flag=2;</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        &#125;   </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //激活绘制多边形</span><br><span class=\"line\">                    toolBar.activate(Draw.POLYGON, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //绘图结束绑定事件</span><br><span class=\"line\">                on(toolBar,&quot;draw-end&quot;,function(result)&#123;</span><br><span class=\"line\">                    //获得面形状</span><br><span class=\"line\">                    var geometry=result.geometry;</span><br><span class=\"line\">                    //创建Graphic</span><br><span class=\"line\">                    var graphicpoint;</span><br><span class=\"line\"></span><br><span class=\"line\">                    //很重要！！！在这里构建参数对象</span><br><span class=\"line\">                    if(flag==1)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        //创建Graphic</span><br><span class=\"line\">                        graphicpoint = new Graphic(geometry, polygonSymbol1);</span><br><span class=\"line\">                        geometries.push(geometry)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else if(flag==2)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        //创建Graphic</span><br><span class=\"line\">                        graphicpoint = new Graphic(geometry, polygonSymbol2);</span><br><span class=\"line\">                        paramGeometry=geometry;</span><br><span class=\"line\">                    &#125;   </span><br><span class=\"line\">                    map.graphics.add(graphicpoint); </span><br><span class=\"line\">                    //关闭绘图工具</span><br><span class=\"line\">                    toolBar.deactivate();                   </span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>给求交按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给求交按钮绑定事件</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //在这里在说一边，第一个参数是图形集合，第二个参数是一个图形</span><br><span class=\"line\">                    geometryServices.intersect(geometries,paramGeometry,function(result)&#123;</span><br><span class=\"line\">                        for(var idx in result)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            //创建Graphic</span><br><span class=\"line\">                            var graphic=new Graphic(result[idx],polygonSymbol3)</span><br><span class=\"line\">                            //将每一个结果都放在map中</span><br><span class=\"line\">                            map.graphics.add(graphic)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"/2019/08/06/ArcGIS-API-for-JS22/05.png\" alt=\"05.png\"></p>\n<h4 id=\"全部代码-1\"><a href=\"#全部代码-1\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;多边形求交&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,&quot;dojo/on&quot;,&quot;dojo/query&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">            &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/GeometryService&quot;,</span><br><span class=\"line\">            &quot;dojo/colors&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map,dom,on,query,</span><br><span class=\"line\">                ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                SimpleMarkerSymbol,</span><br><span class=\"line\">                SimpleLineSymbol,</span><br><span class=\"line\">                SimpleFillSymbol,</span><br><span class=\"line\">                Draw,</span><br><span class=\"line\">                Graphic,</span><br><span class=\"line\">                GeometryService,</span><br><span class=\"line\">                Color) &#123;</span><br><span class=\"line\">                var map = new esri.Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                var layer = new esri.layers.ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">                (&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer&quot;);</span><br><span class=\"line\">                map.addLayer(layer);</span><br><span class=\"line\">                //创建几何服务对象</span><br><span class=\"line\">                var geometryServices = new GeometryService(&quot;http://localhost:6080/arcgis/rest/services/Utilities/Geometry/GeometryServer&quot;);</span><br><span class=\"line\">                //一个标志位，用于记录是绘制第几个参数</span><br><span class=\"line\">                //1代表第一个参数</span><br><span class=\"line\">                //2代表第二个参数</span><br><span class=\"line\">                var flag;</span><br><span class=\"line\">                //第一个参数  注意第一个参数是多个形状</span><br><span class=\"line\">                var geometries=[];</span><br><span class=\"line\">                //第二个参数  注意第二个参数是一个形状</span><br><span class=\"line\">                var paramGeometry;</span><br><span class=\"line\">                //使用toolbar上的绘图工具</span><br><span class=\"line\">                var toolBar = new Draw(map);</span><br><span class=\"line\">                </span><br><span class=\"line\">                //线符号</span><br><span class=\"line\">                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //第一个参数的面符号</span><br><span class=\"line\">                polygonSymbol1 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 0, 0, 0.25]));</span><br><span class=\"line\">                //第二个参数的面符号</span><br><span class=\"line\">                polygonSymbol2 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([0, 255, 0, 0.25]));</span><br><span class=\"line\">                //求交之后的面符号</span><br><span class=\"line\">                polygonSymbol3 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([0, 0, 255, 0.25]));</span><br><span class=\"line\">                //给绘制polygon的按钮绑定事件</span><br><span class=\"line\">                query(&quot;.pbtn&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                    var value=this.innerHTML;</span><br><span class=\"line\">                    switch(value)&#123;</span><br><span class=\"line\">                        case &quot;第一个参数&quot;:&#123;</span><br><span class=\"line\">                            flag=1;</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                            </span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        case &quot;第二个参数&quot;:&#123;</span><br><span class=\"line\">                            flag=2;</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        &#125;   </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //激活绘制多边形</span><br><span class=\"line\">                    toolBar.activate(Draw.POLYGON, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //绘图结束绑定事件</span><br><span class=\"line\">                on(toolBar,&quot;draw-end&quot;,function(result)&#123;</span><br><span class=\"line\">                    //获得面形状</span><br><span class=\"line\">                    var geometry=result.geometry;</span><br><span class=\"line\">                    //创建Graphic</span><br><span class=\"line\">                    var graphicpoint;</span><br><span class=\"line\"></span><br><span class=\"line\">                    //很重要！！！在这里构建参数对象</span><br><span class=\"line\">                    if(flag==1)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        //创建Graphic</span><br><span class=\"line\">                        graphicpoint = new Graphic(geometry, polygonSymbol1);</span><br><span class=\"line\">                        geometries.push(geometry)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else if(flag==2)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        //创建Graphic</span><br><span class=\"line\">                        graphicpoint = new Graphic(geometry, polygonSymbol2);</span><br><span class=\"line\">                        paramGeometry=geometry;</span><br><span class=\"line\">                    &#125;   </span><br><span class=\"line\">                    map.graphics.add(graphicpoint); </span><br><span class=\"line\">                    //关闭绘图工具</span><br><span class=\"line\">                    toolBar.deactivate();                   </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //给求交按钮绑定事件</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //在这里在说一边，第一个参数是图形集合，第二个参数是一个图形</span><br><span class=\"line\">                    geometryServices.intersect(geometries,paramGeometry,function(result)&#123;</span><br><span class=\"line\">                        for(var idx in result)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            //创建Graphic</span><br><span class=\"line\">                            var graphic=new Graphic(result[idx],polygonSymbol3)</span><br><span class=\"line\">                            //将每一个结果都放在map中</span><br><span class=\"line\">                            map.graphics.add(graphic)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;button class=&quot;pbtn&quot; &gt;第一个参数&lt;/button&gt;</span><br><span class=\"line\">    &lt;button class=&quot;pbtn&quot; &gt;第二个参数&lt;/button&gt;</span><br><span class=\"line\">    &lt;input id=&quot;Btn&quot; type=&quot;button&quot; value=&quot;求交分析&quot; /&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>什么是几何服务（GeometryService）？从字面意义上来说是和几何（Geometry）相关的服务，具体一点讲我们可以用这个类实现一些简单的图形操作。例如：</p>\n<ul>\n<li>测量直线的距离</li>\n<li>形状的缓冲区分析</li>\n<li>判断两个形状之间的关系（相交，相离等等）</li>\n<li>两个形状求交</li>\n<li>对形状的裁剪等等</li>\n</ul>\n<p>在此以缓冲区分析和图形求交来介绍几何服务的使用.</p>\n<h3 id=\"启用几何服务\"><a href=\"#启用几何服务\" class=\"headerlink\" title=\"启用几何服务\"></a>启用几何服务</h3><p>当我们安装好ArcGIS Server的时候，几何服务就已经存在了，因此几何服务不需要我们发布，但是在默认情况下几何服务是关闭的，因此我们首先启动几何服务，步骤如下：</p>\n<p>登录我们的ArcGIS Server Manager<br><img src=\"/2019/08/06/ArcGIS-API-for-JS22/01.png\" alt=\"01.png\"><br>启动成功<br><img src=\"/2019/08/06/ArcGIS-API-for-JS22/02.png\" alt=\"02.png\"><br>几何服务的URL<br><img src=\"/2019/08/06/ArcGIS-API-for-JS22/03.png\" alt=\"03.png\"></p>\n<h3 id=\"利用几何服务进行缓冲区分析\"><a href=\"#利用几何服务进行缓冲区分析\" class=\"headerlink\" title=\"利用几何服务进行缓冲区分析\"></a>利用几何服务进行缓冲区分析</h3><p>几何服务的使用一般分为四个步骤：</p>\n<ul>\n<li>创建几何服务对象</li>\n<li>创建参数</li>\n<li>构建参数对象</li>\n<li>执行相应的方法，并处理返回的结果</li>\n</ul>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>加载地图（省略）<br>创建两个按钮–一个按钮用于画点，另外一个按钮用于缓冲区分析<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input id=&quot;point&quot; type=&quot;button&quot; value=&quot;点&quot;/&gt;</span><br><span class=\"line\">&lt;input id=&quot;Btn&quot; type=&quot;button&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建相关对象（例如符号对象，Draw对象等等）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用toolbar上的绘图工具</span><br><span class=\"line\">                var toolBar = new Draw(map);</span><br><span class=\"line\">                //创建点符号</span><br><span class=\"line\">                var pointSymbol = new SimpleMarkerSymbol();</span><br><span class=\"line\">                pointSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;</span><br><span class=\"line\">                pointSymbol.setSize(12);</span><br><span class=\"line\">                pointSymbol.setColor(new Color(&quot;#FFFFCC&quot;));</span><br><span class=\"line\">                //线符号</span><br><span class=\"line\">                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //面符号</span><br><span class=\"line\">                polygonSymbol= new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 255, 0, 0.25]));</span><br></pre></td></tr></table></figure></p>\n<p>创建几何服务对象，创建相应的缓冲区参数对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var geometryServices = new GeometryService(&quot;http://localhost:6080/arcgis/rest/services/Utilities/Geometry/GeometryServer&quot;);</span><br><span class=\"line\">var params = new BufferParameters();</span><br></pre></td></tr></table></figure></p>\n<p>给画点按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给画点按钮绑定事件</span><br><span class=\"line\">                on(dom.byId(&quot;point&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //激活画点工具</span><br><span class=\"line\">                    toolBar.activate(Draw.POINT, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">                //绘图结束绑定事件</span><br><span class=\"line\">                on(toolBar,&quot;draw-end&quot;,function(result)&#123;</span><br><span class=\"line\">                    //获得点形状</span><br><span class=\"line\">                    var geometry=result.geometry;</span><br><span class=\"line\">                    //创建Graphic</span><br><span class=\"line\">                    var graphicpoint = new Graphic(geometry, pointSymbol);</span><br><span class=\"line\">                    map.graphics.add(graphicpoint); </span><br><span class=\"line\">                    //关闭绘图工具</span><br><span class=\"line\">                    toolBar.deactivate();</span><br><span class=\"line\">                    //很重要！！！在这里构建缓冲区分析的形状属性</span><br><span class=\"line\">                    //注意这里可以放一个数组，此处为了方便我们只对一个形状进行缓冲区分析</span><br><span class=\"line\">                    params.geometries  = [ geometry ];</span><br><span class=\"line\"></span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>给缓冲区分析按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给缓冲区分析按钮绑定事件</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //缓冲距离</span><br><span class=\"line\">                    params.distances = [ &quot;80&quot; ];</span><br><span class=\"line\">                    //空间参考</span><br><span class=\"line\">                    params.bufferSpatialReference = map.spatialReference;</span><br><span class=\"line\">                    params.outSpatialReference = map.spatialReference;</span><br><span class=\"line\">                    //执行分析处理结果</span><br><span class=\"line\">                    geometryServices.buffer(params,function(result)&#123;</span><br><span class=\"line\">                        //处理缓冲区分析得到的结果</span><br><span class=\"line\">                        for(var idx in result)</span><br><span class=\"line\">                        &#123;   </span><br><span class=\"line\">                            //创建Graphic</span><br><span class=\"line\">                            var graphic=new Graphic(result[idx],polygonSymbol)</span><br><span class=\"line\">                            //将每一个结果都放在map中</span><br><span class=\"line\">                            map.graphics.add(graphic)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"/2019/08/06/ArcGIS-API-for-JS22/04.png\" alt=\"04.png\"></p>\n<h4 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;缓冲区分析&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,&quot;dojo/on&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">            &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/GeometryService&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/BufferParameters&quot;,</span><br><span class=\"line\">            &quot;dojo/colors&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map,dom,on,</span><br><span class=\"line\">                ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                SimpleMarkerSymbol,</span><br><span class=\"line\">                SimpleLineSymbol,</span><br><span class=\"line\">                SimpleFillSymbol,</span><br><span class=\"line\">                Draw,</span><br><span class=\"line\">                Graphic,</span><br><span class=\"line\">                GeometryService,</span><br><span class=\"line\">                BufferParameters,Color) &#123;</span><br><span class=\"line\">                var map = new esri.Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                var layer = new esri.layers.ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">                (&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer&quot;);</span><br><span class=\"line\">                map.addLayer(layer);</span><br><span class=\"line\">                //创建几何服务对象</span><br><span class=\"line\">                var geometryServices = new GeometryService(&quot;http://localhost:6080/arcgis/rest/services/Utilities/Geometry/GeometryServer&quot;);</span><br><span class=\"line\">                //创建缓存参数对象</span><br><span class=\"line\">                var params = new BufferParameters();</span><br><span class=\"line\">                </span><br><span class=\"line\">                //使用toolbar上的绘图工具</span><br><span class=\"line\">                var toolBar = new Draw(map);</span><br><span class=\"line\">                //创建点符号</span><br><span class=\"line\">                var pointSymbol = new SimpleMarkerSymbol();</span><br><span class=\"line\">                pointSymbol.style = SimpleMarkerSymbol.STYLE_CIRCLE;</span><br><span class=\"line\">                pointSymbol.setSize(12);</span><br><span class=\"line\">                pointSymbol.setColor(new Color(&quot;#FFFFCC&quot;));</span><br><span class=\"line\">                //线符号</span><br><span class=\"line\">                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //面符号</span><br><span class=\"line\">                polygonSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 255, 0, 0.25]));</span><br><span class=\"line\">                //给画点按钮绑定事件</span><br><span class=\"line\">                on(dom.byId(&quot;point&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //激活画点工具</span><br><span class=\"line\">                    toolBar.activate(Draw.POINT, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //绘图结束绑定事件</span><br><span class=\"line\">                on(toolBar,&quot;draw-end&quot;,function(result)&#123;</span><br><span class=\"line\">                    //获得点形状</span><br><span class=\"line\">                    var geometry=result.geometry;</span><br><span class=\"line\">                    //创建Graphic</span><br><span class=\"line\">                    var graphicpoint = new Graphic(geometry, pointSymbol);</span><br><span class=\"line\">                    map.graphics.add(graphicpoint); </span><br><span class=\"line\">                    //关闭绘图工具</span><br><span class=\"line\">                    toolBar.deactivate();</span><br><span class=\"line\">                    //很重要！！！在这里构建缓冲区分析的形状属性</span><br><span class=\"line\">                    //注意这里可以放一个数组，此处为了方便我们只对一个形状进行缓冲区分析</span><br><span class=\"line\">                    params.geometries  = [ geometry ];</span><br><span class=\"line\"></span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //给缓冲区分析按钮绑定事件</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //缓冲距离</span><br><span class=\"line\">                    params.distances = [ &quot;80&quot; ];</span><br><span class=\"line\">                    //空间参考</span><br><span class=\"line\">                    params.bufferSpatialReference = map.spatialReference;</span><br><span class=\"line\">                    params.outSpatialReference = map.spatialReference;</span><br><span class=\"line\">                    //执行分析处理结果</span><br><span class=\"line\">                    geometryServices.buffer(params,function(result)&#123;</span><br><span class=\"line\">                        //处理缓冲区分析得到的结果</span><br><span class=\"line\">                        for(var idx in result)</span><br><span class=\"line\">                        &#123;   </span><br><span class=\"line\">                            //创建Graphic</span><br><span class=\"line\">                            var graphic=new Graphic(result[idx],polygonSymbol)</span><br><span class=\"line\">                            //将每一个结果都放在map中</span><br><span class=\"line\">                            map.graphics.add(graphic)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;input id=&quot;point&quot; type=&quot;button&quot; value=&quot;点&quot;/&gt;</span><br><span class=\"line\">    &lt;input id=&quot;Btn&quot; type=&quot;button&quot; value=&quot;缓冲区分析&quot; /&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用几何服务进行多边形求交\"><a href=\"#利用几何服务进行多边形求交\" class=\"headerlink\" title=\"利用几何服务进行多边形求交\"></a>利用几何服务进行多边形求交</h3><p>首先我们先看看求交这一个方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GeometryService.intersect(geometries, geometry, callback?, errback?)</span><br></pre></td></tr></table></figure></p>\n<p>解释：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此方法有四个参数，</span><br><span class=\"line\">第一个参数是   形状的集合(多个形状)</span><br><span class=\"line\">第二个参数是   一个形状</span><br><span class=\"line\">第三个参数是   运行成功之后的结果</span><br><span class=\"line\">第四个参数是   运行失败之后的结果</span><br></pre></td></tr></table></figure></p>\n<p>方法的使用：用第二个参数的形状与第一个参数的多个形状进行求交，从而返回运行的结果</p>\n<h4 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>加载地图（略）<br>创建三个按钮<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button class=&quot;pbtn&quot; &gt;第一个参数&lt;/button&gt;</span><br><span class=\"line\">&lt;button class=&quot;pbtn&quot; &gt;第二个参数&lt;/button&gt;</span><br><span class=\"line\">&lt;input id=&quot;Btn&quot; type=&quot;button&quot; value=&quot;求交分析&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建相关对象（符号对象，绘图对象）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//一个标志位，用于记录是绘制第几个参数</span><br><span class=\"line\">                //1代表第一个参数</span><br><span class=\"line\">                //2代表第二个参数</span><br><span class=\"line\">                var flag;</span><br><span class=\"line\">                //第一个参数  注意第一个参数是多个形状</span><br><span class=\"line\">                var geometries=[];</span><br><span class=\"line\">                //第二个参数  注意第二个参数是一个形状</span><br><span class=\"line\">                var paramGeometry;</span><br><span class=\"line\">                //使用toolbar上的绘图工具</span><br><span class=\"line\">                var toolBar = new Draw(map);</span><br><span class=\"line\">                </span><br><span class=\"line\">                //线符号</span><br><span class=\"line\">                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //第一个参数的面符号</span><br><span class=\"line\">                polygonSymbol1 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 0, 0, 0.25]));</span><br><span class=\"line\">                //第二个参数的面符号</span><br><span class=\"line\">                polygonSymbol2 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([0, 255, 0, 0.25]));</span><br><span class=\"line\">                //求交之后的面符号</span><br><span class=\"line\">                polygonSymbol3 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([0, 0, 255, 0.25]));</span><br></pre></td></tr></table></figure></p>\n<p>给画图形的按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给绘制polygon的按钮绑定事件</span><br><span class=\"line\">                query(&quot;.pbtn&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                    var value=this.innerHTML;</span><br><span class=\"line\">                    switch(value)&#123;</span><br><span class=\"line\">                        case &quot;第一个参数&quot;:&#123;</span><br><span class=\"line\">                            flag=1;</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                            </span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        case &quot;第二个参数&quot;:&#123;</span><br><span class=\"line\">                            flag=2;</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        &#125;   </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //激活绘制多边形</span><br><span class=\"line\">                    toolBar.activate(Draw.POLYGON, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //绘图结束绑定事件</span><br><span class=\"line\">                on(toolBar,&quot;draw-end&quot;,function(result)&#123;</span><br><span class=\"line\">                    //获得面形状</span><br><span class=\"line\">                    var geometry=result.geometry;</span><br><span class=\"line\">                    //创建Graphic</span><br><span class=\"line\">                    var graphicpoint;</span><br><span class=\"line\"></span><br><span class=\"line\">                    //很重要！！！在这里构建参数对象</span><br><span class=\"line\">                    if(flag==1)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        //创建Graphic</span><br><span class=\"line\">                        graphicpoint = new Graphic(geometry, polygonSymbol1);</span><br><span class=\"line\">                        geometries.push(geometry)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else if(flag==2)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        //创建Graphic</span><br><span class=\"line\">                        graphicpoint = new Graphic(geometry, polygonSymbol2);</span><br><span class=\"line\">                        paramGeometry=geometry;</span><br><span class=\"line\">                    &#125;   </span><br><span class=\"line\">                    map.graphics.add(graphicpoint); </span><br><span class=\"line\">                    //关闭绘图工具</span><br><span class=\"line\">                    toolBar.deactivate();                   </span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>给求交按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给求交按钮绑定事件</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //在这里在说一边，第一个参数是图形集合，第二个参数是一个图形</span><br><span class=\"line\">                    geometryServices.intersect(geometries,paramGeometry,function(result)&#123;</span><br><span class=\"line\">                        for(var idx in result)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            //创建Graphic</span><br><span class=\"line\">                            var graphic=new Graphic(result[idx],polygonSymbol3)</span><br><span class=\"line\">                            //将每一个结果都放在map中</span><br><span class=\"line\">                            map.graphics.add(graphic)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"运行结果-1\"><a href=\"#运行结果-1\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h4><p><img src=\"/2019/08/06/ArcGIS-API-for-JS22/05.png\" alt=\"05.png\"></p>\n<h4 id=\"全部代码-1\"><a href=\"#全部代码-1\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class=\"line\">    &lt;title&gt;多边形求交&lt;/title&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        require([&quot;esri/map&quot;,</span><br><span class=\"line\">            &quot;dojo/dom&quot;,&quot;dojo/on&quot;,&quot;dojo/query&quot;,</span><br><span class=\"line\">            &quot;esri/layers/ArcGISDynamicMapServiceLayer&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleMarkerSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleLineSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">            &quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">            &quot;esri/graphic&quot;,</span><br><span class=\"line\">            &quot;esri/tasks/GeometryService&quot;,</span><br><span class=\"line\">            &quot;dojo/colors&quot;,</span><br><span class=\"line\">            &quot;dojo/domReady!&quot;],</span><br><span class=\"line\">            function (Map,dom,on,query,</span><br><span class=\"line\">                ArcGISDynamicMapServiceLayer,</span><br><span class=\"line\">                SimpleMarkerSymbol,</span><br><span class=\"line\">                SimpleLineSymbol,</span><br><span class=\"line\">                SimpleFillSymbol,</span><br><span class=\"line\">                Draw,</span><br><span class=\"line\">                Graphic,</span><br><span class=\"line\">                GeometryService,</span><br><span class=\"line\">                Color) &#123;</span><br><span class=\"line\">                var map = new esri.Map(&quot;mapDiv&quot;);</span><br><span class=\"line\">                var layer = new esri.layers.ArcGISDynamicMapServiceLayer</span><br><span class=\"line\">                (&quot;http://localhost:6080/arcgis/rest/services/Test/ft/MapServer&quot;);</span><br><span class=\"line\">                map.addLayer(layer);</span><br><span class=\"line\">                //创建几何服务对象</span><br><span class=\"line\">                var geometryServices = new GeometryService(&quot;http://localhost:6080/arcgis/rest/services/Utilities/Geometry/GeometryServer&quot;);</span><br><span class=\"line\">                //一个标志位，用于记录是绘制第几个参数</span><br><span class=\"line\">                //1代表第一个参数</span><br><span class=\"line\">                //2代表第二个参数</span><br><span class=\"line\">                var flag;</span><br><span class=\"line\">                //第一个参数  注意第一个参数是多个形状</span><br><span class=\"line\">                var geometries=[];</span><br><span class=\"line\">                //第二个参数  注意第二个参数是一个形状</span><br><span class=\"line\">                var paramGeometry;</span><br><span class=\"line\">                //使用toolbar上的绘图工具</span><br><span class=\"line\">                var toolBar = new Draw(map);</span><br><span class=\"line\">                </span><br><span class=\"line\">                //线符号</span><br><span class=\"line\">                lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new Color([255, 0, 0]), 3);</span><br><span class=\"line\">                //第一个参数的面符号</span><br><span class=\"line\">                polygonSymbol1 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([255, 0, 0, 0.25]));</span><br><span class=\"line\">                //第二个参数的面符号</span><br><span class=\"line\">                polygonSymbol2 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([0, 255, 0, 0.25]));</span><br><span class=\"line\">                //求交之后的面符号</span><br><span class=\"line\">                polygonSymbol3 = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol, new Color([0, 0, 255, 0.25]));</span><br><span class=\"line\">                //给绘制polygon的按钮绑定事件</span><br><span class=\"line\">                query(&quot;.pbtn&quot;).on(&quot;click&quot;,function(event)&#123;</span><br><span class=\"line\">                    var value=this.innerHTML;</span><br><span class=\"line\">                    switch(value)&#123;</span><br><span class=\"line\">                        case &quot;第一个参数&quot;:&#123;</span><br><span class=\"line\">                            flag=1;</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                            </span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        case &quot;第二个参数&quot;:&#123;</span><br><span class=\"line\">                            flag=2;</span><br><span class=\"line\">                            break;</span><br><span class=\"line\">                        &#125;   </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    //激活绘制多边形</span><br><span class=\"line\">                    toolBar.activate(Draw.POLYGON, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //绘图结束绑定事件</span><br><span class=\"line\">                on(toolBar,&quot;draw-end&quot;,function(result)&#123;</span><br><span class=\"line\">                    //获得面形状</span><br><span class=\"line\">                    var geometry=result.geometry;</span><br><span class=\"line\">                    //创建Graphic</span><br><span class=\"line\">                    var graphicpoint;</span><br><span class=\"line\"></span><br><span class=\"line\">                    //很重要！！！在这里构建参数对象</span><br><span class=\"line\">                    if(flag==1)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        //创建Graphic</span><br><span class=\"line\">                        graphicpoint = new Graphic(geometry, polygonSymbol1);</span><br><span class=\"line\">                        geometries.push(geometry)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    else if(flag==2)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        //创建Graphic</span><br><span class=\"line\">                        graphicpoint = new Graphic(geometry, polygonSymbol2);</span><br><span class=\"line\">                        paramGeometry=geometry;</span><br><span class=\"line\">                    &#125;   </span><br><span class=\"line\">                    map.graphics.add(graphicpoint); </span><br><span class=\"line\">                    //关闭绘图工具</span><br><span class=\"line\">                    toolBar.deactivate();                   </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                //给求交按钮绑定事件</span><br><span class=\"line\">                on(dom.byId(&quot;Btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                    //在这里在说一边，第一个参数是图形集合，第二个参数是一个图形</span><br><span class=\"line\">                    geometryServices.intersect(geometries,paramGeometry,function(result)&#123;</span><br><span class=\"line\">                        for(var idx in result)</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            //创建Graphic</span><br><span class=\"line\">                            var graphic=new Graphic(result[idx],polygonSymbol3)</span><br><span class=\"line\">                            //将每一个结果都放在map中</span><br><span class=\"line\">                            map.graphics.add(graphic)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;button class=&quot;pbtn&quot; &gt;第一个参数&lt;/button&gt;</span><br><span class=\"line\">    &lt;button class=&quot;pbtn&quot; &gt;第二个参数&lt;/button&gt;</span><br><span class=\"line\">    &lt;input id=&quot;Btn&quot; type=&quot;button&quot; value=&quot;求交分析&quot; /&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ArcGIS API For Javascript之影像服务分析","date":"2019-08-06T10:08:42.000Z","_content":"  在前面我们大多数的程序是对矢量数据的操作，在这篇博客中，主要介绍影响服务的操作。在影像服务的操作中主要用到的类有：\n\n* esri/tasks/ImageServiceIdentifyTask用于对影像数据的查询，它主要对应的参数为esri/tasks/ImageServiceIdentifyParameters,查询返回的结果用esri/tasks/ImageServiceIdentifyResult接受\n* 对影像数据的测量主要用到的类为esri/tasks/ImageServiceMeasureTask,它所对应的的参数为esri/tasks/ImageServiceMeasureParameters\n\n### ArcGIS API影像测量\n#### 代码实现\n首先加载地图\n```\nrequire([\"esri/map\",\"esri/layers/ArcGISImageServiceLayer\",\"dojo/domReady!\"],function(Map,ArcGISImageServiceLayer){\n        var map=new Map(\"mapDiv\")\n        //注意这里是影响服务\n        var layer=new ArcGISImageServiceLayer(\"http://localhost:6080/arcgis/rest/services/Test/Dem/ImageServer\")\n        map.addLayer(layer);\n    });\n```\n添加两个按钮，一个用于绘制折线，一个用于测量分析\n```\n    <button id=\"drawp\">绘制点</button>\n    <button id=\"btn\">查询</button>\n```\n创建必要对象\n```\n//用于绘制点\n            var toolbar =new Draw(map);\n            \n            //创建影像分析对象\n            var task=new ImageServiceIdentifyTask(\"http://192.168.0.112:6080/arcgis/rest/services/Test/Dem1/ImageServer\");\n            //创建影像分析参数对象\n            var params=new ImageServiceIdentifyParameters();\n            var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n            var marker= new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new dojo.Color([255, 0, 0]));\n            var fill= new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new dojo.Color([255, 0, 0]));\n```\n给绘制折现按钮添加绑定事件\n```\n//给绘制点按钮绑定事件\n            on(dom.byId(\"drawp\"),\"click\",function(){\n                toolbar.activate(Draw.POLYLINE, {\n                        showTooltips:true\n                })\n            })\n            //给draw工具的绘制完成事件绑定函数\n            on(toolbar,\"draw-complete\", function (result) {\n                var geometry=result.geometry;\n                //给参数对象的几何属性赋值\n                params.geometry=geometry;\n                toolbar.deactivate();\n            \n            })\n```\n给分析按钮绑定事件\n```\non(dom.byId(\"btn\"),\"click\",function(){\n                //设置掩膜规则\n                var mosaicRule=new MosaicRule();\n                mosaicRule.ascending=false;\n                mosaicRule.method=MosaicRule.METHOD_CENTER\n                params.mosaicRule=mosaicRule\n                params.pixelSizeX=layer.pixelSizeX;\n                params.pixelSizeY=layer.pixelSizeY;\n                task.execute(params,function(result){\n                    //弹出改点的高程值\n                    alert(result.value)\n                })\n            })\n```\n#### 代码结果\n![04.png](04.png)\n#### 全部代码\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>index.html</title>\n    \n    <meta http-equiv=\"keywords\" content=\"keyword1,keyword2,keyword3\">\n    <meta http-equiv=\"description\" content=\"this is my page\">\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <!--<link rel=\"stylesheet\" type=\"text/css\" href=\"./styles.css\">-->\n    <style>\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script>\n        require([\"esri/map\",\"esri/layers/ArcGISImageServiceLayer\",\"dojo/on\",\n        \"dojo/dom\",\"esri/toolbars/draw\",\n        \"esri/tasks/ImageServiceIdentifyTask\",\"esri/tasks/ImageServiceIdentifyParameters\",\n        \"esri/symbols/SimpleLineSymbol\",\"esri/graphic\",\"esri/symbols/SimpleMarkerSymbol\", \"esri/symbols/SimpleFillSymbol\",\n        \"esri/layers/MosaicRule\",\n        \"dojo/domReady!\"],function(Map,ArcGISImageServiceLayer,on,dom,Draw,ImageServiceIdentifyTask,\n        ImageServiceIdentifyParameters,SimpleLineSymbol,\n        Graphic,SimpleMarkerSymbol,SimpleFillSymbol,MosaicRule){\n            var map=new Map(\"mapDiv\")\n\n            //注意这里是影响服务\n            var layer=new ArcGISImageServiceLayer(\"http://192.168.0.112:6080/arcgis/rest/services/Test/Dem1/ImageServer\")\n            map.addLayer(layer);\n            //用于绘制点\n            var toolbar =new Draw(map);\n            \n            //创建影像分析对象\n            var task=new ImageServiceIdentifyTask(\"http://192.168.0.112:6080/arcgis/rest/services/Test/Dem1/ImageServer\");\n            //创建影像分析参数对象\n            var params=new ImageServiceIdentifyParameters();\n            var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n            var marker= new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new dojo.Color([255, 0, 0]));\n            var fill= new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new dojo.Color([255, 0, 0]));\n            //给绘制折线按钮绑定事件\n            on(dom.byId(\"drawp\"),\"click\",function(){\n                toolbar.activate(Draw.POINT, {\n                        showTooltips:true\n                })\n            })\n            //给draw工具的绘制完成事件绑定函数\n            on(toolbar,\"draw-complete\", function (result) {\n                map.graphics.clear();\n                var geometry=result.geometry;\n                //给参数对象的几何属性赋值\n                params.geometry =geometry;\n                graphic= new Graphic(geometry, marker);\n                map.graphics.add(graphic);\n                toolbar.deactivate();\n            \n            })\n            \n            on(dom.byId(\"btn\"),\"click\",function(){\n                //设置掩膜规则\n                var mosaicRule=new MosaicRule();\n                mosaicRule.ascending=false;\n                mosaicRule.method=MosaicRule.METHOD_CENTER\n                params.mosaicRule=mosaicRule\n                params.pixelSizeX=layer.pixelSizeX;\n                params.pixelSizeY=layer.pixelSizeY;\n                task.execute(params,function(result){\n                    //弹出改点的高程值\n                    alert(result.value)\n                })\n            })\n            \n        });\n    </script>\n  </head>\n  \n  <body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n    <button id=\"drawp\">绘制点</button>\n    <button id=\"btn\">查询</button>\n  </body>\n</html>\n```","source":"_posts/ArcGIS-API-for-JS25.md","raw":"---\ntitle: ArcGIS API For Javascript之影像服务分析\ndate: 2019-08-06 18:08:42\ncategories:\n- ArcGIS\ntags: [ArcGIS API for JS]\n---\n  在前面我们大多数的程序是对矢量数据的操作，在这篇博客中，主要介绍影响服务的操作。在影像服务的操作中主要用到的类有：\n\n* esri/tasks/ImageServiceIdentifyTask用于对影像数据的查询，它主要对应的参数为esri/tasks/ImageServiceIdentifyParameters,查询返回的结果用esri/tasks/ImageServiceIdentifyResult接受\n* 对影像数据的测量主要用到的类为esri/tasks/ImageServiceMeasureTask,它所对应的的参数为esri/tasks/ImageServiceMeasureParameters\n\n### ArcGIS API影像测量\n#### 代码实现\n首先加载地图\n```\nrequire([\"esri/map\",\"esri/layers/ArcGISImageServiceLayer\",\"dojo/domReady!\"],function(Map,ArcGISImageServiceLayer){\n        var map=new Map(\"mapDiv\")\n        //注意这里是影响服务\n        var layer=new ArcGISImageServiceLayer(\"http://localhost:6080/arcgis/rest/services/Test/Dem/ImageServer\")\n        map.addLayer(layer);\n    });\n```\n添加两个按钮，一个用于绘制折线，一个用于测量分析\n```\n    <button id=\"drawp\">绘制点</button>\n    <button id=\"btn\">查询</button>\n```\n创建必要对象\n```\n//用于绘制点\n            var toolbar =new Draw(map);\n            \n            //创建影像分析对象\n            var task=new ImageServiceIdentifyTask(\"http://192.168.0.112:6080/arcgis/rest/services/Test/Dem1/ImageServer\");\n            //创建影像分析参数对象\n            var params=new ImageServiceIdentifyParameters();\n            var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n            var marker= new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new dojo.Color([255, 0, 0]));\n            var fill= new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new dojo.Color([255, 0, 0]));\n```\n给绘制折现按钮添加绑定事件\n```\n//给绘制点按钮绑定事件\n            on(dom.byId(\"drawp\"),\"click\",function(){\n                toolbar.activate(Draw.POLYLINE, {\n                        showTooltips:true\n                })\n            })\n            //给draw工具的绘制完成事件绑定函数\n            on(toolbar,\"draw-complete\", function (result) {\n                var geometry=result.geometry;\n                //给参数对象的几何属性赋值\n                params.geometry=geometry;\n                toolbar.deactivate();\n            \n            })\n```\n给分析按钮绑定事件\n```\non(dom.byId(\"btn\"),\"click\",function(){\n                //设置掩膜规则\n                var mosaicRule=new MosaicRule();\n                mosaicRule.ascending=false;\n                mosaicRule.method=MosaicRule.METHOD_CENTER\n                params.mosaicRule=mosaicRule\n                params.pixelSizeX=layer.pixelSizeX;\n                params.pixelSizeY=layer.pixelSizeY;\n                task.execute(params,function(result){\n                    //弹出改点的高程值\n                    alert(result.value)\n                })\n            })\n```\n#### 代码结果\n![04.png](04.png)\n#### 全部代码\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>index.html</title>\n    \n    <meta http-equiv=\"keywords\" content=\"keyword1,keyword2,keyword3\">\n    <meta http-equiv=\"description\" content=\"this is my page\">\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\">\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css\"/>\n    <link  rel=\"stylesheet\"  type=\"text/css\" href=\"http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css\" />\n    <script  type=\"text/Javascript\" src=\"http://localhost/arcgis_js_api/library/3.17/3.17/init.js\"></script>\n    <!--<link rel=\"stylesheet\" type=\"text/css\" href=\"./styles.css\">-->\n    <style>\n        .MapClass{\n            width:100%;\n            height:500px;\n            border:1px solid #000;\n        }\n    </style>\n    <script>\n        require([\"esri/map\",\"esri/layers/ArcGISImageServiceLayer\",\"dojo/on\",\n        \"dojo/dom\",\"esri/toolbars/draw\",\n        \"esri/tasks/ImageServiceIdentifyTask\",\"esri/tasks/ImageServiceIdentifyParameters\",\n        \"esri/symbols/SimpleLineSymbol\",\"esri/graphic\",\"esri/symbols/SimpleMarkerSymbol\", \"esri/symbols/SimpleFillSymbol\",\n        \"esri/layers/MosaicRule\",\n        \"dojo/domReady!\"],function(Map,ArcGISImageServiceLayer,on,dom,Draw,ImageServiceIdentifyTask,\n        ImageServiceIdentifyParameters,SimpleLineSymbol,\n        Graphic,SimpleMarkerSymbol,SimpleFillSymbol,MosaicRule){\n            var map=new Map(\"mapDiv\")\n\n            //注意这里是影响服务\n            var layer=new ArcGISImageServiceLayer(\"http://192.168.0.112:6080/arcgis/rest/services/Test/Dem1/ImageServer\")\n            map.addLayer(layer);\n            //用于绘制点\n            var toolbar =new Draw(map);\n            \n            //创建影像分析对象\n            var task=new ImageServiceIdentifyTask(\"http://192.168.0.112:6080/arcgis/rest/services/Test/Dem1/ImageServer\");\n            //创建影像分析参数对象\n            var params=new ImageServiceIdentifyParameters();\n            var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);\n            var marker= new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new dojo.Color([255, 0, 0]));\n            var fill= new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new dojo.Color([255, 0, 0]));\n            //给绘制折线按钮绑定事件\n            on(dom.byId(\"drawp\"),\"click\",function(){\n                toolbar.activate(Draw.POINT, {\n                        showTooltips:true\n                })\n            })\n            //给draw工具的绘制完成事件绑定函数\n            on(toolbar,\"draw-complete\", function (result) {\n                map.graphics.clear();\n                var geometry=result.geometry;\n                //给参数对象的几何属性赋值\n                params.geometry =geometry;\n                graphic= new Graphic(geometry, marker);\n                map.graphics.add(graphic);\n                toolbar.deactivate();\n            \n            })\n            \n            on(dom.byId(\"btn\"),\"click\",function(){\n                //设置掩膜规则\n                var mosaicRule=new MosaicRule();\n                mosaicRule.ascending=false;\n                mosaicRule.method=MosaicRule.METHOD_CENTER\n                params.mosaicRule=mosaicRule\n                params.pixelSizeX=layer.pixelSizeX;\n                params.pixelSizeY=layer.pixelSizeY;\n                task.execute(params,function(result){\n                    //弹出改点的高程值\n                    alert(result.value)\n                })\n            })\n            \n        });\n    </script>\n  </head>\n  \n  <body>\n    <div id=\"mapDiv\" class=\"MapClass\"></div>\n    <button id=\"drawp\">绘制点</button>\n    <button id=\"btn\">查询</button>\n  </body>\n</html>\n```","slug":"ArcGIS-API-for-JS25","published":1,"updated":"2019-08-06T10:13:15.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cun0023t09zjq818f39","content":"<p>  在前面我们大多数的程序是对矢量数据的操作，在这篇博客中，主要介绍影响服务的操作。在影像服务的操作中主要用到的类有：</p>\n<ul>\n<li>esri/tasks/ImageServiceIdentifyTask用于对影像数据的查询，它主要对应的参数为esri/tasks/ImageServiceIdentifyParameters,查询返回的结果用esri/tasks/ImageServiceIdentifyResult接受</li>\n<li>对影像数据的测量主要用到的类为esri/tasks/ImageServiceMeasureTask,它所对应的的参数为esri/tasks/ImageServiceMeasureParameters</li>\n</ul>\n<h3 id=\"ArcGIS-API影像测量\"><a href=\"#ArcGIS-API影像测量\" class=\"headerlink\" title=\"ArcGIS API影像测量\"></a>ArcGIS API影像测量</h3><h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>首先加载地图<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require([&quot;esri/map&quot;,&quot;esri/layers/ArcGISImageServiceLayer&quot;,&quot;dojo/domReady!&quot;],function(Map,ArcGISImageServiceLayer)&#123;</span><br><span class=\"line\">        var map=new Map(&quot;mapDiv&quot;)</span><br><span class=\"line\">        //注意这里是影响服务</span><br><span class=\"line\">        var layer=new ArcGISImageServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/Dem/ImageServer&quot;)</span><br><span class=\"line\">        map.addLayer(layer);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>添加两个按钮，一个用于绘制折线，一个用于测量分析<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=&quot;drawp&quot;&gt;绘制点&lt;/button&gt;</span><br><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;查询&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建必要对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//用于绘制点</span><br><span class=\"line\">            var toolbar =new Draw(map);</span><br><span class=\"line\">            </span><br><span class=\"line\">            //创建影像分析对象</span><br><span class=\"line\">            var task=new ImageServiceIdentifyTask(&quot;http://192.168.0.112:6080/arcgis/rest/services/Test/Dem1/ImageServer&quot;);</span><br><span class=\"line\">            //创建影像分析参数对象</span><br><span class=\"line\">            var params=new ImageServiceIdentifyParameters();</span><br><span class=\"line\">            var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">            var marker= new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new dojo.Color([255, 0, 0]));</span><br><span class=\"line\">            var fill= new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new dojo.Color([255, 0, 0]));</span><br></pre></td></tr></table></figure></p>\n<p>给绘制折现按钮添加绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给绘制点按钮绑定事件</span><br><span class=\"line\">            on(dom.byId(&quot;drawp&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                toolbar.activate(Draw.POLYLINE, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            //给draw工具的绘制完成事件绑定函数</span><br><span class=\"line\">            on(toolbar,&quot;draw-complete&quot;, function (result) &#123;</span><br><span class=\"line\">                var geometry=result.geometry;</span><br><span class=\"line\">                //给参数对象的几何属性赋值</span><br><span class=\"line\">                params.geometry=geometry;</span><br><span class=\"line\">                toolbar.deactivate();</span><br><span class=\"line\">            </span><br><span class=\"line\">            &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>给分析按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(dom.byId(&quot;btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                //设置掩膜规则</span><br><span class=\"line\">                var mosaicRule=new MosaicRule();</span><br><span class=\"line\">                mosaicRule.ascending=false;</span><br><span class=\"line\">                mosaicRule.method=MosaicRule.METHOD_CENTER</span><br><span class=\"line\">                params.mosaicRule=mosaicRule</span><br><span class=\"line\">                params.pixelSizeX=layer.pixelSizeX;</span><br><span class=\"line\">                params.pixelSizeY=layer.pixelSizeY;</span><br><span class=\"line\">                task.execute(params,function(result)&#123;</span><br><span class=\"line\">                    //弹出改点的高程值</span><br><span class=\"line\">                    alert(result.value)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"代码结果\"><a href=\"#代码结果\" class=\"headerlink\" title=\"代码结果\"></a>代码结果</h4><p><img src=\"/2019/08/06/ArcGIS-API-for-JS25/04.png\" alt=\"04.png\"></p>\n<h4 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;index.html&lt;/title&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;keywords&quot; content=&quot;keyword1,keyword2,keyword3&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;description&quot; content=&quot;this is my page&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;!--&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./styles.css&quot;&gt;--&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;esri/layers/ArcGISImageServiceLayer&quot;,&quot;dojo/on&quot;,</span><br><span class=\"line\">        &quot;dojo/dom&quot;,&quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">        &quot;esri/tasks/ImageServiceIdentifyTask&quot;,&quot;esri/tasks/ImageServiceIdentifyParameters&quot;,</span><br><span class=\"line\">        &quot;esri/symbols/SimpleLineSymbol&quot;,&quot;esri/graphic&quot;,&quot;esri/symbols/SimpleMarkerSymbol&quot;, &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">        &quot;esri/layers/MosaicRule&quot;,</span><br><span class=\"line\">        &quot;dojo/domReady!&quot;],function(Map,ArcGISImageServiceLayer,on,dom,Draw,ImageServiceIdentifyTask,</span><br><span class=\"line\">        ImageServiceIdentifyParameters,SimpleLineSymbol,</span><br><span class=\"line\">        Graphic,SimpleMarkerSymbol,SimpleFillSymbol,MosaicRule)&#123;</span><br><span class=\"line\">            var map=new Map(&quot;mapDiv&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">            //注意这里是影响服务</span><br><span class=\"line\">            var layer=new ArcGISImageServiceLayer(&quot;http://192.168.0.112:6080/arcgis/rest/services/Test/Dem1/ImageServer&quot;)</span><br><span class=\"line\">            map.addLayer(layer);</span><br><span class=\"line\">            //用于绘制点</span><br><span class=\"line\">            var toolbar =new Draw(map);</span><br><span class=\"line\">            </span><br><span class=\"line\">            //创建影像分析对象</span><br><span class=\"line\">            var task=new ImageServiceIdentifyTask(&quot;http://192.168.0.112:6080/arcgis/rest/services/Test/Dem1/ImageServer&quot;);</span><br><span class=\"line\">            //创建影像分析参数对象</span><br><span class=\"line\">            var params=new ImageServiceIdentifyParameters();</span><br><span class=\"line\">            var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">            var marker= new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new dojo.Color([255, 0, 0]));</span><br><span class=\"line\">            var fill= new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new dojo.Color([255, 0, 0]));</span><br><span class=\"line\">            //给绘制折线按钮绑定事件</span><br><span class=\"line\">            on(dom.byId(&quot;drawp&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                toolbar.activate(Draw.POINT, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            //给draw工具的绘制完成事件绑定函数</span><br><span class=\"line\">            on(toolbar,&quot;draw-complete&quot;, function (result) &#123;</span><br><span class=\"line\">                map.graphics.clear();</span><br><span class=\"line\">                var geometry=result.geometry;</span><br><span class=\"line\">                //给参数对象的几何属性赋值</span><br><span class=\"line\">                params.geometry =geometry;</span><br><span class=\"line\">                graphic= new Graphic(geometry, marker);</span><br><span class=\"line\">                map.graphics.add(graphic);</span><br><span class=\"line\">                toolbar.deactivate();</span><br><span class=\"line\">            </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            </span><br><span class=\"line\">            on(dom.byId(&quot;btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                //设置掩膜规则</span><br><span class=\"line\">                var mosaicRule=new MosaicRule();</span><br><span class=\"line\">                mosaicRule.ascending=false;</span><br><span class=\"line\">                mosaicRule.method=MosaicRule.METHOD_CENTER</span><br><span class=\"line\">                params.mosaicRule=mosaicRule</span><br><span class=\"line\">                params.pixelSizeX=layer.pixelSizeX;</span><br><span class=\"line\">                params.pixelSizeY=layer.pixelSizeY;</span><br><span class=\"line\">                task.execute(params,function(result)&#123;</span><br><span class=\"line\">                    //弹出改点的高程值</span><br><span class=\"line\">                    alert(result.value)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;button id=&quot;drawp&quot;&gt;绘制点&lt;/button&gt;</span><br><span class=\"line\">    &lt;button id=&quot;btn&quot;&gt;查询&lt;/button&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>  在前面我们大多数的程序是对矢量数据的操作，在这篇博客中，主要介绍影响服务的操作。在影像服务的操作中主要用到的类有：</p>\n<ul>\n<li>esri/tasks/ImageServiceIdentifyTask用于对影像数据的查询，它主要对应的参数为esri/tasks/ImageServiceIdentifyParameters,查询返回的结果用esri/tasks/ImageServiceIdentifyResult接受</li>\n<li>对影像数据的测量主要用到的类为esri/tasks/ImageServiceMeasureTask,它所对应的的参数为esri/tasks/ImageServiceMeasureParameters</li>\n</ul>\n<h3 id=\"ArcGIS-API影像测量\"><a href=\"#ArcGIS-API影像测量\" class=\"headerlink\" title=\"ArcGIS API影像测量\"></a>ArcGIS API影像测量</h3><h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><p>首先加载地图<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require([&quot;esri/map&quot;,&quot;esri/layers/ArcGISImageServiceLayer&quot;,&quot;dojo/domReady!&quot;],function(Map,ArcGISImageServiceLayer)&#123;</span><br><span class=\"line\">        var map=new Map(&quot;mapDiv&quot;)</span><br><span class=\"line\">        //注意这里是影响服务</span><br><span class=\"line\">        var layer=new ArcGISImageServiceLayer(&quot;http://localhost:6080/arcgis/rest/services/Test/Dem/ImageServer&quot;)</span><br><span class=\"line\">        map.addLayer(layer);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure></p>\n<p>添加两个按钮，一个用于绘制折线，一个用于测量分析<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button id=&quot;drawp&quot;&gt;绘制点&lt;/button&gt;</span><br><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;查询&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>创建必要对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//用于绘制点</span><br><span class=\"line\">            var toolbar =new Draw(map);</span><br><span class=\"line\">            </span><br><span class=\"line\">            //创建影像分析对象</span><br><span class=\"line\">            var task=new ImageServiceIdentifyTask(&quot;http://192.168.0.112:6080/arcgis/rest/services/Test/Dem1/ImageServer&quot;);</span><br><span class=\"line\">            //创建影像分析参数对象</span><br><span class=\"line\">            var params=new ImageServiceIdentifyParameters();</span><br><span class=\"line\">            var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">            var marker= new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new dojo.Color([255, 0, 0]));</span><br><span class=\"line\">            var fill= new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new dojo.Color([255, 0, 0]));</span><br></pre></td></tr></table></figure></p>\n<p>给绘制折现按钮添加绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//给绘制点按钮绑定事件</span><br><span class=\"line\">            on(dom.byId(&quot;drawp&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                toolbar.activate(Draw.POLYLINE, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            //给draw工具的绘制完成事件绑定函数</span><br><span class=\"line\">            on(toolbar,&quot;draw-complete&quot;, function (result) &#123;</span><br><span class=\"line\">                var geometry=result.geometry;</span><br><span class=\"line\">                //给参数对象的几何属性赋值</span><br><span class=\"line\">                params.geometry=geometry;</span><br><span class=\"line\">                toolbar.deactivate();</span><br><span class=\"line\">            </span><br><span class=\"line\">            &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>给分析按钮绑定事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on(dom.byId(&quot;btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                //设置掩膜规则</span><br><span class=\"line\">                var mosaicRule=new MosaicRule();</span><br><span class=\"line\">                mosaicRule.ascending=false;</span><br><span class=\"line\">                mosaicRule.method=MosaicRule.METHOD_CENTER</span><br><span class=\"line\">                params.mosaicRule=mosaicRule</span><br><span class=\"line\">                params.pixelSizeX=layer.pixelSizeX;</span><br><span class=\"line\">                params.pixelSizeY=layer.pixelSizeY;</span><br><span class=\"line\">                task.execute(params,function(result)&#123;</span><br><span class=\"line\">                    //弹出改点的高程值</span><br><span class=\"line\">                    alert(result.value)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"代码结果\"><a href=\"#代码结果\" class=\"headerlink\" title=\"代码结果\"></a>代码结果</h4><p><img src=\"/2019/08/06/ArcGIS-API-for-JS25/04.png\" alt=\"04.png\"></p>\n<h4 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;index.html&lt;/title&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;meta http-equiv=&quot;keywords&quot; content=&quot;keyword1,keyword2,keyword3&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;description&quot; content=&quot;this is my page&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/dijit/themes/tundra/tundra.css&quot;/&gt;</span><br><span class=\"line\">    &lt;link  rel=&quot;stylesheet&quot;  type=&quot;text/css&quot; href=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/esri/css/esri.css&quot; /&gt;</span><br><span class=\"line\">    &lt;script  type=&quot;text/Javascript&quot; src=&quot;http://localhost/arcgis_js_api/library/3.17/3.17/init.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;!--&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./styles.css&quot;&gt;--&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">        .MapClass&#123;</span><br><span class=\"line\">            width:100%;</span><br><span class=\"line\">            height:500px;</span><br><span class=\"line\">            border:1px solid #000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        require([&quot;esri/map&quot;,&quot;esri/layers/ArcGISImageServiceLayer&quot;,&quot;dojo/on&quot;,</span><br><span class=\"line\">        &quot;dojo/dom&quot;,&quot;esri/toolbars/draw&quot;,</span><br><span class=\"line\">        &quot;esri/tasks/ImageServiceIdentifyTask&quot;,&quot;esri/tasks/ImageServiceIdentifyParameters&quot;,</span><br><span class=\"line\">        &quot;esri/symbols/SimpleLineSymbol&quot;,&quot;esri/graphic&quot;,&quot;esri/symbols/SimpleMarkerSymbol&quot;, &quot;esri/symbols/SimpleFillSymbol&quot;,</span><br><span class=\"line\">        &quot;esri/layers/MosaicRule&quot;,</span><br><span class=\"line\">        &quot;dojo/domReady!&quot;],function(Map,ArcGISImageServiceLayer,on,dom,Draw,ImageServiceIdentifyTask,</span><br><span class=\"line\">        ImageServiceIdentifyParameters,SimpleLineSymbol,</span><br><span class=\"line\">        Graphic,SimpleMarkerSymbol,SimpleFillSymbol,MosaicRule)&#123;</span><br><span class=\"line\">            var map=new Map(&quot;mapDiv&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">            //注意这里是影响服务</span><br><span class=\"line\">            var layer=new ArcGISImageServiceLayer(&quot;http://192.168.0.112:6080/arcgis/rest/services/Test/Dem1/ImageServer&quot;)</span><br><span class=\"line\">            map.addLayer(layer);</span><br><span class=\"line\">            //用于绘制点</span><br><span class=\"line\">            var toolbar =new Draw(map);</span><br><span class=\"line\">            </span><br><span class=\"line\">            //创建影像分析对象</span><br><span class=\"line\">            var task=new ImageServiceIdentifyTask(&quot;http://192.168.0.112:6080/arcgis/rest/services/Test/Dem1/ImageServer&quot;);</span><br><span class=\"line\">            //创建影像分析参数对象</span><br><span class=\"line\">            var params=new ImageServiceIdentifyParameters();</span><br><span class=\"line\">            var lineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 3);</span><br><span class=\"line\">            var marker= new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE,10, lineSymbol, new dojo.Color([255, 0, 0]));</span><br><span class=\"line\">            var fill= new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, lineSymbol,  new dojo.Color([255, 0, 0]));</span><br><span class=\"line\">            //给绘制折线按钮绑定事件</span><br><span class=\"line\">            on(dom.byId(&quot;drawp&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                toolbar.activate(Draw.POINT, &#123;</span><br><span class=\"line\">                        showTooltips:true</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            //给draw工具的绘制完成事件绑定函数</span><br><span class=\"line\">            on(toolbar,&quot;draw-complete&quot;, function (result) &#123;</span><br><span class=\"line\">                map.graphics.clear();</span><br><span class=\"line\">                var geometry=result.geometry;</span><br><span class=\"line\">                //给参数对象的几何属性赋值</span><br><span class=\"line\">                params.geometry =geometry;</span><br><span class=\"line\">                graphic= new Graphic(geometry, marker);</span><br><span class=\"line\">                map.graphics.add(graphic);</span><br><span class=\"line\">                toolbar.deactivate();</span><br><span class=\"line\">            </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            </span><br><span class=\"line\">            on(dom.byId(&quot;btn&quot;),&quot;click&quot;,function()&#123;</span><br><span class=\"line\">                //设置掩膜规则</span><br><span class=\"line\">                var mosaicRule=new MosaicRule();</span><br><span class=\"line\">                mosaicRule.ascending=false;</span><br><span class=\"line\">                mosaicRule.method=MosaicRule.METHOD_CENTER</span><br><span class=\"line\">                params.mosaicRule=mosaicRule</span><br><span class=\"line\">                params.pixelSizeX=layer.pixelSizeX;</span><br><span class=\"line\">                params.pixelSizeY=layer.pixelSizeY;</span><br><span class=\"line\">                task.execute(params,function(result)&#123;</span><br><span class=\"line\">                    //弹出改点的高程值</span><br><span class=\"line\">                    alert(result.value)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;mapDiv&quot; class=&quot;MapClass&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;button id=&quot;drawp&quot;&gt;绘制点&lt;/button&gt;</span><br><span class=\"line\">    &lt;button id=&quot;btn&quot;&gt;查询&lt;/button&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>"},{"title":"WebSocket","date":"2019-08-07T12:42:20.000Z","_content":"### WebSocket\nWebSocket是HTML5新增的协议，它的目的是在浏览器和服务器之间建立一个不受限的双向通信的通道，比如说，服务器可以在任意时刻发送消息给浏览器。\n\nWebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。\n\nWebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。\n\n在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。\n\n现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。\n\nHTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。\n![01.png](01.png)\n浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。\n\n当你获取 Web Socket 连接后，你可以通过 send() 方法来向服务器发送数据，并通过 onmessage 事件来接收服务器返回的数据。\n\n以下 API 用于创建 WebSocket 对象。\n```\nvar Socket = new WebSocket(url, [protocol] );\n```\n以上代码中的第一个参数 url, 指定连接的 URL。第二个参数 protocol 是可选的，指定了可接受的子协议。\n### WebSocket 属性\n以下是 WebSocket 对象的属性。假定我们使用了以上代码创建了 Socket 对象：\n![02.png](02.png)\n### WebSocket 事件\n以下是 WebSocket 对象的相关事件。假定我们使用了以上代码创建了 Socket 对象：\n![03.png](03.png)\n### WebSocket 方法\n以下是 WebSocket 对象的相关方法。假定我们使用了以上代码创建了 Socket 对象：\n![04.png](04.png)\n\n\nWebSocket 协议本质上是一个基于 TCP 的协议。\n\n为了建立一个 WebSocket 连接，客户端浏览器首先要向服务器发起一个 HTTP 请求，这个请求和通常的 HTTP 请求不同，包含了一些附加头信息，其中附加头信息\"Upgrade: WebSocket\"表明这是一个申请协议升级的 HTTP 请求，服务器端解析这些附加的头信息然后产生应答信息返回给客户端，客户端和服务器端的 WebSocket 连接就建立起来了，双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续存在直到客户端或者服务器端的某一方主动的关闭连接。","source":"_posts/WebSocket.md","raw":"---\ntitle: WebSocket\ndate: 2019-08-07 20:42:20\ncategories:\n- 基础前端技术\ntags: [WebSocket]\n---\n### WebSocket\nWebSocket是HTML5新增的协议，它的目的是在浏览器和服务器之间建立一个不受限的双向通信的通道，比如说，服务器可以在任意时刻发送消息给浏览器。\n\nWebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。\n\nWebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。\n\n在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。\n\n现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。\n\nHTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。\n![01.png](01.png)\n浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。\n\n当你获取 Web Socket 连接后，你可以通过 send() 方法来向服务器发送数据，并通过 onmessage 事件来接收服务器返回的数据。\n\n以下 API 用于创建 WebSocket 对象。\n```\nvar Socket = new WebSocket(url, [protocol] );\n```\n以上代码中的第一个参数 url, 指定连接的 URL。第二个参数 protocol 是可选的，指定了可接受的子协议。\n### WebSocket 属性\n以下是 WebSocket 对象的属性。假定我们使用了以上代码创建了 Socket 对象：\n![02.png](02.png)\n### WebSocket 事件\n以下是 WebSocket 对象的相关事件。假定我们使用了以上代码创建了 Socket 对象：\n![03.png](03.png)\n### WebSocket 方法\n以下是 WebSocket 对象的相关方法。假定我们使用了以上代码创建了 Socket 对象：\n![04.png](04.png)\n\n\nWebSocket 协议本质上是一个基于 TCP 的协议。\n\n为了建立一个 WebSocket 连接，客户端浏览器首先要向服务器发起一个 HTTP 请求，这个请求和通常的 HTTP 请求不同，包含了一些附加头信息，其中附加头信息\"Upgrade: WebSocket\"表明这是一个申请协议升级的 HTTP 请求，服务器端解析这些附加的头信息然后产生应答信息返回给客户端，客户端和服务器端的 WebSocket 连接就建立起来了，双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续存在直到客户端或者服务器端的某一方主动的关闭连接。","slug":"WebSocket","published":1,"updated":"2019-08-09T02:43:42.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cup0026t09z17dupb8v","content":"<h3 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h3><p>WebSocket是HTML5新增的协议，它的目的是在浏览器和服务器之间建立一个不受限的双向通信的通道，比如说，服务器可以在任意时刻发送消息给浏览器。</p>\n<p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p>\n<p>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p>\n<p>在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p>\n<p>现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</p>\n<p>HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。<br><img src=\"/2019/08/07/WebSocket/01.png\" alt=\"01.png\"><br>浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。</p>\n<p>当你获取 Web Socket 连接后，你可以通过 send() 方法来向服务器发送数据，并通过 onmessage 事件来接收服务器返回的数据。</p>\n<p>以下 API 用于创建 WebSocket 对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Socket = new WebSocket(url, [protocol] );</span><br></pre></td></tr></table></figure></p>\n<p>以上代码中的第一个参数 url, 指定连接的 URL。第二个参数 protocol 是可选的，指定了可接受的子协议。</p>\n<h3 id=\"WebSocket-属性\"><a href=\"#WebSocket-属性\" class=\"headerlink\" title=\"WebSocket 属性\"></a>WebSocket 属性</h3><p>以下是 WebSocket 对象的属性。假定我们使用了以上代码创建了 Socket 对象：<br><img src=\"/2019/08/07/WebSocket/02.png\" alt=\"02.png\"></p>\n<h3 id=\"WebSocket-事件\"><a href=\"#WebSocket-事件\" class=\"headerlink\" title=\"WebSocket 事件\"></a>WebSocket 事件</h3><p>以下是 WebSocket 对象的相关事件。假定我们使用了以上代码创建了 Socket 对象：<br><img src=\"/2019/08/07/WebSocket/03.png\" alt=\"03.png\"></p>\n<h3 id=\"WebSocket-方法\"><a href=\"#WebSocket-方法\" class=\"headerlink\" title=\"WebSocket 方法\"></a>WebSocket 方法</h3><p>以下是 WebSocket 对象的相关方法。假定我们使用了以上代码创建了 Socket 对象：<br><img src=\"/2019/08/07/WebSocket/04.png\" alt=\"04.png\"></p>\n<p>WebSocket 协议本质上是一个基于 TCP 的协议。</p>\n<p>为了建立一个 WebSocket 连接，客户端浏览器首先要向服务器发起一个 HTTP 请求，这个请求和通常的 HTTP 请求不同，包含了一些附加头信息，其中附加头信息”Upgrade: WebSocket”表明这是一个申请协议升级的 HTTP 请求，服务器端解析这些附加的头信息然后产生应答信息返回给客户端，客户端和服务器端的 WebSocket 连接就建立起来了，双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续存在直到客户端或者服务器端的某一方主动的关闭连接。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h3><p>WebSocket是HTML5新增的协议，它的目的是在浏览器和服务器之间建立一个不受限的双向通信的通道，比如说，服务器可以在任意时刻发送消息给浏览器。</p>\n<p>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p>\n<p>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p>\n<p>在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p>\n<p>现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</p>\n<p>HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。<br><img src=\"/2019/08/07/WebSocket/01.png\" alt=\"01.png\"><br>浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可以通过 TCP 连接直接交换数据。</p>\n<p>当你获取 Web Socket 连接后，你可以通过 send() 方法来向服务器发送数据，并通过 onmessage 事件来接收服务器返回的数据。</p>\n<p>以下 API 用于创建 WebSocket 对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Socket = new WebSocket(url, [protocol] );</span><br></pre></td></tr></table></figure></p>\n<p>以上代码中的第一个参数 url, 指定连接的 URL。第二个参数 protocol 是可选的，指定了可接受的子协议。</p>\n<h3 id=\"WebSocket-属性\"><a href=\"#WebSocket-属性\" class=\"headerlink\" title=\"WebSocket 属性\"></a>WebSocket 属性</h3><p>以下是 WebSocket 对象的属性。假定我们使用了以上代码创建了 Socket 对象：<br><img src=\"/2019/08/07/WebSocket/02.png\" alt=\"02.png\"></p>\n<h3 id=\"WebSocket-事件\"><a href=\"#WebSocket-事件\" class=\"headerlink\" title=\"WebSocket 事件\"></a>WebSocket 事件</h3><p>以下是 WebSocket 对象的相关事件。假定我们使用了以上代码创建了 Socket 对象：<br><img src=\"/2019/08/07/WebSocket/03.png\" alt=\"03.png\"></p>\n<h3 id=\"WebSocket-方法\"><a href=\"#WebSocket-方法\" class=\"headerlink\" title=\"WebSocket 方法\"></a>WebSocket 方法</h3><p>以下是 WebSocket 对象的相关方法。假定我们使用了以上代码创建了 Socket 对象：<br><img src=\"/2019/08/07/WebSocket/04.png\" alt=\"04.png\"></p>\n<p>WebSocket 协议本质上是一个基于 TCP 的协议。</p>\n<p>为了建立一个 WebSocket 连接，客户端浏览器首先要向服务器发起一个 HTTP 请求，这个请求和通常的 HTTP 请求不同，包含了一些附加头信息，其中附加头信息”Upgrade: WebSocket”表明这是一个申请协议升级的 HTTP 请求，服务器端解析这些附加的头信息然后产生应答信息返回给客户端，客户端和服务器端的 WebSocket 连接就建立起来了，双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续存在直到客户端或者服务器端的某一方主动的关闭连接。</p>\n"},{"title":"git","date":"2019-07-04T14:24:57.000Z","_content":"\n## git\n>初始化一个Git仓库，使用git init命令。\n\n>添加文件到Git仓库，分两步：\n\n```\n使用命令git add <file>，注意，可反复多次使用，添加多个文件；\n使用命令git commit -m <message>，完成。\n```\n\n### 工作区和暂存区\n\n>首先需要理解工作区和版本库的概念：\n\n工作区（Working Directory）：就是可以在电脑上看到的目录，比如目录文件夹，就是一个工作区；\n版本库（Repository）: 工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。\ngit的版本库中存放很多的东西，其中最重要的就是stage(index)的暂存区，还有git为我们创建的第一个分支master，以及指向maste分支的一个HEAD指针。\n![01.png](01.png)\n\n>将文件提交到版本库中需要两个步骤(也可以说是三个步骤)：\n\n```bash\ngit status  可以查看哪些文件在本次修改了，以便我们清楚在下一步应该提交哪些文件\ngit add <filePath>   此命令是将file文件提交到暂存区，此命令是单个文件提交，也可以用\ngit add . 将工作区所有文件都提交，但一般没有这个必要，只需要将本次修改提交就好；\ngit commit -m'提交描述'    次命令是将暂存区的所有文件提交到版本库中的当前分支上，一般提交在后面加上本次修改的描述。\n```\n\n### 版本回退\n\n总结：\n>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。\n>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。\n>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。\n\n```bash\n1、git log命令显示从最近到最远的提交日志\n2、如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：$ git log --pretty=oneline\n看到的一大串类似1094adb...的是commit id（版本号）\n3、要把当前版本回退到上一个版本，就可以使用git reset命令：$ git reset --hard HEAD^\n```\n### 撤销修改\n\n```\n$ git checkout -- readme.txt\n```\n一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。\n总之，就是让这个文件回到最近一次git commit或git add时的状态。\n\n场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。\n场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。\n场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n\n### 删除文件\n命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。\n\n\n## 远程仓库\n### 添加远程仓库\n1、要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；\n\n2、关联后，使用命令git push -u origin master第一次推送master分支的所有内容；\n\n3、此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；\n\n分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，方便！\n\n### 从远程库克隆\n若我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。\n1、首先，登陆GitHub，创建一个新的仓库。\n2、勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件。\n3、用命令git clone克隆一个本地库。\n## 分支管理\n### 创建与合并分支\n总结：\n```\n查看分支：git branch\n\n创建分支：git branch <name>\n\n切换分支：git checkout <name>\n\n创建+切换分支：git checkout -b <name>\n\n合并某分支到当前分支：git merge <name>\n\n删除分支：git branch -d <name>\n```\n1、创建dev分支，然后切换到dev分支：$ git checkout -b dev\ngit checkout命令加上-b参数表示创建并切换，相当于以下两条命令：\n$ git branch dev\n$ git checkout dev\n\n2、用git branch命令查看当前分支，git branch命令会列出所有分支，当前分支前面会标一个*号：$ git branch\n3、我们就可以在dev分支上正常提交\n4、dev分支的工作完成，我们就可以切换回master分支：git checkout master\n5、我们把dev分支的工作成果合并到master分支上：git merge dev\ngit merge命令用于合并指定分支到当前分支\n6、合并完成后，就可以放心地删除dev分支了：git branch -d dev\n7、删除后，查看branch，就只剩下master分支了\n\n### 解决冲突\n当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。\n\n解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。\n\n用git log --graph命令可以看到分支合并图。\n### 分支管理策略\n>在实际开发中，我们应该按照几个基本原则进行分支管理：\n\n首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；\n\n那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；\n\n你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。\n### Bug分支\n修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；\n当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。\n### Feature分支\n开发一个新feature，最好新建一个分支；\n\n如果要丢弃一个没有被合并过的分支，可以通过git branch -D 【name】强行删除。\n### 多人协作\n多人协作的工作模式通常是这样：\n\n1、首先，可以试图用git push origin 【branch-name】推送自己的修改；\n\n2、如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n\n3、如果合并有冲突，则解决冲突，并在本地提交；\n\n4、没有冲突或者解决掉冲突后，再用git push origin 【branch-name】推送就能成功！\n\n如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to 【branch-name】 origin/【branch-name】。\n\n这就是多人协作的工作模式，一旦熟悉了，就非常简单。\n\n### Rebase\nrebase操作可以把本地未push的分叉提交历史整理成直线；\n\nrebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。\n## 标签管理\n### 创建标签\n命令git tag 【tagname】用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n\n命令git tag -a 【tagname】 -m \"blablabla...\"可以指定标签信息；\n\n命令git tag可以查看所有标签\n### 操作标签\n命令git push origin 【tagname】可以推送一个本地标签；\n\n命令git push origin --tags可以推送全部未推送过的本地标签；\n\n命令git tag -d 【tagname】可以删除一个本地标签；\n\n命令git push origin :refs/tags/【tagname】可以删除一个远程标签。\n\n## git命令汇总\n[Git Cheat Sheet](https://gitee.com/liaoxuefeng/learn-java/raw/master/teach/git-cheatsheet.pdf)","source":"_posts/git.md","raw":"---\n---\ntitle: git\ndate: 2019-07-04 22:24:57\ncategories:\n- git\ntags: [git]\n---\n\n## git\n>初始化一个Git仓库，使用git init命令。\n\n>添加文件到Git仓库，分两步：\n\n```\n使用命令git add <file>，注意，可反复多次使用，添加多个文件；\n使用命令git commit -m <message>，完成。\n```\n\n### 工作区和暂存区\n\n>首先需要理解工作区和版本库的概念：\n\n工作区（Working Directory）：就是可以在电脑上看到的目录，比如目录文件夹，就是一个工作区；\n版本库（Repository）: 工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。\ngit的版本库中存放很多的东西，其中最重要的就是stage(index)的暂存区，还有git为我们创建的第一个分支master，以及指向maste分支的一个HEAD指针。\n![01.png](01.png)\n\n>将文件提交到版本库中需要两个步骤(也可以说是三个步骤)：\n\n```bash\ngit status  可以查看哪些文件在本次修改了，以便我们清楚在下一步应该提交哪些文件\ngit add <filePath>   此命令是将file文件提交到暂存区，此命令是单个文件提交，也可以用\ngit add . 将工作区所有文件都提交，但一般没有这个必要，只需要将本次修改提交就好；\ngit commit -m'提交描述'    次命令是将暂存区的所有文件提交到版本库中的当前分支上，一般提交在后面加上本次修改的描述。\n```\n\n### 版本回退\n\n总结：\n>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。\n>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。\n>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。\n\n```bash\n1、git log命令显示从最近到最远的提交日志\n2、如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：$ git log --pretty=oneline\n看到的一大串类似1094adb...的是commit id（版本号）\n3、要把当前版本回退到上一个版本，就可以使用git reset命令：$ git reset --hard HEAD^\n```\n### 撤销修改\n\n```\n$ git checkout -- readme.txt\n```\n一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。\n总之，就是让这个文件回到最近一次git commit或git add时的状态。\n\n场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。\n场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。\n场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n\n### 删除文件\n命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。\n\n\n## 远程仓库\n### 添加远程仓库\n1、要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；\n\n2、关联后，使用命令git push -u origin master第一次推送master分支的所有内容；\n\n3、此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；\n\n分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，方便！\n\n### 从远程库克隆\n若我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。\n1、首先，登陆GitHub，创建一个新的仓库。\n2、勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件。\n3、用命令git clone克隆一个本地库。\n## 分支管理\n### 创建与合并分支\n总结：\n```\n查看分支：git branch\n\n创建分支：git branch <name>\n\n切换分支：git checkout <name>\n\n创建+切换分支：git checkout -b <name>\n\n合并某分支到当前分支：git merge <name>\n\n删除分支：git branch -d <name>\n```\n1、创建dev分支，然后切换到dev分支：$ git checkout -b dev\ngit checkout命令加上-b参数表示创建并切换，相当于以下两条命令：\n$ git branch dev\n$ git checkout dev\n\n2、用git branch命令查看当前分支，git branch命令会列出所有分支，当前分支前面会标一个*号：$ git branch\n3、我们就可以在dev分支上正常提交\n4、dev分支的工作完成，我们就可以切换回master分支：git checkout master\n5、我们把dev分支的工作成果合并到master分支上：git merge dev\ngit merge命令用于合并指定分支到当前分支\n6、合并完成后，就可以放心地删除dev分支了：git branch -d dev\n7、删除后，查看branch，就只剩下master分支了\n\n### 解决冲突\n当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。\n\n解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。\n\n用git log --graph命令可以看到分支合并图。\n### 分支管理策略\n>在实际开发中，我们应该按照几个基本原则进行分支管理：\n\n首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；\n\n那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；\n\n你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。\n### Bug分支\n修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；\n当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。\n### Feature分支\n开发一个新feature，最好新建一个分支；\n\n如果要丢弃一个没有被合并过的分支，可以通过git branch -D 【name】强行删除。\n### 多人协作\n多人协作的工作模式通常是这样：\n\n1、首先，可以试图用git push origin 【branch-name】推送自己的修改；\n\n2、如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n\n3、如果合并有冲突，则解决冲突，并在本地提交；\n\n4、没有冲突或者解决掉冲突后，再用git push origin 【branch-name】推送就能成功！\n\n如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to 【branch-name】 origin/【branch-name】。\n\n这就是多人协作的工作模式，一旦熟悉了，就非常简单。\n\n### Rebase\nrebase操作可以把本地未push的分叉提交历史整理成直线；\n\nrebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。\n## 标签管理\n### 创建标签\n命令git tag 【tagname】用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n\n命令git tag -a 【tagname】 -m \"blablabla...\"可以指定标签信息；\n\n命令git tag可以查看所有标签\n### 操作标签\n命令git push origin 【tagname】可以推送一个本地标签；\n\n命令git push origin --tags可以推送全部未推送过的本地标签；\n\n命令git tag -d 【tagname】可以删除一个本地标签；\n\n命令git push origin :refs/tags/【tagname】可以删除一个远程标签。\n\n## git命令汇总\n[Git Cheat Sheet](https://gitee.com/liaoxuefeng/learn-java/raw/master/teach/git-cheatsheet.pdf)","slug":"git","published":1,"updated":"2019-07-30T03:07:27.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cur0029t09z49zahpj3","content":"<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><blockquote>\n<p>初始化一个Git仓库，使用git init命令。</p>\n</blockquote>\n<blockquote>\n<p>添加文件到Git仓库，分两步：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用命令git add &lt;file&gt;，注意，可反复多次使用，添加多个文件；</span><br><span class=\"line\">使用命令git commit -m &lt;message&gt;，完成。</span><br></pre></td></tr></table></figure>\n<h3 id=\"工作区和暂存区\"><a href=\"#工作区和暂存区\" class=\"headerlink\" title=\"工作区和暂存区\"></a>工作区和暂存区</h3><blockquote>\n<p>首先需要理解工作区和版本库的概念：</p>\n</blockquote>\n<p>工作区（Working Directory）：就是可以在电脑上看到的目录，比如目录文件夹，就是一个工作区；<br>版本库（Repository）: 工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。<br>git的版本库中存放很多的东西，其中最重要的就是stage(index)的暂存区，还有git为我们创建的第一个分支master，以及指向maste分支的一个HEAD指针。<br><img src=\"/2019/07/04/git/01.png\" alt=\"01.png\"></p>\n<blockquote>\n<p>将文件提交到版本库中需要两个步骤(也可以说是三个步骤)：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status  可以查看哪些文件在本次修改了，以便我们清楚在下一步应该提交哪些文件</span><br><span class=\"line\">git add &lt;filePath&gt;   此命令是将file文件提交到暂存区，此命令是单个文件提交，也可以用</span><br><span class=\"line\">git add . 将工作区所有文件都提交，但一般没有这个必要，只需要将本次修改提交就好；</span><br><span class=\"line\">git commit -m<span class=\"string\">'提交描述'</span>    次命令是将暂存区的所有文件提交到版本库中的当前分支上，一般提交在后面加上本次修改的描述。</span><br></pre></td></tr></table></figure>\n<h3 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h3><p>总结：</p>\n<blockquote>\n<p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id。<br>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。<br>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git <span class=\"built_in\">log</span>命令显示从最近到最远的提交日志</span><br><span class=\"line\">2、如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：$ git <span class=\"built_in\">log</span> --pretty=oneline</span><br><span class=\"line\">看到的一大串类似1094adb...的是commit id（版本号）</span><br><span class=\"line\">3、要把当前版本回退到上一个版本，就可以使用git reset命令：$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure>\n<h3 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- readme.txt</span><br></pre></td></tr></table></figure>\n<p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。<br>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>\n<p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。<br>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。<br>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</file></p>\n<h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><p>命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</p>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><h3 id=\"添加远程仓库\"><a href=\"#添加远程仓库\" class=\"headerlink\" title=\"添加远程仓库\"></a>添加远程仓库</h3><p>1、要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；</p>\n<p>2、关联后，使用命令git push -u origin master第一次推送master分支的所有内容；</p>\n<p>3、此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；</p>\n<p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，方便！</p>\n<h3 id=\"从远程库克隆\"><a href=\"#从远程库克隆\" class=\"headerlink\" title=\"从远程库克隆\"></a>从远程库克隆</h3><p>若我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。<br>1、首先，登陆GitHub，创建一个新的仓库。<br>2、勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件。<br>3、用命令git clone克隆一个本地库。</p>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><h3 id=\"创建与合并分支\"><a href=\"#创建与合并分支\" class=\"headerlink\" title=\"创建与合并分支\"></a>创建与合并分支</h3><p>总结：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看分支：git branch</span><br><span class=\"line\"></span><br><span class=\"line\">创建分支：git branch &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">切换分支：git checkout &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">创建+切换分支：git checkout -b &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">合并某分支到当前分支：git merge &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">删除分支：git branch -d &lt;name&gt;</span><br></pre></td></tr></table></figure></p>\n<p>1、创建dev分支，然后切换到dev分支：$ git checkout -b dev<br>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：<br>$ git branch dev<br>$ git checkout dev</p>\n<p>2、用git branch命令查看当前分支，git branch命令会列出所有分支，当前分支前面会标一个*号：$ git branch<br>3、我们就可以在dev分支上正常提交<br>4、dev分支的工作完成，我们就可以切换回master分支：git checkout master<br>5、我们把dev分支的工作成果合并到master分支上：git merge dev<br>git merge命令用于合并指定分支到当前分支<br>6、合并完成后，就可以放心地删除dev分支了：git branch -d dev<br>7、删除后，查看branch，就只剩下master分支了</p>\n<h3 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h3><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p>\n<p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p>\n<p>用git log –graph命令可以看到分支合并图。</p>\n<h3 id=\"分支管理策略\"><a href=\"#分支管理策略\" class=\"headerlink\" title=\"分支管理策略\"></a>分支管理策略</h3><blockquote>\n<p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p>\n</blockquote>\n<p>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>\n<p>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；</p>\n<p>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p>\n<h3 id=\"Bug分支\"><a href=\"#Bug分支\" class=\"headerlink\" title=\"Bug分支\"></a>Bug分支</h3><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；<br>当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。</p>\n<h3 id=\"Feature分支\"><a href=\"#Feature分支\" class=\"headerlink\" title=\"Feature分支\"></a>Feature分支</h3><p>开发一个新feature，最好新建一个分支；</p>\n<p>如果要丢弃一个没有被合并过的分支，可以通过git branch -D 【name】强行删除。</p>\n<h3 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h3><p>多人协作的工作模式通常是这样：</p>\n<p>1、首先，可以试图用git push origin 【branch-name】推送自己的修改；</p>\n<p>2、如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</p>\n<p>3、如果合并有冲突，则解决冲突，并在本地提交；</p>\n<p>4、没有冲突或者解决掉冲突后，再用git push origin 【branch-name】推送就能成功！</p>\n<p>如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream-to 【branch-name】 origin/【branch-name】。</p>\n<p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>\n<h3 id=\"Rebase\"><a href=\"#Rebase\" class=\"headerlink\" title=\"Rebase\"></a>Rebase</h3><p>rebase操作可以把本地未push的分叉提交历史整理成直线；</p>\n<p>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</p>\n<h2 id=\"标签管理\"><a href=\"#标签管理\" class=\"headerlink\" title=\"标签管理\"></a>标签管理</h2><h3 id=\"创建标签\"><a href=\"#创建标签\" class=\"headerlink\" title=\"创建标签\"></a>创建标签</h3><p>命令git tag 【tagname】用于新建一个标签，默认为HEAD，也可以指定一个commit id；</p>\n<p>命令git tag -a 【tagname】 -m “blablabla…”可以指定标签信息；</p>\n<p>命令git tag可以查看所有标签</p>\n<h3 id=\"操作标签\"><a href=\"#操作标签\" class=\"headerlink\" title=\"操作标签\"></a>操作标签</h3><p>命令git push origin 【tagname】可以推送一个本地标签；</p>\n<p>命令git push origin –tags可以推送全部未推送过的本地标签；</p>\n<p>命令git tag -d 【tagname】可以删除一个本地标签；</p>\n<p>命令git push origin :refs/tags/【tagname】可以删除一个远程标签。</p>\n<h2 id=\"git命令汇总\"><a href=\"#git命令汇总\" class=\"headerlink\" title=\"git命令汇总\"></a>git命令汇总</h2><p><a href=\"https://gitee.com/liaoxuefeng/learn-java/raw/master/teach/git-cheatsheet.pdf\" target=\"_blank\" rel=\"noopener\">Git Cheat Sheet</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><blockquote>\n<p>初始化一个Git仓库，使用git init命令。</p>\n</blockquote>\n<blockquote>\n<p>添加文件到Git仓库，分两步：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用命令git add &lt;file&gt;，注意，可反复多次使用，添加多个文件；</span><br><span class=\"line\">使用命令git commit -m &lt;message&gt;，完成。</span><br></pre></td></tr></table></figure>\n<h3 id=\"工作区和暂存区\"><a href=\"#工作区和暂存区\" class=\"headerlink\" title=\"工作区和暂存区\"></a>工作区和暂存区</h3><blockquote>\n<p>首先需要理解工作区和版本库的概念：</p>\n</blockquote>\n<p>工作区（Working Directory）：就是可以在电脑上看到的目录，比如目录文件夹，就是一个工作区；<br>版本库（Repository）: 工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。<br>git的版本库中存放很多的东西，其中最重要的就是stage(index)的暂存区，还有git为我们创建的第一个分支master，以及指向maste分支的一个HEAD指针。<br><img src=\"/2019/07/04/git/01.png\" alt=\"01.png\"></p>\n<blockquote>\n<p>将文件提交到版本库中需要两个步骤(也可以说是三个步骤)：</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status  可以查看哪些文件在本次修改了，以便我们清楚在下一步应该提交哪些文件</span><br><span class=\"line\">git add &lt;filePath&gt;   此命令是将file文件提交到暂存区，此命令是单个文件提交，也可以用</span><br><span class=\"line\">git add . 将工作区所有文件都提交，但一般没有这个必要，只需要将本次修改提交就好；</span><br><span class=\"line\">git commit -m<span class=\"string\">'提交描述'</span>    次命令是将暂存区的所有文件提交到版本库中的当前分支上，一般提交在后面加上本次修改的描述。</span><br></pre></td></tr></table></figure>\n<h3 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h3><p>总结：</p>\n<blockquote>\n<p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id。<br>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。<br>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git <span class=\"built_in\">log</span>命令显示从最近到最远的提交日志</span><br><span class=\"line\">2、如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：$ git <span class=\"built_in\">log</span> --pretty=oneline</span><br><span class=\"line\">看到的一大串类似1094adb...的是commit id（版本号）</span><br><span class=\"line\">3、要把当前版本回退到上一个版本，就可以使用git reset命令：$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure>\n<h3 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -- readme.txt</span><br></pre></td></tr></table></figure>\n<p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。<br>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>\n<p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。<br>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。<br>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</file></p>\n<h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><p>命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</p>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><h3 id=\"添加远程仓库\"><a href=\"#添加远程仓库\" class=\"headerlink\" title=\"添加远程仓库\"></a>添加远程仓库</h3><p>1、要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；</p>\n<p>2、关联后，使用命令git push -u origin master第一次推送master分支的所有内容；</p>\n<p>3、此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；</p>\n<p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，方便！</p>\n<h3 id=\"从远程库克隆\"><a href=\"#从远程库克隆\" class=\"headerlink\" title=\"从远程库克隆\"></a>从远程库克隆</h3><p>若我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。<br>1、首先，登陆GitHub，创建一个新的仓库。<br>2、勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件。<br>3、用命令git clone克隆一个本地库。</p>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><h3 id=\"创建与合并分支\"><a href=\"#创建与合并分支\" class=\"headerlink\" title=\"创建与合并分支\"></a>创建与合并分支</h3><p>总结：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看分支：git branch</span><br><span class=\"line\"></span><br><span class=\"line\">创建分支：git branch &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">切换分支：git checkout &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">创建+切换分支：git checkout -b &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">合并某分支到当前分支：git merge &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">删除分支：git branch -d &lt;name&gt;</span><br></pre></td></tr></table></figure></p>\n<p>1、创建dev分支，然后切换到dev分支：$ git checkout -b dev<br>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：<br>$ git branch dev<br>$ git checkout dev</p>\n<p>2、用git branch命令查看当前分支，git branch命令会列出所有分支，当前分支前面会标一个*号：$ git branch<br>3、我们就可以在dev分支上正常提交<br>4、dev分支的工作完成，我们就可以切换回master分支：git checkout master<br>5、我们把dev分支的工作成果合并到master分支上：git merge dev<br>git merge命令用于合并指定分支到当前分支<br>6、合并完成后，就可以放心地删除dev分支了：git branch -d dev<br>7、删除后，查看branch，就只剩下master分支了</p>\n<h3 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h3><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p>\n<p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p>\n<p>用git log –graph命令可以看到分支合并图。</p>\n<h3 id=\"分支管理策略\"><a href=\"#分支管理策略\" class=\"headerlink\" title=\"分支管理策略\"></a>分支管理策略</h3><blockquote>\n<p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p>\n</blockquote>\n<p>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>\n<p>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；</p>\n<p>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p>\n<h3 id=\"Bug分支\"><a href=\"#Bug分支\" class=\"headerlink\" title=\"Bug分支\"></a>Bug分支</h3><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；<br>当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。</p>\n<h3 id=\"Feature分支\"><a href=\"#Feature分支\" class=\"headerlink\" title=\"Feature分支\"></a>Feature分支</h3><p>开发一个新feature，最好新建一个分支；</p>\n<p>如果要丢弃一个没有被合并过的分支，可以通过git branch -D 【name】强行删除。</p>\n<h3 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h3><p>多人协作的工作模式通常是这样：</p>\n<p>1、首先，可以试图用git push origin 【branch-name】推送自己的修改；</p>\n<p>2、如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</p>\n<p>3、如果合并有冲突，则解决冲突，并在本地提交；</p>\n<p>4、没有冲突或者解决掉冲突后，再用git push origin 【branch-name】推送就能成功！</p>\n<p>如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream-to 【branch-name】 origin/【branch-name】。</p>\n<p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>\n<h3 id=\"Rebase\"><a href=\"#Rebase\" class=\"headerlink\" title=\"Rebase\"></a>Rebase</h3><p>rebase操作可以把本地未push的分叉提交历史整理成直线；</p>\n<p>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</p>\n<h2 id=\"标签管理\"><a href=\"#标签管理\" class=\"headerlink\" title=\"标签管理\"></a>标签管理</h2><h3 id=\"创建标签\"><a href=\"#创建标签\" class=\"headerlink\" title=\"创建标签\"></a>创建标签</h3><p>命令git tag 【tagname】用于新建一个标签，默认为HEAD，也可以指定一个commit id；</p>\n<p>命令git tag -a 【tagname】 -m “blablabla…”可以指定标签信息；</p>\n<p>命令git tag可以查看所有标签</p>\n<h3 id=\"操作标签\"><a href=\"#操作标签\" class=\"headerlink\" title=\"操作标签\"></a>操作标签</h3><p>命令git push origin 【tagname】可以推送一个本地标签；</p>\n<p>命令git push origin –tags可以推送全部未推送过的本地标签；</p>\n<p>命令git tag -d 【tagname】可以删除一个本地标签；</p>\n<p>命令git push origin :refs/tags/【tagname】可以删除一个远程标签。</p>\n<h2 id=\"git命令汇总\"><a href=\"#git命令汇总\" class=\"headerlink\" title=\"git命令汇总\"></a>git命令汇总</h2><p><a href=\"https://gitee.com/liaoxuefeng/learn-java/raw/master/teach/git-cheatsheet.pdf\" target=\"_blank\" rel=\"noopener\">Git Cheat Sheet</a></p>\n"},{"title":"apply and bind","date":"2019-08-11T02:36:27.000Z","_content":"本篇主要解决一下几个问题：\n* 1.apply和call的区别在哪里\n* 2.什么情况下用apply,什么情况下用call\n* 3.apply的其他巧妙用法（一般在什么情况下可以使用apply）*\n\n<font color=\"red\"> apply:方法能劫持另外一个对象的方法，继承另外一个对象的属性.</font>\n>Function.apply(obj,args)方法能接收两个参数\n>obj：这个对象将代替Function类里this对象\n>args：这个是数组，它将作为参数传给Function（args-->arguments）\n\ncall:和apply的意思一样,只不过是参数列表不一样.\n\n>Function.call(obj,[param1[,param2[,…[,paramN]]]])\n>obj：这个对象将代替Function类里this对象\n>params：这个是一个参数列表\n\n#### apply示例:\n```bash\n<script type=\"text/javascript\">\n    /*定义一个人类*/\n    function Person(name,age)\n    {\n        this.name=name;\n        this.age=age;\n    }\n    /*定义一个学生类*/\n    functionStudent(name,age,grade)\n    {\n        Person.apply(this,arguments);\n        this.grade=grade;\n    }\n    //创建一个学生类\n    var student=new Student(\"qian\",21,\"一年级\");\n    //测试\n    alert(\"name:\"+student.name+\"\\n\"+\"age:\"+student.age+\"\\n\"+\"grade:\"+student.grade);\n    //大家可以看到测试结果name:qian  age:21  grade:一年级\n    //学生类里面我没有给name和age属性赋值啊,为什么又存在这两个属性的值呢,这个就是apply的神奇之处.\n</script>\n```\n分析: Person.apply(this,arguments);\n\n* this:在创建对象在这个时候代表的是student\n* arguments:是一个数组,也就是[“qian”,”21”,”一年级”];\n也就是通俗一点讲就是:用student去执行Person这个类里面的内容,在Person这个类里面存在this.name等之类的语句,这样就将属性创建到了student对象里面\n\n#### call示例\n\n在Studen函数里面可以将apply中修改成如下:\n```bash\nPerson.call(this,name,age);\n```\n#### 什么情况下用apply,什么情况下用call\n在给对象参数的情况下,如果参数的形式是数组的时候,比如apply示例里面传递了参数arguments,这个参数是数组类型,并且在调用Person的时候参数的列表是对应一致的(也就是Person和Student的参数列表前两位是一致的) 就可以采用 apply , 如果我的Person的参数列表是这样的(age,name),而Student的参数列表是(name,age,grade),这样就可以用call来实现了,也就是直接指定参数列表对应值的位置(Person.call(this,age,name,grade));\n#### apply的一些其他巧妙用法\n细心的人可能已经察觉到,在我调用apply方法的时候,第一个参数是对象(this), 第二个参数是一个数组集合, 在调用Person的时候,他需要的不是一个数组,但是为什么他给我一个数组我仍然可以将数组解析为一个一个的参数,这个就是apply的一个巧妙的用处,可以将一个数组默认的转换为一个参数列表([param1,param2,param3] 转换为 param1,param2,param3) 这个如果让我们用程序来实现将数组的每一个项,来装换为参数的列表,可能都得费一会功夫,借助apply的这点特性,所以就有了以下高效率的方法:\n\na) Math.max 可以实现得到数组中最大的一项\n\n因为Math.max参数里面不支持Math.max([param1,param2])也就是数组但是它支持Math.max(param1,param2,param3…),所以可以根据刚才apply的那个特点来解决 var max=Math.max.apply(null,array),这样轻易的可以得到一个数组中最大的一项(apply会将一个数组装换为一个参数接一个参数的传递给方法)\n这块在调用的时候第一个参数给了一个null,这个是因为没有对象去调用这个方法,我只需要用这个方法帮我运算,得到返回的结果就行,.所以直接传递了一个null过去\n\nb) Math.min  可以实现得到数组中最小的一项同样和 max是一个思想 var min=Math.min.apply(null,array);\n\nc) Array.prototype.push 可以实现两个数组合并\n\n同样push方法没有提供push一个数组,但是它提供了push(param1,param,…paramN) 所以同样也可以通过apply来装换一下这个数组,即:\n```bash\nvararr1=new Array(\"1\",\"2\",\"3\");\nvararr2=new Array(\"4\",\"5\",\"6\");\nArray.prototype.push.apply(arr1,arr2);\n```\n\n","source":"_posts/apply-and-bind.md","raw":"---\ntitle: apply and bind\ndate: 2019-08-11 10:36:27\ncategories: \n- 基础前端技术\ntags: [js]\n---\n本篇主要解决一下几个问题：\n* 1.apply和call的区别在哪里\n* 2.什么情况下用apply,什么情况下用call\n* 3.apply的其他巧妙用法（一般在什么情况下可以使用apply）*\n\n<font color=\"red\"> apply:方法能劫持另外一个对象的方法，继承另外一个对象的属性.</font>\n>Function.apply(obj,args)方法能接收两个参数\n>obj：这个对象将代替Function类里this对象\n>args：这个是数组，它将作为参数传给Function（args-->arguments）\n\ncall:和apply的意思一样,只不过是参数列表不一样.\n\n>Function.call(obj,[param1[,param2[,…[,paramN]]]])\n>obj：这个对象将代替Function类里this对象\n>params：这个是一个参数列表\n\n#### apply示例:\n```bash\n<script type=\"text/javascript\">\n    /*定义一个人类*/\n    function Person(name,age)\n    {\n        this.name=name;\n        this.age=age;\n    }\n    /*定义一个学生类*/\n    functionStudent(name,age,grade)\n    {\n        Person.apply(this,arguments);\n        this.grade=grade;\n    }\n    //创建一个学生类\n    var student=new Student(\"qian\",21,\"一年级\");\n    //测试\n    alert(\"name:\"+student.name+\"\\n\"+\"age:\"+student.age+\"\\n\"+\"grade:\"+student.grade);\n    //大家可以看到测试结果name:qian  age:21  grade:一年级\n    //学生类里面我没有给name和age属性赋值啊,为什么又存在这两个属性的值呢,这个就是apply的神奇之处.\n</script>\n```\n分析: Person.apply(this,arguments);\n\n* this:在创建对象在这个时候代表的是student\n* arguments:是一个数组,也就是[“qian”,”21”,”一年级”];\n也就是通俗一点讲就是:用student去执行Person这个类里面的内容,在Person这个类里面存在this.name等之类的语句,这样就将属性创建到了student对象里面\n\n#### call示例\n\n在Studen函数里面可以将apply中修改成如下:\n```bash\nPerson.call(this,name,age);\n```\n#### 什么情况下用apply,什么情况下用call\n在给对象参数的情况下,如果参数的形式是数组的时候,比如apply示例里面传递了参数arguments,这个参数是数组类型,并且在调用Person的时候参数的列表是对应一致的(也就是Person和Student的参数列表前两位是一致的) 就可以采用 apply , 如果我的Person的参数列表是这样的(age,name),而Student的参数列表是(name,age,grade),这样就可以用call来实现了,也就是直接指定参数列表对应值的位置(Person.call(this,age,name,grade));\n#### apply的一些其他巧妙用法\n细心的人可能已经察觉到,在我调用apply方法的时候,第一个参数是对象(this), 第二个参数是一个数组集合, 在调用Person的时候,他需要的不是一个数组,但是为什么他给我一个数组我仍然可以将数组解析为一个一个的参数,这个就是apply的一个巧妙的用处,可以将一个数组默认的转换为一个参数列表([param1,param2,param3] 转换为 param1,param2,param3) 这个如果让我们用程序来实现将数组的每一个项,来装换为参数的列表,可能都得费一会功夫,借助apply的这点特性,所以就有了以下高效率的方法:\n\na) Math.max 可以实现得到数组中最大的一项\n\n因为Math.max参数里面不支持Math.max([param1,param2])也就是数组但是它支持Math.max(param1,param2,param3…),所以可以根据刚才apply的那个特点来解决 var max=Math.max.apply(null,array),这样轻易的可以得到一个数组中最大的一项(apply会将一个数组装换为一个参数接一个参数的传递给方法)\n这块在调用的时候第一个参数给了一个null,这个是因为没有对象去调用这个方法,我只需要用这个方法帮我运算,得到返回的结果就行,.所以直接传递了一个null过去\n\nb) Math.min  可以实现得到数组中最小的一项同样和 max是一个思想 var min=Math.min.apply(null,array);\n\nc) Array.prototype.push 可以实现两个数组合并\n\n同样push方法没有提供push一个数组,但是它提供了push(param1,param,…paramN) 所以同样也可以通过apply来装换一下这个数组,即:\n```bash\nvararr1=new Array(\"1\",\"2\",\"3\");\nvararr2=new Array(\"4\",\"5\",\"6\");\nArray.prototype.push.apply(arr1,arr2);\n```\n\n","slug":"apply-and-bind","published":1,"updated":"2019-08-11T02:57:43.898Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cuu002et09z1irkebhe","content":"<p>本篇主要解决一下几个问题：</p>\n<ul>\n<li>1.apply和call的区别在哪里</li>\n<li>2.什么情况下用apply,什么情况下用call</li>\n<li>3.apply的其他巧妙用法（一般在什么情况下可以使用apply）*</li>\n</ul>\n<p><font color=\"red\"> apply:方法能劫持另外一个对象的方法，继承另外一个对象的属性.</font></p>\n<blockquote>\n<p>Function.apply(obj,args)方法能接收两个参数<br>obj：这个对象将代替Function类里this对象<br>args：这个是数组，它将作为参数传给Function（args–&gt;arguments）</p>\n</blockquote>\n<p>call:和apply的意思一样,只不过是参数列表不一样.</p>\n<blockquote>\n<p>Function.call(obj,[param1[,param2[,…[,paramN]]]])<br>obj：这个对象将代替Function类里this对象<br>params：这个是一个参数列表</p>\n</blockquote>\n<h4 id=\"apply示例\"><a href=\"#apply示例\" class=\"headerlink\" title=\"apply示例:\"></a>apply示例:</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    /*定义一个人类*/</span><br><span class=\"line\">    <span class=\"keyword\">function</span> Person(name,age)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this.name=name;</span><br><span class=\"line\">        this.age=age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /*定义一个学生类*/</span><br><span class=\"line\">    functionStudent(name,age,grade)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Person.apply(this,arguments);</span><br><span class=\"line\">        this.grade=grade;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //创建一个学生类</span><br><span class=\"line\">    var student=new Student(<span class=\"string\">\"qian\"</span>,21,<span class=\"string\">\"一年级\"</span>);</span><br><span class=\"line\">    //测试</span><br><span class=\"line\">    alert(<span class=\"string\">\"name:\"</span>+student.name+<span class=\"string\">\"\\n\"</span>+<span class=\"string\">\"age:\"</span>+student.age+<span class=\"string\">\"\\n\"</span>+<span class=\"string\">\"grade:\"</span>+student.grade);</span><br><span class=\"line\">    //大家可以看到测试结果name:qian  age:21  grade:一年级</span><br><span class=\"line\">    //学生类里面我没有给name和age属性赋值啊,为什么又存在这两个属性的值呢,这个就是apply的神奇之处.</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>分析: Person.apply(this,arguments);</p>\n<ul>\n<li>this:在创建对象在这个时候代表的是student</li>\n<li>arguments:是一个数组,也就是[“qian”,”21”,”一年级”];<br>也就是通俗一点讲就是:用student去执行Person这个类里面的内容,在Person这个类里面存在this.name等之类的语句,这样就将属性创建到了student对象里面</li>\n</ul>\n<h4 id=\"call示例\"><a href=\"#call示例\" class=\"headerlink\" title=\"call示例\"></a>call示例</h4><p>在Studen函数里面可以将apply中修改成如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.call(this,name,age);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"什么情况下用apply-什么情况下用call\"><a href=\"#什么情况下用apply-什么情况下用call\" class=\"headerlink\" title=\"什么情况下用apply,什么情况下用call\"></a>什么情况下用apply,什么情况下用call</h4><p>在给对象参数的情况下,如果参数的形式是数组的时候,比如apply示例里面传递了参数arguments,这个参数是数组类型,并且在调用Person的时候参数的列表是对应一致的(也就是Person和Student的参数列表前两位是一致的) 就可以采用 apply , 如果我的Person的参数列表是这样的(age,name),而Student的参数列表是(name,age,grade),这样就可以用call来实现了,也就是直接指定参数列表对应值的位置(Person.call(this,age,name,grade));</p>\n<h4 id=\"apply的一些其他巧妙用法\"><a href=\"#apply的一些其他巧妙用法\" class=\"headerlink\" title=\"apply的一些其他巧妙用法\"></a>apply的一些其他巧妙用法</h4><p>细心的人可能已经察觉到,在我调用apply方法的时候,第一个参数是对象(this), 第二个参数是一个数组集合, 在调用Person的时候,他需要的不是一个数组,但是为什么他给我一个数组我仍然可以将数组解析为一个一个的参数,这个就是apply的一个巧妙的用处,可以将一个数组默认的转换为一个参数列表([param1,param2,param3] 转换为 param1,param2,param3) 这个如果让我们用程序来实现将数组的每一个项,来装换为参数的列表,可能都得费一会功夫,借助apply的这点特性,所以就有了以下高效率的方法:</p>\n<p>a) Math.max 可以实现得到数组中最大的一项</p>\n<p>因为Math.max参数里面不支持Math.max([param1,param2])也就是数组但是它支持Math.max(param1,param2,param3…),所以可以根据刚才apply的那个特点来解决 var max=Math.max.apply(null,array),这样轻易的可以得到一个数组中最大的一项(apply会将一个数组装换为一个参数接一个参数的传递给方法)<br>这块在调用的时候第一个参数给了一个null,这个是因为没有对象去调用这个方法,我只需要用这个方法帮我运算,得到返回的结果就行,.所以直接传递了一个null过去</p>\n<p>b) Math.min  可以实现得到数组中最小的一项同样和 max是一个思想 var min=Math.min.apply(null,array);</p>\n<p>c) Array.prototype.push 可以实现两个数组合并</p>\n<p>同样push方法没有提供push一个数组,但是它提供了push(param1,param,…paramN) 所以同样也可以通过apply来装换一下这个数组,即:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vararr1=new Array(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"string\">\"3\"</span>);</span><br><span class=\"line\">vararr2=new Array(<span class=\"string\">\"4\"</span>,<span class=\"string\">\"5\"</span>,<span class=\"string\">\"6\"</span>);</span><br><span class=\"line\">Array.prototype.push.apply(arr1,arr2);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本篇主要解决一下几个问题：</p>\n<ul>\n<li>1.apply和call的区别在哪里</li>\n<li>2.什么情况下用apply,什么情况下用call</li>\n<li>3.apply的其他巧妙用法（一般在什么情况下可以使用apply）*</li>\n</ul>\n<p><font color=\"red\"> apply:方法能劫持另外一个对象的方法，继承另外一个对象的属性.</font></p>\n<blockquote>\n<p>Function.apply(obj,args)方法能接收两个参数<br>obj：这个对象将代替Function类里this对象<br>args：这个是数组，它将作为参数传给Function（args–&gt;arguments）</p>\n</blockquote>\n<p>call:和apply的意思一样,只不过是参数列表不一样.</p>\n<blockquote>\n<p>Function.call(obj,[param1[,param2[,…[,paramN]]]])<br>obj：这个对象将代替Function类里this对象<br>params：这个是一个参数列表</p>\n</blockquote>\n<h4 id=\"apply示例\"><a href=\"#apply示例\" class=\"headerlink\" title=\"apply示例:\"></a>apply示例:</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><br><span class=\"line\">    /*定义一个人类*/</span><br><span class=\"line\">    <span class=\"keyword\">function</span> Person(name,age)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this.name=name;</span><br><span class=\"line\">        this.age=age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /*定义一个学生类*/</span><br><span class=\"line\">    functionStudent(name,age,grade)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Person.apply(this,arguments);</span><br><span class=\"line\">        this.grade=grade;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //创建一个学生类</span><br><span class=\"line\">    var student=new Student(<span class=\"string\">\"qian\"</span>,21,<span class=\"string\">\"一年级\"</span>);</span><br><span class=\"line\">    //测试</span><br><span class=\"line\">    alert(<span class=\"string\">\"name:\"</span>+student.name+<span class=\"string\">\"\\n\"</span>+<span class=\"string\">\"age:\"</span>+student.age+<span class=\"string\">\"\\n\"</span>+<span class=\"string\">\"grade:\"</span>+student.grade);</span><br><span class=\"line\">    //大家可以看到测试结果name:qian  age:21  grade:一年级</span><br><span class=\"line\">    //学生类里面我没有给name和age属性赋值啊,为什么又存在这两个属性的值呢,这个就是apply的神奇之处.</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>分析: Person.apply(this,arguments);</p>\n<ul>\n<li>this:在创建对象在这个时候代表的是student</li>\n<li>arguments:是一个数组,也就是[“qian”,”21”,”一年级”];<br>也就是通俗一点讲就是:用student去执行Person这个类里面的内容,在Person这个类里面存在this.name等之类的语句,这样就将属性创建到了student对象里面</li>\n</ul>\n<h4 id=\"call示例\"><a href=\"#call示例\" class=\"headerlink\" title=\"call示例\"></a>call示例</h4><p>在Studen函数里面可以将apply中修改成如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person.call(this,name,age);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"什么情况下用apply-什么情况下用call\"><a href=\"#什么情况下用apply-什么情况下用call\" class=\"headerlink\" title=\"什么情况下用apply,什么情况下用call\"></a>什么情况下用apply,什么情况下用call</h4><p>在给对象参数的情况下,如果参数的形式是数组的时候,比如apply示例里面传递了参数arguments,这个参数是数组类型,并且在调用Person的时候参数的列表是对应一致的(也就是Person和Student的参数列表前两位是一致的) 就可以采用 apply , 如果我的Person的参数列表是这样的(age,name),而Student的参数列表是(name,age,grade),这样就可以用call来实现了,也就是直接指定参数列表对应值的位置(Person.call(this,age,name,grade));</p>\n<h4 id=\"apply的一些其他巧妙用法\"><a href=\"#apply的一些其他巧妙用法\" class=\"headerlink\" title=\"apply的一些其他巧妙用法\"></a>apply的一些其他巧妙用法</h4><p>细心的人可能已经察觉到,在我调用apply方法的时候,第一个参数是对象(this), 第二个参数是一个数组集合, 在调用Person的时候,他需要的不是一个数组,但是为什么他给我一个数组我仍然可以将数组解析为一个一个的参数,这个就是apply的一个巧妙的用处,可以将一个数组默认的转换为一个参数列表([param1,param2,param3] 转换为 param1,param2,param3) 这个如果让我们用程序来实现将数组的每一个项,来装换为参数的列表,可能都得费一会功夫,借助apply的这点特性,所以就有了以下高效率的方法:</p>\n<p>a) Math.max 可以实现得到数组中最大的一项</p>\n<p>因为Math.max参数里面不支持Math.max([param1,param2])也就是数组但是它支持Math.max(param1,param2,param3…),所以可以根据刚才apply的那个特点来解决 var max=Math.max.apply(null,array),这样轻易的可以得到一个数组中最大的一项(apply会将一个数组装换为一个参数接一个参数的传递给方法)<br>这块在调用的时候第一个参数给了一个null,这个是因为没有对象去调用这个方法,我只需要用这个方法帮我运算,得到返回的结果就行,.所以直接传递了一个null过去</p>\n<p>b) Math.min  可以实现得到数组中最小的一项同样和 max是一个思想 var min=Math.min.apply(null,array);</p>\n<p>c) Array.prototype.push 可以实现两个数组合并</p>\n<p>同样push方法没有提供push一个数组,但是它提供了push(param1,param,…paramN) 所以同样也可以通过apply来装换一下这个数组,即:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vararr1=new Array(<span class=\"string\">\"1\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"string\">\"3\"</span>);</span><br><span class=\"line\">vararr2=new Array(<span class=\"string\">\"4\"</span>,<span class=\"string\">\"5\"</span>,<span class=\"string\">\"6\"</span>);</span><br><span class=\"line\">Array.prototype.push.apply(arr1,arr2);</span><br></pre></td></tr></table></figure></p>\n"},{"title":"http","date":"2018-12-27T13:35:13.000Z","_content":"\n# http状态码\n- 100 Continue 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息\n\n- 200 OK 正常返回信息\n\n- 201 Created 请求成功并且服务器创建了新的资源\n\n- 202 Accepted 服务器已接受请求，但尚未处理\n\n- 301 Moved Permanently 请求的网页已永久移动到新位置。\n\n- 302 Found 临时性重定向。\n\n- 303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。\n\n- 304 Not Modified 自从上次请求后，请求的网页未修改过。\n\n- Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。\n\n- 401 Unauthorized 请求未授权。\n\n- 403 Forbidden 禁止访问。\n\n- 404 Not Found 找不到如何与 URI 相匹配的资源。\n\n- 500 Internal Server Error 最常见的服务器端错误。\n\n- 503 Service Unavailable 服务器端暂时无法处理请求(可能是过载或维护)。\n\n\n\n\n\n\n\n","source":"_posts/http.md","raw":"---\ntitle: http\ndate: 2018-12-27 21:35:13\ncategories:\n- 基础前端技术\ntags: \n    - http\n---\n\n# http状态码\n- 100 Continue 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息\n\n- 200 OK 正常返回信息\n\n- 201 Created 请求成功并且服务器创建了新的资源\n\n- 202 Accepted 服务器已接受请求，但尚未处理\n\n- 301 Moved Permanently 请求的网页已永久移动到新位置。\n\n- 302 Found 临时性重定向。\n\n- 303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。\n\n- 304 Not Modified 自从上次请求后，请求的网页未修改过。\n\n- Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。\n\n- 401 Unauthorized 请求未授权。\n\n- 403 Forbidden 禁止访问。\n\n- 404 Not Found 找不到如何与 URI 相匹配的资源。\n\n- 500 Internal Server Error 最常见的服务器端错误。\n\n- 503 Service Unavailable 服务器端暂时无法处理请求(可能是过载或维护)。\n\n\n\n\n\n\n\n","slug":"http","published":1,"updated":"2019-07-17T11:40:17.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cux002ht09z289axb1t","content":"<h1 id=\"http状态码\"><a href=\"#http状态码\" class=\"headerlink\" title=\"http状态码\"></a>http状态码</h1><ul>\n<li><p>100 Continue 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息</p>\n</li>\n<li><p>200 OK 正常返回信息</p>\n</li>\n<li><p>201 Created 请求成功并且服务器创建了新的资源</p>\n</li>\n<li><p>202 Accepted 服务器已接受请求，但尚未处理</p>\n</li>\n<li><p>301 Moved Permanently 请求的网页已永久移动到新位置。</p>\n</li>\n<li><p>302 Found 临时性重定向。</p>\n</li>\n<li><p>303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。</p>\n</li>\n<li><p>304 Not Modified 自从上次请求后，请求的网页未修改过。</p>\n</li>\n<li><p>Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</p>\n</li>\n<li><p>401 Unauthorized 请求未授权。</p>\n</li>\n<li><p>403 Forbidden 禁止访问。</p>\n</li>\n<li><p>404 Not Found 找不到如何与 URI 相匹配的资源。</p>\n</li>\n<li><p>500 Internal Server Error 最常见的服务器端错误。</p>\n</li>\n<li><p>503 Service Unavailable 服务器端暂时无法处理请求(可能是过载或维护)。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"http状态码\"><a href=\"#http状态码\" class=\"headerlink\" title=\"http状态码\"></a>http状态码</h1><ul>\n<li><p>100 Continue 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息</p>\n</li>\n<li><p>200 OK 正常返回信息</p>\n</li>\n<li><p>201 Created 请求成功并且服务器创建了新的资源</p>\n</li>\n<li><p>202 Accepted 服务器已接受请求，但尚未处理</p>\n</li>\n<li><p>301 Moved Permanently 请求的网页已永久移动到新位置。</p>\n</li>\n<li><p>302 Found 临时性重定向。</p>\n</li>\n<li><p>303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。</p>\n</li>\n<li><p>304 Not Modified 自从上次请求后，请求的网页未修改过。</p>\n</li>\n<li><p>Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</p>\n</li>\n<li><p>401 Unauthorized 请求未授权。</p>\n</li>\n<li><p>403 Forbidden 禁止访问。</p>\n</li>\n<li><p>404 Not Found 找不到如何与 URI 相匹配的资源。</p>\n</li>\n<li><p>500 Internal Server Error 最常见的服务器端错误。</p>\n</li>\n<li><p>503 Service Unavailable 服务器端暂时无法处理请求(可能是过载或维护)。</p>\n</li>\n</ul>\n"},{"title":"vuex+node+express+token登录","date":"2019-09-22T08:38:30.000Z","_content":"\n### \n在学习node express 过程中，使用express实现后端服务，vue vuex作为前端，实现前端实现登录功能，后端token生成+token验证。刷新，用户信息依然存在。\n首先前端登录post数据：后端返回数据如果用户名密码正确，则把token存瑞sessionStrorage。","source":"_posts/login.md","raw":"---\ntitle: vuex+node+express+token登录\ndate: 2019-09-22 16:38:30\ncategories:\n- VUE\ntags: [Node.js,vue]\n---\n\n### \n在学习node express 过程中，使用express实现后端服务，vue vuex作为前端，实现前端实现登录功能，后端token生成+token验证。刷新，用户信息依然存在。\n首先前端登录post数据：后端返回数据如果用户名密码正确，则把token存瑞sessionStrorage。","slug":"login","published":1,"updated":"2019-10-27T13:20:13.007Z","_id":"ck14n5cuz002jt09z5qrktq4z","comments":1,"layout":"post","photos":[],"link":"","content":"<p>###<br>在学习node express 过程中，使用express实现后端服务，vue vuex作为前端，实现前端实现登录功能，后端token生成+token验证。刷新，用户信息依然存在。<br>首先前端登录post数据：后端返回数据如果用户名密码正确，则把token存瑞sessionStrorage。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>###<br>在学习node express 过程中，使用express实现后端服务，vue vuex作为前端，实现前端实现登录功能，后端token生成+token验证。刷新，用户信息依然存在。<br>首先前端登录post数据：后端返回数据如果用户名密码正确，则把token存瑞sessionStrorage。</p>\n"},{"title":"Promise","date":"2019-01-07T02:25:07.000Z","_content":"> 参考:[http://es6.ruanyifeng.com/#docs/promise](http://es6.ruanyifeng.com/#docs/promise)\n> - Promise.prototype.then()\n> - Promise.prototype.catch()\n> - Promise.prototype.finally()\n> - Promise.all()\n> - Promise.race()\n> - Promise.resolve()\n> - Promise.reject()\n> - Promise.try()\n\n这里仅讨论.then()\n\n# 概述\nPromise 对象是 JavaScript 的异步操作解决方案，为异步操作提供统一接口。它起到代理作用（proxy），充当异步操作与回调函数之间的中介，使得异步操作具备同步操作的接口。Promise 可以让异步操作写起来，就像在写同步操作的流程，而不必一层层地嵌套回调函数。\n\n首先，Promise 是一个对象，也是一个构造函数。\n```bash\nfunction f1(resolve, reject) {\n  // 异步代码\n}\nvar p1 = new Promise(f1)\n```\n\n上面代码中，Promise构造函数接受一个回调函数f1作为参数，f1里面是异步操作的代码。然后，返回的p1就是一个 Promise 实例。\n\nPromise 的设计思想是，所有异步任务都返回一个 Promise 实例。Promise 实例有一个then方法，用来指定下一步的回调函数。\n```bash\nvar p1 = new Promise(f1);\np1.then(f2);\n```\n上面代码中，f1的异步操作执行完成，就会执行f2。\n\n传统的写法可能需要把f2作为回调函数传入f1，比如写成f1(f2)，异步操作完成后，在f1内部调用f2。Promise 使得f1和f2变成了链式写法。不仅改善了可读性，而且对于多层嵌套的回调函数尤其方便。\n```bash\n// 传统写法\nstep1(function (value1) {\n  step2(value1, function(value2) {\n    step3(value2, function(value3) {\n      step4(value3, function(value4) {\n        // ...\n      });\n    });\n  });\n});\n\n// Promise 的写法\n(new Promise(step1))\n  .then(step2)\n  .then(step3)\n  .then(step4);\n```\n从上面代码可以看到，采用 Promises 以后，程序流程变得非常清楚，十分易读。注意，为了便于理解，上面代码的Promise实例的生成格式，做了简化，真正的语法请参照下文。\n\n总的来说，传统的回调函数写法使得代码混成一团，变得横向发展而不是向下发展。Promise 就是解决这个问题，使得异步流程可以写成同步流程。\n\nPromise 原本只是社区提出的一个构想，一些函数库率先实现了这个功能。ECMAScript 6 将其写入语言标准，目前 JavaScript 原生支持 Promise 对象。\n# Promise 对象的状态\nPromise 对象通过自身的状态，来控制异步操作。Promise 实例具有三种状态。\n>> 》异步操作未完成（pending）\n>> 》异步操作成功（fulfilled）\n>> 》异步操作失败（rejected）\n\n上面三种状态里面，fulfilled和rejected合在一起称为resolved（已定型）。\n\n这三种的状态的变化途径只有两种。\n> 》从“未完成”到“成功”\n> 》从“未完成”到“失败”\n\n一旦状态发生变化，就凝固了，不会再有新的状态变化。这也是 Promise 这个名字的由来，它的英语意思是“承诺”，一旦承诺成效，就不得再改变了。这也意味着，Promise 实例的状态变化只可能发生一次。\n\n因此，Promise 的最终结果只有两种。\n> 》异步操作成功，Promise 实例传回一个值（value），状态变为fulfilled。\n> 》异步操作失败，Promise 实例抛出一个错误（error），状态变为rejected\n\n# Promise 构造函数\nJavaScript 提供原生的Promise构造函数，用来生成 Promise 实例。\n```bash\nvar promise = new Promise(function (resolve, reject) {\n  // ...\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else { /* 异步操作失败 */\n    reject(new Error());\n  }\n});\n```\n上面代码中，Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由 JavaScript 引擎提供，不用自己实现。\n\nresolve函数的作用是，将Promise实例的状态从“未完成”变为“成功”（即从pending变为fulfilled），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。reject函数的作用是，将Promise实例的状态从“未完成”变为“失败”（即从pending变为rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。\n\n下面是一个例子。\n```bash\nfunction timeout(ms) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, ms, 'done');\n  });\n}\n\ntimeout(100).then(function(val){\n    console.log(val)\n})\n或\ntimeout(100).then((val)=>{\n    console.log(val)\n})\n```\n上面代码中，timeout(100)返回一个Promise实例。100毫秒以后，该实例的状态会变为fulfilled\n# Promise.prototype.then()\nPromise 实例的then方法，用来添加回调函数。\n\nthen方法可以接受两个回调函数，第一个是异步操作成功时（变为fulfilled状态）时的回调函数，第二个是异步操作失败（变为rejected）时的回调函数（该参数可以省略）。一旦状态改变，就调用相应的回调函数。\n```bash\nvar p1 = new Promise(function (resolve, reject) {\n  resolve('成功');\n});\np1.then(console.log, console.error);\n// \"成功\"\n\nvar p2 = new Promise(function (resolve, reject) {\n  reject(new Error('失败'));\n});\np2.then(console.log, console.error);\n// Error: 失败\n```\n上面代码中，p1和p2都是Promise 实例，它们的then方法绑定两个回调函数：成功时的回调函数console.log，失败时的回调函数console.error（可以省略）。p1的状态变为成功，p2的状态变为失败，对应的回调函数会收到异步操作传回的值，然后在控制台输出。\n\nthen方法可以链式使用。\n```bash\np1\n  .then(step1)\n  .then(step2)\n  .then(step3)\n  .then(\n    console.log,\n    console.error\n  );\n```\n上面代码中，p1后面有四个then，意味依次有四个回调函数。只要前一步的状态变为fulfilled，就会依次执行紧跟在后面的回调函数。\n\n最后一个then方法，回调函数是console.log和console.error，用法上有一点重要的区别。console.log只显示step3的返回值，而console.error可以显示p1、step1、step2、step3之中任意一个发生的错误。举例来说，如果step1的状态变为rejected，那么step2和step3都不会执行了（因为它们是resolved的回调函数）。Promise 开始寻找，接下来第一个为rejected的回调函数，在上面代码中是console.error。这就是说，Promise 对象的报错具有传递性。\n# then() 用法辨析\nPromise 的用法，简单说就是一句话：使用then方法添加回调函数。但是，不同的写法有一些细微的差别，请看下面四种写法，它们的差别在哪里？\n```bash\n// 写法一\nf1().then(function () {\n  return f2();\n});\n\n// 写法二\nf1().then(function () {\n  f2();\n});\n\n// 写法三\nf1().then(f2());\n\n// 写法四\nf1().then(f2);\n```\n为了便于讲解，下面这四种写法都再用then方法接一个回调函数f3。写法一的f3回调函数的参数，是f2函数的运行结果。\n```bash\nf1().then(function () {\n  return f2();\n}).then(f3);\n```\n写法二的f3回调函数的参数是undefined。\n```bash\nf1().then(function () {\n  f2();\n  return;\n}).then(f3);\n```\n写法三的f3回调函数的参数，是f2函数返回的函数的运行结果。\n```bash\nf1().then(f2())\n  .then(f3);\n```\n写法四与写法一只有一个差别，那就是f2会接收到f1()返回的结果。\n```bash\nf1().then(f2)\n  .then(f3);\n```\n# 小结\nPromise 的优点在于，让回调函数变成了规范的链式写法，程序流程可以看得很清楚。它有一整套接口，可以实现许多强大的功能，比如同时执行多个异步操作，等到它们的状态都改变以后，再执行一个回调函数；再比如，为多个回调函数中抛出的错误，统一指定处理方法等等。\n\n而且，Promise 还有一个传统写法没有的好处：它的状态一旦改变，无论何时查询，都能得到这个状态。这意味着，无论何时为 Promise 实例添加回调函数，该函数都能正确执行。所以，你不用担心是否错过了某个事件或信号。如果是传统写法，通过监听事件来执行回调函数，一旦错过了事件，再添加回调函数是不会执行的。\n\nPromise 的缺点是，编写的难度比传统写法高，而且阅读代码也不是一眼可以看懂。你只会看到一堆then，必须自己在then的回调函数里面理清逻辑。\n# 微任务\nPromise 的回调函数属于异步任务，会在同步任务之后执行。\n```bash\nnew Promise(function (resolve, reject) {\n  resolve(1);\n}).then(console.log);\n\nconsole.log(2);\n// 2\n// 1\n```\n上面代码会先输出2，再输出1。因为console.log(2)是同步任务，而then的回调函数属于异步任务，一定晚于同步任务执行。\n\n但是，Promise 的回调函数不是正常的异步任务，而是微任务（microtask）。它们的区别在于，正常任务追加到下一轮事件循环，微任务追加到本轮事件循环。这意味着，微任务的执行时间一定早于正常任务。\n```bash\nsetTimeout(function() {\n  console.log(1);\n}, 0);\n\nnew Promise(function (resolve, reject) {\n  resolve(2);\n}).then(console.log);\n\nconsole.log(3);\n// 3\n// 2\n// 1\n```\n上面代码的输出结果是321。这说明then的回调函数的执行时间，早于setTimeout(fn, 0)。因为then是本轮事件循环执行，setTimeout(fn, 0)在下一轮事件循环开始时执行。\n\n\n","source":"_posts/Promise.md","raw":"---\ntitle: Promise\ndate: 2019-01-07 10:25:07\ncategories: \"基础前端技术\"\ntags: [Promise]\n---\n> 参考:[http://es6.ruanyifeng.com/#docs/promise](http://es6.ruanyifeng.com/#docs/promise)\n> - Promise.prototype.then()\n> - Promise.prototype.catch()\n> - Promise.prototype.finally()\n> - Promise.all()\n> - Promise.race()\n> - Promise.resolve()\n> - Promise.reject()\n> - Promise.try()\n\n这里仅讨论.then()\n\n# 概述\nPromise 对象是 JavaScript 的异步操作解决方案，为异步操作提供统一接口。它起到代理作用（proxy），充当异步操作与回调函数之间的中介，使得异步操作具备同步操作的接口。Promise 可以让异步操作写起来，就像在写同步操作的流程，而不必一层层地嵌套回调函数。\n\n首先，Promise 是一个对象，也是一个构造函数。\n```bash\nfunction f1(resolve, reject) {\n  // 异步代码\n}\nvar p1 = new Promise(f1)\n```\n\n上面代码中，Promise构造函数接受一个回调函数f1作为参数，f1里面是异步操作的代码。然后，返回的p1就是一个 Promise 实例。\n\nPromise 的设计思想是，所有异步任务都返回一个 Promise 实例。Promise 实例有一个then方法，用来指定下一步的回调函数。\n```bash\nvar p1 = new Promise(f1);\np1.then(f2);\n```\n上面代码中，f1的异步操作执行完成，就会执行f2。\n\n传统的写法可能需要把f2作为回调函数传入f1，比如写成f1(f2)，异步操作完成后，在f1内部调用f2。Promise 使得f1和f2变成了链式写法。不仅改善了可读性，而且对于多层嵌套的回调函数尤其方便。\n```bash\n// 传统写法\nstep1(function (value1) {\n  step2(value1, function(value2) {\n    step3(value2, function(value3) {\n      step4(value3, function(value4) {\n        // ...\n      });\n    });\n  });\n});\n\n// Promise 的写法\n(new Promise(step1))\n  .then(step2)\n  .then(step3)\n  .then(step4);\n```\n从上面代码可以看到，采用 Promises 以后，程序流程变得非常清楚，十分易读。注意，为了便于理解，上面代码的Promise实例的生成格式，做了简化，真正的语法请参照下文。\n\n总的来说，传统的回调函数写法使得代码混成一团，变得横向发展而不是向下发展。Promise 就是解决这个问题，使得异步流程可以写成同步流程。\n\nPromise 原本只是社区提出的一个构想，一些函数库率先实现了这个功能。ECMAScript 6 将其写入语言标准，目前 JavaScript 原生支持 Promise 对象。\n# Promise 对象的状态\nPromise 对象通过自身的状态，来控制异步操作。Promise 实例具有三种状态。\n>> 》异步操作未完成（pending）\n>> 》异步操作成功（fulfilled）\n>> 》异步操作失败（rejected）\n\n上面三种状态里面，fulfilled和rejected合在一起称为resolved（已定型）。\n\n这三种的状态的变化途径只有两种。\n> 》从“未完成”到“成功”\n> 》从“未完成”到“失败”\n\n一旦状态发生变化，就凝固了，不会再有新的状态变化。这也是 Promise 这个名字的由来，它的英语意思是“承诺”，一旦承诺成效，就不得再改变了。这也意味着，Promise 实例的状态变化只可能发生一次。\n\n因此，Promise 的最终结果只有两种。\n> 》异步操作成功，Promise 实例传回一个值（value），状态变为fulfilled。\n> 》异步操作失败，Promise 实例抛出一个错误（error），状态变为rejected\n\n# Promise 构造函数\nJavaScript 提供原生的Promise构造函数，用来生成 Promise 实例。\n```bash\nvar promise = new Promise(function (resolve, reject) {\n  // ...\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else { /* 异步操作失败 */\n    reject(new Error());\n  }\n});\n```\n上面代码中，Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由 JavaScript 引擎提供，不用自己实现。\n\nresolve函数的作用是，将Promise实例的状态从“未完成”变为“成功”（即从pending变为fulfilled），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。reject函数的作用是，将Promise实例的状态从“未完成”变为“失败”（即从pending变为rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。\n\n下面是一个例子。\n```bash\nfunction timeout(ms) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, ms, 'done');\n  });\n}\n\ntimeout(100).then(function(val){\n    console.log(val)\n})\n或\ntimeout(100).then((val)=>{\n    console.log(val)\n})\n```\n上面代码中，timeout(100)返回一个Promise实例。100毫秒以后，该实例的状态会变为fulfilled\n# Promise.prototype.then()\nPromise 实例的then方法，用来添加回调函数。\n\nthen方法可以接受两个回调函数，第一个是异步操作成功时（变为fulfilled状态）时的回调函数，第二个是异步操作失败（变为rejected）时的回调函数（该参数可以省略）。一旦状态改变，就调用相应的回调函数。\n```bash\nvar p1 = new Promise(function (resolve, reject) {\n  resolve('成功');\n});\np1.then(console.log, console.error);\n// \"成功\"\n\nvar p2 = new Promise(function (resolve, reject) {\n  reject(new Error('失败'));\n});\np2.then(console.log, console.error);\n// Error: 失败\n```\n上面代码中，p1和p2都是Promise 实例，它们的then方法绑定两个回调函数：成功时的回调函数console.log，失败时的回调函数console.error（可以省略）。p1的状态变为成功，p2的状态变为失败，对应的回调函数会收到异步操作传回的值，然后在控制台输出。\n\nthen方法可以链式使用。\n```bash\np1\n  .then(step1)\n  .then(step2)\n  .then(step3)\n  .then(\n    console.log,\n    console.error\n  );\n```\n上面代码中，p1后面有四个then，意味依次有四个回调函数。只要前一步的状态变为fulfilled，就会依次执行紧跟在后面的回调函数。\n\n最后一个then方法，回调函数是console.log和console.error，用法上有一点重要的区别。console.log只显示step3的返回值，而console.error可以显示p1、step1、step2、step3之中任意一个发生的错误。举例来说，如果step1的状态变为rejected，那么step2和step3都不会执行了（因为它们是resolved的回调函数）。Promise 开始寻找，接下来第一个为rejected的回调函数，在上面代码中是console.error。这就是说，Promise 对象的报错具有传递性。\n# then() 用法辨析\nPromise 的用法，简单说就是一句话：使用then方法添加回调函数。但是，不同的写法有一些细微的差别，请看下面四种写法，它们的差别在哪里？\n```bash\n// 写法一\nf1().then(function () {\n  return f2();\n});\n\n// 写法二\nf1().then(function () {\n  f2();\n});\n\n// 写法三\nf1().then(f2());\n\n// 写法四\nf1().then(f2);\n```\n为了便于讲解，下面这四种写法都再用then方法接一个回调函数f3。写法一的f3回调函数的参数，是f2函数的运行结果。\n```bash\nf1().then(function () {\n  return f2();\n}).then(f3);\n```\n写法二的f3回调函数的参数是undefined。\n```bash\nf1().then(function () {\n  f2();\n  return;\n}).then(f3);\n```\n写法三的f3回调函数的参数，是f2函数返回的函数的运行结果。\n```bash\nf1().then(f2())\n  .then(f3);\n```\n写法四与写法一只有一个差别，那就是f2会接收到f1()返回的结果。\n```bash\nf1().then(f2)\n  .then(f3);\n```\n# 小结\nPromise 的优点在于，让回调函数变成了规范的链式写法，程序流程可以看得很清楚。它有一整套接口，可以实现许多强大的功能，比如同时执行多个异步操作，等到它们的状态都改变以后，再执行一个回调函数；再比如，为多个回调函数中抛出的错误，统一指定处理方法等等。\n\n而且，Promise 还有一个传统写法没有的好处：它的状态一旦改变，无论何时查询，都能得到这个状态。这意味着，无论何时为 Promise 实例添加回调函数，该函数都能正确执行。所以，你不用担心是否错过了某个事件或信号。如果是传统写法，通过监听事件来执行回调函数，一旦错过了事件，再添加回调函数是不会执行的。\n\nPromise 的缺点是，编写的难度比传统写法高，而且阅读代码也不是一眼可以看懂。你只会看到一堆then，必须自己在then的回调函数里面理清逻辑。\n# 微任务\nPromise 的回调函数属于异步任务，会在同步任务之后执行。\n```bash\nnew Promise(function (resolve, reject) {\n  resolve(1);\n}).then(console.log);\n\nconsole.log(2);\n// 2\n// 1\n```\n上面代码会先输出2，再输出1。因为console.log(2)是同步任务，而then的回调函数属于异步任务，一定晚于同步任务执行。\n\n但是，Promise 的回调函数不是正常的异步任务，而是微任务（microtask）。它们的区别在于，正常任务追加到下一轮事件循环，微任务追加到本轮事件循环。这意味着，微任务的执行时间一定早于正常任务。\n```bash\nsetTimeout(function() {\n  console.log(1);\n}, 0);\n\nnew Promise(function (resolve, reject) {\n  resolve(2);\n}).then(console.log);\n\nconsole.log(3);\n// 3\n// 2\n// 1\n```\n上面代码的输出结果是321。这说明then的回调函数的执行时间，早于setTimeout(fn, 0)。因为then是本轮事件循环执行，setTimeout(fn, 0)在下一轮事件循环开始时执行。\n\n\n","slug":"Promise","published":1,"updated":"2019-07-17T11:40:11.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cv4002ot09zdtstiwb0","content":"<blockquote>\n<p>参考:<a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/promise</a></p>\n<ul>\n<li>Promise.prototype.then()</li>\n<li>Promise.prototype.catch()</li>\n<li>Promise.prototype.finally()</li>\n<li>Promise.all()</li>\n<li>Promise.race()</li>\n<li>Promise.resolve()</li>\n<li>Promise.reject()</li>\n<li>Promise.try()</li>\n</ul>\n</blockquote>\n<p>这里仅讨论.then()</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Promise 对象是 JavaScript 的异步操作解决方案，为异步操作提供统一接口。它起到代理作用（proxy），充当异步操作与回调函数之间的中介，使得异步操作具备同步操作的接口。Promise 可以让异步操作写起来，就像在写同步操作的流程，而不必一层层地嵌套回调函数。</p>\n<p>首先，Promise 是一个对象，也是一个构造函数。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> f1(resolve, reject) &#123;</span><br><span class=\"line\">  // 异步代码</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var p1 = new Promise(f1)</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，Promise构造函数接受一个回调函数f1作为参数，f1里面是异步操作的代码。然后，返回的p1就是一个 Promise 实例。</p>\n<p>Promise 的设计思想是，所有异步任务都返回一个 Promise 实例。Promise 实例有一个then方法，用来指定下一步的回调函数。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p1 = new Promise(f1);</span><br><span class=\"line\">p1.then(f2);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，f1的异步操作执行完成，就会执行f2。</p>\n<p>传统的写法可能需要把f2作为回调函数传入f1，比如写成f1(f2)，异步操作完成后，在f1内部调用f2。Promise 使得f1和f2变成了链式写法。不仅改善了可读性，而且对于多层嵌套的回调函数尤其方便。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 传统写法</span><br><span class=\"line\">step1(<span class=\"keyword\">function</span> (value1) &#123;</span><br><span class=\"line\">  step2(value1, <span class=\"keyword\">function</span>(value2) &#123;</span><br><span class=\"line\">    step3(value2, <span class=\"keyword\">function</span>(value3) &#123;</span><br><span class=\"line\">      step4(value3, <span class=\"keyword\">function</span>(value4) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// Promise 的写法</span><br><span class=\"line\">(new Promise(step1))</span><br><span class=\"line\">  .<span class=\"keyword\">then</span>(step2)</span><br><span class=\"line\">  .<span class=\"keyword\">then</span>(step3)</span><br><span class=\"line\">  .<span class=\"keyword\">then</span>(step4);</span><br></pre></td></tr></table></figure></p>\n<p>从上面代码可以看到，采用 Promises 以后，程序流程变得非常清楚，十分易读。注意，为了便于理解，上面代码的Promise实例的生成格式，做了简化，真正的语法请参照下文。</p>\n<p>总的来说，传统的回调函数写法使得代码混成一团，变得横向发展而不是向下发展。Promise 就是解决这个问题，使得异步流程可以写成同步流程。</p>\n<p>Promise 原本只是社区提出的一个构想，一些函数库率先实现了这个功能。ECMAScript 6 将其写入语言标准，目前 JavaScript 原生支持 Promise 对象。</p>\n<h1 id=\"Promise-对象的状态\"><a href=\"#Promise-对象的状态\" class=\"headerlink\" title=\"Promise 对象的状态\"></a>Promise 对象的状态</h1><p>Promise 对象通过自身的状态，来控制异步操作。Promise 实例具有三种状态。</p>\n<blockquote>\n<blockquote>\n<p>》异步操作未完成（pending）<br>》异步操作成功（fulfilled）<br>》异步操作失败（rejected）</p>\n</blockquote>\n</blockquote>\n<p>上面三种状态里面，fulfilled和rejected合在一起称为resolved（已定型）。</p>\n<p>这三种的状态的变化途径只有两种。</p>\n<blockquote>\n<p>》从“未完成”到“成功”<br>》从“未完成”到“失败”</p>\n</blockquote>\n<p>一旦状态发生变化，就凝固了，不会再有新的状态变化。这也是 Promise 这个名字的由来，它的英语意思是“承诺”，一旦承诺成效，就不得再改变了。这也意味着，Promise 实例的状态变化只可能发生一次。</p>\n<p>因此，Promise 的最终结果只有两种。</p>\n<blockquote>\n<p>》异步操作成功，Promise 实例传回一个值（value），状态变为fulfilled。<br>》异步操作失败，Promise 实例抛出一个错误（error），状态变为rejected</p>\n</blockquote>\n<h1 id=\"Promise-构造函数\"><a href=\"#Promise-构造函数\" class=\"headerlink\" title=\"Promise 构造函数\"></a>Promise 构造函数</h1><p>JavaScript 提供原生的Promise构造函数，用来生成 Promise 实例。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var promise = new Promise(<span class=\"keyword\">function</span> (resolve, reject) &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (/* 异步操作成功 */)&#123;</span><br><span class=\"line\">    resolve(value);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123; /* 异步操作失败 */</span><br><span class=\"line\">    reject(new Error());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由 JavaScript 引擎提供，不用自己实现。</p>\n<p>resolve函数的作用是，将Promise实例的状态从“未完成”变为“成功”（即从pending变为fulfilled），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。reject函数的作用是，将Promise实例的状态从“未完成”变为“失败”（即从pending变为rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>\n<p>下面是一个例子。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> timeout(ms) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    setTimeout(resolve, ms, <span class=\"string\">'done'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">timeout(100).<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(val)&#123;</span><br><span class=\"line\">    console.log(val)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">或</span><br><span class=\"line\">timeout(100).<span class=\"keyword\">then</span>((val)=&gt;&#123;</span><br><span class=\"line\">    console.log(val)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，timeout(100)返回一个Promise实例。100毫秒以后，该实例的状态会变为fulfilled</p>\n<h1 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h1><p>Promise 实例的then方法，用来添加回调函数。</p>\n<p>then方法可以接受两个回调函数，第一个是异步操作成功时（变为fulfilled状态）时的回调函数，第二个是异步操作失败（变为rejected）时的回调函数（该参数可以省略）。一旦状态改变，就调用相应的回调函数。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p1 = new Promise(<span class=\"keyword\">function</span> (resolve, reject) &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'成功'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p1.then(console.log, console.error);</span><br><span class=\"line\">// <span class=\"string\">\"成功\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">var p2 = new Promise(<span class=\"keyword\">function</span> (resolve, reject) &#123;</span><br><span class=\"line\">  reject(new Error(<span class=\"string\">'失败'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p2.then(console.log, console.error);</span><br><span class=\"line\">// Error: 失败</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，p1和p2都是Promise 实例，它们的then方法绑定两个回调函数：成功时的回调函数console.log，失败时的回调函数console.error（可以省略）。p1的状态变为成功，p2的状态变为失败，对应的回调函数会收到异步操作传回的值，然后在控制台输出。</p>\n<p>then方法可以链式使用。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p1</span><br><span class=\"line\">  .<span class=\"keyword\">then</span>(step1)</span><br><span class=\"line\">  .<span class=\"keyword\">then</span>(step2)</span><br><span class=\"line\">  .<span class=\"keyword\">then</span>(step3)</span><br><span class=\"line\">  .<span class=\"keyword\">then</span>(</span><br><span class=\"line\">    console.log,</span><br><span class=\"line\">    console.error</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，p1后面有四个then，意味依次有四个回调函数。只要前一步的状态变为fulfilled，就会依次执行紧跟在后面的回调函数。</p>\n<p>最后一个then方法，回调函数是console.log和console.error，用法上有一点重要的区别。console.log只显示step3的返回值，而console.error可以显示p1、step1、step2、step3之中任意一个发生的错误。举例来说，如果step1的状态变为rejected，那么step2和step3都不会执行了（因为它们是resolved的回调函数）。Promise 开始寻找，接下来第一个为rejected的回调函数，在上面代码中是console.error。这就是说，Promise 对象的报错具有传递性。</p>\n<h1 id=\"then-用法辨析\"><a href=\"#then-用法辨析\" class=\"headerlink\" title=\"then() 用法辨析\"></a>then() 用法辨析</h1><p>Promise 的用法，简单说就是一句话：使用then方法添加回调函数。但是，不同的写法有一些细微的差别，请看下面四种写法，它们的差别在哪里？<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 写法一</span><br><span class=\"line\">f1().<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> f2();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 写法二</span><br><span class=\"line\">f1().<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">  f2();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 写法三</span><br><span class=\"line\">f1().<span class=\"keyword\">then</span>(f2());</span><br><span class=\"line\"></span><br><span class=\"line\">// 写法四</span><br><span class=\"line\">f1().<span class=\"keyword\">then</span>(f2);</span><br></pre></td></tr></table></figure></p>\n<p>为了便于讲解，下面这四种写法都再用then方法接一个回调函数f3。写法一的f3回调函数的参数，是f2函数的运行结果。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f1().<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> f2();</span><br><span class=\"line\">&#125;).<span class=\"keyword\">then</span>(f3);</span><br></pre></td></tr></table></figure></p>\n<p>写法二的f3回调函数的参数是undefined。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f1().<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">  f2();</span><br><span class=\"line\">  <span class=\"built_in\">return</span>;</span><br><span class=\"line\">&#125;).<span class=\"keyword\">then</span>(f3);</span><br></pre></td></tr></table></figure></p>\n<p>写法三的f3回调函数的参数，是f2函数返回的函数的运行结果。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f1().<span class=\"keyword\">then</span>(f2())</span><br><span class=\"line\">  .<span class=\"keyword\">then</span>(f3);</span><br></pre></td></tr></table></figure></p>\n<p>写法四与写法一只有一个差别，那就是f2会接收到f1()返回的结果。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f1().<span class=\"keyword\">then</span>(f2)</span><br><span class=\"line\">  .<span class=\"keyword\">then</span>(f3);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>Promise 的优点在于，让回调函数变成了规范的链式写法，程序流程可以看得很清楚。它有一整套接口，可以实现许多强大的功能，比如同时执行多个异步操作，等到它们的状态都改变以后，再执行一个回调函数；再比如，为多个回调函数中抛出的错误，统一指定处理方法等等。</p>\n<p>而且，Promise 还有一个传统写法没有的好处：它的状态一旦改变，无论何时查询，都能得到这个状态。这意味着，无论何时为 Promise 实例添加回调函数，该函数都能正确执行。所以，你不用担心是否错过了某个事件或信号。如果是传统写法，通过监听事件来执行回调函数，一旦错过了事件，再添加回调函数是不会执行的。</p>\n<p>Promise 的缺点是，编写的难度比传统写法高，而且阅读代码也不是一眼可以看懂。你只会看到一堆then，必须自己在then的回调函数里面理清逻辑。</p>\n<h1 id=\"微任务\"><a href=\"#微任务\" class=\"headerlink\" title=\"微任务\"></a>微任务</h1><p>Promise 的回调函数属于异步任务，会在同步任务之后执行。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise(<span class=\"keyword\">function</span> (resolve, reject) &#123;</span><br><span class=\"line\">  resolve(1);</span><br><span class=\"line\">&#125;).<span class=\"keyword\">then</span>(console.log);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(2);</span><br><span class=\"line\">// 2</span><br><span class=\"line\">// 1</span><br></pre></td></tr></table></figure></p>\n<p>上面代码会先输出2，再输出1。因为console.log(2)是同步任务，而then的回调函数属于异步任务，一定晚于同步任务执行。</p>\n<p>但是，Promise 的回调函数不是正常的异步任务，而是微任务（microtask）。它们的区别在于，正常任务追加到下一轮事件循环，微任务追加到本轮事件循环。这意味着，微任务的执行时间一定早于正常任务。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">  console.log(1);</span><br><span class=\"line\">&#125;, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">new Promise(<span class=\"keyword\">function</span> (resolve, reject) &#123;</span><br><span class=\"line\">  resolve(2);</span><br><span class=\"line\">&#125;).<span class=\"keyword\">then</span>(console.log);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(3);</span><br><span class=\"line\">// 3</span><br><span class=\"line\">// 2</span><br><span class=\"line\">// 1</span><br></pre></td></tr></table></figure></p>\n<p>上面代码的输出结果是321。这说明then的回调函数的执行时间，早于setTimeout(fn, 0)。因为then是本轮事件循环执行，setTimeout(fn, 0)在下一轮事件循环开始时执行。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>参考:<a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"noopener\">http://es6.ruanyifeng.com/#docs/promise</a></p>\n<ul>\n<li>Promise.prototype.then()</li>\n<li>Promise.prototype.catch()</li>\n<li>Promise.prototype.finally()</li>\n<li>Promise.all()</li>\n<li>Promise.race()</li>\n<li>Promise.resolve()</li>\n<li>Promise.reject()</li>\n<li>Promise.try()</li>\n</ul>\n</blockquote>\n<p>这里仅讨论.then()</p>\n<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>Promise 对象是 JavaScript 的异步操作解决方案，为异步操作提供统一接口。它起到代理作用（proxy），充当异步操作与回调函数之间的中介，使得异步操作具备同步操作的接口。Promise 可以让异步操作写起来，就像在写同步操作的流程，而不必一层层地嵌套回调函数。</p>\n<p>首先，Promise 是一个对象，也是一个构造函数。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> f1(resolve, reject) &#123;</span><br><span class=\"line\">  // 异步代码</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var p1 = new Promise(f1)</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，Promise构造函数接受一个回调函数f1作为参数，f1里面是异步操作的代码。然后，返回的p1就是一个 Promise 实例。</p>\n<p>Promise 的设计思想是，所有异步任务都返回一个 Promise 实例。Promise 实例有一个then方法，用来指定下一步的回调函数。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p1 = new Promise(f1);</span><br><span class=\"line\">p1.then(f2);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，f1的异步操作执行完成，就会执行f2。</p>\n<p>传统的写法可能需要把f2作为回调函数传入f1，比如写成f1(f2)，异步操作完成后，在f1内部调用f2。Promise 使得f1和f2变成了链式写法。不仅改善了可读性，而且对于多层嵌套的回调函数尤其方便。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 传统写法</span><br><span class=\"line\">step1(<span class=\"keyword\">function</span> (value1) &#123;</span><br><span class=\"line\">  step2(value1, <span class=\"keyword\">function</span>(value2) &#123;</span><br><span class=\"line\">    step3(value2, <span class=\"keyword\">function</span>(value3) &#123;</span><br><span class=\"line\">      step4(value3, <span class=\"keyword\">function</span>(value4) &#123;</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// Promise 的写法</span><br><span class=\"line\">(new Promise(step1))</span><br><span class=\"line\">  .<span class=\"keyword\">then</span>(step2)</span><br><span class=\"line\">  .<span class=\"keyword\">then</span>(step3)</span><br><span class=\"line\">  .<span class=\"keyword\">then</span>(step4);</span><br></pre></td></tr></table></figure></p>\n<p>从上面代码可以看到，采用 Promises 以后，程序流程变得非常清楚，十分易读。注意，为了便于理解，上面代码的Promise实例的生成格式，做了简化，真正的语法请参照下文。</p>\n<p>总的来说，传统的回调函数写法使得代码混成一团，变得横向发展而不是向下发展。Promise 就是解决这个问题，使得异步流程可以写成同步流程。</p>\n<p>Promise 原本只是社区提出的一个构想，一些函数库率先实现了这个功能。ECMAScript 6 将其写入语言标准，目前 JavaScript 原生支持 Promise 对象。</p>\n<h1 id=\"Promise-对象的状态\"><a href=\"#Promise-对象的状态\" class=\"headerlink\" title=\"Promise 对象的状态\"></a>Promise 对象的状态</h1><p>Promise 对象通过自身的状态，来控制异步操作。Promise 实例具有三种状态。</p>\n<blockquote>\n<blockquote>\n<p>》异步操作未完成（pending）<br>》异步操作成功（fulfilled）<br>》异步操作失败（rejected）</p>\n</blockquote>\n</blockquote>\n<p>上面三种状态里面，fulfilled和rejected合在一起称为resolved（已定型）。</p>\n<p>这三种的状态的变化途径只有两种。</p>\n<blockquote>\n<p>》从“未完成”到“成功”<br>》从“未完成”到“失败”</p>\n</blockquote>\n<p>一旦状态发生变化，就凝固了，不会再有新的状态变化。这也是 Promise 这个名字的由来，它的英语意思是“承诺”，一旦承诺成效，就不得再改变了。这也意味着，Promise 实例的状态变化只可能发生一次。</p>\n<p>因此，Promise 的最终结果只有两种。</p>\n<blockquote>\n<p>》异步操作成功，Promise 实例传回一个值（value），状态变为fulfilled。<br>》异步操作失败，Promise 实例抛出一个错误（error），状态变为rejected</p>\n</blockquote>\n<h1 id=\"Promise-构造函数\"><a href=\"#Promise-构造函数\" class=\"headerlink\" title=\"Promise 构造函数\"></a>Promise 构造函数</h1><p>JavaScript 提供原生的Promise构造函数，用来生成 Promise 实例。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var promise = new Promise(<span class=\"keyword\">function</span> (resolve, reject) &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (/* 异步操作成功 */)&#123;</span><br><span class=\"line\">    resolve(value);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123; /* 异步操作失败 */</span><br><span class=\"line\">    reject(new Error());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由 JavaScript 引擎提供，不用自己实现。</p>\n<p>resolve函数的作用是，将Promise实例的状态从“未完成”变为“成功”（即从pending变为fulfilled），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。reject函数的作用是，将Promise实例的状态从“未完成”变为“失败”（即从pending变为rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>\n<p>下面是一个例子。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> timeout(ms) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">    setTimeout(resolve, ms, <span class=\"string\">'done'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">timeout(100).<span class=\"keyword\">then</span>(<span class=\"keyword\">function</span>(val)&#123;</span><br><span class=\"line\">    console.log(val)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">或</span><br><span class=\"line\">timeout(100).<span class=\"keyword\">then</span>((val)=&gt;&#123;</span><br><span class=\"line\">    console.log(val)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，timeout(100)返回一个Promise实例。100毫秒以后，该实例的状态会变为fulfilled</p>\n<h1 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h1><p>Promise 实例的then方法，用来添加回调函数。</p>\n<p>then方法可以接受两个回调函数，第一个是异步操作成功时（变为fulfilled状态）时的回调函数，第二个是异步操作失败（变为rejected）时的回调函数（该参数可以省略）。一旦状态改变，就调用相应的回调函数。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p1 = new Promise(<span class=\"keyword\">function</span> (resolve, reject) &#123;</span><br><span class=\"line\">  resolve(<span class=\"string\">'成功'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p1.then(console.log, console.error);</span><br><span class=\"line\">// <span class=\"string\">\"成功\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">var p2 = new Promise(<span class=\"keyword\">function</span> (resolve, reject) &#123;</span><br><span class=\"line\">  reject(new Error(<span class=\"string\">'失败'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p2.then(console.log, console.error);</span><br><span class=\"line\">// Error: 失败</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，p1和p2都是Promise 实例，它们的then方法绑定两个回调函数：成功时的回调函数console.log，失败时的回调函数console.error（可以省略）。p1的状态变为成功，p2的状态变为失败，对应的回调函数会收到异步操作传回的值，然后在控制台输出。</p>\n<p>then方法可以链式使用。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p1</span><br><span class=\"line\">  .<span class=\"keyword\">then</span>(step1)</span><br><span class=\"line\">  .<span class=\"keyword\">then</span>(step2)</span><br><span class=\"line\">  .<span class=\"keyword\">then</span>(step3)</span><br><span class=\"line\">  .<span class=\"keyword\">then</span>(</span><br><span class=\"line\">    console.log,</span><br><span class=\"line\">    console.error</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，p1后面有四个then，意味依次有四个回调函数。只要前一步的状态变为fulfilled，就会依次执行紧跟在后面的回调函数。</p>\n<p>最后一个then方法，回调函数是console.log和console.error，用法上有一点重要的区别。console.log只显示step3的返回值，而console.error可以显示p1、step1、step2、step3之中任意一个发生的错误。举例来说，如果step1的状态变为rejected，那么step2和step3都不会执行了（因为它们是resolved的回调函数）。Promise 开始寻找，接下来第一个为rejected的回调函数，在上面代码中是console.error。这就是说，Promise 对象的报错具有传递性。</p>\n<h1 id=\"then-用法辨析\"><a href=\"#then-用法辨析\" class=\"headerlink\" title=\"then() 用法辨析\"></a>then() 用法辨析</h1><p>Promise 的用法，简单说就是一句话：使用then方法添加回调函数。但是，不同的写法有一些细微的差别，请看下面四种写法，它们的差别在哪里？<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 写法一</span><br><span class=\"line\">f1().<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> f2();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 写法二</span><br><span class=\"line\">f1().<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">  f2();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 写法三</span><br><span class=\"line\">f1().<span class=\"keyword\">then</span>(f2());</span><br><span class=\"line\"></span><br><span class=\"line\">// 写法四</span><br><span class=\"line\">f1().<span class=\"keyword\">then</span>(f2);</span><br></pre></td></tr></table></figure></p>\n<p>为了便于讲解，下面这四种写法都再用then方法接一个回调函数f3。写法一的f3回调函数的参数，是f2函数的运行结果。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f1().<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> f2();</span><br><span class=\"line\">&#125;).<span class=\"keyword\">then</span>(f3);</span><br></pre></td></tr></table></figure></p>\n<p>写法二的f3回调函数的参数是undefined。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f1().<span class=\"keyword\">then</span>(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">  f2();</span><br><span class=\"line\">  <span class=\"built_in\">return</span>;</span><br><span class=\"line\">&#125;).<span class=\"keyword\">then</span>(f3);</span><br></pre></td></tr></table></figure></p>\n<p>写法三的f3回调函数的参数，是f2函数返回的函数的运行结果。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f1().<span class=\"keyword\">then</span>(f2())</span><br><span class=\"line\">  .<span class=\"keyword\">then</span>(f3);</span><br></pre></td></tr></table></figure></p>\n<p>写法四与写法一只有一个差别，那就是f2会接收到f1()返回的结果。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f1().<span class=\"keyword\">then</span>(f2)</span><br><span class=\"line\">  .<span class=\"keyword\">then</span>(f3);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>Promise 的优点在于，让回调函数变成了规范的链式写法，程序流程可以看得很清楚。它有一整套接口，可以实现许多强大的功能，比如同时执行多个异步操作，等到它们的状态都改变以后，再执行一个回调函数；再比如，为多个回调函数中抛出的错误，统一指定处理方法等等。</p>\n<p>而且，Promise 还有一个传统写法没有的好处：它的状态一旦改变，无论何时查询，都能得到这个状态。这意味着，无论何时为 Promise 实例添加回调函数，该函数都能正确执行。所以，你不用担心是否错过了某个事件或信号。如果是传统写法，通过监听事件来执行回调函数，一旦错过了事件，再添加回调函数是不会执行的。</p>\n<p>Promise 的缺点是，编写的难度比传统写法高，而且阅读代码也不是一眼可以看懂。你只会看到一堆then，必须自己在then的回调函数里面理清逻辑。</p>\n<h1 id=\"微任务\"><a href=\"#微任务\" class=\"headerlink\" title=\"微任务\"></a>微任务</h1><p>Promise 的回调函数属于异步任务，会在同步任务之后执行。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Promise(<span class=\"keyword\">function</span> (resolve, reject) &#123;</span><br><span class=\"line\">  resolve(1);</span><br><span class=\"line\">&#125;).<span class=\"keyword\">then</span>(console.log);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(2);</span><br><span class=\"line\">// 2</span><br><span class=\"line\">// 1</span><br></pre></td></tr></table></figure></p>\n<p>上面代码会先输出2，再输出1。因为console.log(2)是同步任务，而then的回调函数属于异步任务，一定晚于同步任务执行。</p>\n<p>但是，Promise 的回调函数不是正常的异步任务，而是微任务（microtask）。它们的区别在于，正常任务追加到下一轮事件循环，微任务追加到本轮事件循环。这意味着，微任务的执行时间一定早于正常任务。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">  console.log(1);</span><br><span class=\"line\">&#125;, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">new Promise(<span class=\"keyword\">function</span> (resolve, reject) &#123;</span><br><span class=\"line\">  resolve(2);</span><br><span class=\"line\">&#125;).<span class=\"keyword\">then</span>(console.log);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(3);</span><br><span class=\"line\">// 3</span><br><span class=\"line\">// 2</span><br><span class=\"line\">// 1</span><br></pre></td></tr></table></figure></p>\n<p>上面代码的输出结果是321。这说明then的回调函数的执行时间，早于setTimeout(fn, 0)。因为then是本轮事件循环执行，setTimeout(fn, 0)在下一轮事件循环开始时执行。</p>\n"},{"title":"node基础(二)","date":"2019-08-09T06:38:25.000Z","_content":"### Node.js REPL(交互式解释器)\nNode.js REPL(Read Eval Print Loop:交互式解释器) 表示一个电脑的环境，类似 Window 系统的终端或 Unix/Linux shell，我们可以在终端中输入命令，并接收系统的响应。\n我们可以输入以下命令来启动 Node 的终端：\n```\n$ node\n> \n```\n停止 REPL\n前面我们已经提到按下两次 ctrl + c 键就能退出 REPL:\n```\n$ node\n>\n(^C again to quit)\n>\n```\n### Node.js 回调函数\nNode.js 异步编程的直接体现就是回调。\n\n异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。\n\n回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。\n\n例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。\n\n回调函数一般作为函数的最后一个参数出现：\n```\nfunction foo1(name, age, callback) { }\nfunction foo2(value, callback1, callback2) { }\n```\n#### 阻塞代码实例\n\n创建一个文件 input.txt ，内容如下：\n\n菜鸟教程官网地址：www.runoob.com\n创建 main.js 文件, 代码如下：\n```\nvar fs = require(\"fs\");\n\nvar data = fs.readFileSync('input.txt');\n\nconsole.log(data.toString());\nconsole.log(\"程序执行结束!\");\n```\n以上代码执行结果如下：\n```\n$ node main.js\n菜鸟教程官网地址：www.runoob.com\n\n程序执行结束!\n```\n非阻塞代码实例\n创建一个文件 input.txt ，内容如下：\n\n菜鸟教程官网地址：www.runoob.com\n创建 main.js 文件, 代码如下：\n```\nvar fs = require(\"fs\");\n\nfs.readFile('input.txt', function (err, data) {\n    if (err) return console.error(err);\n    console.log(data.toString());\n});\nconsole.log(\"程序执行结束!\");\n```\n以上代码执行结果如下：\n```\n$ node main.js\n程序执行结束!\n菜鸟教程官网地址：www.runoob.com\n```\n以上两个实例我们了解了阻塞与非阻塞调用的不同。第一个实例在文件读取完后才执行完程序。 第二个实例我们不需要等待文件读取完，这样就可以在读取文件时同时执行接下来的代码，大大提高了程序的性能。\n\n因此，阻塞是按顺序执行的，而非阻塞是不需要按顺序的，所以如果需要处理回调函数的参数，我们就需要写在回调函数内。\n### Node.js 事件循环\nNode.js 是单进程单线程应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。\n\nNode.js 几乎每一个 API 都是支持回调函数的。\n\nNode.js 基本上所有的事件机制都是用设计模式中观察者模式实现。\n\nNode.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.\n#### 事件驱动程序\nNode.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。\n\n当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。\n\n这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）\n\n在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。\n![event_loop.jpg](event_loop.jpg)\n整个事件驱动的流程就是这么实现的，非常简洁。有点类似于观察者模式，事件相当于一个主题(Subject)，而所有注册到这个事件上的处理函数相当于观察者(Observer)。\n\nNode.js 有多个内置的事件，我们可以通过引入 events 模块，并通过实例化 EventEmitter 类来绑定和监听事件，如下实例：\n```\n// 引入 events 模块\nvar events = require('events');\n// 创建 eventEmitter 对象\nvar eventEmitter = new events.EventEmitter();\n```\n下程序绑定事件处理程序：\n```\n// 绑定事件及事件的处理程序\neventEmitter.on('eventName', eventHandler);\n```\n我们可以通过程序触发事件：\n```\n// 触发事件\neventEmitter.emit('eventName');\n```\n实例\n创建 main.js 文件，代码如下所示：\n\n实例\n```\n// 引入 events 模块\nvar events = require('events');\n// 创建 eventEmitter 对象\nvar eventEmitter = new events.EventEmitter();\n \n// 创建事件处理程序\nvar connectHandler = function connected() {\n   console.log('连接成功。');\n  \n   // 触发 data_received 事件 \n   eventEmitter.emit('data_received');\n}\n \n// 绑定 connection 事件处理程序\neventEmitter.on('connection', connectHandler);\n \n// 使用匿名函数绑定 data_received 事件\neventEmitter.on('data_received', function(){\n   console.log('数据接收成功。');\n});\n \n// 触发 connection 事件 \neventEmitter.emit('connection');\n \nconsole.log(\"程序执行完毕。\");\n```\n接下来让我们执行以上代码：\n```\n$ node main.js\n连接成功。\n数据接收成功。\n程序执行完毕。\n```\n### Node.js EventEmitter\nNode.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。\n\nNode.js 里面的许多对象都会分发事件：一个 net.Server 对象会在每次有新连接时触发一个事件， 一个 fs.readStream 对象会在文件被打开的时候触发一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。\n#### EventEmitter 类\nevents 模块只提供了一个对象： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。\n\n你可以通过require(\"events\");来访问该模块。\n```\n// 引入 events 模块\nvar events = require('events');\n// 创建 eventEmitter 对象\nvar eventEmitter = new events.EventEmitter();\n```\nEventEmitter 对象如果在实例化时发生错误，会触发 error 事件。当添加新的监听器时，newListener 事件会触发，当监听器被移除时，removeListener 事件被触发。\n\n下面我们用一个简单的例子说明 EventEmitter 的用法：\n```\n//event.js 文件\nvar EventEmitter = require('events').EventEmitter; \nvar event = new EventEmitter(); \nevent.on('some_event', function() { \n    console.log('some_event 事件触发'); \n}); \nsetTimeout(function() { \n    event.emit('some_event'); \n}, 1000); \n```\n执行结果如下：\n\n运行这段代码，1 秒后控制台输出了 'some_event 事件触发'。其原理是 event 对象注册了事件 some_event 的一个监听器，然后我们通过 setTimeout 在 1000 毫秒以后向 event 对象发送事件 some_event，此时会调用some_event 的监听器。\n```\n$ node event.js \nsome_event 事件触发\n```\nEventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，EventEmitter 支持 若干个事件监听器。\n\n当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。\n```\n//event.js 文件\nvar events = require('events'); \nvar emitter = new events.EventEmitter(); \nemitter.on('someEvent', function(arg1, arg2) { \n    console.log('listener1', arg1, arg2); \n}); \nemitter.on('someEvent', function(arg1, arg2) { \n    console.log('listener2', arg1, arg2); \n}); \nemitter.emit('someEvent', 'arg1 参数', 'arg2 参数'); \n```\n执行以上代码，运行的结果如下：\n```\n$ node event.js \nlistener1 arg1 参数 arg2 参数\nlistener2 arg1 参数 arg2 参数\n```\n以上例子中，emitter 为事件 someEvent 注册了两个事件监听器，然后触发了 someEvent 事件。\n\n运行结果中可以看到两个事件监听器回调函数被先后调用。 这就是EventEmitter最简单的用法。\n\nEventEmitter 提供了多个属性，如 on 和 emit。on 函数用于绑定事件函数，emit 属性用于触发一个事件。接下来我们来具体看下 EventEmitter 的属性介绍。\n#### 方法 ","source":"_posts/node2.md","raw":"---\ntitle: node基础(二)\ndate: 2019-08-09 14:38:25\ncategories:\n- Node\ntags: [Node.js]\n---\n### Node.js REPL(交互式解释器)\nNode.js REPL(Read Eval Print Loop:交互式解释器) 表示一个电脑的环境，类似 Window 系统的终端或 Unix/Linux shell，我们可以在终端中输入命令，并接收系统的响应。\n我们可以输入以下命令来启动 Node 的终端：\n```\n$ node\n> \n```\n停止 REPL\n前面我们已经提到按下两次 ctrl + c 键就能退出 REPL:\n```\n$ node\n>\n(^C again to quit)\n>\n```\n### Node.js 回调函数\nNode.js 异步编程的直接体现就是回调。\n\n异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。\n\n回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。\n\n例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。\n\n回调函数一般作为函数的最后一个参数出现：\n```\nfunction foo1(name, age, callback) { }\nfunction foo2(value, callback1, callback2) { }\n```\n#### 阻塞代码实例\n\n创建一个文件 input.txt ，内容如下：\n\n菜鸟教程官网地址：www.runoob.com\n创建 main.js 文件, 代码如下：\n```\nvar fs = require(\"fs\");\n\nvar data = fs.readFileSync('input.txt');\n\nconsole.log(data.toString());\nconsole.log(\"程序执行结束!\");\n```\n以上代码执行结果如下：\n```\n$ node main.js\n菜鸟教程官网地址：www.runoob.com\n\n程序执行结束!\n```\n非阻塞代码实例\n创建一个文件 input.txt ，内容如下：\n\n菜鸟教程官网地址：www.runoob.com\n创建 main.js 文件, 代码如下：\n```\nvar fs = require(\"fs\");\n\nfs.readFile('input.txt', function (err, data) {\n    if (err) return console.error(err);\n    console.log(data.toString());\n});\nconsole.log(\"程序执行结束!\");\n```\n以上代码执行结果如下：\n```\n$ node main.js\n程序执行结束!\n菜鸟教程官网地址：www.runoob.com\n```\n以上两个实例我们了解了阻塞与非阻塞调用的不同。第一个实例在文件读取完后才执行完程序。 第二个实例我们不需要等待文件读取完，这样就可以在读取文件时同时执行接下来的代码，大大提高了程序的性能。\n\n因此，阻塞是按顺序执行的，而非阻塞是不需要按顺序的，所以如果需要处理回调函数的参数，我们就需要写在回调函数内。\n### Node.js 事件循环\nNode.js 是单进程单线程应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。\n\nNode.js 几乎每一个 API 都是支持回调函数的。\n\nNode.js 基本上所有的事件机制都是用设计模式中观察者模式实现。\n\nNode.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.\n#### 事件驱动程序\nNode.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。\n\n当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。\n\n这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）\n\n在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。\n![event_loop.jpg](event_loop.jpg)\n整个事件驱动的流程就是这么实现的，非常简洁。有点类似于观察者模式，事件相当于一个主题(Subject)，而所有注册到这个事件上的处理函数相当于观察者(Observer)。\n\nNode.js 有多个内置的事件，我们可以通过引入 events 模块，并通过实例化 EventEmitter 类来绑定和监听事件，如下实例：\n```\n// 引入 events 模块\nvar events = require('events');\n// 创建 eventEmitter 对象\nvar eventEmitter = new events.EventEmitter();\n```\n下程序绑定事件处理程序：\n```\n// 绑定事件及事件的处理程序\neventEmitter.on('eventName', eventHandler);\n```\n我们可以通过程序触发事件：\n```\n// 触发事件\neventEmitter.emit('eventName');\n```\n实例\n创建 main.js 文件，代码如下所示：\n\n实例\n```\n// 引入 events 模块\nvar events = require('events');\n// 创建 eventEmitter 对象\nvar eventEmitter = new events.EventEmitter();\n \n// 创建事件处理程序\nvar connectHandler = function connected() {\n   console.log('连接成功。');\n  \n   // 触发 data_received 事件 \n   eventEmitter.emit('data_received');\n}\n \n// 绑定 connection 事件处理程序\neventEmitter.on('connection', connectHandler);\n \n// 使用匿名函数绑定 data_received 事件\neventEmitter.on('data_received', function(){\n   console.log('数据接收成功。');\n});\n \n// 触发 connection 事件 \neventEmitter.emit('connection');\n \nconsole.log(\"程序执行完毕。\");\n```\n接下来让我们执行以上代码：\n```\n$ node main.js\n连接成功。\n数据接收成功。\n程序执行完毕。\n```\n### Node.js EventEmitter\nNode.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。\n\nNode.js 里面的许多对象都会分发事件：一个 net.Server 对象会在每次有新连接时触发一个事件， 一个 fs.readStream 对象会在文件被打开的时候触发一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。\n#### EventEmitter 类\nevents 模块只提供了一个对象： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。\n\n你可以通过require(\"events\");来访问该模块。\n```\n// 引入 events 模块\nvar events = require('events');\n// 创建 eventEmitter 对象\nvar eventEmitter = new events.EventEmitter();\n```\nEventEmitter 对象如果在实例化时发生错误，会触发 error 事件。当添加新的监听器时，newListener 事件会触发，当监听器被移除时，removeListener 事件被触发。\n\n下面我们用一个简单的例子说明 EventEmitter 的用法：\n```\n//event.js 文件\nvar EventEmitter = require('events').EventEmitter; \nvar event = new EventEmitter(); \nevent.on('some_event', function() { \n    console.log('some_event 事件触发'); \n}); \nsetTimeout(function() { \n    event.emit('some_event'); \n}, 1000); \n```\n执行结果如下：\n\n运行这段代码，1 秒后控制台输出了 'some_event 事件触发'。其原理是 event 对象注册了事件 some_event 的一个监听器，然后我们通过 setTimeout 在 1000 毫秒以后向 event 对象发送事件 some_event，此时会调用some_event 的监听器。\n```\n$ node event.js \nsome_event 事件触发\n```\nEventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，EventEmitter 支持 若干个事件监听器。\n\n当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。\n```\n//event.js 文件\nvar events = require('events'); \nvar emitter = new events.EventEmitter(); \nemitter.on('someEvent', function(arg1, arg2) { \n    console.log('listener1', arg1, arg2); \n}); \nemitter.on('someEvent', function(arg1, arg2) { \n    console.log('listener2', arg1, arg2); \n}); \nemitter.emit('someEvent', 'arg1 参数', 'arg2 参数'); \n```\n执行以上代码，运行的结果如下：\n```\n$ node event.js \nlistener1 arg1 参数 arg2 参数\nlistener2 arg1 参数 arg2 参数\n```\n以上例子中，emitter 为事件 someEvent 注册了两个事件监听器，然后触发了 someEvent 事件。\n\n运行结果中可以看到两个事件监听器回调函数被先后调用。 这就是EventEmitter最简单的用法。\n\nEventEmitter 提供了多个属性，如 on 和 emit。on 函数用于绑定事件函数，emit 属性用于触发一个事件。接下来我们来具体看下 EventEmitter 的属性介绍。\n#### 方法 ","slug":"node2","published":1,"updated":"2019-08-10T09:39:36.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cv6002pt09zrcurg61r","content":"<h3 id=\"Node-js-REPL-交互式解释器\"><a href=\"#Node-js-REPL-交互式解释器\" class=\"headerlink\" title=\"Node.js REPL(交互式解释器)\"></a>Node.js REPL(交互式解释器)</h3><p>Node.js REPL(Read Eval Print Loop:交互式解释器) 表示一个电脑的环境，类似 Window 系统的终端或 Unix/Linux shell，我们可以在终端中输入命令，并接收系统的响应。<br>我们可以输入以下命令来启动 Node 的终端：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n<p>停止 REPL<br>前面我们已经提到按下两次 ctrl + c 键就能退出 REPL:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">(^C again to quit)</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Node-js-回调函数\"><a href=\"#Node-js-回调函数\" class=\"headerlink\" title=\"Node.js 回调函数\"></a>Node.js 回调函数</h3><p>Node.js 异步编程的直接体现就是回调。</p>\n<p>异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。</p>\n<p>回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。</p>\n<p>例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。</p>\n<p>回调函数一般作为函数的最后一个参数出现：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo1(name, age, callback) &#123; &#125;</span><br><span class=\"line\">function foo2(value, callback1, callback2) &#123; &#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"阻塞代码实例\"><a href=\"#阻塞代码实例\" class=\"headerlink\" title=\"阻塞代码实例\"></a>阻塞代码实例</h4><p>创建一个文件 input.txt ，内容如下：</p>\n<p>菜鸟教程官网地址：<a href=\"http://www.runoob.com\" target=\"_blank\" rel=\"noopener\">www.runoob.com</a><br>创建 main.js 文件, 代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">var data = fs.readFileSync(&apos;input.txt&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(data.toString());</span><br><span class=\"line\">console.log(&quot;程序执行结束!&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>以上代码执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node main.js</span><br><span class=\"line\">菜鸟教程官网地址：www.runoob.com</span><br><span class=\"line\"></span><br><span class=\"line\">程序执行结束!</span><br></pre></td></tr></table></figure></p>\n<p>非阻塞代码实例<br>创建一个文件 input.txt ，内容如下：</p>\n<p>菜鸟教程官网地址：<a href=\"http://www.runoob.com\" target=\"_blank\" rel=\"noopener\">www.runoob.com</a><br>创建 main.js 文件, 代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(&apos;input.txt&apos;, function (err, data) &#123;</span><br><span class=\"line\">    if (err) return console.error(err);</span><br><span class=\"line\">    console.log(data.toString());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(&quot;程序执行结束!&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>以上代码执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node main.js</span><br><span class=\"line\">程序执行结束!</span><br><span class=\"line\">菜鸟教程官网地址：www.runoob.com</span><br></pre></td></tr></table></figure></p>\n<p>以上两个实例我们了解了阻塞与非阻塞调用的不同。第一个实例在文件读取完后才执行完程序。 第二个实例我们不需要等待文件读取完，这样就可以在读取文件时同时执行接下来的代码，大大提高了程序的性能。</p>\n<p>因此，阻塞是按顺序执行的，而非阻塞是不需要按顺序的，所以如果需要处理回调函数的参数，我们就需要写在回调函数内。</p>\n<h3 id=\"Node-js-事件循环\"><a href=\"#Node-js-事件循环\" class=\"headerlink\" title=\"Node.js 事件循环\"></a>Node.js 事件循环</h3><p>Node.js 是单进程单线程应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。</p>\n<p>Node.js 几乎每一个 API 都是支持回调函数的。</p>\n<p>Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。</p>\n<p>Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.</p>\n<h4 id=\"事件驱动程序\"><a href=\"#事件驱动程序\" class=\"headerlink\" title=\"事件驱动程序\"></a>事件驱动程序</h4><p>Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。</p>\n<p>当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。</p>\n<p>这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）</p>\n<p>在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。<br><img src=\"/2019/08/09/node2/event_loop.jpg\" alt=\"event_loop.jpg\"><br>整个事件驱动的流程就是这么实现的，非常简洁。有点类似于观察者模式，事件相当于一个主题(Subject)，而所有注册到这个事件上的处理函数相当于观察者(Observer)。</p>\n<p>Node.js 有多个内置的事件，我们可以通过引入 events 模块，并通过实例化 EventEmitter 类来绑定和监听事件，如下实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 引入 events 模块</span><br><span class=\"line\">var events = require(&apos;events&apos;);</span><br><span class=\"line\">// 创建 eventEmitter 对象</span><br><span class=\"line\">var eventEmitter = new events.EventEmitter();</span><br></pre></td></tr></table></figure></p>\n<p>下程序绑定事件处理程序：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 绑定事件及事件的处理程序</span><br><span class=\"line\">eventEmitter.on(&apos;eventName&apos;, eventHandler);</span><br></pre></td></tr></table></figure></p>\n<p>我们可以通过程序触发事件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 触发事件</span><br><span class=\"line\">eventEmitter.emit(&apos;eventName&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>实例<br>创建 main.js 文件，代码如下所示：</p>\n<p>实例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 引入 events 模块</span><br><span class=\"line\">var events = require(&apos;events&apos;);</span><br><span class=\"line\">// 创建 eventEmitter 对象</span><br><span class=\"line\">var eventEmitter = new events.EventEmitter();</span><br><span class=\"line\"> </span><br><span class=\"line\">// 创建事件处理程序</span><br><span class=\"line\">var connectHandler = function connected() &#123;</span><br><span class=\"line\">   console.log(&apos;连接成功。&apos;);</span><br><span class=\"line\">  </span><br><span class=\"line\">   // 触发 data_received 事件 </span><br><span class=\"line\">   eventEmitter.emit(&apos;data_received&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">// 绑定 connection 事件处理程序</span><br><span class=\"line\">eventEmitter.on(&apos;connection&apos;, connectHandler);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 使用匿名函数绑定 data_received 事件</span><br><span class=\"line\">eventEmitter.on(&apos;data_received&apos;, function()&#123;</span><br><span class=\"line\">   console.log(&apos;数据接收成功。&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 触发 connection 事件 </span><br><span class=\"line\">eventEmitter.emit(&apos;connection&apos;);</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(&quot;程序执行完毕。&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>接下来让我们执行以上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node main.js</span><br><span class=\"line\">连接成功。</span><br><span class=\"line\">数据接收成功。</span><br><span class=\"line\">程序执行完毕。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Node-js-EventEmitter\"><a href=\"#Node-js-EventEmitter\" class=\"headerlink\" title=\"Node.js EventEmitter\"></a>Node.js EventEmitter</h3><p>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。</p>\n<p>Node.js 里面的许多对象都会分发事件：一个 net.Server 对象会在每次有新连接时触发一个事件， 一个 fs.readStream 对象会在文件被打开的时候触发一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。</p>\n<h4 id=\"EventEmitter-类\"><a href=\"#EventEmitter-类\" class=\"headerlink\" title=\"EventEmitter 类\"></a>EventEmitter 类</h4><p>events 模块只提供了一个对象： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。</p>\n<p>你可以通过require(“events”);来访问该模块。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 引入 events 模块</span><br><span class=\"line\">var events = require(&apos;events&apos;);</span><br><span class=\"line\">// 创建 eventEmitter 对象</span><br><span class=\"line\">var eventEmitter = new events.EventEmitter();</span><br></pre></td></tr></table></figure></p>\n<p>EventEmitter 对象如果在实例化时发生错误，会触发 error 事件。当添加新的监听器时，newListener 事件会触发，当监听器被移除时，removeListener 事件被触发。</p>\n<p>下面我们用一个简单的例子说明 EventEmitter 的用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//event.js 文件</span><br><span class=\"line\">var EventEmitter = require(&apos;events&apos;).EventEmitter; </span><br><span class=\"line\">var event = new EventEmitter(); </span><br><span class=\"line\">event.on(&apos;some_event&apos;, function() &#123; </span><br><span class=\"line\">    console.log(&apos;some_event 事件触发&apos;); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">setTimeout(function() &#123; </span><br><span class=\"line\">    event.emit(&apos;some_event&apos;); </span><br><span class=\"line\">&#125;, 1000);</span><br></pre></td></tr></table></figure></p>\n<p>执行结果如下：</p>\n<p>运行这段代码，1 秒后控制台输出了 ‘some_event 事件触发’。其原理是 event 对象注册了事件 some_event 的一个监听器，然后我们通过 setTimeout 在 1000 毫秒以后向 event 对象发送事件 some_event，此时会调用some_event 的监听器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node event.js </span><br><span class=\"line\">some_event 事件触发</span><br></pre></td></tr></table></figure></p>\n<p>EventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，EventEmitter 支持 若干个事件监听器。</p>\n<p>当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//event.js 文件</span><br><span class=\"line\">var events = require(&apos;events&apos;); </span><br><span class=\"line\">var emitter = new events.EventEmitter(); </span><br><span class=\"line\">emitter.on(&apos;someEvent&apos;, function(arg1, arg2) &#123; </span><br><span class=\"line\">    console.log(&apos;listener1&apos;, arg1, arg2); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">emitter.on(&apos;someEvent&apos;, function(arg1, arg2) &#123; </span><br><span class=\"line\">    console.log(&apos;listener2&apos;, arg1, arg2); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">emitter.emit(&apos;someEvent&apos;, &apos;arg1 参数&apos;, &apos;arg2 参数&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>执行以上代码，运行的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node event.js </span><br><span class=\"line\">listener1 arg1 参数 arg2 参数</span><br><span class=\"line\">listener2 arg1 参数 arg2 参数</span><br></pre></td></tr></table></figure></p>\n<p>以上例子中，emitter 为事件 someEvent 注册了两个事件监听器，然后触发了 someEvent 事件。</p>\n<p>运行结果中可以看到两个事件监听器回调函数被先后调用。 这就是EventEmitter最简单的用法。</p>\n<p>EventEmitter 提供了多个属性，如 on 和 emit。on 函数用于绑定事件函数，emit 属性用于触发一个事件。接下来我们来具体看下 EventEmitter 的属性介绍。</p>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Node-js-REPL-交互式解释器\"><a href=\"#Node-js-REPL-交互式解释器\" class=\"headerlink\" title=\"Node.js REPL(交互式解释器)\"></a>Node.js REPL(交互式解释器)</h3><p>Node.js REPL(Read Eval Print Loop:交互式解释器) 表示一个电脑的环境，类似 Window 系统的终端或 Unix/Linux shell，我们可以在终端中输入命令，并接收系统的响应。<br>我们可以输入以下命令来启动 Node 的终端：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n<p>停止 REPL<br>前面我们已经提到按下两次 ctrl + c 键就能退出 REPL:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">(^C again to quit)</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Node-js-回调函数\"><a href=\"#Node-js-回调函数\" class=\"headerlink\" title=\"Node.js 回调函数\"></a>Node.js 回调函数</h3><p>Node.js 异步编程的直接体现就是回调。</p>\n<p>异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。</p>\n<p>回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。</p>\n<p>例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。</p>\n<p>回调函数一般作为函数的最后一个参数出现：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function foo1(name, age, callback) &#123; &#125;</span><br><span class=\"line\">function foo2(value, callback1, callback2) &#123; &#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"阻塞代码实例\"><a href=\"#阻塞代码实例\" class=\"headerlink\" title=\"阻塞代码实例\"></a>阻塞代码实例</h4><p>创建一个文件 input.txt ，内容如下：</p>\n<p>菜鸟教程官网地址：<a href=\"http://www.runoob.com\" target=\"_blank\" rel=\"noopener\">www.runoob.com</a><br>创建 main.js 文件, 代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">var data = fs.readFileSync(&apos;input.txt&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(data.toString());</span><br><span class=\"line\">console.log(&quot;程序执行结束!&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>以上代码执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node main.js</span><br><span class=\"line\">菜鸟教程官网地址：www.runoob.com</span><br><span class=\"line\"></span><br><span class=\"line\">程序执行结束!</span><br></pre></td></tr></table></figure></p>\n<p>非阻塞代码实例<br>创建一个文件 input.txt ，内容如下：</p>\n<p>菜鸟教程官网地址：<a href=\"http://www.runoob.com\" target=\"_blank\" rel=\"noopener\">www.runoob.com</a><br>创建 main.js 文件, 代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fs = require(&quot;fs&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(&apos;input.txt&apos;, function (err, data) &#123;</span><br><span class=\"line\">    if (err) return console.error(err);</span><br><span class=\"line\">    console.log(data.toString());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(&quot;程序执行结束!&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>以上代码执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node main.js</span><br><span class=\"line\">程序执行结束!</span><br><span class=\"line\">菜鸟教程官网地址：www.runoob.com</span><br></pre></td></tr></table></figure></p>\n<p>以上两个实例我们了解了阻塞与非阻塞调用的不同。第一个实例在文件读取完后才执行完程序。 第二个实例我们不需要等待文件读取完，这样就可以在读取文件时同时执行接下来的代码，大大提高了程序的性能。</p>\n<p>因此，阻塞是按顺序执行的，而非阻塞是不需要按顺序的，所以如果需要处理回调函数的参数，我们就需要写在回调函数内。</p>\n<h3 id=\"Node-js-事件循环\"><a href=\"#Node-js-事件循环\" class=\"headerlink\" title=\"Node.js 事件循环\"></a>Node.js 事件循环</h3><p>Node.js 是单进程单线程应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。</p>\n<p>Node.js 几乎每一个 API 都是支持回调函数的。</p>\n<p>Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。</p>\n<p>Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.</p>\n<h4 id=\"事件驱动程序\"><a href=\"#事件驱动程序\" class=\"headerlink\" title=\"事件驱动程序\"></a>事件驱动程序</h4><p>Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。</p>\n<p>当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。</p>\n<p>这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）</p>\n<p>在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。<br><img src=\"/2019/08/09/node2/event_loop.jpg\" alt=\"event_loop.jpg\"><br>整个事件驱动的流程就是这么实现的，非常简洁。有点类似于观察者模式，事件相当于一个主题(Subject)，而所有注册到这个事件上的处理函数相当于观察者(Observer)。</p>\n<p>Node.js 有多个内置的事件，我们可以通过引入 events 模块，并通过实例化 EventEmitter 类来绑定和监听事件，如下实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 引入 events 模块</span><br><span class=\"line\">var events = require(&apos;events&apos;);</span><br><span class=\"line\">// 创建 eventEmitter 对象</span><br><span class=\"line\">var eventEmitter = new events.EventEmitter();</span><br></pre></td></tr></table></figure></p>\n<p>下程序绑定事件处理程序：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 绑定事件及事件的处理程序</span><br><span class=\"line\">eventEmitter.on(&apos;eventName&apos;, eventHandler);</span><br></pre></td></tr></table></figure></p>\n<p>我们可以通过程序触发事件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 触发事件</span><br><span class=\"line\">eventEmitter.emit(&apos;eventName&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>实例<br>创建 main.js 文件，代码如下所示：</p>\n<p>实例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 引入 events 模块</span><br><span class=\"line\">var events = require(&apos;events&apos;);</span><br><span class=\"line\">// 创建 eventEmitter 对象</span><br><span class=\"line\">var eventEmitter = new events.EventEmitter();</span><br><span class=\"line\"> </span><br><span class=\"line\">// 创建事件处理程序</span><br><span class=\"line\">var connectHandler = function connected() &#123;</span><br><span class=\"line\">   console.log(&apos;连接成功。&apos;);</span><br><span class=\"line\">  </span><br><span class=\"line\">   // 触发 data_received 事件 </span><br><span class=\"line\">   eventEmitter.emit(&apos;data_received&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">// 绑定 connection 事件处理程序</span><br><span class=\"line\">eventEmitter.on(&apos;connection&apos;, connectHandler);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 使用匿名函数绑定 data_received 事件</span><br><span class=\"line\">eventEmitter.on(&apos;data_received&apos;, function()&#123;</span><br><span class=\"line\">   console.log(&apos;数据接收成功。&apos;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 触发 connection 事件 </span><br><span class=\"line\">eventEmitter.emit(&apos;connection&apos;);</span><br><span class=\"line\"> </span><br><span class=\"line\">console.log(&quot;程序执行完毕。&quot;);</span><br></pre></td></tr></table></figure></p>\n<p>接下来让我们执行以上代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node main.js</span><br><span class=\"line\">连接成功。</span><br><span class=\"line\">数据接收成功。</span><br><span class=\"line\">程序执行完毕。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Node-js-EventEmitter\"><a href=\"#Node-js-EventEmitter\" class=\"headerlink\" title=\"Node.js EventEmitter\"></a>Node.js EventEmitter</h3><p>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。</p>\n<p>Node.js 里面的许多对象都会分发事件：一个 net.Server 对象会在每次有新连接时触发一个事件， 一个 fs.readStream 对象会在文件被打开的时候触发一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。</p>\n<h4 id=\"EventEmitter-类\"><a href=\"#EventEmitter-类\" class=\"headerlink\" title=\"EventEmitter 类\"></a>EventEmitter 类</h4><p>events 模块只提供了一个对象： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。</p>\n<p>你可以通过require(“events”);来访问该模块。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 引入 events 模块</span><br><span class=\"line\">var events = require(&apos;events&apos;);</span><br><span class=\"line\">// 创建 eventEmitter 对象</span><br><span class=\"line\">var eventEmitter = new events.EventEmitter();</span><br></pre></td></tr></table></figure></p>\n<p>EventEmitter 对象如果在实例化时发生错误，会触发 error 事件。当添加新的监听器时，newListener 事件会触发，当监听器被移除时，removeListener 事件被触发。</p>\n<p>下面我们用一个简单的例子说明 EventEmitter 的用法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//event.js 文件</span><br><span class=\"line\">var EventEmitter = require(&apos;events&apos;).EventEmitter; </span><br><span class=\"line\">var event = new EventEmitter(); </span><br><span class=\"line\">event.on(&apos;some_event&apos;, function() &#123; </span><br><span class=\"line\">    console.log(&apos;some_event 事件触发&apos;); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">setTimeout(function() &#123; </span><br><span class=\"line\">    event.emit(&apos;some_event&apos;); </span><br><span class=\"line\">&#125;, 1000);</span><br></pre></td></tr></table></figure></p>\n<p>执行结果如下：</p>\n<p>运行这段代码，1 秒后控制台输出了 ‘some_event 事件触发’。其原理是 event 对象注册了事件 some_event 的一个监听器，然后我们通过 setTimeout 在 1000 毫秒以后向 event 对象发送事件 some_event，此时会调用some_event 的监听器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node event.js </span><br><span class=\"line\">some_event 事件触发</span><br></pre></td></tr></table></figure></p>\n<p>EventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，EventEmitter 支持 若干个事件监听器。</p>\n<p>当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//event.js 文件</span><br><span class=\"line\">var events = require(&apos;events&apos;); </span><br><span class=\"line\">var emitter = new events.EventEmitter(); </span><br><span class=\"line\">emitter.on(&apos;someEvent&apos;, function(arg1, arg2) &#123; </span><br><span class=\"line\">    console.log(&apos;listener1&apos;, arg1, arg2); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">emitter.on(&apos;someEvent&apos;, function(arg1, arg2) &#123; </span><br><span class=\"line\">    console.log(&apos;listener2&apos;, arg1, arg2); </span><br><span class=\"line\">&#125;); </span><br><span class=\"line\">emitter.emit(&apos;someEvent&apos;, &apos;arg1 参数&apos;, &apos;arg2 参数&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>执行以上代码，运行的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node event.js </span><br><span class=\"line\">listener1 arg1 参数 arg2 参数</span><br><span class=\"line\">listener2 arg1 参数 arg2 参数</span><br></pre></td></tr></table></figure></p>\n<p>以上例子中，emitter 为事件 someEvent 注册了两个事件监听器，然后触发了 someEvent 事件。</p>\n<p>运行结果中可以看到两个事件监听器回调函数被先后调用。 这就是EventEmitter最简单的用法。</p>\n<p>EventEmitter 提供了多个属性，如 on 和 emit。on 函数用于绑定事件函数，emit 属性用于触发一个事件。接下来我们来具体看下 EventEmitter 的属性介绍。</p>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4>"},{"title":"node基础(一)","date":"2019-08-08T03:09:06.000Z","_content":"<font color=\"red\">JavaScript的后端开发</font>\n在Node上运行的JavaScript相比其他后端开发语言有何优势？\n最大的优势是借助JavaScript天生的事件驱动机制加V8高性能引擎，使编写高性能Web服务轻而易举\n\n### 安装Node.js和npm\n由于Node.js平台是在后端运行JavaScript代码，所以，必须首先在本机安装Node环境。\n#### 安装Node.js\n从Node.js官网下载对应平台的安装程序\n安装完成后，在Windows环境下，请打开命令提示符，然后输入node -v，如果安装正常，你应该看到v7.6.0这样的输出：\n```\nC:\\Users\\IEUser>node -v\nv7.6.0\n```\n#### npm\n在正式开始Node.js学习之前，我们先认识一下npm。\n\nnpm是什么东东？npm其实是Node.js的包管理工具（package manager）。\n\n为啥我们需要一个包管理工具呢？因为我们在Node.js上开发时，会用到很多别人写的JavaScript代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生：大家都把自己开发的模块打包后放到npm官网上，如果要使用，直接通过npm安装就可以直接用，不用管代码存在哪，应该从哪下载。\n\n更重要的是，如果我们要使用模块A，而模块A又依赖于模块B，模块B又依赖于模块X和模块Y，npm可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。\n\n讲了这么多，npm究竟在哪？\n\n其实npm已经在Node.js安装的时候顺带装好了。我们在命令提示符或者终端输入npm -v，应该看到类似的输出：\n```\nC:\\>npm -v\n4.1.2\n```\n如果直接输入npm，你会看到类似下面的输出：\n```\nC:\\> npm\n\nUsage: npm <command>\n\nwhere <command> is one of:\n```\n##### 卸载模块\n我们可以使用以下命令来卸载 Node.js 模块。\n\n$ npm uninstall express\n卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：\n\n$ npm ls\n##### 更新模块\n我们可以使用以下命令更新模块：\n\n$ npm update express\n##### 搜索模块\n使用以下来搜索模块：\n$ npm search express\n\n##### NPM 常用命令\n* NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。\n* 使用npm help <command>可查看某条命令的详细帮助，例如npm help install。\n* 在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。\n* 使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。\n* 使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。\n* 使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。\n* 使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。\n\n使用淘宝 NPM 镜像\n```\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n这样就可以使用 cnpm 命令来安装模块了：\n```\n$ cnpm install [name]\n```\n#### 小结\n请在本机安装Node.js环境，并确保node和npm能正常运行。\n\n### 第一个Node程序\n\n用文本编辑器写JavaScript程序，然后保存为后缀为.js的文件，就可以用node直接运行这个程序了。\n\nNode的交互模式和直接运行.js文件有什么区别呢？\n\n直接输入node进入交互模式，相当于启动了Node解释器，但是等待你一行一行地输入源代码，每输入一行就执行一行。\n\n直接运行node hello.js文件相当于启动了Node解释器，然后一次性把hello.js文件的源代码给执行了，你是没有机会以交互的方式输入源代码的。\n\n在编写JavaScript代码的时候，完全可以一边在文本编辑器里写代码，一边开一个Node交互式命令窗口，在写代码的过程中，把部分代码粘到命令行去验证，事半功倍！前提是得有个27'的超大显示器！\n### 搭建Node开发环境\n使用文本编辑器来开发Node程序，最大的缺点是效率太低，运行Node程序还需要在命令行单独敲命令。如果还需要调试程序，就更加麻烦了。\n\n所以我们需要一个IDE集成开发环境，让我们能在一个环境里编码、运行、调试，这样就可以大大提升开发效率。\n\nJava的集成开发环境有Eclipse，Intellij idea等，C#的集成开发环境有Visual Studio，那么问题又来了：Node.js的集成开发环境到底哪家强？\n\n考察Node.js的集成开发环境，重点放在启动速度快，执行简单，调试方便这三点上。当然，免费使用是一个加分项。\n\n综合考察后，我们隆重向大家推荐Node.js集成开发环境： vscode\nVisual Studio Code由微软出品，但它不是那个大块头的Visual Studio，它是一个精简版的迷你Visual Studio，并且，Visual Studio Code可以跨！平！台！Windows、Mac和Linux通用。\n\n运行和调试JavaScript\n在VS Code中，我们可以非常方便地运行JavaScript文件。\n\nVS Code以文件夹作为工程目录（Workspace Dir），所有的JavaScript文件都存放在该目录下。此外，VS Code在工程目录下还需要一个.vscode的配置目录，里面存放里VS Code需要的配置文件。\n\n假设我们在C:\\Work\\目录下创建了一个hello目录作为工程目录，并编写了一个hello.js文件，则该工程目录的结构如下：\n```\nhello/ <-- workspace dir\n|\n+- hello.js <-- JavaScript file\n|\n+- .vscode/  <-- VS Code config\n   |\n   +- launch.json <-- VS Code config file for JavaScript\n```\n可以用VS Code快速创建launch.json，然后修改如下：\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Run hello.js\",\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceRoot}/hello.js\",\n            \"stopOnEntry\": false,\n            \"args\": [],\n            \"cwd\": \"${workspaceRoot}\",\n            \"preLaunchTask\": null,\n            \"runtimeExecutable\": null,\n            \"runtimeArgs\": [\n                \"--nolazy\"\n            ],\n            \"env\": {\n                \"NODE_ENV\": \"development\"\n            },\n            \"externalConsole\": false,\n            \"sourceMaps\": false,\n            \"outDir\": null\n        }\n    ]\n}\n```\n有了配置文件，即可使用VS Code调试JavaScript。\n### 模块\n在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。\n\n为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在Node环境中，一个.js文件就称之为一个模块（module）。\n\n使用模块有什么好处？\n\n最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括Node内置的模块和来自第三方的模块。\n\n使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。\n\n在上一节，我们编写了一个hello.js文件，这个hello.js文件就是一个模块，模块的名字就是文件名（去掉.js后缀），所以hello.js文件就是名为hello的模块。\n\n我们把hello.js改造一下，创建一个函数，这样我们就可以在其他地方调用这个函数：\n```\n'use strict';\n\nvar s = 'Hello';\n\nfunction greet(name) {\n    console.log(s + ', ' + name + '!');\n}\n\nmodule.exports = greet;\n```\n函数greet()是我们在hello模块中定义的，你可能注意到最后一行是一个奇怪的赋值语句，它的意思是，把函数greet作为模块的输出暴露出去，这样其他模块就可以使用greet函数了。\n\n问题是其他模块怎么使用hello模块的这个greet函数呢？我们再编写一个main.js文件，调用hello模块的greet函数：\n```\n'use strict';\n\n// 引入hello模块:\nvar greet = require('./hello');\n\nvar s = 'Michael';\n\ngreet(s); // Hello, Michael!\n```\n注意到引入hello模块用Node提供的require函数：\n```\nvar greet = require('./hello');\n```\n引入的模块作为变量保存在greet变量中，那greet变量到底是什么东西？其实变量greet就是在hello.js中我们用module.exports = greet;输出的greet函数。所以，main.js就成功地引用了hello.js模块中定义的greet()函数，接下来就可以直接使用它了。\n\n在使用require()引入模块的时候，请注意模块的相对路径。因为main.js和hello.js位于同一个目录，所以我们用了当前目录.：\n```\nvar greet = require('./hello'); // 不要忘了写相对目录!\n```\n如果只写模块名：\n```\nvar greet = require('hello');\n```\n则Node会依次在内置模块、全局模块和当前模块下查找hello.js，你很可能会得到一个错误：\n```\nmodule.js\n    throw err;\n          ^\nError: Cannot find module 'hello'\n    at Function.Module._resolveFilename\n    at Function.Module._load\n    ...\n    at Function.Module._load\n    at Function.Module.runMain\n```\n遇到这个错误，你要检查：\n\n* 模块名是否写对了；\n* 模块文件是否存在；\n* 相对路径是否写对了。\n\n#### CommonJS规范\n这种模块加载机制被称为CommonJS规范。在这个规范下，每个.js文件都是一个模块，它们内部各自使用的变量名和函数名都互不冲突，例如，hello.js和main.js都申明了全局变量var s = 'xxx'，但互不影响。\n\n一个模块想要对外暴露变量（函数也是变量），可以用module.exports = variable;，一个模块要引用其他模块暴露的变量，用var ref = require('module_name');就拿到了引用模块的变量。\n#### 结论\n要在模块中对外输出变量，用：\n```\nmodule.exports = variable;\n```\n输出的变量可以是任意对象、函数、数组等等。\n\n要引入其他模块输出的对象，用：\n```\nvar foo = require('other_module');\n```\n引入的对象具体是什么，取决于引入模块输出的对象。\n\n#### module.exports vs exports\n很多时候，你会看到，在Node环境中，有两种方法可以在一个模块中输出变量：\n\n方法一：对module.exports赋值：\n```\n// hello.js\n\nfunction hello() {\n    console.log('Hello, world!');\n}\n\nfunction greet(name) {\n    console.log('Hello, ' + name + '!');\n}\n\nmodule.exports = {\n    hello: hello,\n    greet: greet\n};\n```\n方法二：直接使用exports：\n```\n// hello.js\n\nfunction hello() {\n    console.log('Hello, world!');\n}\n\nfunction greet(name) {\n    console.log('Hello, ' + name + '!');\n}\n\nfunction hello() {\n    console.log('Hello, world!');\n}\n\nexports.hello = hello;\nexports.greet = greet;\n```\n但是你不可以直接对exports赋值：\n```\n// 代码可以执行，但是模块并没有输出任何变量:\nexports = {\n    hello: hello,\n    greet: greet\n}\n```","source":"_posts/node1.md","raw":"---\ntitle: node基础(一)\ndate: 2019-08-08 11:09:06\ncategories:\n- Node\ntags: [Node.js]\n---\n<font color=\"red\">JavaScript的后端开发</font>\n在Node上运行的JavaScript相比其他后端开发语言有何优势？\n最大的优势是借助JavaScript天生的事件驱动机制加V8高性能引擎，使编写高性能Web服务轻而易举\n\n### 安装Node.js和npm\n由于Node.js平台是在后端运行JavaScript代码，所以，必须首先在本机安装Node环境。\n#### 安装Node.js\n从Node.js官网下载对应平台的安装程序\n安装完成后，在Windows环境下，请打开命令提示符，然后输入node -v，如果安装正常，你应该看到v7.6.0这样的输出：\n```\nC:\\Users\\IEUser>node -v\nv7.6.0\n```\n#### npm\n在正式开始Node.js学习之前，我们先认识一下npm。\n\nnpm是什么东东？npm其实是Node.js的包管理工具（package manager）。\n\n为啥我们需要一个包管理工具呢？因为我们在Node.js上开发时，会用到很多别人写的JavaScript代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生：大家都把自己开发的模块打包后放到npm官网上，如果要使用，直接通过npm安装就可以直接用，不用管代码存在哪，应该从哪下载。\n\n更重要的是，如果我们要使用模块A，而模块A又依赖于模块B，模块B又依赖于模块X和模块Y，npm可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。\n\n讲了这么多，npm究竟在哪？\n\n其实npm已经在Node.js安装的时候顺带装好了。我们在命令提示符或者终端输入npm -v，应该看到类似的输出：\n```\nC:\\>npm -v\n4.1.2\n```\n如果直接输入npm，你会看到类似下面的输出：\n```\nC:\\> npm\n\nUsage: npm <command>\n\nwhere <command> is one of:\n```\n##### 卸载模块\n我们可以使用以下命令来卸载 Node.js 模块。\n\n$ npm uninstall express\n卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：\n\n$ npm ls\n##### 更新模块\n我们可以使用以下命令更新模块：\n\n$ npm update express\n##### 搜索模块\n使用以下来搜索模块：\n$ npm search express\n\n##### NPM 常用命令\n* NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。\n* 使用npm help <command>可查看某条命令的详细帮助，例如npm help install。\n* 在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。\n* 使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。\n* 使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。\n* 使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。\n* 使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。\n\n使用淘宝 NPM 镜像\n```\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n这样就可以使用 cnpm 命令来安装模块了：\n```\n$ cnpm install [name]\n```\n#### 小结\n请在本机安装Node.js环境，并确保node和npm能正常运行。\n\n### 第一个Node程序\n\n用文本编辑器写JavaScript程序，然后保存为后缀为.js的文件，就可以用node直接运行这个程序了。\n\nNode的交互模式和直接运行.js文件有什么区别呢？\n\n直接输入node进入交互模式，相当于启动了Node解释器，但是等待你一行一行地输入源代码，每输入一行就执行一行。\n\n直接运行node hello.js文件相当于启动了Node解释器，然后一次性把hello.js文件的源代码给执行了，你是没有机会以交互的方式输入源代码的。\n\n在编写JavaScript代码的时候，完全可以一边在文本编辑器里写代码，一边开一个Node交互式命令窗口，在写代码的过程中，把部分代码粘到命令行去验证，事半功倍！前提是得有个27'的超大显示器！\n### 搭建Node开发环境\n使用文本编辑器来开发Node程序，最大的缺点是效率太低，运行Node程序还需要在命令行单独敲命令。如果还需要调试程序，就更加麻烦了。\n\n所以我们需要一个IDE集成开发环境，让我们能在一个环境里编码、运行、调试，这样就可以大大提升开发效率。\n\nJava的集成开发环境有Eclipse，Intellij idea等，C#的集成开发环境有Visual Studio，那么问题又来了：Node.js的集成开发环境到底哪家强？\n\n考察Node.js的集成开发环境，重点放在启动速度快，执行简单，调试方便这三点上。当然，免费使用是一个加分项。\n\n综合考察后，我们隆重向大家推荐Node.js集成开发环境： vscode\nVisual Studio Code由微软出品，但它不是那个大块头的Visual Studio，它是一个精简版的迷你Visual Studio，并且，Visual Studio Code可以跨！平！台！Windows、Mac和Linux通用。\n\n运行和调试JavaScript\n在VS Code中，我们可以非常方便地运行JavaScript文件。\n\nVS Code以文件夹作为工程目录（Workspace Dir），所有的JavaScript文件都存放在该目录下。此外，VS Code在工程目录下还需要一个.vscode的配置目录，里面存放里VS Code需要的配置文件。\n\n假设我们在C:\\Work\\目录下创建了一个hello目录作为工程目录，并编写了一个hello.js文件，则该工程目录的结构如下：\n```\nhello/ <-- workspace dir\n|\n+- hello.js <-- JavaScript file\n|\n+- .vscode/  <-- VS Code config\n   |\n   +- launch.json <-- VS Code config file for JavaScript\n```\n可以用VS Code快速创建launch.json，然后修改如下：\n```\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Run hello.js\",\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceRoot}/hello.js\",\n            \"stopOnEntry\": false,\n            \"args\": [],\n            \"cwd\": \"${workspaceRoot}\",\n            \"preLaunchTask\": null,\n            \"runtimeExecutable\": null,\n            \"runtimeArgs\": [\n                \"--nolazy\"\n            ],\n            \"env\": {\n                \"NODE_ENV\": \"development\"\n            },\n            \"externalConsole\": false,\n            \"sourceMaps\": false,\n            \"outDir\": null\n        }\n    ]\n}\n```\n有了配置文件，即可使用VS Code调试JavaScript。\n### 模块\n在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。\n\n为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在Node环境中，一个.js文件就称之为一个模块（module）。\n\n使用模块有什么好处？\n\n最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括Node内置的模块和来自第三方的模块。\n\n使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。\n\n在上一节，我们编写了一个hello.js文件，这个hello.js文件就是一个模块，模块的名字就是文件名（去掉.js后缀），所以hello.js文件就是名为hello的模块。\n\n我们把hello.js改造一下，创建一个函数，这样我们就可以在其他地方调用这个函数：\n```\n'use strict';\n\nvar s = 'Hello';\n\nfunction greet(name) {\n    console.log(s + ', ' + name + '!');\n}\n\nmodule.exports = greet;\n```\n函数greet()是我们在hello模块中定义的，你可能注意到最后一行是一个奇怪的赋值语句，它的意思是，把函数greet作为模块的输出暴露出去，这样其他模块就可以使用greet函数了。\n\n问题是其他模块怎么使用hello模块的这个greet函数呢？我们再编写一个main.js文件，调用hello模块的greet函数：\n```\n'use strict';\n\n// 引入hello模块:\nvar greet = require('./hello');\n\nvar s = 'Michael';\n\ngreet(s); // Hello, Michael!\n```\n注意到引入hello模块用Node提供的require函数：\n```\nvar greet = require('./hello');\n```\n引入的模块作为变量保存在greet变量中，那greet变量到底是什么东西？其实变量greet就是在hello.js中我们用module.exports = greet;输出的greet函数。所以，main.js就成功地引用了hello.js模块中定义的greet()函数，接下来就可以直接使用它了。\n\n在使用require()引入模块的时候，请注意模块的相对路径。因为main.js和hello.js位于同一个目录，所以我们用了当前目录.：\n```\nvar greet = require('./hello'); // 不要忘了写相对目录!\n```\n如果只写模块名：\n```\nvar greet = require('hello');\n```\n则Node会依次在内置模块、全局模块和当前模块下查找hello.js，你很可能会得到一个错误：\n```\nmodule.js\n    throw err;\n          ^\nError: Cannot find module 'hello'\n    at Function.Module._resolveFilename\n    at Function.Module._load\n    ...\n    at Function.Module._load\n    at Function.Module.runMain\n```\n遇到这个错误，你要检查：\n\n* 模块名是否写对了；\n* 模块文件是否存在；\n* 相对路径是否写对了。\n\n#### CommonJS规范\n这种模块加载机制被称为CommonJS规范。在这个规范下，每个.js文件都是一个模块，它们内部各自使用的变量名和函数名都互不冲突，例如，hello.js和main.js都申明了全局变量var s = 'xxx'，但互不影响。\n\n一个模块想要对外暴露变量（函数也是变量），可以用module.exports = variable;，一个模块要引用其他模块暴露的变量，用var ref = require('module_name');就拿到了引用模块的变量。\n#### 结论\n要在模块中对外输出变量，用：\n```\nmodule.exports = variable;\n```\n输出的变量可以是任意对象、函数、数组等等。\n\n要引入其他模块输出的对象，用：\n```\nvar foo = require('other_module');\n```\n引入的对象具体是什么，取决于引入模块输出的对象。\n\n#### module.exports vs exports\n很多时候，你会看到，在Node环境中，有两种方法可以在一个模块中输出变量：\n\n方法一：对module.exports赋值：\n```\n// hello.js\n\nfunction hello() {\n    console.log('Hello, world!');\n}\n\nfunction greet(name) {\n    console.log('Hello, ' + name + '!');\n}\n\nmodule.exports = {\n    hello: hello,\n    greet: greet\n};\n```\n方法二：直接使用exports：\n```\n// hello.js\n\nfunction hello() {\n    console.log('Hello, world!');\n}\n\nfunction greet(name) {\n    console.log('Hello, ' + name + '!');\n}\n\nfunction hello() {\n    console.log('Hello, world!');\n}\n\nexports.hello = hello;\nexports.greet = greet;\n```\n但是你不可以直接对exports赋值：\n```\n// 代码可以执行，但是模块并没有输出任何变量:\nexports = {\n    hello: hello,\n    greet: greet\n}\n```","slug":"node1","published":1,"updated":"2019-08-09T06:38:12.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cv9002tt09zu5i2slra","content":"<p><font color=\"red\">JavaScript的后端开发</font><br>在Node上运行的JavaScript相比其他后端开发语言有何优势？<br>最大的优势是借助JavaScript天生的事件驱动机制加V8高性能引擎，使编写高性能Web服务轻而易举</p>\n<h3 id=\"安装Node-js和npm\"><a href=\"#安装Node-js和npm\" class=\"headerlink\" title=\"安装Node.js和npm\"></a>安装Node.js和npm</h3><p>由于Node.js平台是在后端运行JavaScript代码，所以，必须首先在本机安装Node环境。</p>\n<h4 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h4><p>从Node.js官网下载对应平台的安装程序<br>安装完成后，在Windows环境下，请打开命令提示符，然后输入node -v，如果安装正常，你应该看到v7.6.0这样的输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\IEUser&gt;node -v</span><br><span class=\"line\">v7.6.0</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h4><p>在正式开始Node.js学习之前，我们先认识一下npm。</p>\n<p>npm是什么东东？npm其实是Node.js的包管理工具（package manager）。</p>\n<p>为啥我们需要一个包管理工具呢？因为我们在Node.js上开发时，会用到很多别人写的JavaScript代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生：大家都把自己开发的模块打包后放到npm官网上，如果要使用，直接通过npm安装就可以直接用，不用管代码存在哪，应该从哪下载。</p>\n<p>更重要的是，如果我们要使用模块A，而模块A又依赖于模块B，模块B又依赖于模块X和模块Y，npm可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。</p>\n<p>讲了这么多，npm究竟在哪？</p>\n<p>其实npm已经在Node.js安装的时候顺带装好了。我们在命令提示符或者终端输入npm -v，应该看到类似的输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\&gt;npm -v</span><br><span class=\"line\">4.1.2</span><br></pre></td></tr></table></figure></p>\n<p>如果直接输入npm，你会看到类似下面的输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\&gt; npm</span><br><span class=\"line\"></span><br><span class=\"line\">Usage: npm &lt;command&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">where &lt;command&gt; is one of:</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"卸载模块\"><a href=\"#卸载模块\" class=\"headerlink\" title=\"卸载模块\"></a>卸载模块</h5><p>我们可以使用以下命令来卸载 Node.js 模块。</p>\n<p>$ npm uninstall express<br>卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：</p>\n<p>$ npm ls</p>\n<h5 id=\"更新模块\"><a href=\"#更新模块\" class=\"headerlink\" title=\"更新模块\"></a>更新模块</h5><p>我们可以使用以下命令更新模块：</p>\n<p>$ npm update express</p>\n<h5 id=\"搜索模块\"><a href=\"#搜索模块\" class=\"headerlink\" title=\"搜索模块\"></a>搜索模块</h5><p>使用以下来搜索模块：<br>$ npm search express</p>\n<h5 id=\"NPM-常用命令\"><a href=\"#NPM-常用命令\" class=\"headerlink\" title=\"NPM 常用命令\"></a>NPM 常用命令</h5><ul>\n<li>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。</li>\n<li>使用npm help <command>可查看某条命令的详细帮助，例如npm help install。</li>\n<li>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。</li>\n<li>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。</package></li>\n<li>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。</package></li>\n<li>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。</li>\n<li>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。</version></package></li>\n</ul>\n<p>使用淘宝 NPM 镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以使用 cnpm 命令来安装模块了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install [name]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>请在本机安装Node.js环境，并确保node和npm能正常运行。</p>\n<h3 id=\"第一个Node程序\"><a href=\"#第一个Node程序\" class=\"headerlink\" title=\"第一个Node程序\"></a>第一个Node程序</h3><p>用文本编辑器写JavaScript程序，然后保存为后缀为.js的文件，就可以用node直接运行这个程序了。</p>\n<p>Node的交互模式和直接运行.js文件有什么区别呢？</p>\n<p>直接输入node进入交互模式，相当于启动了Node解释器，但是等待你一行一行地输入源代码，每输入一行就执行一行。</p>\n<p>直接运行node hello.js文件相当于启动了Node解释器，然后一次性把hello.js文件的源代码给执行了，你是没有机会以交互的方式输入源代码的。</p>\n<p>在编写JavaScript代码的时候，完全可以一边在文本编辑器里写代码，一边开一个Node交互式命令窗口，在写代码的过程中，把部分代码粘到命令行去验证，事半功倍！前提是得有个27’的超大显示器！</p>\n<h3 id=\"搭建Node开发环境\"><a href=\"#搭建Node开发环境\" class=\"headerlink\" title=\"搭建Node开发环境\"></a>搭建Node开发环境</h3><p>使用文本编辑器来开发Node程序，最大的缺点是效率太低，运行Node程序还需要在命令行单独敲命令。如果还需要调试程序，就更加麻烦了。</p>\n<p>所以我们需要一个IDE集成开发环境，让我们能在一个环境里编码、运行、调试，这样就可以大大提升开发效率。</p>\n<p>Java的集成开发环境有Eclipse，Intellij idea等，C#的集成开发环境有Visual Studio，那么问题又来了：Node.js的集成开发环境到底哪家强？</p>\n<p>考察Node.js的集成开发环境，重点放在启动速度快，执行简单，调试方便这三点上。当然，免费使用是一个加分项。</p>\n<p>综合考察后，我们隆重向大家推荐Node.js集成开发环境： vscode<br>Visual Studio Code由微软出品，但它不是那个大块头的Visual Studio，它是一个精简版的迷你Visual Studio，并且，Visual Studio Code可以跨！平！台！Windows、Mac和Linux通用。</p>\n<p>运行和调试JavaScript<br>在VS Code中，我们可以非常方便地运行JavaScript文件。</p>\n<p>VS Code以文件夹作为工程目录（Workspace Dir），所有的JavaScript文件都存放在该目录下。此外，VS Code在工程目录下还需要一个.vscode的配置目录，里面存放里VS Code需要的配置文件。</p>\n<p>假设我们在C:\\Work\\目录下创建了一个hello目录作为工程目录，并编写了一个hello.js文件，则该工程目录的结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello/ &lt;-- workspace dir</span><br><span class=\"line\">|</span><br><span class=\"line\">+- hello.js &lt;-- JavaScript file</span><br><span class=\"line\">|</span><br><span class=\"line\">+- .vscode/  &lt;-- VS Code config</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +- launch.json &lt;-- VS Code config file for JavaScript</span><br></pre></td></tr></table></figure></p>\n<p>可以用VS Code快速创建launch.json，然后修改如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class=\"line\">    &quot;configurations&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;name&quot;: &quot;Run hello.js&quot;,</span><br><span class=\"line\">            &quot;type&quot;: &quot;node&quot;,</span><br><span class=\"line\">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class=\"line\">            &quot;program&quot;: &quot;$&#123;workspaceRoot&#125;/hello.js&quot;,</span><br><span class=\"line\">            &quot;stopOnEntry&quot;: false,</span><br><span class=\"line\">            &quot;args&quot;: [],</span><br><span class=\"line\">            &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;&quot;,</span><br><span class=\"line\">            &quot;preLaunchTask&quot;: null,</span><br><span class=\"line\">            &quot;runtimeExecutable&quot;: null,</span><br><span class=\"line\">            &quot;runtimeArgs&quot;: [</span><br><span class=\"line\">                &quot;--nolazy&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;env&quot;: &#123;</span><br><span class=\"line\">                &quot;NODE_ENV&quot;: &quot;development&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;externalConsole&quot;: false,</span><br><span class=\"line\">            &quot;sourceMaps&quot;: false,</span><br><span class=\"line\">            &quot;outDir&quot;: null</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>有了配置文件，即可使用VS Code调试JavaScript。</p>\n<h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><p>在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。</p>\n<p>为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在Node环境中，一个.js文件就称之为一个模块（module）。</p>\n<p>使用模块有什么好处？</p>\n<p>最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括Node内置的模块和来自第三方的模块。</p>\n<p>使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。</p>\n<p>在上一节，我们编写了一个hello.js文件，这个hello.js文件就是一个模块，模块的名字就是文件名（去掉.js后缀），所以hello.js文件就是名为hello的模块。</p>\n<p>我们把hello.js改造一下，创建一个函数，这样我们就可以在其他地方调用这个函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">var s = &apos;Hello&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">function greet(name) &#123;</span><br><span class=\"line\">    console.log(s + &apos;, &apos; + name + &apos;!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = greet;</span><br></pre></td></tr></table></figure></p>\n<p>函数greet()是我们在hello模块中定义的，你可能注意到最后一行是一个奇怪的赋值语句，它的意思是，把函数greet作为模块的输出暴露出去，这样其他模块就可以使用greet函数了。</p>\n<p>问题是其他模块怎么使用hello模块的这个greet函数呢？我们再编写一个main.js文件，调用hello模块的greet函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 引入hello模块:</span><br><span class=\"line\">var greet = require(&apos;./hello&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var s = &apos;Michael&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">greet(s); // Hello, Michael!</span><br></pre></td></tr></table></figure></p>\n<p>注意到引入hello模块用Node提供的require函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var greet = require(&apos;./hello&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>引入的模块作为变量保存在greet变量中，那greet变量到底是什么东西？其实变量greet就是在hello.js中我们用module.exports = greet;输出的greet函数。所以，main.js就成功地引用了hello.js模块中定义的greet()函数，接下来就可以直接使用它了。</p>\n<p>在使用require()引入模块的时候，请注意模块的相对路径。因为main.js和hello.js位于同一个目录，所以我们用了当前目录.：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var greet = require(&apos;./hello&apos;); // 不要忘了写相对目录!</span><br></pre></td></tr></table></figure></p>\n<p>如果只写模块名：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var greet = require(&apos;hello&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>则Node会依次在内置模块、全局模块和当前模块下查找hello.js，你很可能会得到一个错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.js</span><br><span class=\"line\">    throw err;</span><br><span class=\"line\">          ^</span><br><span class=\"line\">Error: Cannot find module &apos;hello&apos;</span><br><span class=\"line\">    at Function.Module._resolveFilename</span><br><span class=\"line\">    at Function.Module._load</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    at Function.Module._load</span><br><span class=\"line\">    at Function.Module.runMain</span><br></pre></td></tr></table></figure></p>\n<p>遇到这个错误，你要检查：</p>\n<ul>\n<li>模块名是否写对了；</li>\n<li>模块文件是否存在；</li>\n<li>相对路径是否写对了。</li>\n</ul>\n<h4 id=\"CommonJS规范\"><a href=\"#CommonJS规范\" class=\"headerlink\" title=\"CommonJS规范\"></a>CommonJS规范</h4><p>这种模块加载机制被称为CommonJS规范。在这个规范下，每个.js文件都是一个模块，它们内部各自使用的变量名和函数名都互不冲突，例如，hello.js和main.js都申明了全局变量var s = ‘xxx’，但互不影响。</p>\n<p>一个模块想要对外暴露变量（函数也是变量），可以用module.exports = variable;，一个模块要引用其他模块暴露的变量，用var ref = require(‘module_name’);就拿到了引用模块的变量。</p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>要在模块中对外输出变量，用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = variable;</span><br></pre></td></tr></table></figure></p>\n<p>输出的变量可以是任意对象、函数、数组等等。</p>\n<p>要引入其他模块输出的对象，用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = require(&apos;other_module&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>引入的对象具体是什么，取决于引入模块输出的对象。</p>\n<h4 id=\"module-exports-vs-exports\"><a href=\"#module-exports-vs-exports\" class=\"headerlink\" title=\"module.exports vs exports\"></a>module.exports vs exports</h4><p>很多时候，你会看到，在Node环境中，有两种方法可以在一个模块中输出变量：</p>\n<p>方法一：对module.exports赋值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// hello.js</span><br><span class=\"line\"></span><br><span class=\"line\">function hello() &#123;</span><br><span class=\"line\">    console.log(&apos;Hello, world!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function greet(name) &#123;</span><br><span class=\"line\">    console.log(&apos;Hello, &apos; + name + &apos;!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    hello: hello,</span><br><span class=\"line\">    greet: greet</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>方法二：直接使用exports：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// hello.js</span><br><span class=\"line\"></span><br><span class=\"line\">function hello() &#123;</span><br><span class=\"line\">    console.log(&apos;Hello, world!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function greet(name) &#123;</span><br><span class=\"line\">    console.log(&apos;Hello, &apos; + name + &apos;!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function hello() &#123;</span><br><span class=\"line\">    console.log(&apos;Hello, world!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.hello = hello;</span><br><span class=\"line\">exports.greet = greet;</span><br></pre></td></tr></table></figure></p>\n<p>但是你不可以直接对exports赋值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 代码可以执行，但是模块并没有输出任何变量:</span><br><span class=\"line\">exports = &#123;</span><br><span class=\"line\">    hello: hello,</span><br><span class=\"line\">    greet: greet</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p><font color=\"red\">JavaScript的后端开发</font><br>在Node上运行的JavaScript相比其他后端开发语言有何优势？<br>最大的优势是借助JavaScript天生的事件驱动机制加V8高性能引擎，使编写高性能Web服务轻而易举</p>\n<h3 id=\"安装Node-js和npm\"><a href=\"#安装Node-js和npm\" class=\"headerlink\" title=\"安装Node.js和npm\"></a>安装Node.js和npm</h3><p>由于Node.js平台是在后端运行JavaScript代码，所以，必须首先在本机安装Node环境。</p>\n<h4 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h4><p>从Node.js官网下载对应平台的安装程序<br>安装完成后，在Windows环境下，请打开命令提示符，然后输入node -v，如果安装正常，你应该看到v7.6.0这样的输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\IEUser&gt;node -v</span><br><span class=\"line\">v7.6.0</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h4><p>在正式开始Node.js学习之前，我们先认识一下npm。</p>\n<p>npm是什么东东？npm其实是Node.js的包管理工具（package manager）。</p>\n<p>为啥我们需要一个包管理工具呢？因为我们在Node.js上开发时，会用到很多别人写的JavaScript代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生：大家都把自己开发的模块打包后放到npm官网上，如果要使用，直接通过npm安装就可以直接用，不用管代码存在哪，应该从哪下载。</p>\n<p>更重要的是，如果我们要使用模块A，而模块A又依赖于模块B，模块B又依赖于模块X和模块Y，npm可以根据依赖关系，把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。</p>\n<p>讲了这么多，npm究竟在哪？</p>\n<p>其实npm已经在Node.js安装的时候顺带装好了。我们在命令提示符或者终端输入npm -v，应该看到类似的输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\&gt;npm -v</span><br><span class=\"line\">4.1.2</span><br></pre></td></tr></table></figure></p>\n<p>如果直接输入npm，你会看到类似下面的输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\&gt; npm</span><br><span class=\"line\"></span><br><span class=\"line\">Usage: npm &lt;command&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">where &lt;command&gt; is one of:</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"卸载模块\"><a href=\"#卸载模块\" class=\"headerlink\" title=\"卸载模块\"></a>卸载模块</h5><p>我们可以使用以下命令来卸载 Node.js 模块。</p>\n<p>$ npm uninstall express<br>卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：</p>\n<p>$ npm ls</p>\n<h5 id=\"更新模块\"><a href=\"#更新模块\" class=\"headerlink\" title=\"更新模块\"></a>更新模块</h5><p>我们可以使用以下命令更新模块：</p>\n<p>$ npm update express</p>\n<h5 id=\"搜索模块\"><a href=\"#搜索模块\" class=\"headerlink\" title=\"搜索模块\"></a>搜索模块</h5><p>使用以下来搜索模块：<br>$ npm search express</p>\n<h5 id=\"NPM-常用命令\"><a href=\"#NPM-常用命令\" class=\"headerlink\" title=\"NPM 常用命令\"></a>NPM 常用命令</h5><ul>\n<li>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。</li>\n<li>使用npm help <command>可查看某条命令的详细帮助，例如npm help install。</li>\n<li>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。</li>\n<li>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。</package></li>\n<li>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。</package></li>\n<li>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。</li>\n<li>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。</version></package></li>\n</ul>\n<p>使用淘宝 NPM 镜像<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以使用 cnpm 命令来安装模块了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install [name]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>请在本机安装Node.js环境，并确保node和npm能正常运行。</p>\n<h3 id=\"第一个Node程序\"><a href=\"#第一个Node程序\" class=\"headerlink\" title=\"第一个Node程序\"></a>第一个Node程序</h3><p>用文本编辑器写JavaScript程序，然后保存为后缀为.js的文件，就可以用node直接运行这个程序了。</p>\n<p>Node的交互模式和直接运行.js文件有什么区别呢？</p>\n<p>直接输入node进入交互模式，相当于启动了Node解释器，但是等待你一行一行地输入源代码，每输入一行就执行一行。</p>\n<p>直接运行node hello.js文件相当于启动了Node解释器，然后一次性把hello.js文件的源代码给执行了，你是没有机会以交互的方式输入源代码的。</p>\n<p>在编写JavaScript代码的时候，完全可以一边在文本编辑器里写代码，一边开一个Node交互式命令窗口，在写代码的过程中，把部分代码粘到命令行去验证，事半功倍！前提是得有个27’的超大显示器！</p>\n<h3 id=\"搭建Node开发环境\"><a href=\"#搭建Node开发环境\" class=\"headerlink\" title=\"搭建Node开发环境\"></a>搭建Node开发环境</h3><p>使用文本编辑器来开发Node程序，最大的缺点是效率太低，运行Node程序还需要在命令行单独敲命令。如果还需要调试程序，就更加麻烦了。</p>\n<p>所以我们需要一个IDE集成开发环境，让我们能在一个环境里编码、运行、调试，这样就可以大大提升开发效率。</p>\n<p>Java的集成开发环境有Eclipse，Intellij idea等，C#的集成开发环境有Visual Studio，那么问题又来了：Node.js的集成开发环境到底哪家强？</p>\n<p>考察Node.js的集成开发环境，重点放在启动速度快，执行简单，调试方便这三点上。当然，免费使用是一个加分项。</p>\n<p>综合考察后，我们隆重向大家推荐Node.js集成开发环境： vscode<br>Visual Studio Code由微软出品，但它不是那个大块头的Visual Studio，它是一个精简版的迷你Visual Studio，并且，Visual Studio Code可以跨！平！台！Windows、Mac和Linux通用。</p>\n<p>运行和调试JavaScript<br>在VS Code中，我们可以非常方便地运行JavaScript文件。</p>\n<p>VS Code以文件夹作为工程目录（Workspace Dir），所有的JavaScript文件都存放在该目录下。此外，VS Code在工程目录下还需要一个.vscode的配置目录，里面存放里VS Code需要的配置文件。</p>\n<p>假设我们在C:\\Work\\目录下创建了一个hello目录作为工程目录，并编写了一个hello.js文件，则该工程目录的结构如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello/ &lt;-- workspace dir</span><br><span class=\"line\">|</span><br><span class=\"line\">+- hello.js &lt;-- JavaScript file</span><br><span class=\"line\">|</span><br><span class=\"line\">+- .vscode/  &lt;-- VS Code config</span><br><span class=\"line\">   |</span><br><span class=\"line\">   +- launch.json &lt;-- VS Code config file for JavaScript</span><br></pre></td></tr></table></figure></p>\n<p>可以用VS Code快速创建launch.json，然后修改如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class=\"line\">    &quot;configurations&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;name&quot;: &quot;Run hello.js&quot;,</span><br><span class=\"line\">            &quot;type&quot;: &quot;node&quot;,</span><br><span class=\"line\">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class=\"line\">            &quot;program&quot;: &quot;$&#123;workspaceRoot&#125;/hello.js&quot;,</span><br><span class=\"line\">            &quot;stopOnEntry&quot;: false,</span><br><span class=\"line\">            &quot;args&quot;: [],</span><br><span class=\"line\">            &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;&quot;,</span><br><span class=\"line\">            &quot;preLaunchTask&quot;: null,</span><br><span class=\"line\">            &quot;runtimeExecutable&quot;: null,</span><br><span class=\"line\">            &quot;runtimeArgs&quot;: [</span><br><span class=\"line\">                &quot;--nolazy&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;env&quot;: &#123;</span><br><span class=\"line\">                &quot;NODE_ENV&quot;: &quot;development&quot;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;externalConsole&quot;: false,</span><br><span class=\"line\">            &quot;sourceMaps&quot;: false,</span><br><span class=\"line\">            &quot;outDir&quot;: null</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>有了配置文件，即可使用VS Code调试JavaScript。</p>\n<h3 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h3><p>在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。</p>\n<p>为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在Node环境中，一个.js文件就称之为一个模块（module）。</p>\n<p>使用模块有什么好处？</p>\n<p>最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括Node内置的模块和来自第三方的模块。</p>\n<p>使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。</p>\n<p>在上一节，我们编写了一个hello.js文件，这个hello.js文件就是一个模块，模块的名字就是文件名（去掉.js后缀），所以hello.js文件就是名为hello的模块。</p>\n<p>我们把hello.js改造一下，创建一个函数，这样我们就可以在其他地方调用这个函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">var s = &apos;Hello&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">function greet(name) &#123;</span><br><span class=\"line\">    console.log(s + &apos;, &apos; + name + &apos;!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = greet;</span><br></pre></td></tr></table></figure></p>\n<p>函数greet()是我们在hello模块中定义的，你可能注意到最后一行是一个奇怪的赋值语句，它的意思是，把函数greet作为模块的输出暴露出去，这样其他模块就可以使用greet函数了。</p>\n<p>问题是其他模块怎么使用hello模块的这个greet函数呢？我们再编写一个main.js文件，调用hello模块的greet函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;use strict&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 引入hello模块:</span><br><span class=\"line\">var greet = require(&apos;./hello&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var s = &apos;Michael&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">greet(s); // Hello, Michael!</span><br></pre></td></tr></table></figure></p>\n<p>注意到引入hello模块用Node提供的require函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var greet = require(&apos;./hello&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>引入的模块作为变量保存在greet变量中，那greet变量到底是什么东西？其实变量greet就是在hello.js中我们用module.exports = greet;输出的greet函数。所以，main.js就成功地引用了hello.js模块中定义的greet()函数，接下来就可以直接使用它了。</p>\n<p>在使用require()引入模块的时候，请注意模块的相对路径。因为main.js和hello.js位于同一个目录，所以我们用了当前目录.：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var greet = require(&apos;./hello&apos;); // 不要忘了写相对目录!</span><br></pre></td></tr></table></figure></p>\n<p>如果只写模块名：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var greet = require(&apos;hello&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>则Node会依次在内置模块、全局模块和当前模块下查找hello.js，你很可能会得到一个错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.js</span><br><span class=\"line\">    throw err;</span><br><span class=\"line\">          ^</span><br><span class=\"line\">Error: Cannot find module &apos;hello&apos;</span><br><span class=\"line\">    at Function.Module._resolveFilename</span><br><span class=\"line\">    at Function.Module._load</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    at Function.Module._load</span><br><span class=\"line\">    at Function.Module.runMain</span><br></pre></td></tr></table></figure></p>\n<p>遇到这个错误，你要检查：</p>\n<ul>\n<li>模块名是否写对了；</li>\n<li>模块文件是否存在；</li>\n<li>相对路径是否写对了。</li>\n</ul>\n<h4 id=\"CommonJS规范\"><a href=\"#CommonJS规范\" class=\"headerlink\" title=\"CommonJS规范\"></a>CommonJS规范</h4><p>这种模块加载机制被称为CommonJS规范。在这个规范下，每个.js文件都是一个模块，它们内部各自使用的变量名和函数名都互不冲突，例如，hello.js和main.js都申明了全局变量var s = ‘xxx’，但互不影响。</p>\n<p>一个模块想要对外暴露变量（函数也是变量），可以用module.exports = variable;，一个模块要引用其他模块暴露的变量，用var ref = require(‘module_name’);就拿到了引用模块的变量。</p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>要在模块中对外输出变量，用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = variable;</span><br></pre></td></tr></table></figure></p>\n<p>输出的变量可以是任意对象、函数、数组等等。</p>\n<p>要引入其他模块输出的对象，用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var foo = require(&apos;other_module&apos;);</span><br></pre></td></tr></table></figure></p>\n<p>引入的对象具体是什么，取决于引入模块输出的对象。</p>\n<h4 id=\"module-exports-vs-exports\"><a href=\"#module-exports-vs-exports\" class=\"headerlink\" title=\"module.exports vs exports\"></a>module.exports vs exports</h4><p>很多时候，你会看到，在Node环境中，有两种方法可以在一个模块中输出变量：</p>\n<p>方法一：对module.exports赋值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// hello.js</span><br><span class=\"line\"></span><br><span class=\"line\">function hello() &#123;</span><br><span class=\"line\">    console.log(&apos;Hello, world!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function greet(name) &#123;</span><br><span class=\"line\">    console.log(&apos;Hello, &apos; + name + &apos;!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    hello: hello,</span><br><span class=\"line\">    greet: greet</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>方法二：直接使用exports：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// hello.js</span><br><span class=\"line\"></span><br><span class=\"line\">function hello() &#123;</span><br><span class=\"line\">    console.log(&apos;Hello, world!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function greet(name) &#123;</span><br><span class=\"line\">    console.log(&apos;Hello, &apos; + name + &apos;!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function hello() &#123;</span><br><span class=\"line\">    console.log(&apos;Hello, world!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.hello = hello;</span><br><span class=\"line\">exports.greet = greet;</span><br></pre></td></tr></table></figure></p>\n<p>但是你不可以直接对exports赋值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 代码可以执行，但是模块并没有输出任何变量:</span><br><span class=\"line\">exports = &#123;</span><br><span class=\"line\">    hello: hello,</span><br><span class=\"line\">    greet: greet</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"node基础(三)","date":"2019-08-10T09:41:11.000Z","_content":"### 什么是node.js\n编写高性能网络服务器的JS工具包（用js开发服务端程序）\n单线程、异步、事件驱动\n特点：快、耗内存\n#### 框架\nexpress、koa、Hapi、以及express基础上的sails\n\n### node的安装\nhttp://nodejs.cn/\n是否成功：\n```\nnode -v  \nnpm -v\n```\n\n\n#### 第一个hello程序\n```bash\nvar http = require('http');\nhttp.createServer(function(request,response){\n    response.writeHead(200,{'Content-Type': 'text/html; charset=utf-8'});\n    if (request.url!==\"/favicon.ico\") {   //清除第二次访问\n        console.log('访问');\n        response.write('hello,world');\n        response.end('你好，世界');\n    }\n}).listen(8000);\nconsole.log('Server running at http://localhost:8000/');\n```\n\n### 调用函数\n* 调用本地函数\n* 调用其他js文件中的函数\n\n```bash\nvar http = require('http');\n var otherfun = require(\"./models/other_func.js\");\n http.createServer(function(request,response){\n    response.writeHead(200,{'Content-Type': 'text/html; charset=utf-8'});\n    if (request.url!==\"/favicon.ico\") {\n        //fun1(response);\n        otherfun.fun2(response);\n        otherfun.fun3(response);\n\n          //用字符串调用对应函数\n        // otherfun.fun2(response);\n        // otherfun.fun3(response);\n\n        funname = 'fun3';\n        otherfun[funname](response);\n\n        response.end('');\n    }\n}).listen(8000);\nconsole.log('Server running at http://10.75.68.123:8000/');\n\nfunction fun1(res){       // 本文件函数\n    console.log(\"fun1\");\n    res.write(\"hello,我是fun1\");\n}\n```\n\n\n关于被调用的函数：\n```bash\n//只支持一个函数\nfunction fun2(res){\n    console.log(\"fun2\");\n    res.write(\"hello,我是fun2\");\n}\nmodule.exports = fun2; \n```\n\n```bash\n    //支持多个函数\nmodule.exports={\n    fun2:function(res){\n        console.log(\"fun2\");\n        res.write(\"hello,我是fun2\");\n    },\n    fun3:function(res){\n        console.log(\"fun3\");\n        res.write(\"hello,我是fun3\");\n    }\n\n} \n```\n### 调用模块\n```bash\n var http = require('http');\n // var User = require(\"./models/User\");\n var Teacher = require(\"./models/Teacher\");\n\n http.createServer(function(request,response){\n    response.writeHead(200,{'Content-Type': 'text/html; charset=utf-8'});\n    if (request.url!==\"/favicon.ico\") {\n        teacher = new Teacher(1,\"张三\",20);\n        teacher.enter();\n        teacher.teach(response);\n        // user.id=1;\n        // user.name=\"张三\";\n        // user.age=20;\n        // user.enter();\n        response.end('');\n    }\n}).listen(8000);\nconsole.log('Server running at http://localhost:8000/');\n```\n### 路由初步\n```bash\n var http = require('http');\n var url = require(\"url\");\n var router = require(\"./router\");\n\nhttp.createServer(function(request,response){\n    response.writeHead(200,{'Content-Type': 'text/html; charset=utf-8'});\n    if (request.url!==\"/favicon.ico\") {\n        var pathname=url.parse(request.url).pathname;\n        pathname = pathname.replace(/\\//,'');   //替换掉前面的\"/\"\n        router[pathname](request,response);\n        console.log(pathname);\n        response.end('');\n    }\n}).listen(8000);\nconsole.log('Server running at http://10.75.68.123:8000/');\n```\n### 读文件\n```bash\nvar http = require('http');\n var url = require('url');\n var router = require('./router');\n\n // var optfile = require(\"./models/optfile\");\n\n http.createServer(function(request,response){\n    response.writeHead(200,{'Content-Type': 'text/html; charset=utf-8'});\n    if (request.url!==\"/favicon.ico\") {\n\n        var pathname=url.parse(request.url).pathname;\n        pathname = pathname.replace(/\\//,'');   //替换掉前面的\"/\"\n        router[pathname](request,response);\n        \n        /*\n        // optfile.readfileSync('./views/login.html');\n        // optfile.readFile('./views/login.html');\n        function recall(data){\n            response.write(data);\n            response.end('ok');   //不写则没有http协议尾\n        }\n        optfile.readFile('./views/login.html',recall);\n        // optfile.readFile('C:\\inetpub\\wwwroot\\HN_NTZJS01/index.html',recall);\n\n\n    \n        console.log(\"主程序执行完毕\");\n        */\n\n    }\n}).listen(8000);\nconsole.log('Server running at http://localhost:8000/')\n```\n\n待续。。。","source":"_posts/node3.md","raw":"---\ntitle: node基础(三)\ndate: 2019-08-10 17:41:11\ncategories:\n- Node\ntags: [Node.js]\n---\n### 什么是node.js\n编写高性能网络服务器的JS工具包（用js开发服务端程序）\n单线程、异步、事件驱动\n特点：快、耗内存\n#### 框架\nexpress、koa、Hapi、以及express基础上的sails\n\n### node的安装\nhttp://nodejs.cn/\n是否成功：\n```\nnode -v  \nnpm -v\n```\n\n\n#### 第一个hello程序\n```bash\nvar http = require('http');\nhttp.createServer(function(request,response){\n    response.writeHead(200,{'Content-Type': 'text/html; charset=utf-8'});\n    if (request.url!==\"/favicon.ico\") {   //清除第二次访问\n        console.log('访问');\n        response.write('hello,world');\n        response.end('你好，世界');\n    }\n}).listen(8000);\nconsole.log('Server running at http://localhost:8000/');\n```\n\n### 调用函数\n* 调用本地函数\n* 调用其他js文件中的函数\n\n```bash\nvar http = require('http');\n var otherfun = require(\"./models/other_func.js\");\n http.createServer(function(request,response){\n    response.writeHead(200,{'Content-Type': 'text/html; charset=utf-8'});\n    if (request.url!==\"/favicon.ico\") {\n        //fun1(response);\n        otherfun.fun2(response);\n        otherfun.fun3(response);\n\n          //用字符串调用对应函数\n        // otherfun.fun2(response);\n        // otherfun.fun3(response);\n\n        funname = 'fun3';\n        otherfun[funname](response);\n\n        response.end('');\n    }\n}).listen(8000);\nconsole.log('Server running at http://10.75.68.123:8000/');\n\nfunction fun1(res){       // 本文件函数\n    console.log(\"fun1\");\n    res.write(\"hello,我是fun1\");\n}\n```\n\n\n关于被调用的函数：\n```bash\n//只支持一个函数\nfunction fun2(res){\n    console.log(\"fun2\");\n    res.write(\"hello,我是fun2\");\n}\nmodule.exports = fun2; \n```\n\n```bash\n    //支持多个函数\nmodule.exports={\n    fun2:function(res){\n        console.log(\"fun2\");\n        res.write(\"hello,我是fun2\");\n    },\n    fun3:function(res){\n        console.log(\"fun3\");\n        res.write(\"hello,我是fun3\");\n    }\n\n} \n```\n### 调用模块\n```bash\n var http = require('http');\n // var User = require(\"./models/User\");\n var Teacher = require(\"./models/Teacher\");\n\n http.createServer(function(request,response){\n    response.writeHead(200,{'Content-Type': 'text/html; charset=utf-8'});\n    if (request.url!==\"/favicon.ico\") {\n        teacher = new Teacher(1,\"张三\",20);\n        teacher.enter();\n        teacher.teach(response);\n        // user.id=1;\n        // user.name=\"张三\";\n        // user.age=20;\n        // user.enter();\n        response.end('');\n    }\n}).listen(8000);\nconsole.log('Server running at http://localhost:8000/');\n```\n### 路由初步\n```bash\n var http = require('http');\n var url = require(\"url\");\n var router = require(\"./router\");\n\nhttp.createServer(function(request,response){\n    response.writeHead(200,{'Content-Type': 'text/html; charset=utf-8'});\n    if (request.url!==\"/favicon.ico\") {\n        var pathname=url.parse(request.url).pathname;\n        pathname = pathname.replace(/\\//,'');   //替换掉前面的\"/\"\n        router[pathname](request,response);\n        console.log(pathname);\n        response.end('');\n    }\n}).listen(8000);\nconsole.log('Server running at http://10.75.68.123:8000/');\n```\n### 读文件\n```bash\nvar http = require('http');\n var url = require('url');\n var router = require('./router');\n\n // var optfile = require(\"./models/optfile\");\n\n http.createServer(function(request,response){\n    response.writeHead(200,{'Content-Type': 'text/html; charset=utf-8'});\n    if (request.url!==\"/favicon.ico\") {\n\n        var pathname=url.parse(request.url).pathname;\n        pathname = pathname.replace(/\\//,'');   //替换掉前面的\"/\"\n        router[pathname](request,response);\n        \n        /*\n        // optfile.readfileSync('./views/login.html');\n        // optfile.readFile('./views/login.html');\n        function recall(data){\n            response.write(data);\n            response.end('ok');   //不写则没有http协议尾\n        }\n        optfile.readFile('./views/login.html',recall);\n        // optfile.readFile('C:\\inetpub\\wwwroot\\HN_NTZJS01/index.html',recall);\n\n\n    \n        console.log(\"主程序执行完毕\");\n        */\n\n    }\n}).listen(8000);\nconsole.log('Server running at http://localhost:8000/')\n```\n\n待续。。。","slug":"node3","published":1,"updated":"2019-08-13T02:16:28.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cvb002wt09zcnhnwhsh","content":"<h3 id=\"什么是node-js\"><a href=\"#什么是node-js\" class=\"headerlink\" title=\"什么是node.js\"></a>什么是node.js</h3><p>编写高性能网络服务器的JS工具包（用js开发服务端程序）<br>单线程、异步、事件驱动<br>特点：快、耗内存</p>\n<h4 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h4><p>express、koa、Hapi、以及express基础上的sails</p>\n<h3 id=\"node的安装\"><a href=\"#node的安装\" class=\"headerlink\" title=\"node的安装\"></a>node的安装</h3><p><a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener\">http://nodejs.cn/</a><br>是否成功：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v  </span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"第一个hello程序\"><a href=\"#第一个hello程序\" class=\"headerlink\" title=\"第一个hello程序\"></a>第一个hello程序</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\">http.createServer(<span class=\"keyword\">function</span>(request,response)&#123;</span><br><span class=\"line\">    response.writeHead(200,&#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html; charset=utf-8'</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.url!==<span class=\"string\">\"/favicon.ico\"</span>) &#123;   //清除第二次访问</span><br><span class=\"line\">        console.log(<span class=\"string\">'访问'</span>);</span><br><span class=\"line\">        response.write(<span class=\"string\">'hello,world'</span>);</span><br><span class=\"line\">        response.end(<span class=\"string\">'你好，世界'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8000);</span><br><span class=\"line\">console.log(<span class=\"string\">'Server running at http://localhost:8000/'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用函数\"><a href=\"#调用函数\" class=\"headerlink\" title=\"调用函数\"></a>调用函数</h3><ul>\n<li>调用本地函数</li>\n<li>调用其他js文件中的函数</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"> var otherfun = require(<span class=\"string\">\"./models/other_func.js\"</span>);</span><br><span class=\"line\"> http.createServer(<span class=\"keyword\">function</span>(request,response)&#123;</span><br><span class=\"line\">    response.writeHead(200,&#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html; charset=utf-8'</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.url!==<span class=\"string\">\"/favicon.ico\"</span>) &#123;</span><br><span class=\"line\">        //fun1(response);</span><br><span class=\"line\">        otherfun.fun2(response);</span><br><span class=\"line\">        otherfun.fun3(response);</span><br><span class=\"line\"></span><br><span class=\"line\">          //用字符串调用对应函数</span><br><span class=\"line\">        // otherfun.fun2(response);</span><br><span class=\"line\">        // otherfun.fun3(response);</span><br><span class=\"line\"></span><br><span class=\"line\">        funname = <span class=\"string\">'fun3'</span>;</span><br><span class=\"line\">        otherfun[funname](response);</span><br><span class=\"line\"></span><br><span class=\"line\">        response.end(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8000);</span><br><span class=\"line\">console.log(<span class=\"string\">'Server running at http://10.75.68.123:8000/'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> fun1(res)&#123;       // 本文件函数</span><br><span class=\"line\">    console.log(<span class=\"string\">\"fun1\"</span>);</span><br><span class=\"line\">    res.write(<span class=\"string\">\"hello,我是fun1\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于被调用的函数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//只支持一个函数</span><br><span class=\"line\"><span class=\"keyword\">function</span> fun2(res)&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">\"fun2\"</span>);</span><br><span class=\"line\">    res.write(<span class=\"string\">\"hello,我是fun2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = fun2;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    //支持多个函数</span><br><span class=\"line\">module.exports=&#123;</span><br><span class=\"line\">    fun2:<span class=\"keyword\">function</span>(res)&#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">\"fun2\"</span>);</span><br><span class=\"line\">        res.write(<span class=\"string\">\"hello,我是fun2\"</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    fun3:<span class=\"keyword\">function</span>(res)&#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">\"fun3\"</span>);</span><br><span class=\"line\">        res.write(<span class=\"string\">\"hello,我是fun3\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用模块\"><a href=\"#调用模块\" class=\"headerlink\" title=\"调用模块\"></a>调用模块</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> var http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"> // var User = require(<span class=\"string\">\"./models/User\"</span>);</span><br><span class=\"line\"> var Teacher = require(<span class=\"string\">\"./models/Teacher\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> http.createServer(<span class=\"keyword\">function</span>(request,response)&#123;</span><br><span class=\"line\">    response.writeHead(200,&#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html; charset=utf-8'</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.url!==<span class=\"string\">\"/favicon.ico\"</span>) &#123;</span><br><span class=\"line\">        teacher = new Teacher(1,<span class=\"string\">\"张三\"</span>,20);</span><br><span class=\"line\">        teacher.enter();</span><br><span class=\"line\">        teacher.teach(response);</span><br><span class=\"line\">        // user.id=1;</span><br><span class=\"line\">        // user.name=<span class=\"string\">\"张三\"</span>;</span><br><span class=\"line\">        // user.age=20;</span><br><span class=\"line\">        // user.enter();</span><br><span class=\"line\">        response.end(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8000);</span><br><span class=\"line\">console.log(<span class=\"string\">'Server running at http://localhost:8000/'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"路由初步\"><a href=\"#路由初步\" class=\"headerlink\" title=\"路由初步\"></a>路由初步</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> var http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"> var url = require(<span class=\"string\">\"url\"</span>);</span><br><span class=\"line\"> var router = require(<span class=\"string\">\"./router\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(<span class=\"keyword\">function</span>(request,response)&#123;</span><br><span class=\"line\">    response.writeHead(200,&#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html; charset=utf-8'</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.url!==<span class=\"string\">\"/favicon.ico\"</span>) &#123;</span><br><span class=\"line\">        var pathname=url.parse(request.url).pathname;</span><br><span class=\"line\">        pathname = pathname.replace(/\\//,<span class=\"string\">''</span>);   //替换掉前面的<span class=\"string\">\"/\"</span></span><br><span class=\"line\">        router[pathname](request,response);</span><br><span class=\"line\">        console.log(pathname);</span><br><span class=\"line\">        response.end(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8000);</span><br><span class=\"line\">console.log(<span class=\"string\">'Server running at http://10.75.68.123:8000/'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"读文件\"><a href=\"#读文件\" class=\"headerlink\" title=\"读文件\"></a>读文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"> var url = require(<span class=\"string\">'url'</span>);</span><br><span class=\"line\"> var router = require(<span class=\"string\">'./router'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> // var optfile = require(<span class=\"string\">\"./models/optfile\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> http.createServer(<span class=\"keyword\">function</span>(request,response)&#123;</span><br><span class=\"line\">    response.writeHead(200,&#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html; charset=utf-8'</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.url!==<span class=\"string\">\"/favicon.ico\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        var pathname=url.parse(request.url).pathname;</span><br><span class=\"line\">        pathname = pathname.replace(/\\//,<span class=\"string\">''</span>);   //替换掉前面的<span class=\"string\">\"/\"</span></span><br><span class=\"line\">        router[pathname](request,response);</span><br><span class=\"line\">        </span><br><span class=\"line\">        /*</span><br><span class=\"line\">        // optfile.readfileSync(<span class=\"string\">'./views/login.html'</span>);</span><br><span class=\"line\">        // optfile.readFile(<span class=\"string\">'./views/login.html'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">function</span> recall(data)&#123;</span><br><span class=\"line\">            response.write(data);</span><br><span class=\"line\">            response.end(<span class=\"string\">'ok'</span>);   //不写则没有http协议尾</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        optfile.readFile(<span class=\"string\">'./views/login.html'</span>,recall);</span><br><span class=\"line\">        // optfile.readFile(<span class=\"string\">'C:\\inetpub\\wwwroot\\HN_NTZJS01/index.html'</span>,recall);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">        console.log(<span class=\"string\">\"主程序执行完毕\"</span>);</span><br><span class=\"line\">        */</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8000);</span><br><span class=\"line\">console.log(<span class=\"string\">'Server running at http://localhost:8000/'</span>)</span><br></pre></td></tr></table></figure>\n<p>待续。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是node-js\"><a href=\"#什么是node-js\" class=\"headerlink\" title=\"什么是node.js\"></a>什么是node.js</h3><p>编写高性能网络服务器的JS工具包（用js开发服务端程序）<br>单线程、异步、事件驱动<br>特点：快、耗内存</p>\n<h4 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h4><p>express、koa、Hapi、以及express基础上的sails</p>\n<h3 id=\"node的安装\"><a href=\"#node的安装\" class=\"headerlink\" title=\"node的安装\"></a>node的安装</h3><p><a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"noopener\">http://nodejs.cn/</a><br>是否成功：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v  </span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"第一个hello程序\"><a href=\"#第一个hello程序\" class=\"headerlink\" title=\"第一个hello程序\"></a>第一个hello程序</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\">http.createServer(<span class=\"keyword\">function</span>(request,response)&#123;</span><br><span class=\"line\">    response.writeHead(200,&#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html; charset=utf-8'</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.url!==<span class=\"string\">\"/favicon.ico\"</span>) &#123;   //清除第二次访问</span><br><span class=\"line\">        console.log(<span class=\"string\">'访问'</span>);</span><br><span class=\"line\">        response.write(<span class=\"string\">'hello,world'</span>);</span><br><span class=\"line\">        response.end(<span class=\"string\">'你好，世界'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8000);</span><br><span class=\"line\">console.log(<span class=\"string\">'Server running at http://localhost:8000/'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用函数\"><a href=\"#调用函数\" class=\"headerlink\" title=\"调用函数\"></a>调用函数</h3><ul>\n<li>调用本地函数</li>\n<li>调用其他js文件中的函数</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"> var otherfun = require(<span class=\"string\">\"./models/other_func.js\"</span>);</span><br><span class=\"line\"> http.createServer(<span class=\"keyword\">function</span>(request,response)&#123;</span><br><span class=\"line\">    response.writeHead(200,&#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html; charset=utf-8'</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.url!==<span class=\"string\">\"/favicon.ico\"</span>) &#123;</span><br><span class=\"line\">        //fun1(response);</span><br><span class=\"line\">        otherfun.fun2(response);</span><br><span class=\"line\">        otherfun.fun3(response);</span><br><span class=\"line\"></span><br><span class=\"line\">          //用字符串调用对应函数</span><br><span class=\"line\">        // otherfun.fun2(response);</span><br><span class=\"line\">        // otherfun.fun3(response);</span><br><span class=\"line\"></span><br><span class=\"line\">        funname = <span class=\"string\">'fun3'</span>;</span><br><span class=\"line\">        otherfun[funname](response);</span><br><span class=\"line\"></span><br><span class=\"line\">        response.end(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8000);</span><br><span class=\"line\">console.log(<span class=\"string\">'Server running at http://10.75.68.123:8000/'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> fun1(res)&#123;       // 本文件函数</span><br><span class=\"line\">    console.log(<span class=\"string\">\"fun1\"</span>);</span><br><span class=\"line\">    res.write(<span class=\"string\">\"hello,我是fun1\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于被调用的函数：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//只支持一个函数</span><br><span class=\"line\"><span class=\"keyword\">function</span> fun2(res)&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">\"fun2\"</span>);</span><br><span class=\"line\">    res.write(<span class=\"string\">\"hello,我是fun2\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = fun2;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    //支持多个函数</span><br><span class=\"line\">module.exports=&#123;</span><br><span class=\"line\">    fun2:<span class=\"keyword\">function</span>(res)&#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">\"fun2\"</span>);</span><br><span class=\"line\">        res.write(<span class=\"string\">\"hello,我是fun2\"</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    fun3:<span class=\"keyword\">function</span>(res)&#123;</span><br><span class=\"line\">        console.log(<span class=\"string\">\"fun3\"</span>);</span><br><span class=\"line\">        res.write(<span class=\"string\">\"hello,我是fun3\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"调用模块\"><a href=\"#调用模块\" class=\"headerlink\" title=\"调用模块\"></a>调用模块</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> var http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"> // var User = require(<span class=\"string\">\"./models/User\"</span>);</span><br><span class=\"line\"> var Teacher = require(<span class=\"string\">\"./models/Teacher\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> http.createServer(<span class=\"keyword\">function</span>(request,response)&#123;</span><br><span class=\"line\">    response.writeHead(200,&#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html; charset=utf-8'</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.url!==<span class=\"string\">\"/favicon.ico\"</span>) &#123;</span><br><span class=\"line\">        teacher = new Teacher(1,<span class=\"string\">\"张三\"</span>,20);</span><br><span class=\"line\">        teacher.enter();</span><br><span class=\"line\">        teacher.teach(response);</span><br><span class=\"line\">        // user.id=1;</span><br><span class=\"line\">        // user.name=<span class=\"string\">\"张三\"</span>;</span><br><span class=\"line\">        // user.age=20;</span><br><span class=\"line\">        // user.enter();</span><br><span class=\"line\">        response.end(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8000);</span><br><span class=\"line\">console.log(<span class=\"string\">'Server running at http://localhost:8000/'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"路由初步\"><a href=\"#路由初步\" class=\"headerlink\" title=\"路由初步\"></a>路由初步</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> var http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"> var url = require(<span class=\"string\">\"url\"</span>);</span><br><span class=\"line\"> var router = require(<span class=\"string\">\"./router\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(<span class=\"keyword\">function</span>(request,response)&#123;</span><br><span class=\"line\">    response.writeHead(200,&#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html; charset=utf-8'</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.url!==<span class=\"string\">\"/favicon.ico\"</span>) &#123;</span><br><span class=\"line\">        var pathname=url.parse(request.url).pathname;</span><br><span class=\"line\">        pathname = pathname.replace(/\\//,<span class=\"string\">''</span>);   //替换掉前面的<span class=\"string\">\"/\"</span></span><br><span class=\"line\">        router[pathname](request,response);</span><br><span class=\"line\">        console.log(pathname);</span><br><span class=\"line\">        response.end(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8000);</span><br><span class=\"line\">console.log(<span class=\"string\">'Server running at http://10.75.68.123:8000/'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"读文件\"><a href=\"#读文件\" class=\"headerlink\" title=\"读文件\"></a>读文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\"> var url = require(<span class=\"string\">'url'</span>);</span><br><span class=\"line\"> var router = require(<span class=\"string\">'./router'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> // var optfile = require(<span class=\"string\">\"./models/optfile\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> http.createServer(<span class=\"keyword\">function</span>(request,response)&#123;</span><br><span class=\"line\">    response.writeHead(200,&#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html; charset=utf-8'</span>&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (request.url!==<span class=\"string\">\"/favicon.ico\"</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        var pathname=url.parse(request.url).pathname;</span><br><span class=\"line\">        pathname = pathname.replace(/\\//,<span class=\"string\">''</span>);   //替换掉前面的<span class=\"string\">\"/\"</span></span><br><span class=\"line\">        router[pathname](request,response);</span><br><span class=\"line\">        </span><br><span class=\"line\">        /*</span><br><span class=\"line\">        // optfile.readfileSync(<span class=\"string\">'./views/login.html'</span>);</span><br><span class=\"line\">        // optfile.readFile(<span class=\"string\">'./views/login.html'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">function</span> recall(data)&#123;</span><br><span class=\"line\">            response.write(data);</span><br><span class=\"line\">            response.end(<span class=\"string\">'ok'</span>);   //不写则没有http协议尾</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        optfile.readFile(<span class=\"string\">'./views/login.html'</span>,recall);</span><br><span class=\"line\">        // optfile.readFile(<span class=\"string\">'C:\\inetpub\\wwwroot\\HN_NTZJS01/index.html'</span>,recall);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">        console.log(<span class=\"string\">\"主程序执行完毕\"</span>);</span><br><span class=\"line\">        */</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).listen(8000);</span><br><span class=\"line\">console.log(<span class=\"string\">'Server running at http://localhost:8000/'</span>)</span><br></pre></td></tr></table></figure>\n<p>待续。。。</p>\n"},{"title":"hexo学习","_content":"\n <font color=\"red\" size=\"5\">https://xdd7130.github.io</font><font color=\"red\" size=\"5\">若存储在master中,xdd7130不可更改,必须和github的username一致.</font>\n\n## 为博客添加访问量\n参考：https://blog.csdn.net/qw8880000/article/details/80235391\n这里使用的是不蒜子提供的阅读统计功能，使用的hexo主题是stage。\n### 添加是否开启统计功能的配置\n找到stage主题的配置文件themes/stage/_config.yml，找到原来的footer字段，加入一个配置，这里我们叫它counter吧，即\n``` bash\nfooter:\n  # -------------------------------------------------------------\n  # visitors count\n  counter: true\n```\n修改stage主题的模板文件\n由于是把访问量统计放在网页的footer，所以我们需要修改的模板文件是theme/stage/layout/_partials/footer.ejs。 \n我们在合适的位置加入：\n``` bash\n{% if theme.footer.counter %}\n    <script async src=\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\n    <span id=\"busuanzi_container_site_pv\">总访问量<span id=\"busuanzi_value_site_pv\"></span>次</span>\n    <span class=\"post-meta-divider\">|</span>\n    <span id=\"busuanzi_container_site_uv\">总访客<span id=\"busuanzi_value_site_uv\"></span>人</span>\n    <span class=\"post-meta-divider\">|</span>\n\n{% endif %}\n```\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n\n\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n#### Hexo+github搭建博客\n1、  npm install -g hexo\n错误：npm WARN deprecated titlecase@1.1.2: no longer maintained\n解决：安装淘宝镜像\n``` bash\nnpm config set registry https://registry.npm.taobao.org\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n2、  初始化(hexo init)\nHexo文件夹必须为空。\n3、  hexo g 生成静态文件\n``` bash\nhexo s 搭建本地服务查看localhost:4000\n```\n4、  hexo d \n问题：$ hexo d： ERROR Deployer not found: git\n``` bash\nnpm install --save hexo-deployer-git\n```\n部署本地文件到github\n既然Repository已经创建了，当然是先把博客放到Github上去看看效果。编辑E：\\hexo下的_config.yml文件，建议使用Notepad++。\n在_config.yml最下方，添加如下配置(命令中的第一个tengj为Github的用户名,第二个tengj为之前New的Repository的名字,记得改成自己的。另外记得一点，hexo的配置文件中任何’:’后面都是带一个空格的),如果配置以下命令出现ERROR Deployer not found : github，则参考上文的解决方法\n``` bash\ndeploy: \n    type: git\n    repository: https://github.com/tengj/tengj.github.io.git\n    branch: master\n```\n配置_config.yml并保存。如果你是第一次使用Github或者是已经使用过，但没有配置过SSH，则可能需要配置一下:\n在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。\nls -al ~/.ssh\n如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件：\n输入以下指令（邮箱就是你注册Github时候的邮箱）后，回车，出现提示让你输入的时候直接先回车，好像需要3次，如下图所示：\n``` bash\nssh-keygen -t rsa -C \"2621324849@qq.com\"\n```\n然后键入以下指令：\n``` bash\nssh-agent -s\n```\n继续输入指令：\n``` bash\nssh-add ~/.ssh/id_rsa\n```\n输入之后，在我这里是出错了，不知道你的有没有出错。\n如果你的也是这样子出错了的话，就输入以下指令：\n``` bash\neval `ssh-agent -s`\nssh-add\n```\n到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴，不放心的在执行下面命令后，先黏贴在记事本上）：\n``` bash\nclip < ~/.ssh/id_rsa.pub\n```\n然后到Github里面，点击右上角的设置图标Settings,找到SSH keys,Ttile随便你命名，Key就黏贴上你刚才复制的key,然后点Add SSH key，最后会让你重新输入下gitHub的密码\n最后还是测试一下吧，键入以下命令：\n``` bash\nssh -T git@github.com\n```\n你可能会看到有警告，没事，输入“yes”就好\n以上就表示SSH配置好了，执行以下命令部署到Github上。\nhexo g\nhexo d\n如果执行hexo d命令报下名错：\n就先安装一下hexo-deployer-git这个模块：npm install hexo-deployer-git --save\n安装好了继续执行hexo d部署命令，输入gitHub的账号密码，就可以访问了。\n\n\n#### 问题：博客引入图片\n解决办法\n1.首先把blog（hexo）目录下的_config.yml里的psot_asset_folder:设置为true\n\n2.在blog（hexo）目录下执行:\n\nnpm install hexo-asset-image --save\n3.在blog（hexo）目录下Git Bash Here，运行hexo n \"博客名\"来生成md博客时，会在_post目录下看到一个与博客同名的文件夹。\n\n4.将想要上传的图片先扔到文件夹下，然后在博客中使用markdown的格式引入图片：\n\n\n![你想要输入的替代文字](xxxx/图片名.jpg)\nps：因为博客名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。\n\n5.然后，使用hexo g部署的时候，进入public\\2018\\04\\19\\index.html文件中查看相关字段，可以发现html标签内的语句是img src = \"2018/04/19/xxxx/图片名.jpg\"而不是img src=\"xxxx.图片名.jpg\"，这就成功了，当然前面步骤操作正确的话，这一步也不用检查。\n\n\n\n","source":"_posts/hexo.md","raw":"---\n---\ntitle: hexo学习\ncategories:\n- hexo\ntags: \n    - hexo\n---\n\n <font color=\"red\" size=\"5\">https://xdd7130.github.io</font><font color=\"red\" size=\"5\">若存储在master中,xdd7130不可更改,必须和github的username一致.</font>\n\n## 为博客添加访问量\n参考：https://blog.csdn.net/qw8880000/article/details/80235391\n这里使用的是不蒜子提供的阅读统计功能，使用的hexo主题是stage。\n### 添加是否开启统计功能的配置\n找到stage主题的配置文件themes/stage/_config.yml，找到原来的footer字段，加入一个配置，这里我们叫它counter吧，即\n``` bash\nfooter:\n  # -------------------------------------------------------------\n  # visitors count\n  counter: true\n```\n修改stage主题的模板文件\n由于是把访问量统计放在网页的footer，所以我们需要修改的模板文件是theme/stage/layout/_partials/footer.ejs。 \n我们在合适的位置加入：\n``` bash\n{% if theme.footer.counter %}\n    <script async src=\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\n    <span id=\"busuanzi_container_site_pv\">总访问量<span id=\"busuanzi_value_site_pv\"></span>次</span>\n    <span class=\"post-meta-divider\">|</span>\n    <span id=\"busuanzi_container_site_uv\">总访客<span id=\"busuanzi_value_site_uv\"></span>人</span>\n    <span class=\"post-meta-divider\">|</span>\n\n{% endif %}\n```\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n\n\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n#### Hexo+github搭建博客\n1、  npm install -g hexo\n错误：npm WARN deprecated titlecase@1.1.2: no longer maintained\n解决：安装淘宝镜像\n``` bash\nnpm config set registry https://registry.npm.taobao.org\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n2、  初始化(hexo init)\nHexo文件夹必须为空。\n3、  hexo g 生成静态文件\n``` bash\nhexo s 搭建本地服务查看localhost:4000\n```\n4、  hexo d \n问题：$ hexo d： ERROR Deployer not found: git\n``` bash\nnpm install --save hexo-deployer-git\n```\n部署本地文件到github\n既然Repository已经创建了，当然是先把博客放到Github上去看看效果。编辑E：\\hexo下的_config.yml文件，建议使用Notepad++。\n在_config.yml最下方，添加如下配置(命令中的第一个tengj为Github的用户名,第二个tengj为之前New的Repository的名字,记得改成自己的。另外记得一点，hexo的配置文件中任何’:’后面都是带一个空格的),如果配置以下命令出现ERROR Deployer not found : github，则参考上文的解决方法\n``` bash\ndeploy: \n    type: git\n    repository: https://github.com/tengj/tengj.github.io.git\n    branch: master\n```\n配置_config.yml并保存。如果你是第一次使用Github或者是已经使用过，但没有配置过SSH，则可能需要配置一下:\n在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。\nls -al ~/.ssh\n如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件：\n输入以下指令（邮箱就是你注册Github时候的邮箱）后，回车，出现提示让你输入的时候直接先回车，好像需要3次，如下图所示：\n``` bash\nssh-keygen -t rsa -C \"2621324849@qq.com\"\n```\n然后键入以下指令：\n``` bash\nssh-agent -s\n```\n继续输入指令：\n``` bash\nssh-add ~/.ssh/id_rsa\n```\n输入之后，在我这里是出错了，不知道你的有没有出错。\n如果你的也是这样子出错了的话，就输入以下指令：\n``` bash\neval `ssh-agent -s`\nssh-add\n```\n到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴，不放心的在执行下面命令后，先黏贴在记事本上）：\n``` bash\nclip < ~/.ssh/id_rsa.pub\n```\n然后到Github里面，点击右上角的设置图标Settings,找到SSH keys,Ttile随便你命名，Key就黏贴上你刚才复制的key,然后点Add SSH key，最后会让你重新输入下gitHub的密码\n最后还是测试一下吧，键入以下命令：\n``` bash\nssh -T git@github.com\n```\n你可能会看到有警告，没事，输入“yes”就好\n以上就表示SSH配置好了，执行以下命令部署到Github上。\nhexo g\nhexo d\n如果执行hexo d命令报下名错：\n就先安装一下hexo-deployer-git这个模块：npm install hexo-deployer-git --save\n安装好了继续执行hexo d部署命令，输入gitHub的账号密码，就可以访问了。\n\n\n#### 问题：博客引入图片\n解决办法\n1.首先把blog（hexo）目录下的_config.yml里的psot_asset_folder:设置为true\n\n2.在blog（hexo）目录下执行:\n\nnpm install hexo-asset-image --save\n3.在blog（hexo）目录下Git Bash Here，运行hexo n \"博客名\"来生成md博客时，会在_post目录下看到一个与博客同名的文件夹。\n\n4.将想要上传的图片先扔到文件夹下，然后在博客中使用markdown的格式引入图片：\n\n\n![你想要输入的替代文字](xxxx/图片名.jpg)\nps：因为博客名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。\n\n5.然后，使用hexo g部署的时候，进入public\\2018\\04\\19\\index.html文件中查看相关字段，可以发现html标签内的语句是img src = \"2018/04/19/xxxx/图片名.jpg\"而不是img src=\"xxxx.图片名.jpg\"，这就成功了，当然前面步骤操作正确的话，这一步也不用检查。\n\n\n\n","slug":"hexo","published":1,"date":"2019-09-22T08:27:45.712Z","updated":"2019-07-30T14:21:54.953Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cve0030t09zwo65q47y","content":" <font color=\"red\" size=\"5\"><a href=\"https://xdd7130.github.io\" target=\"_blank\" rel=\"noopener\">https://xdd7130.github.io</a></font><font color=\"red\" size=\"5\">若存储在master中,xdd7130不可更改,必须和github的username一致.</font>\n\n<h2 id=\"为博客添加访问量\"><a href=\"#为博客添加访问量\" class=\"headerlink\" title=\"为博客添加访问量\"></a>为博客添加访问量</h2><p>参考：<a href=\"https://blog.csdn.net/qw8880000/article/details/80235391\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qw8880000/article/details/80235391</a><br>这里使用的是不蒜子提供的阅读统计功能，使用的hexo主题是stage。</p>\n<h3 id=\"添加是否开启统计功能的配置\"><a href=\"#添加是否开启统计功能的配置\" class=\"headerlink\" title=\"添加是否开启统计功能的配置\"></a>添加是否开启统计功能的配置</h3><p>找到stage主题的配置文件themes/stage/_config.yml，找到原来的footer字段，加入一个配置，这里我们叫它counter吧，即<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">footer:</span><br><span class=\"line\">  <span class=\"comment\"># -------------------------------------------------------------</span></span><br><span class=\"line\">  <span class=\"comment\"># visitors count</span></span><br><span class=\"line\">  counter: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>修改stage主题的模板文件<br>由于是把访问量统计放在网页的footer，所以我们需要修改的模板文件是theme/stage/layout/_partials/footer.ejs。<br>我们在合适的位置加入：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> theme.footer.counter %&#125;</span><br><span class=\"line\">    &lt;script async src=<span class=\"string\">\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;span id=<span class=\"string\">\"busuanzi_container_site_pv\"</span>&gt;总访问量&lt;span id=<span class=\"string\">\"busuanzi_value_site_pv\"</span>&gt;&lt;/span&gt;次&lt;/span&gt;</span><br><span class=\"line\">    &lt;span class=<span class=\"string\">\"post-meta-divider\"</span>&gt;|&lt;/span&gt;</span><br><span class=\"line\">    &lt;span id=<span class=\"string\">\"busuanzi_container_site_uv\"</span>&gt;总访客&lt;span id=<span class=\"string\">\"busuanzi_value_site_uv\"</span>&gt;&lt;/span&gt;人&lt;/span&gt;</span><br><span class=\"line\">    &lt;span class=<span class=\"string\">\"post-meta-divider\"</span>&gt;|&lt;/span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<h4 id=\"Hexo-github搭建博客\"><a href=\"#Hexo-github搭建博客\" class=\"headerlink\" title=\"Hexo+github搭建博客\"></a>Hexo+github搭建博客</h4><p>1、  npm install -g hexo<br>错误：npm WARN deprecated <a href=\"mailto:titlecase@1.1.2\" target=\"_blank\" rel=\"noopener\">titlecase@1.1.2</a>: no longer maintained<br>解决：安装淘宝镜像<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>\n<p>2、  初始化(hexo init)<br>Hexo文件夹必须为空。<br>3、  hexo g 生成静态文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s 搭建本地服务查看localhost:4000</span><br></pre></td></tr></table></figure></p>\n<p>4、  hexo d<br>问题：$ hexo d： ERROR Deployer not found: git<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></p>\n<p>部署本地文件到github<br>既然Repository已经创建了，当然是先把博客放到Github上去看看效果。编辑E：\\hexo下的_config.yml文件，建议使用Notepad++。<br>在_config.yml最下方，添加如下配置(命令中的第一个tengj为Github的用户名,第二个tengj为之前New的Repository的名字,记得改成自己的。另外记得一点，hexo的配置文件中任何’:’后面都是带一个空格的),如果配置以下命令出现ERROR Deployer not found : github，则参考上文的解决方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy: </span><br><span class=\"line\">    <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">    repository: https://github.com/tengj/tengj.github.io.git</span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure></p>\n<p>配置_config.yml并保存。如果你是第一次使用Github或者是已经使用过，但没有配置过SSH，则可能需要配置一下:<br>在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。<br>ls -al ~/.ssh<br>如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件：<br>输入以下指令（邮箱就是你注册Github时候的邮箱）后，回车，出现提示让你输入的时候直接先回车，好像需要3次，如下图所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"2621324849@qq.com\"</span></span><br></pre></td></tr></table></figure></p>\n<p>然后键入以下指令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-agent -s</span><br></pre></td></tr></table></figure></p>\n<p>继续输入指令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p>\n<p>输入之后，在我这里是出错了，不知道你的有没有出错。<br>如果你的也是这样子出错了的话，就输入以下指令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span> `ssh-agent -s`</span><br><span class=\"line\">ssh-add</span><br></pre></td></tr></table></figure></p>\n<p>到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴，不放心的在执行下面命令后，先黏贴在记事本上）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p>\n<p>然后到Github里面，点击右上角的设置图标Settings,找到SSH keys,Ttile随便你命名，Key就黏贴上你刚才复制的key,然后点Add SSH key，最后会让你重新输入下gitHub的密码<br>最后还是测试一下吧，键入以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p>\n<p>你可能会看到有警告，没事，输入“yes”就好<br>以上就表示SSH配置好了，执行以下命令部署到Github上。<br>hexo g<br>hexo d<br>如果执行hexo d命令报下名错：<br>就先安装一下hexo-deployer-git这个模块：npm install hexo-deployer-git –save<br>安装好了继续执行hexo d部署命令，输入gitHub的账号密码，就可以访问了。</p>\n<h4 id=\"问题：博客引入图片\"><a href=\"#问题：博客引入图片\" class=\"headerlink\" title=\"问题：博客引入图片\"></a>问题：博客引入图片</h4><p>解决办法<br>1.首先把blog（hexo）目录下的_config.yml里的psot_asset_folder:设置为true</p>\n<p>2.在blog（hexo）目录下执行:</p>\n<p>npm install hexo-asset-image –save<br>3.在blog（hexo）目录下Git Bash Here，运行hexo n “博客名”来生成md博客时，会在_post目录下看到一个与博客同名的文件夹。</p>\n<p>4.将想要上传的图片先扔到文件夹下，然后在博客中使用markdown的格式引入图片：</p>\n<p><img src=\"/2019/09/22/hexo/xxxx/图片名.jpg\" alt=\"你想要输入的替代文字\"><br>ps：因为博客名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。</p>\n<p>5.然后，使用hexo g部署的时候，进入public\\2018\\04\\19\\index.html文件中查看相关字段，可以发现html标签内的语句是img src = “2018/04/19/xxxx/图片名.jpg”而不是img src=”xxxx.图片名.jpg”，这就成功了，当然前面步骤操作正确的话，这一步也不用检查。</p>\n","site":{"data":{}},"excerpt":"","more":" <font color=\"red\" size=\"5\"><a href=\"https://xdd7130.github.io\" target=\"_blank\" rel=\"noopener\">https://xdd7130.github.io</a></font><font color=\"red\" size=\"5\">若存储在master中,xdd7130不可更改,必须和github的username一致.</font>\n\n<h2 id=\"为博客添加访问量\"><a href=\"#为博客添加访问量\" class=\"headerlink\" title=\"为博客添加访问量\"></a>为博客添加访问量</h2><p>参考：<a href=\"https://blog.csdn.net/qw8880000/article/details/80235391\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qw8880000/article/details/80235391</a><br>这里使用的是不蒜子提供的阅读统计功能，使用的hexo主题是stage。</p>\n<h3 id=\"添加是否开启统计功能的配置\"><a href=\"#添加是否开启统计功能的配置\" class=\"headerlink\" title=\"添加是否开启统计功能的配置\"></a>添加是否开启统计功能的配置</h3><p>找到stage主题的配置文件themes/stage/_config.yml，找到原来的footer字段，加入一个配置，这里我们叫它counter吧，即<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">footer:</span><br><span class=\"line\">  <span class=\"comment\"># -------------------------------------------------------------</span></span><br><span class=\"line\">  <span class=\"comment\"># visitors count</span></span><br><span class=\"line\">  counter: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>修改stage主题的模板文件<br>由于是把访问量统计放在网页的footer，所以我们需要修改的模板文件是theme/stage/layout/_partials/footer.ejs。<br>我们在合适的位置加入：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> theme.footer.counter %&#125;</span><br><span class=\"line\">    &lt;script async src=<span class=\"string\">\"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;span id=<span class=\"string\">\"busuanzi_container_site_pv\"</span>&gt;总访问量&lt;span id=<span class=\"string\">\"busuanzi_value_site_pv\"</span>&gt;&lt;/span&gt;次&lt;/span&gt;</span><br><span class=\"line\">    &lt;span class=<span class=\"string\">\"post-meta-divider\"</span>&gt;|&lt;/span&gt;</span><br><span class=\"line\">    &lt;span id=<span class=\"string\">\"busuanzi_container_site_uv\"</span>&gt;总访客&lt;span id=<span class=\"string\">\"busuanzi_value_site_uv\"</span>&gt;&lt;/span&gt;人&lt;/span&gt;</span><br><span class=\"line\">    &lt;span class=<span class=\"string\">\"post-meta-divider\"</span>&gt;|&lt;/span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<h4 id=\"Hexo-github搭建博客\"><a href=\"#Hexo-github搭建博客\" class=\"headerlink\" title=\"Hexo+github搭建博客\"></a>Hexo+github搭建博客</h4><p>1、  npm install -g hexo<br>错误：npm WARN deprecated <a href=\"mailto:titlecase@1.1.2\" target=\"_blank\" rel=\"noopener\">titlecase@1.1.2</a>: no longer maintained<br>解决：安装淘宝镜像<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p>\n<p>2、  初始化(hexo init)<br>Hexo文件夹必须为空。<br>3、  hexo g 生成静态文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s 搭建本地服务查看localhost:4000</span><br></pre></td></tr></table></figure></p>\n<p>4、  hexo d<br>问题：$ hexo d： ERROR Deployer not found: git<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure></p>\n<p>部署本地文件到github<br>既然Repository已经创建了，当然是先把博客放到Github上去看看效果。编辑E：\\hexo下的_config.yml文件，建议使用Notepad++。<br>在_config.yml最下方，添加如下配置(命令中的第一个tengj为Github的用户名,第二个tengj为之前New的Repository的名字,记得改成自己的。另外记得一点，hexo的配置文件中任何’:’后面都是带一个空格的),如果配置以下命令出现ERROR Deployer not found : github，则参考上文的解决方法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy: </span><br><span class=\"line\">    <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">    repository: https://github.com/tengj/tengj.github.io.git</span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure></p>\n<p>配置_config.yml并保存。如果你是第一次使用Github或者是已经使用过，但没有配置过SSH，则可能需要配置一下:<br>在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。<br>ls -al ~/.ssh<br>如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件：<br>输入以下指令（邮箱就是你注册Github时候的邮箱）后，回车，出现提示让你输入的时候直接先回车，好像需要3次，如下图所示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"2621324849@qq.com\"</span></span><br></pre></td></tr></table></figure></p>\n<p>然后键入以下指令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-agent -s</span><br></pre></td></tr></table></figure></p>\n<p>继续输入指令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p>\n<p>输入之后，在我这里是出错了，不知道你的有没有出错。<br>如果你的也是这样子出错了的话，就输入以下指令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span> `ssh-agent -s`</span><br><span class=\"line\">ssh-add</span><br></pre></td></tr></table></figure></p>\n<p>到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴，不放心的在执行下面命令后，先黏贴在记事本上）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p>\n<p>然后到Github里面，点击右上角的设置图标Settings,找到SSH keys,Ttile随便你命名，Key就黏贴上你刚才复制的key,然后点Add SSH key，最后会让你重新输入下gitHub的密码<br>最后还是测试一下吧，键入以下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p>\n<p>你可能会看到有警告，没事，输入“yes”就好<br>以上就表示SSH配置好了，执行以下命令部署到Github上。<br>hexo g<br>hexo d<br>如果执行hexo d命令报下名错：<br>就先安装一下hexo-deployer-git这个模块：npm install hexo-deployer-git –save<br>安装好了继续执行hexo d部署命令，输入gitHub的账号密码，就可以访问了。</p>\n<h4 id=\"问题：博客引入图片\"><a href=\"#问题：博客引入图片\" class=\"headerlink\" title=\"问题：博客引入图片\"></a>问题：博客引入图片</h4><p>解决办法<br>1.首先把blog（hexo）目录下的_config.yml里的psot_asset_folder:设置为true</p>\n<p>2.在blog（hexo）目录下执行:</p>\n<p>npm install hexo-asset-image –save<br>3.在blog（hexo）目录下Git Bash Here，运行hexo n “博客名”来生成md博客时，会在_post目录下看到一个与博客同名的文件夹。</p>\n<p>4.将想要上传的图片先扔到文件夹下，然后在博客中使用markdown的格式引入图片：</p>\n<p><img src=\"/2019/09/22/hexo/xxxx/图片名.jpg\" alt=\"你想要输入的替代文字\"><br>ps：因为博客名和文件夹名字相同，所以不需要绝对路径，只要xxxx是文件夹的名字就可以了。</p>\n<p>5.然后，使用hexo g部署的时候，进入public\\2018\\04\\19\\index.html文件中查看相关字段，可以发现html标签内的语句是img src = “2018/04/19/xxxx/图片名.jpg”而不是img src=”xxxx.图片名.jpg”，这就成功了，当然前面步骤操作正确的话，这一步也不用检查。</p>\n"},{"title":"node笔记(一)","date":"2019-08-11T11:48:05.000Z","_content":"### node\n优势：\n1、性能好\n2、跟前台JS配合方便\n3、NodeJS便于前端学习\n### http系统模块使用\n```bash\nconst http=require('http');\nvar server = http.creatServer(function(req,res){  //创建服务器\n    switch(res.url){\n        case \"/1.html\":\n            res.write(\"向前台写东西111\")；\n            break; \n        case \"/2.html\":\n            res.write(\"向前台写东西222\")；\n            break;\n        default\n            res.write(\"404\")；\n            break;\n    }\n    // res.write(\"向前台写东西\")；\n    res.end();//结束请求\n})\n//监听 —— 等着\n//端口 —— 数字\nserver.listen(8888);\n```\n### fs文件模块\nfs (file system)\n```bash\n//导入引用:\n    const fs = require('fs');\n//1.readFile(文件名，回调函数)\n    fs.readFile('aaa.txt',function(err,data){\n        if(err){\n            console.log('读取失败')；\n        }else{\n            console.log(data.toString());//二进制格式用toString转换\n        }\n        \n    })\n//2.writeFile(文件名，内容，回调函数)\nfs.write(\"bbb.txt\",\"asdfghjkl\",function(err){\n    console.log(err);\n})\n```\n与服务器结合\n建立www（可以是其他名字）文件夹，用于存放请求的文件。\n```bash\nconst http=require('http');\nvar server = http.creatServer(function(req,res){  //创建服务器\n    //req.url = 'index.html'\n    //读取:'./www/index.html'\n    var file_name = './www'+req.url\n    \n    fs.readFile(file_name,function(err,data){ //异步\n        if(err){\n            res.write('读取失败')\n        }else{\n            res.write(data)\n        }\n        res.end();//结束请求，因为异步，res.end()应放在此处\n    })\n    \n})\nserver.listen(8888);\n```\n### http数据解析（get）\n前台发送请求的方式：form/ajax/jsonp\n后台都是一样。唯有一点不同，请求方式不同，接受方式不一样（get/post）.下面一个实例：\nGET数据解析：\n* 自己切\n* querystring:\n* url:urlLib.parse(...,true)\n\nserver.js 普通写法\n```bash\nconst http = require('http');\nhttp.createServer(function(req,res){\n    //req获取前台请求的数据\n    var get={};\n    if(req.url.indexOf('?') != -1){\n        console.log(req.url); //  /aaa?user=Tom&pass=123456\n        var arr = req.url.split('？')；// arr[0]='/aaa'  arr[1]='user=Tom&pass=123456'\n        var url=arr[0];\n        var arr2 = arr[1].split('&'); //arr2\n        for(var i=0;i<arr2.length;i++){\n            var arr3=arr2[i].split('=')\n            get[arr3[0]]=arr3[1];\n        }\n    }else{\n        var url=req.url;\n    }\n    console.log(url,get)\n    res.end();\n}).listen(8080);\n```\nserver.js querystring模块写法：\n```bash\n  //写法如下：\n    //const querystring=require('querystring');\n    //var json = querystring.parse('user=Tom&pass=123456')\n    //console.log(json)\n//server.js改动后：\n    const http = require('http');\n    const querystring=require('querystring');\n    http.createServer(function(req,res){\n        //req获取前台请求的数据\n        var get={};\n        if(req.url.indexOf('?') != -1){\n            console.log(req.url); //  /aaa?user=Tom&pass=123456\n            var arr = req.url.split('？')；// arr[0]='/aaa'  arr[1]='user=Tom&pass=123456'\n            var url=arr[0];\n            get=querystring.parse(arr[1]);\n        }else{\n            var url=req.url;\n        }\n        console.log(url,get)\n        res.end();\n    }).listen(8080);\n```\nserver.js url模块写法：\n```bash\n//url.js写法\n    const urlLib=require('url');\n    var obj= urlLib.parse(\"http://www.aaa.bbb/index.html?a=12&b=55\",true);  第二个参数为true时，会把pathname等解析为json.\n    console.log(obj.pathname,obj.query);\n//server.js改动后：\n    const http = require('http');\n    http.createServer(function(req,res){\n        //req获取前台请求的数据\n        var obj = urlLib.parse(req.url,true);\n        var url=obj.pathname;\n        var get=obj.query;\n\n        console.log(url,get)\n        res.end();\n    }).listen(8080);\n```\nform.html\n```bash\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n<body>\n    <form action=\"http://localhost:8080/aaa\" method=\"get\">\n        用户：\n        <input type=\"text\" name=\"user\" value=''> <br>\n        <input type=\"password\" name=\"pass\" value=''> <br>\n        <input type=\"submit\" value='提交'\n    </form>\n</body>\n</html>\n```\n### http数据解析（post）\nPOST数据接收：POST数据比GET数据大的多,根据数据量大小分段完成\n```bash\n    const http=require('http');\n    const querystring=require('querystring');\n    http.creatServer(function(req,res){\n            //POST--req\n        var str='';  //接受数据\n\n            //data--有一段数据到达（很多次）\n        req.on('data',function(){\n            str+=data\n        });\n            //end--数据全部到达（一次）\n        req.on('end',function(){\n            var post = querystring.parse(str);\n            console.log(post)\n        });\n    }).listen(8080);\n```\n### 应用1:简易httpServer搭建,用户注册登录(略)\n### nodeJS模块化\n#### 系统模块介绍\n除了以上用到的：http、querystring、url,还有：\n* Crypto 加密\n* Event 事件\n* Net 网络操作\n* OS 操作系统信息\n* Path 处理文件路径\n* Stream 流操作\n* Timer 定时器\n* ZLIB 压缩\n\n#### 自定义模块\n关于引入模块写法：若为当前目录自己的模块，加上“./”,系统模块要加。\n若想要输出东西，必须exports。\n若都输出多个东西，module可实现批量输出。\n* require:请求引入其他模块。\n* module:批量输出。\n* exports:输出。\n* module.exports == exports。\n* const aaa = require('./bbb.js'); 其中“.js”可省略。\n\nnpm:nodejs package manager(nodejs包管理器)\n1、统计下载途径\n2、自动下载依赖\n\nnpm init\nnpm publish\nnpm update\nnpm unpublish\nnpm --force unpublish\n\n\n![01.png](01.png)\n\n\n\n\nnode_modules:放模块，可以放自己定义的模块，此时若引用，不加“./”\n>总结：require引入模块，若有“./”,从当前目录找，若没有“./”，从系统模块或node_modules找。\n>模块优先级：系统>node_modules,一般将自定义模块放在node_modules中。\n\n","source":"_posts/node4.md","raw":"---\ntitle: node笔记(一)\ndate: 2019-08-11 19:48:05\ncategories:\n- Node\ntags: [Node.js]\n---\n### node\n优势：\n1、性能好\n2、跟前台JS配合方便\n3、NodeJS便于前端学习\n### http系统模块使用\n```bash\nconst http=require('http');\nvar server = http.creatServer(function(req,res){  //创建服务器\n    switch(res.url){\n        case \"/1.html\":\n            res.write(\"向前台写东西111\")；\n            break; \n        case \"/2.html\":\n            res.write(\"向前台写东西222\")；\n            break;\n        default\n            res.write(\"404\")；\n            break;\n    }\n    // res.write(\"向前台写东西\")；\n    res.end();//结束请求\n})\n//监听 —— 等着\n//端口 —— 数字\nserver.listen(8888);\n```\n### fs文件模块\nfs (file system)\n```bash\n//导入引用:\n    const fs = require('fs');\n//1.readFile(文件名，回调函数)\n    fs.readFile('aaa.txt',function(err,data){\n        if(err){\n            console.log('读取失败')；\n        }else{\n            console.log(data.toString());//二进制格式用toString转换\n        }\n        \n    })\n//2.writeFile(文件名，内容，回调函数)\nfs.write(\"bbb.txt\",\"asdfghjkl\",function(err){\n    console.log(err);\n})\n```\n与服务器结合\n建立www（可以是其他名字）文件夹，用于存放请求的文件。\n```bash\nconst http=require('http');\nvar server = http.creatServer(function(req,res){  //创建服务器\n    //req.url = 'index.html'\n    //读取:'./www/index.html'\n    var file_name = './www'+req.url\n    \n    fs.readFile(file_name,function(err,data){ //异步\n        if(err){\n            res.write('读取失败')\n        }else{\n            res.write(data)\n        }\n        res.end();//结束请求，因为异步，res.end()应放在此处\n    })\n    \n})\nserver.listen(8888);\n```\n### http数据解析（get）\n前台发送请求的方式：form/ajax/jsonp\n后台都是一样。唯有一点不同，请求方式不同，接受方式不一样（get/post）.下面一个实例：\nGET数据解析：\n* 自己切\n* querystring:\n* url:urlLib.parse(...,true)\n\nserver.js 普通写法\n```bash\nconst http = require('http');\nhttp.createServer(function(req,res){\n    //req获取前台请求的数据\n    var get={};\n    if(req.url.indexOf('?') != -1){\n        console.log(req.url); //  /aaa?user=Tom&pass=123456\n        var arr = req.url.split('？')；// arr[0]='/aaa'  arr[1]='user=Tom&pass=123456'\n        var url=arr[0];\n        var arr2 = arr[1].split('&'); //arr2\n        for(var i=0;i<arr2.length;i++){\n            var arr3=arr2[i].split('=')\n            get[arr3[0]]=arr3[1];\n        }\n    }else{\n        var url=req.url;\n    }\n    console.log(url,get)\n    res.end();\n}).listen(8080);\n```\nserver.js querystring模块写法：\n```bash\n  //写法如下：\n    //const querystring=require('querystring');\n    //var json = querystring.parse('user=Tom&pass=123456')\n    //console.log(json)\n//server.js改动后：\n    const http = require('http');\n    const querystring=require('querystring');\n    http.createServer(function(req,res){\n        //req获取前台请求的数据\n        var get={};\n        if(req.url.indexOf('?') != -1){\n            console.log(req.url); //  /aaa?user=Tom&pass=123456\n            var arr = req.url.split('？')；// arr[0]='/aaa'  arr[1]='user=Tom&pass=123456'\n            var url=arr[0];\n            get=querystring.parse(arr[1]);\n        }else{\n            var url=req.url;\n        }\n        console.log(url,get)\n        res.end();\n    }).listen(8080);\n```\nserver.js url模块写法：\n```bash\n//url.js写法\n    const urlLib=require('url');\n    var obj= urlLib.parse(\"http://www.aaa.bbb/index.html?a=12&b=55\",true);  第二个参数为true时，会把pathname等解析为json.\n    console.log(obj.pathname,obj.query);\n//server.js改动后：\n    const http = require('http');\n    http.createServer(function(req,res){\n        //req获取前台请求的数据\n        var obj = urlLib.parse(req.url,true);\n        var url=obj.pathname;\n        var get=obj.query;\n\n        console.log(url,get)\n        res.end();\n    }).listen(8080);\n```\nform.html\n```bash\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n<body>\n    <form action=\"http://localhost:8080/aaa\" method=\"get\">\n        用户：\n        <input type=\"text\" name=\"user\" value=''> <br>\n        <input type=\"password\" name=\"pass\" value=''> <br>\n        <input type=\"submit\" value='提交'\n    </form>\n</body>\n</html>\n```\n### http数据解析（post）\nPOST数据接收：POST数据比GET数据大的多,根据数据量大小分段完成\n```bash\n    const http=require('http');\n    const querystring=require('querystring');\n    http.creatServer(function(req,res){\n            //POST--req\n        var str='';  //接受数据\n\n            //data--有一段数据到达（很多次）\n        req.on('data',function(){\n            str+=data\n        });\n            //end--数据全部到达（一次）\n        req.on('end',function(){\n            var post = querystring.parse(str);\n            console.log(post)\n        });\n    }).listen(8080);\n```\n### 应用1:简易httpServer搭建,用户注册登录(略)\n### nodeJS模块化\n#### 系统模块介绍\n除了以上用到的：http、querystring、url,还有：\n* Crypto 加密\n* Event 事件\n* Net 网络操作\n* OS 操作系统信息\n* Path 处理文件路径\n* Stream 流操作\n* Timer 定时器\n* ZLIB 压缩\n\n#### 自定义模块\n关于引入模块写法：若为当前目录自己的模块，加上“./”,系统模块要加。\n若想要输出东西，必须exports。\n若都输出多个东西，module可实现批量输出。\n* require:请求引入其他模块。\n* module:批量输出。\n* exports:输出。\n* module.exports == exports。\n* const aaa = require('./bbb.js'); 其中“.js”可省略。\n\nnpm:nodejs package manager(nodejs包管理器)\n1、统计下载途径\n2、自动下载依赖\n\nnpm init\nnpm publish\nnpm update\nnpm unpublish\nnpm --force unpublish\n\n\n![01.png](01.png)\n\n\n\n\nnode_modules:放模块，可以放自己定义的模块，此时若引用，不加“./”\n>总结：require引入模块，若有“./”,从当前目录找，若没有“./”，从系统模块或node_modules找。\n>模块优先级：系统>node_modules,一般将自定义模块放在node_modules中。\n\n","slug":"node4","published":1,"updated":"2019-09-10T03:48:39.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cvg0033t09z2izzpju2","content":"<h3 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h3><p>优势：<br>1、性能好<br>2、跟前台JS配合方便<br>3、NodeJS便于前端学习</p>\n<h3 id=\"http系统模块使用\"><a href=\"#http系统模块使用\" class=\"headerlink\" title=\"http系统模块使用\"></a>http系统模块使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http=require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\">var server = http.creatServer(<span class=\"keyword\">function</span>(req,res)&#123;  //创建服务器</span><br><span class=\"line\">    switch(res.url)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"/1.html\"</span>:</span><br><span class=\"line\">            res.write(<span class=\"string\">\"向前台写东西111\"</span>)；</span><br><span class=\"line\">            <span class=\"built_in\">break</span>; </span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"/2.html\"</span>:</span><br><span class=\"line\">            res.write(<span class=\"string\">\"向前台写东西222\"</span>)；</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        default</span><br><span class=\"line\">            res.write(<span class=\"string\">\"404\"</span>)；</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // res.write(<span class=\"string\">\"向前台写东西\"</span>)；</span><br><span class=\"line\">    res.end();//结束请求</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//监听 —— 等着</span><br><span class=\"line\">//端口 —— 数字</span><br><span class=\"line\">server.listen(8888);</span><br></pre></td></tr></table></figure>\n<h3 id=\"fs文件模块\"><a href=\"#fs文件模块\" class=\"headerlink\" title=\"fs文件模块\"></a>fs文件模块</h3><p>fs (file system)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//导入引用:</span><br><span class=\"line\">    const fs = require(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\">//1.readFile(文件名，回调函数)</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">'aaa.txt'</span>,<span class=\"keyword\">function</span>(err,data)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">'读取失败'</span>)；</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            console.log(data.toString());//二进制格式用toString转换</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">//2.writeFile(文件名，内容，回调函数)</span><br><span class=\"line\">fs.write(<span class=\"string\">\"bbb.txt\"</span>,<span class=\"string\">\"asdfghjkl\"</span>,<span class=\"keyword\">function</span>(err)&#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>与服务器结合<br>建立www（可以是其他名字）文件夹，用于存放请求的文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http=require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\">var server = http.creatServer(<span class=\"keyword\">function</span>(req,res)&#123;  //创建服务器</span><br><span class=\"line\">    //req.url = <span class=\"string\">'index.html'</span></span><br><span class=\"line\">    //读取:<span class=\"string\">'./www/index.html'</span></span><br><span class=\"line\">    var file_name = <span class=\"string\">'./www'</span>+req.url</span><br><span class=\"line\">    </span><br><span class=\"line\">    fs.readFile(file_name,<span class=\"keyword\">function</span>(err,data)&#123; //异步</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            res.write(<span class=\"string\">'读取失败'</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res.write(data)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.end();//结束请求，因为异步，res.end()应放在此处</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">server.listen(8888);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"http数据解析（get）\"><a href=\"#http数据解析（get）\" class=\"headerlink\" title=\"http数据解析（get）\"></a>http数据解析（get）</h3><p>前台发送请求的方式：form/ajax/jsonp<br>后台都是一样。唯有一点不同，请求方式不同，接受方式不一样（get/post）.下面一个实例：<br>GET数据解析：</p>\n<ul>\n<li>自己切</li>\n<li>querystring:</li>\n<li>url:urlLib.parse(…,true)</li>\n</ul>\n<p>server.js 普通写法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\">http.createServer(<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    //req获取前台请求的数据</span><br><span class=\"line\">    var get=&#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(req.url.indexOf(<span class=\"string\">'?'</span>) != -1)&#123;</span><br><span class=\"line\">        console.log(req.url); //  /aaa?user=Tom&amp;pass=123456</span><br><span class=\"line\">        var arr = req.url.split(<span class=\"string\">'？'</span>)；// arr[0]=<span class=\"string\">'/aaa'</span>  arr[1]=<span class=\"string\">'user=Tom&amp;pass=123456'</span></span><br><span class=\"line\">        var url=arr[0];</span><br><span class=\"line\">        var arr2 = arr[1].split(<span class=\"string\">'&amp;'</span>); //arr2</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(var i=0;i&lt;arr2.length;i++)&#123;</span><br><span class=\"line\">            var arr3=arr2[i].split(<span class=\"string\">'='</span>)</span><br><span class=\"line\">            get[arr3[0]]=arr3[1];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        var url=req.url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(url,get)</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure></p>\n<p>server.js querystring模块写法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  //写法如下：</span><br><span class=\"line\">    //const querystring=require(<span class=\"string\">'querystring'</span>);</span><br><span class=\"line\">    //var json = querystring.parse(<span class=\"string\">'user=Tom&amp;pass=123456'</span>)</span><br><span class=\"line\">    //console.log(json)</span><br><span class=\"line\">//server.js改动后：</span><br><span class=\"line\">    const http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\">    const querystring=require(<span class=\"string\">'querystring'</span>);</span><br><span class=\"line\">    http.createServer(<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">        //req获取前台请求的数据</span><br><span class=\"line\">        var get=&#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(req.url.indexOf(<span class=\"string\">'?'</span>) != -1)&#123;</span><br><span class=\"line\">            console.log(req.url); //  /aaa?user=Tom&amp;pass=123456</span><br><span class=\"line\">            var arr = req.url.split(<span class=\"string\">'？'</span>)；// arr[0]=<span class=\"string\">'/aaa'</span>  arr[1]=<span class=\"string\">'user=Tom&amp;pass=123456'</span></span><br><span class=\"line\">            var url=arr[0];</span><br><span class=\"line\">            get=querystring.parse(arr[1]);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            var url=req.url;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(url,get)</span><br><span class=\"line\">        res.end();</span><br><span class=\"line\">    &#125;).listen(8080);</span><br></pre></td></tr></table></figure></p>\n<p>server.js url模块写法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//url.js写法</span><br><span class=\"line\">    const urlLib=require(<span class=\"string\">'url'</span>);</span><br><span class=\"line\">    var obj= urlLib.parse(<span class=\"string\">\"http://www.aaa.bbb/index.html?a=12&amp;b=55\"</span>,<span class=\"literal\">true</span>);  第二个参数为<span class=\"literal\">true</span>时，会把pathname等解析为json.</span><br><span class=\"line\">    console.log(obj.pathname,obj.query);</span><br><span class=\"line\">//server.js改动后：</span><br><span class=\"line\">    const http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\">    http.createServer(<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">        //req获取前台请求的数据</span><br><span class=\"line\">        var obj = urlLib.parse(req.url,<span class=\"literal\">true</span>);</span><br><span class=\"line\">        var url=obj.pathname;</span><br><span class=\"line\">        var get=obj.query;</span><br><span class=\"line\"></span><br><span class=\"line\">        console.log(url,get)</span><br><span class=\"line\">        res.end();</span><br><span class=\"line\">    &#125;).listen(8080);</span><br></pre></td></tr></table></figure></p>\n<p>form.html<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;form action=<span class=\"string\">\"http://localhost:8080/aaa\"</span> method=<span class=\"string\">\"get\"</span>&gt;</span><br><span class=\"line\">        用户：</span><br><span class=\"line\">        &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"user\"</span> value=<span class=\"string\">''</span>&gt; &lt;br&gt;</span><br><span class=\"line\">        &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"password\"</span> name=<span class=\"string\">\"pass\"</span> value=<span class=\"string\">''</span>&gt; &lt;br&gt;</span><br><span class=\"line\">        &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">'提交'</span></span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"http数据解析（post）\"><a href=\"#http数据解析（post）\" class=\"headerlink\" title=\"http数据解析（post）\"></a>http数据解析（post）</h3><p>POST数据接收：POST数据比GET数据大的多,根据数据量大小分段完成<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http=require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\">const querystring=require(<span class=\"string\">'querystring'</span>);</span><br><span class=\"line\">http.creatServer(<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">        //POST--req</span><br><span class=\"line\">    var str=<span class=\"string\">''</span>;  //接受数据</span><br><span class=\"line\"></span><br><span class=\"line\">        //data--有一段数据到达（很多次）</span><br><span class=\"line\">    req.on(<span class=\"string\">'data'</span>,<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        str+=data</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">        //end--数据全部到达（一次）</span><br><span class=\"line\">    req.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        var post = querystring.parse(str);</span><br><span class=\"line\">        console.log(post)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"应用1-简易httpServer搭建-用户注册登录-略\"><a href=\"#应用1-简易httpServer搭建-用户注册登录-略\" class=\"headerlink\" title=\"应用1:简易httpServer搭建,用户注册登录(略)\"></a>应用1:简易httpServer搭建,用户注册登录(略)</h3><h3 id=\"nodeJS模块化\"><a href=\"#nodeJS模块化\" class=\"headerlink\" title=\"nodeJS模块化\"></a>nodeJS模块化</h3><h4 id=\"系统模块介绍\"><a href=\"#系统模块介绍\" class=\"headerlink\" title=\"系统模块介绍\"></a>系统模块介绍</h4><p>除了以上用到的：http、querystring、url,还有：</p>\n<ul>\n<li>Crypto 加密</li>\n<li>Event 事件</li>\n<li>Net 网络操作</li>\n<li>OS 操作系统信息</li>\n<li>Path 处理文件路径</li>\n<li>Stream 流操作</li>\n<li>Timer 定时器</li>\n<li>ZLIB 压缩</li>\n</ul>\n<h4 id=\"自定义模块\"><a href=\"#自定义模块\" class=\"headerlink\" title=\"自定义模块\"></a>自定义模块</h4><p>关于引入模块写法：若为当前目录自己的模块，加上“./”,系统模块要加。<br>若想要输出东西，必须exports。<br>若都输出多个东西，module可实现批量输出。</p>\n<ul>\n<li>require:请求引入其他模块。</li>\n<li>module:批量输出。</li>\n<li>exports:输出。</li>\n<li>module.exports == exports。</li>\n<li>const aaa = require(‘./bbb.js’); 其中“.js”可省略。</li>\n</ul>\n<p>npm:nodejs package manager(nodejs包管理器)<br>1、统计下载途径<br>2、自动下载依赖</p>\n<p>npm init<br>npm publish<br>npm update<br>npm unpublish<br>npm –force unpublish</p>\n<p><img src=\"/2019/08/11/node4/01.png\" alt=\"01.png\"></p>\n<p>node_modules:放模块，可以放自己定义的模块，此时若引用，不加“./”</p>\n<blockquote>\n<p>总结：require引入模块，若有“./”,从当前目录找，若没有“./”，从系统模块或node_modules找。<br>模块优先级：系统&gt;node_modules,一般将自定义模块放在node_modules中。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"node\"><a href=\"#node\" class=\"headerlink\" title=\"node\"></a>node</h3><p>优势：<br>1、性能好<br>2、跟前台JS配合方便<br>3、NodeJS便于前端学习</p>\n<h3 id=\"http系统模块使用\"><a href=\"#http系统模块使用\" class=\"headerlink\" title=\"http系统模块使用\"></a>http系统模块使用</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http=require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\">var server = http.creatServer(<span class=\"keyword\">function</span>(req,res)&#123;  //创建服务器</span><br><span class=\"line\">    switch(res.url)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"/1.html\"</span>:</span><br><span class=\"line\">            res.write(<span class=\"string\">\"向前台写东西111\"</span>)；</span><br><span class=\"line\">            <span class=\"built_in\">break</span>; </span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"/2.html\"</span>:</span><br><span class=\"line\">            res.write(<span class=\"string\">\"向前台写东西222\"</span>)；</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        default</span><br><span class=\"line\">            res.write(<span class=\"string\">\"404\"</span>)；</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // res.write(<span class=\"string\">\"向前台写东西\"</span>)；</span><br><span class=\"line\">    res.end();//结束请求</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//监听 —— 等着</span><br><span class=\"line\">//端口 —— 数字</span><br><span class=\"line\">server.listen(8888);</span><br></pre></td></tr></table></figure>\n<h3 id=\"fs文件模块\"><a href=\"#fs文件模块\" class=\"headerlink\" title=\"fs文件模块\"></a>fs文件模块</h3><p>fs (file system)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//导入引用:</span><br><span class=\"line\">    const fs = require(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\">//1.readFile(文件名，回调函数)</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">'aaa.txt'</span>,<span class=\"keyword\">function</span>(err,data)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            console.log(<span class=\"string\">'读取失败'</span>)；</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            console.log(data.toString());//二进制格式用toString转换</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">//2.writeFile(文件名，内容，回调函数)</span><br><span class=\"line\">fs.write(<span class=\"string\">\"bbb.txt\"</span>,<span class=\"string\">\"asdfghjkl\"</span>,<span class=\"keyword\">function</span>(err)&#123;</span><br><span class=\"line\">    console.log(err);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>与服务器结合<br>建立www（可以是其他名字）文件夹，用于存放请求的文件。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http=require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\">var server = http.creatServer(<span class=\"keyword\">function</span>(req,res)&#123;  //创建服务器</span><br><span class=\"line\">    //req.url = <span class=\"string\">'index.html'</span></span><br><span class=\"line\">    //读取:<span class=\"string\">'./www/index.html'</span></span><br><span class=\"line\">    var file_name = <span class=\"string\">'./www'</span>+req.url</span><br><span class=\"line\">    </span><br><span class=\"line\">    fs.readFile(file_name,<span class=\"keyword\">function</span>(err,data)&#123; //异步</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">            res.write(<span class=\"string\">'读取失败'</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res.write(data)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.end();//结束请求，因为异步，res.end()应放在此处</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">server.listen(8888);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"http数据解析（get）\"><a href=\"#http数据解析（get）\" class=\"headerlink\" title=\"http数据解析（get）\"></a>http数据解析（get）</h3><p>前台发送请求的方式：form/ajax/jsonp<br>后台都是一样。唯有一点不同，请求方式不同，接受方式不一样（get/post）.下面一个实例：<br>GET数据解析：</p>\n<ul>\n<li>自己切</li>\n<li>querystring:</li>\n<li>url:urlLib.parse(…,true)</li>\n</ul>\n<p>server.js 普通写法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\">http.createServer(<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    //req获取前台请求的数据</span><br><span class=\"line\">    var get=&#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(req.url.indexOf(<span class=\"string\">'?'</span>) != -1)&#123;</span><br><span class=\"line\">        console.log(req.url); //  /aaa?user=Tom&amp;pass=123456</span><br><span class=\"line\">        var arr = req.url.split(<span class=\"string\">'？'</span>)；// arr[0]=<span class=\"string\">'/aaa'</span>  arr[1]=<span class=\"string\">'user=Tom&amp;pass=123456'</span></span><br><span class=\"line\">        var url=arr[0];</span><br><span class=\"line\">        var arr2 = arr[1].split(<span class=\"string\">'&amp;'</span>); //arr2</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(var i=0;i&lt;arr2.length;i++)&#123;</span><br><span class=\"line\">            var arr3=arr2[i].split(<span class=\"string\">'='</span>)</span><br><span class=\"line\">            get[arr3[0]]=arr3[1];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        var url=req.url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(url,get)</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure></p>\n<p>server.js querystring模块写法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  //写法如下：</span><br><span class=\"line\">    //const querystring=require(<span class=\"string\">'querystring'</span>);</span><br><span class=\"line\">    //var json = querystring.parse(<span class=\"string\">'user=Tom&amp;pass=123456'</span>)</span><br><span class=\"line\">    //console.log(json)</span><br><span class=\"line\">//server.js改动后：</span><br><span class=\"line\">    const http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\">    const querystring=require(<span class=\"string\">'querystring'</span>);</span><br><span class=\"line\">    http.createServer(<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">        //req获取前台请求的数据</span><br><span class=\"line\">        var get=&#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(req.url.indexOf(<span class=\"string\">'?'</span>) != -1)&#123;</span><br><span class=\"line\">            console.log(req.url); //  /aaa?user=Tom&amp;pass=123456</span><br><span class=\"line\">            var arr = req.url.split(<span class=\"string\">'？'</span>)；// arr[0]=<span class=\"string\">'/aaa'</span>  arr[1]=<span class=\"string\">'user=Tom&amp;pass=123456'</span></span><br><span class=\"line\">            var url=arr[0];</span><br><span class=\"line\">            get=querystring.parse(arr[1]);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            var url=req.url;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        console.log(url,get)</span><br><span class=\"line\">        res.end();</span><br><span class=\"line\">    &#125;).listen(8080);</span><br></pre></td></tr></table></figure></p>\n<p>server.js url模块写法：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//url.js写法</span><br><span class=\"line\">    const urlLib=require(<span class=\"string\">'url'</span>);</span><br><span class=\"line\">    var obj= urlLib.parse(<span class=\"string\">\"http://www.aaa.bbb/index.html?a=12&amp;b=55\"</span>,<span class=\"literal\">true</span>);  第二个参数为<span class=\"literal\">true</span>时，会把pathname等解析为json.</span><br><span class=\"line\">    console.log(obj.pathname,obj.query);</span><br><span class=\"line\">//server.js改动后：</span><br><span class=\"line\">    const http = require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\">    http.createServer(<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">        //req获取前台请求的数据</span><br><span class=\"line\">        var obj = urlLib.parse(req.url,<span class=\"literal\">true</span>);</span><br><span class=\"line\">        var url=obj.pathname;</span><br><span class=\"line\">        var get=obj.query;</span><br><span class=\"line\"></span><br><span class=\"line\">        console.log(url,get)</span><br><span class=\"line\">        res.end();</span><br><span class=\"line\">    &#125;).listen(8080);</span><br></pre></td></tr></table></figure></p>\n<p>form.html<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;form action=<span class=\"string\">\"http://localhost:8080/aaa\"</span> method=<span class=\"string\">\"get\"</span>&gt;</span><br><span class=\"line\">        用户：</span><br><span class=\"line\">        &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"user\"</span> value=<span class=\"string\">''</span>&gt; &lt;br&gt;</span><br><span class=\"line\">        &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"password\"</span> name=<span class=\"string\">\"pass\"</span> value=<span class=\"string\">''</span>&gt; &lt;br&gt;</span><br><span class=\"line\">        &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">'提交'</span></span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"http数据解析（post）\"><a href=\"#http数据解析（post）\" class=\"headerlink\" title=\"http数据解析（post）\"></a>http数据解析（post）</h3><p>POST数据接收：POST数据比GET数据大的多,根据数据量大小分段完成<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const http=require(<span class=\"string\">'http'</span>);</span><br><span class=\"line\">const querystring=require(<span class=\"string\">'querystring'</span>);</span><br><span class=\"line\">http.creatServer(<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">        //POST--req</span><br><span class=\"line\">    var str=<span class=\"string\">''</span>;  //接受数据</span><br><span class=\"line\"></span><br><span class=\"line\">        //data--有一段数据到达（很多次）</span><br><span class=\"line\">    req.on(<span class=\"string\">'data'</span>,<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        str+=data</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">        //end--数据全部到达（一次）</span><br><span class=\"line\">    req.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        var post = querystring.parse(str);</span><br><span class=\"line\">        console.log(post)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).listen(8080);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"应用1-简易httpServer搭建-用户注册登录-略\"><a href=\"#应用1-简易httpServer搭建-用户注册登录-略\" class=\"headerlink\" title=\"应用1:简易httpServer搭建,用户注册登录(略)\"></a>应用1:简易httpServer搭建,用户注册登录(略)</h3><h3 id=\"nodeJS模块化\"><a href=\"#nodeJS模块化\" class=\"headerlink\" title=\"nodeJS模块化\"></a>nodeJS模块化</h3><h4 id=\"系统模块介绍\"><a href=\"#系统模块介绍\" class=\"headerlink\" title=\"系统模块介绍\"></a>系统模块介绍</h4><p>除了以上用到的：http、querystring、url,还有：</p>\n<ul>\n<li>Crypto 加密</li>\n<li>Event 事件</li>\n<li>Net 网络操作</li>\n<li>OS 操作系统信息</li>\n<li>Path 处理文件路径</li>\n<li>Stream 流操作</li>\n<li>Timer 定时器</li>\n<li>ZLIB 压缩</li>\n</ul>\n<h4 id=\"自定义模块\"><a href=\"#自定义模块\" class=\"headerlink\" title=\"自定义模块\"></a>自定义模块</h4><p>关于引入模块写法：若为当前目录自己的模块，加上“./”,系统模块要加。<br>若想要输出东西，必须exports。<br>若都输出多个东西，module可实现批量输出。</p>\n<ul>\n<li>require:请求引入其他模块。</li>\n<li>module:批量输出。</li>\n<li>exports:输出。</li>\n<li>module.exports == exports。</li>\n<li>const aaa = require(‘./bbb.js’); 其中“.js”可省略。</li>\n</ul>\n<p>npm:nodejs package manager(nodejs包管理器)<br>1、统计下载途径<br>2、自动下载依赖</p>\n<p>npm init<br>npm publish<br>npm update<br>npm unpublish<br>npm –force unpublish</p>\n<p><img src=\"/2019/08/11/node4/01.png\" alt=\"01.png\"></p>\n<p>node_modules:放模块，可以放自己定义的模块，此时若引用，不加“./”</p>\n<blockquote>\n<p>总结：require引入模块，若有“./”,从当前目录找，若没有“./”，从系统模块或node_modules找。<br>模块优先级：系统&gt;node_modules,一般将自定义模块放在node_modules中。</p>\n</blockquote>\n"},{"title":"Express","date":"2019-08-13T03:07:47.000Z","_content":"### Express框架\n1.依赖中间件\n2.接受请求\n3.非破坏式的\n4.static用法\n#### 安装、配置、接受请求、响应\n安装\n```bash\nnpm install express\n```\n使用\n* 创建服务\n* 监听\n* 处理请求\n```bash\nconst express = require('express');\nvar server = express();\nserver.use('/a.html',function(req,res){\n    res.send('abc');                          //send和write类似\n    res.end();\n});\nserver.use('/b.html',function(req,res){\n    res.send('123');\n    res.end();\n});\nserver.listen(8080);\n```\nexpress保留了原生的功能，添加了一些方法，增强原有的功能。\n\n#### 3种方法\nget(处理get请求)\\post(处理post请求)\\use(get,post均可)。\n```bash\nconst express = require('express');\nvar server = express();\nserver.get('/',function(req,res){\n    console.log('get请求')\n});\nserver.post('/',function(req,res){\n    console.log('post请求')\n});\nserver.use('/',function(req,res){\n    console.log('use了')\n});\nserver.listen(8080);\n```\n#### Express-static\n读取静态文件\n安装 npm install express-static -save\n\n实例-登录\na.html:\n![01.png](01.png)\nserver.js\n```bash\n    const express = require('express');\n    const expressStatic = require('express-static');\n\n    var server = express();\n    server.listen(8080);\n\n    //用户数据模拟\n    var users={\n        'blue':'123456',\n        'zhangsan':'654321',\n        'lisi':'987678'\n    };\n    server.get('/login',function(req,res){\n        // urlLib.parse(req.url,true).query;\n        console.log(req.query)\n        var user= req.query['user'];\n        var pass= req.query['pass'];\n\n        if(users[user]==null){\n            res.send({ok:false,mag:'此用户不存在'})\n        }else{\n            if(users[user]!=pass){\n                res.send({ok:false,msg:'密码错了'})\n            }else{\n                res.send({ok:true,mag:'成功'})\n            }\n        }\n    })\n    server.use(expressStatic('./www'));\n```\n### 数据解析\nget请求数据解析,无需中间件:req.query\npost请求数据解析，需中间件：body-parser，首先解析数据\n```base\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nvar server = express();\nserver.listen(8080);\n\nserver.use(bodyParser.urlencoded({\n    extended:true,      //扩展模式\n    limit: 2*1024       //限制2M，默认100k\n}));\nserver.use('/',function(req,res){\n    console.log(req.body)  //POST\n})\n```\n#### 链式操作\n```base\nconst express = require('express');\n\nvar server = express();\nserver.listen(8080);\n\n//第三个参数\nserver.use('/',function(req,res,next){\n    console.log('a')\n    next();\n});\nserver.use('/',function(req,res.next){\n    console.log('b')  \n})\n```\n中间件,类似'body-parser'\n```base\nconst express = require('express');\nconst querystring = require('querystring');\n\nvar server = express();\nserver.listen(8080);\n\n//第三个参数\nserver.use(function(req,res,next){\n    var str='';\n    req.on('data',function(data){\n        str+=data;\n    });\n    req.on('end',function(data){\n        req.body=querystring(str);\n        next();\n    });\n});\nserver.use('/',function(req,res.next){\n    console.log('b')  \n})\n```\n### cookie、session\n* a.发送cookie\nres.cookie(名字,值,maxAge:毫秒,signed:true)\n* b.读取cookie\ncookie-parser\nserver.use(cookieParser('秘钥'))\nserver.use(function(){\n    req.cookie   //未签名\n    req.signedCookies   //签名版\n})\n* c.删除cookie\nres.clearCookie(名字)\n\n\n保存数据，cookie数据保存浏览器，session 数据保存在服务器。\nnpm install cookie-parser cookie-session \n```bash\nconst express = require('express');\nconst cookieParser = require('cookie-parser');\n\nvar server = express();\n//发送cookie\nserver.use('/aaa/a.html',function(req,res){\n    res.cookie('user','blue',{path:'/aaa','maxAge':3*24*3600*1000})\n})\n//读取cookie\nserver.use(cookieParser())；\nserver.use('/',function(req,res){\n    console.log(req.cookie)\n})\n```\n实现cookie加密：\n```bash\nconst express = require('express');\nconst cookieParser = require('cookie-parser');\n\nvar server = express();\n//cookieParser\nserver.use(cookieParser);\nserver.use('/',function(){\n    req.secret='hdwifbonfjfosdjhfsj';\n    res.cookie('user','blue',{signed:true});\n\n    res.send('ok');\n});\nserver.listen(8080);\n```\nsession\n\n```bash\nconst express = require('express');\nconst cookieSession = require('cookie-session');\n\nvar server = express();\n//cookie\nserver.use(cookieParser('dnkfvbscsvius'));\nserver.use(cookieSession());\n\nserver.use('/',function(){\n    req.secret='hdwifbonfjfosdjhfsj';\n    res.cookie('user','blue',{signed:true});\n\n    res.send('ok');\n});\nserver.listen(8080);\n```\n### express框架整合\n![02.png](02.png)\n![03.png](03.png)\n\n#### multer模块上传文件\nnpm install multer\n\n* body-parser:解析post数据  (application/x-form-urlencoded)\nserver.use(bodyParse.urlencode());\n* multer:解析post文件   (multipart/form-data)\n\n```bash\n//上传到磁盘  重命名\n\nconst multer = require('multer');\nconst pathLib = require('path');\nconst fs = require('fs');\n\n\n//1、pathLib解析获取原始文件扩展名\n    var str='c:\\\\wamp\\www\\a.html';\n    var obj=path.parse(str);\n\n    base :文件名\"a.html\"\n    ext:扩展名\"html\"\n    dir:路径'c:\\\\wamp\\www'\n    name:文件名\"a\"\n\n//2.fs的rename重命名\n    fs.rename('a.txt','b.txt',function(err){\n        console.log(err)\n    })\n    fs.rename(老名，新名，function(err){\n        ...\n    })\n\n\n\nvar obj=multer({dest:'./www/upload/'})  //文件保存的位置\n\nserver.use(obj.any())       //接受任意类型文件\n//只接收name=f1的文件 : server.use(obj.single('f1'))  \n\n\n//req.files:指上传的文件信息，如下图：\nserver.use(function(req,res){\n    var newName = req.file[0].path+pathLib.parse(req.file[0].originalname).ext\n    fs.rename(req.file[0].path,newName,function()(err){\n        if(err)\n            res.send('上传失败');\n        else\n            res.send('上传成功')\n   })\n})\n```\n\n![05.png](05.png)\n![06.png](06.png)\n\n\n* html文件：\n\n![04.png](04.png)\n```bash\n<form action='http://localhost:8080/' method='post' enctype='multipart/form-data'>\n    <input type='file'/>\n    <input type='submit' value='上传/>\n</form>\n```\n\n### consolidate 模板引擎整合库\n\n安装：npm install consolidate\n引用：const consolidate = require('consolidate');\n配置模板引擎：\n* 我要输出什么东西\n server.set('view engine','html')\n* 模板文件放在哪里\nserver.set('view','./views')\n* 哪种模板引擎\nserver.engine('html',consolidate.ejs)\n\nserver.get('/',function(req,res){\n    res.render('模板文件'，数据);\n})\n### route路由\n根据目录的不同，调用不同的模块\n\nconst express = require('express');\n\nvar server=express();\n\nvar routeUser =express.Route();\nrouteUser.get('1.html',function(req,res){\n    res.send('user1')\n})\nrouteUser.get('2.html',function(req,res){\n    res.send('user2')\n})\n\nserver.use('/user',routeUser);\nserver.listen(8080);\n\n","source":"_posts/node5.md","raw":"---\ntitle: Express\ndate: 2019-08-13 11:07:47\ncategories:\n- Node\ntags: [Node.js]\n---\n### Express框架\n1.依赖中间件\n2.接受请求\n3.非破坏式的\n4.static用法\n#### 安装、配置、接受请求、响应\n安装\n```bash\nnpm install express\n```\n使用\n* 创建服务\n* 监听\n* 处理请求\n```bash\nconst express = require('express');\nvar server = express();\nserver.use('/a.html',function(req,res){\n    res.send('abc');                          //send和write类似\n    res.end();\n});\nserver.use('/b.html',function(req,res){\n    res.send('123');\n    res.end();\n});\nserver.listen(8080);\n```\nexpress保留了原生的功能，添加了一些方法，增强原有的功能。\n\n#### 3种方法\nget(处理get请求)\\post(处理post请求)\\use(get,post均可)。\n```bash\nconst express = require('express');\nvar server = express();\nserver.get('/',function(req,res){\n    console.log('get请求')\n});\nserver.post('/',function(req,res){\n    console.log('post请求')\n});\nserver.use('/',function(req,res){\n    console.log('use了')\n});\nserver.listen(8080);\n```\n#### Express-static\n读取静态文件\n安装 npm install express-static -save\n\n实例-登录\na.html:\n![01.png](01.png)\nserver.js\n```bash\n    const express = require('express');\n    const expressStatic = require('express-static');\n\n    var server = express();\n    server.listen(8080);\n\n    //用户数据模拟\n    var users={\n        'blue':'123456',\n        'zhangsan':'654321',\n        'lisi':'987678'\n    };\n    server.get('/login',function(req,res){\n        // urlLib.parse(req.url,true).query;\n        console.log(req.query)\n        var user= req.query['user'];\n        var pass= req.query['pass'];\n\n        if(users[user]==null){\n            res.send({ok:false,mag:'此用户不存在'})\n        }else{\n            if(users[user]!=pass){\n                res.send({ok:false,msg:'密码错了'})\n            }else{\n                res.send({ok:true,mag:'成功'})\n            }\n        }\n    })\n    server.use(expressStatic('./www'));\n```\n### 数据解析\nget请求数据解析,无需中间件:req.query\npost请求数据解析，需中间件：body-parser，首先解析数据\n```base\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nvar server = express();\nserver.listen(8080);\n\nserver.use(bodyParser.urlencoded({\n    extended:true,      //扩展模式\n    limit: 2*1024       //限制2M，默认100k\n}));\nserver.use('/',function(req,res){\n    console.log(req.body)  //POST\n})\n```\n#### 链式操作\n```base\nconst express = require('express');\n\nvar server = express();\nserver.listen(8080);\n\n//第三个参数\nserver.use('/',function(req,res,next){\n    console.log('a')\n    next();\n});\nserver.use('/',function(req,res.next){\n    console.log('b')  \n})\n```\n中间件,类似'body-parser'\n```base\nconst express = require('express');\nconst querystring = require('querystring');\n\nvar server = express();\nserver.listen(8080);\n\n//第三个参数\nserver.use(function(req,res,next){\n    var str='';\n    req.on('data',function(data){\n        str+=data;\n    });\n    req.on('end',function(data){\n        req.body=querystring(str);\n        next();\n    });\n});\nserver.use('/',function(req,res.next){\n    console.log('b')  \n})\n```\n### cookie、session\n* a.发送cookie\nres.cookie(名字,值,maxAge:毫秒,signed:true)\n* b.读取cookie\ncookie-parser\nserver.use(cookieParser('秘钥'))\nserver.use(function(){\n    req.cookie   //未签名\n    req.signedCookies   //签名版\n})\n* c.删除cookie\nres.clearCookie(名字)\n\n\n保存数据，cookie数据保存浏览器，session 数据保存在服务器。\nnpm install cookie-parser cookie-session \n```bash\nconst express = require('express');\nconst cookieParser = require('cookie-parser');\n\nvar server = express();\n//发送cookie\nserver.use('/aaa/a.html',function(req,res){\n    res.cookie('user','blue',{path:'/aaa','maxAge':3*24*3600*1000})\n})\n//读取cookie\nserver.use(cookieParser())；\nserver.use('/',function(req,res){\n    console.log(req.cookie)\n})\n```\n实现cookie加密：\n```bash\nconst express = require('express');\nconst cookieParser = require('cookie-parser');\n\nvar server = express();\n//cookieParser\nserver.use(cookieParser);\nserver.use('/',function(){\n    req.secret='hdwifbonfjfosdjhfsj';\n    res.cookie('user','blue',{signed:true});\n\n    res.send('ok');\n});\nserver.listen(8080);\n```\nsession\n\n```bash\nconst express = require('express');\nconst cookieSession = require('cookie-session');\n\nvar server = express();\n//cookie\nserver.use(cookieParser('dnkfvbscsvius'));\nserver.use(cookieSession());\n\nserver.use('/',function(){\n    req.secret='hdwifbonfjfosdjhfsj';\n    res.cookie('user','blue',{signed:true});\n\n    res.send('ok');\n});\nserver.listen(8080);\n```\n### express框架整合\n![02.png](02.png)\n![03.png](03.png)\n\n#### multer模块上传文件\nnpm install multer\n\n* body-parser:解析post数据  (application/x-form-urlencoded)\nserver.use(bodyParse.urlencode());\n* multer:解析post文件   (multipart/form-data)\n\n```bash\n//上传到磁盘  重命名\n\nconst multer = require('multer');\nconst pathLib = require('path');\nconst fs = require('fs');\n\n\n//1、pathLib解析获取原始文件扩展名\n    var str='c:\\\\wamp\\www\\a.html';\n    var obj=path.parse(str);\n\n    base :文件名\"a.html\"\n    ext:扩展名\"html\"\n    dir:路径'c:\\\\wamp\\www'\n    name:文件名\"a\"\n\n//2.fs的rename重命名\n    fs.rename('a.txt','b.txt',function(err){\n        console.log(err)\n    })\n    fs.rename(老名，新名，function(err){\n        ...\n    })\n\n\n\nvar obj=multer({dest:'./www/upload/'})  //文件保存的位置\n\nserver.use(obj.any())       //接受任意类型文件\n//只接收name=f1的文件 : server.use(obj.single('f1'))  \n\n\n//req.files:指上传的文件信息，如下图：\nserver.use(function(req,res){\n    var newName = req.file[0].path+pathLib.parse(req.file[0].originalname).ext\n    fs.rename(req.file[0].path,newName,function()(err){\n        if(err)\n            res.send('上传失败');\n        else\n            res.send('上传成功')\n   })\n})\n```\n\n![05.png](05.png)\n![06.png](06.png)\n\n\n* html文件：\n\n![04.png](04.png)\n```bash\n<form action='http://localhost:8080/' method='post' enctype='multipart/form-data'>\n    <input type='file'/>\n    <input type='submit' value='上传/>\n</form>\n```\n\n### consolidate 模板引擎整合库\n\n安装：npm install consolidate\n引用：const consolidate = require('consolidate');\n配置模板引擎：\n* 我要输出什么东西\n server.set('view engine','html')\n* 模板文件放在哪里\nserver.set('view','./views')\n* 哪种模板引擎\nserver.engine('html',consolidate.ejs)\n\nserver.get('/',function(req,res){\n    res.render('模板文件'，数据);\n})\n### route路由\n根据目录的不同，调用不同的模块\n\nconst express = require('express');\n\nvar server=express();\n\nvar routeUser =express.Route();\nrouteUser.get('1.html',function(req,res){\n    res.send('user1')\n})\nrouteUser.get('2.html',function(req,res){\n    res.send('user2')\n})\n\nserver.use('/user',routeUser);\nserver.listen(8080);\n\n","slug":"node5","published":1,"updated":"2019-09-11T07:11:33.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cvi0037t09zq593ufxj","content":"<h3 id=\"Express框架\"><a href=\"#Express框架\" class=\"headerlink\" title=\"Express框架\"></a>Express框架</h3><p>1.依赖中间件<br>2.接受请求<br>3.非破坏式的<br>4.static用法</p>\n<h4 id=\"安装、配置、接受请求、响应\"><a href=\"#安装、配置、接受请求、响应\" class=\"headerlink\" title=\"安装、配置、接受请求、响应\"></a>安装、配置、接受请求、响应</h4><p>安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install express</span><br></pre></td></tr></table></figure></p>\n<p>使用</p>\n<ul>\n<li>创建服务</li>\n<li>监听</li>\n<li>处理请求<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(<span class=\"string\">'express'</span>);</span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">server.use(<span class=\"string\">'/a.html'</span>,<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">'abc'</span>);                          //send和write类似</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.use(<span class=\"string\">'/b.html'</span>,<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">'123'</span>);</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(8080);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>express保留了原生的功能，添加了一些方法，增强原有的功能。</p>\n<h4 id=\"3种方法\"><a href=\"#3种方法\" class=\"headerlink\" title=\"3种方法\"></a>3种方法</h4><p>get(处理get请求)\\post(处理post请求)\\use(get,post均可)。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(<span class=\"string\">'express'</span>);</span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">server.get(<span class=\"string\">'/'</span>,<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'get请求'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.post(<span class=\"string\">'/'</span>,<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'post请求'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.use(<span class=\"string\">'/'</span>,<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'use了'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(8080);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Express-static\"><a href=\"#Express-static\" class=\"headerlink\" title=\"Express-static\"></a>Express-static</h4><p>读取静态文件<br>安装 npm install express-static -save</p>\n<p>实例-登录<br>a.html:<br><img src=\"/2019/08/13/node5/01.png\" alt=\"01.png\"><br>server.js<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(<span class=\"string\">'express'</span>);</span><br><span class=\"line\">const expressStatic = require(<span class=\"string\">'express-static'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">server.listen(8080);</span><br><span class=\"line\"></span><br><span class=\"line\">//用户数据模拟</span><br><span class=\"line\">var users=&#123;</span><br><span class=\"line\">    <span class=\"string\">'blue'</span>:<span class=\"string\">'123456'</span>,</span><br><span class=\"line\">    <span class=\"string\">'zhangsan'</span>:<span class=\"string\">'654321'</span>,</span><br><span class=\"line\">    <span class=\"string\">'lisi'</span>:<span class=\"string\">'987678'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">server.get(<span class=\"string\">'/login'</span>,<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    // urlLib.parse(req.url,<span class=\"literal\">true</span>).query;</span><br><span class=\"line\">    console.log(req.query)</span><br><span class=\"line\">    var user= req.query[<span class=\"string\">'user'</span>];</span><br><span class=\"line\">    var pass= req.query[<span class=\"string\">'pass'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(users[user]==null)&#123;</span><br><span class=\"line\">        res.send(&#123;ok:<span class=\"literal\">false</span>,mag:<span class=\"string\">'此用户不存在'</span>&#125;)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(users[user]!=pass)&#123;</span><br><span class=\"line\">            res.send(&#123;ok:<span class=\"literal\">false</span>,msg:<span class=\"string\">'密码错了'</span>&#125;)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res.send(&#123;ok:<span class=\"literal\">true</span>,mag:<span class=\"string\">'成功'</span>&#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">server.use(expressStatic(<span class=\"string\">'./www'</span>));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数据解析\"><a href=\"#数据解析\" class=\"headerlink\" title=\"数据解析\"></a>数据解析</h3><p>get请求数据解析,无需中间件:req.query<br>post请求数据解析，需中间件：body-parser，首先解析数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&apos;express&apos;);</span><br><span class=\"line\">const bodyParser = require(&apos;body-parser&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">server.listen(8080);</span><br><span class=\"line\"></span><br><span class=\"line\">server.use(bodyParser.urlencoded(&#123;</span><br><span class=\"line\">    extended:true,      //扩展模式</span><br><span class=\"line\">    limit: 2*1024       //限制2M，默认100k</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">server.use(&apos;/&apos;,function(req,res)&#123;</span><br><span class=\"line\">    console.log(req.body)  //POST</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"链式操作\"><a href=\"#链式操作\" class=\"headerlink\" title=\"链式操作\"></a>链式操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&apos;express&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">server.listen(8080);</span><br><span class=\"line\"></span><br><span class=\"line\">//第三个参数</span><br><span class=\"line\">server.use(&apos;/&apos;,function(req,res,next)&#123;</span><br><span class=\"line\">    console.log(&apos;a&apos;)</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.use(&apos;/&apos;,function(req,res.next)&#123;</span><br><span class=\"line\">    console.log(&apos;b&apos;)  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>中间件,类似’body-parser’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&apos;express&apos;);</span><br><span class=\"line\">const querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">server.listen(8080);</span><br><span class=\"line\"></span><br><span class=\"line\">//第三个参数</span><br><span class=\"line\">server.use(function(req,res,next)&#123;</span><br><span class=\"line\">    var str=&apos;&apos;;</span><br><span class=\"line\">    req.on(&apos;data&apos;,function(data)&#123;</span><br><span class=\"line\">        str+=data;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    req.on(&apos;end&apos;,function(data)&#123;</span><br><span class=\"line\">        req.body=querystring(str);</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.use(&apos;/&apos;,function(req,res.next)&#123;</span><br><span class=\"line\">    console.log(&apos;b&apos;)  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"cookie、session\"><a href=\"#cookie、session\" class=\"headerlink\" title=\"cookie、session\"></a>cookie、session</h3><ul>\n<li>a.发送cookie<br>res.cookie(名字,值,maxAge:毫秒,signed:true)</li>\n<li>b.读取cookie<br>cookie-parser<br>server.use(cookieParser(‘秘钥’))<br>server.use(function(){<br>  req.cookie   //未签名<br>  req.signedCookies   //签名版<br>})</li>\n<li>c.删除cookie<br>res.clearCookie(名字)</li>\n</ul>\n<p>保存数据，cookie数据保存浏览器，session 数据保存在服务器。<br>npm install cookie-parser cookie-session<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(<span class=\"string\">'express'</span>);</span><br><span class=\"line\">const cookieParser = require(<span class=\"string\">'cookie-parser'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">//发送cookie</span><br><span class=\"line\">server.use(<span class=\"string\">'/aaa/a.html'</span>,<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    res.cookie(<span class=\"string\">'user'</span>,<span class=\"string\">'blue'</span>,&#123;path:<span class=\"string\">'/aaa'</span>,<span class=\"string\">'maxAge'</span>:3*24*3600*1000&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//读取cookie</span><br><span class=\"line\">server.use(cookieParser())；</span><br><span class=\"line\">server.use(<span class=\"string\">'/'</span>,<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    console.log(req.cookie)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>实现cookie加密：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(<span class=\"string\">'express'</span>);</span><br><span class=\"line\">const cookieParser = require(<span class=\"string\">'cookie-parser'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">//cookieParser</span><br><span class=\"line\">server.use(cookieParser);</span><br><span class=\"line\">server.use(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    req.secret=<span class=\"string\">'hdwifbonfjfosdjhfsj'</span>;</span><br><span class=\"line\">    res.cookie(<span class=\"string\">'user'</span>,<span class=\"string\">'blue'</span>,&#123;signed:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    res.send(<span class=\"string\">'ok'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(8080);</span><br></pre></td></tr></table></figure></p>\n<p>session</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(<span class=\"string\">'express'</span>);</span><br><span class=\"line\">const cookieSession = require(<span class=\"string\">'cookie-session'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">//cookie</span><br><span class=\"line\">server.use(cookieParser(<span class=\"string\">'dnkfvbscsvius'</span>));</span><br><span class=\"line\">server.use(cookieSession());</span><br><span class=\"line\"></span><br><span class=\"line\">server.use(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    req.secret=<span class=\"string\">'hdwifbonfjfosdjhfsj'</span>;</span><br><span class=\"line\">    res.cookie(<span class=\"string\">'user'</span>,<span class=\"string\">'blue'</span>,&#123;signed:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    res.send(<span class=\"string\">'ok'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(8080);</span><br></pre></td></tr></table></figure>\n<h3 id=\"express框架整合\"><a href=\"#express框架整合\" class=\"headerlink\" title=\"express框架整合\"></a>express框架整合</h3><p><img src=\"/2019/08/13/node5/02.png\" alt=\"02.png\"><br><img src=\"/2019/08/13/node5/03.png\" alt=\"03.png\"></p>\n<h4 id=\"multer模块上传文件\"><a href=\"#multer模块上传文件\" class=\"headerlink\" title=\"multer模块上传文件\"></a>multer模块上传文件</h4><p>npm install multer</p>\n<ul>\n<li>body-parser:解析post数据  (application/x-form-urlencoded)<br>server.use(bodyParse.urlencode());</li>\n<li>multer:解析post文件   (multipart/form-data)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//上传到磁盘  重命名</span><br><span class=\"line\"></span><br><span class=\"line\">const multer = require(<span class=\"string\">'multer'</span>);</span><br><span class=\"line\">const pathLib = require(<span class=\"string\">'path'</span>);</span><br><span class=\"line\">const fs = require(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//1、pathLib解析获取原始文件扩展名</span><br><span class=\"line\">    var str=<span class=\"string\">'c:\\\\wamp\\www\\a.html'</span>;</span><br><span class=\"line\">    var obj=path.parse(str);</span><br><span class=\"line\"></span><br><span class=\"line\">    base :文件名<span class=\"string\">\"a.html\"</span></span><br><span class=\"line\">    ext:扩展名<span class=\"string\">\"html\"</span></span><br><span class=\"line\">    dir:路径<span class=\"string\">'c:\\\\wamp\\www'</span></span><br><span class=\"line\">    name:文件名<span class=\"string\">\"a\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">//2.fs的rename重命名</span><br><span class=\"line\">    fs.rename(<span class=\"string\">'a.txt'</span>,<span class=\"string\">'b.txt'</span>,<span class=\"keyword\">function</span>(err)&#123;</span><br><span class=\"line\">        console.log(err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    fs.rename(老名，新名，<span class=\"keyword\">function</span>(err)&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var obj=multer(&#123;dest:<span class=\"string\">'./www/upload/'</span>&#125;)  //文件保存的位置</span><br><span class=\"line\"></span><br><span class=\"line\">server.use(obj.any())       //接受任意类型文件</span><br><span class=\"line\">//只接收name=f1的文件 : server.use(obj.single(<span class=\"string\">'f1'</span>))  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//req.files:指上传的文件信息，如下图：</span><br><span class=\"line\">server.use(<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    var newName = req.file[0].path+pathLib.parse(req.file[0].originalname).ext</span><br><span class=\"line\">    fs.rename(req.file[0].path,newName,<span class=\"keyword\">function</span>()(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">            res.send(<span class=\"string\">'上传失败'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            res.send(<span class=\"string\">'上传成功'</span>)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/08/13/node5/05.png\" alt=\"05.png\"><br><img src=\"/2019/08/13/node5/06.png\" alt=\"06.png\"></p>\n<ul>\n<li>html文件：</li>\n</ul>\n<p><img src=\"/2019/08/13/node5/04.png\" alt=\"04.png\"><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"string\">'http://localhost:8080/'</span> method=<span class=\"string\">'post'</span> enctype=<span class=\"string\">'multipart/form-data'</span>&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">'file'</span>/&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">'submit'</span> value=<span class=\"string\">'上传/&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/form&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"consolidate-模板引擎整合库\"><a href=\"#consolidate-模板引擎整合库\" class=\"headerlink\" title=\"consolidate 模板引擎整合库\"></a>consolidate 模板引擎整合库</h3><p>安装：npm install consolidate<br>引用：const consolidate = require(‘consolidate’);<br>配置模板引擎：</p>\n<ul>\n<li>我要输出什么东西<br>server.set(‘view engine’,’html’)</li>\n<li>模板文件放在哪里<br>server.set(‘view’,’./views’)</li>\n<li>哪种模板引擎<br>server.engine(‘html’,consolidate.ejs)</li>\n</ul>\n<p>server.get(‘/‘,function(req,res){<br>    res.render(‘模板文件’，数据);<br>})</p>\n<h3 id=\"route路由\"><a href=\"#route路由\" class=\"headerlink\" title=\"route路由\"></a>route路由</h3><p>根据目录的不同，调用不同的模块</p>\n<p>const express = require(‘express’);</p>\n<p>var server=express();</p>\n<p>var routeUser =express.Route();<br>routeUser.get(‘1.html’,function(req,res){<br>    res.send(‘user1’)<br>})<br>routeUser.get(‘2.html’,function(req,res){<br>    res.send(‘user2’)<br>})</p>\n<p>server.use(‘/user’,routeUser);<br>server.listen(8080);</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Express框架\"><a href=\"#Express框架\" class=\"headerlink\" title=\"Express框架\"></a>Express框架</h3><p>1.依赖中间件<br>2.接受请求<br>3.非破坏式的<br>4.static用法</p>\n<h4 id=\"安装、配置、接受请求、响应\"><a href=\"#安装、配置、接受请求、响应\" class=\"headerlink\" title=\"安装、配置、接受请求、响应\"></a>安装、配置、接受请求、响应</h4><p>安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install express</span><br></pre></td></tr></table></figure></p>\n<p>使用</p>\n<ul>\n<li>创建服务</li>\n<li>监听</li>\n<li>处理请求<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(<span class=\"string\">'express'</span>);</span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">server.use(<span class=\"string\">'/a.html'</span>,<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">'abc'</span>);                          //send和write类似</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.use(<span class=\"string\">'/b.html'</span>,<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    res.send(<span class=\"string\">'123'</span>);</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(8080);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>express保留了原生的功能，添加了一些方法，增强原有的功能。</p>\n<h4 id=\"3种方法\"><a href=\"#3种方法\" class=\"headerlink\" title=\"3种方法\"></a>3种方法</h4><p>get(处理get请求)\\post(处理post请求)\\use(get,post均可)。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(<span class=\"string\">'express'</span>);</span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">server.get(<span class=\"string\">'/'</span>,<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'get请求'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.post(<span class=\"string\">'/'</span>,<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'post请求'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.use(<span class=\"string\">'/'</span>,<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'use了'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(8080);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Express-static\"><a href=\"#Express-static\" class=\"headerlink\" title=\"Express-static\"></a>Express-static</h4><p>读取静态文件<br>安装 npm install express-static -save</p>\n<p>实例-登录<br>a.html:<br><img src=\"/2019/08/13/node5/01.png\" alt=\"01.png\"><br>server.js<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(<span class=\"string\">'express'</span>);</span><br><span class=\"line\">const expressStatic = require(<span class=\"string\">'express-static'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">server.listen(8080);</span><br><span class=\"line\"></span><br><span class=\"line\">//用户数据模拟</span><br><span class=\"line\">var users=&#123;</span><br><span class=\"line\">    <span class=\"string\">'blue'</span>:<span class=\"string\">'123456'</span>,</span><br><span class=\"line\">    <span class=\"string\">'zhangsan'</span>:<span class=\"string\">'654321'</span>,</span><br><span class=\"line\">    <span class=\"string\">'lisi'</span>:<span class=\"string\">'987678'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">server.get(<span class=\"string\">'/login'</span>,<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    // urlLib.parse(req.url,<span class=\"literal\">true</span>).query;</span><br><span class=\"line\">    console.log(req.query)</span><br><span class=\"line\">    var user= req.query[<span class=\"string\">'user'</span>];</span><br><span class=\"line\">    var pass= req.query[<span class=\"string\">'pass'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(users[user]==null)&#123;</span><br><span class=\"line\">        res.send(&#123;ok:<span class=\"literal\">false</span>,mag:<span class=\"string\">'此用户不存在'</span>&#125;)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(users[user]!=pass)&#123;</span><br><span class=\"line\">            res.send(&#123;ok:<span class=\"literal\">false</span>,msg:<span class=\"string\">'密码错了'</span>&#125;)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            res.send(&#123;ok:<span class=\"literal\">true</span>,mag:<span class=\"string\">'成功'</span>&#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">server.use(expressStatic(<span class=\"string\">'./www'</span>));</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"数据解析\"><a href=\"#数据解析\" class=\"headerlink\" title=\"数据解析\"></a>数据解析</h3><p>get请求数据解析,无需中间件:req.query<br>post请求数据解析，需中间件：body-parser，首先解析数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&apos;express&apos;);</span><br><span class=\"line\">const bodyParser = require(&apos;body-parser&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">server.listen(8080);</span><br><span class=\"line\"></span><br><span class=\"line\">server.use(bodyParser.urlencoded(&#123;</span><br><span class=\"line\">    extended:true,      //扩展模式</span><br><span class=\"line\">    limit: 2*1024       //限制2M，默认100k</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">server.use(&apos;/&apos;,function(req,res)&#123;</span><br><span class=\"line\">    console.log(req.body)  //POST</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"链式操作\"><a href=\"#链式操作\" class=\"headerlink\" title=\"链式操作\"></a>链式操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&apos;express&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">server.listen(8080);</span><br><span class=\"line\"></span><br><span class=\"line\">//第三个参数</span><br><span class=\"line\">server.use(&apos;/&apos;,function(req,res,next)&#123;</span><br><span class=\"line\">    console.log(&apos;a&apos;)</span><br><span class=\"line\">    next();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.use(&apos;/&apos;,function(req,res.next)&#123;</span><br><span class=\"line\">    console.log(&apos;b&apos;)  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>中间件,类似’body-parser’<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(&apos;express&apos;);</span><br><span class=\"line\">const querystring = require(&apos;querystring&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">server.listen(8080);</span><br><span class=\"line\"></span><br><span class=\"line\">//第三个参数</span><br><span class=\"line\">server.use(function(req,res,next)&#123;</span><br><span class=\"line\">    var str=&apos;&apos;;</span><br><span class=\"line\">    req.on(&apos;data&apos;,function(data)&#123;</span><br><span class=\"line\">        str+=data;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    req.on(&apos;end&apos;,function(data)&#123;</span><br><span class=\"line\">        req.body=querystring(str);</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.use(&apos;/&apos;,function(req,res.next)&#123;</span><br><span class=\"line\">    console.log(&apos;b&apos;)  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"cookie、session\"><a href=\"#cookie、session\" class=\"headerlink\" title=\"cookie、session\"></a>cookie、session</h3><ul>\n<li>a.发送cookie<br>res.cookie(名字,值,maxAge:毫秒,signed:true)</li>\n<li>b.读取cookie<br>cookie-parser<br>server.use(cookieParser(‘秘钥’))<br>server.use(function(){<br>  req.cookie   //未签名<br>  req.signedCookies   //签名版<br>})</li>\n<li>c.删除cookie<br>res.clearCookie(名字)</li>\n</ul>\n<p>保存数据，cookie数据保存浏览器，session 数据保存在服务器。<br>npm install cookie-parser cookie-session<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(<span class=\"string\">'express'</span>);</span><br><span class=\"line\">const cookieParser = require(<span class=\"string\">'cookie-parser'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">//发送cookie</span><br><span class=\"line\">server.use(<span class=\"string\">'/aaa/a.html'</span>,<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    res.cookie(<span class=\"string\">'user'</span>,<span class=\"string\">'blue'</span>,&#123;path:<span class=\"string\">'/aaa'</span>,<span class=\"string\">'maxAge'</span>:3*24*3600*1000&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//读取cookie</span><br><span class=\"line\">server.use(cookieParser())；</span><br><span class=\"line\">server.use(<span class=\"string\">'/'</span>,<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    console.log(req.cookie)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>实现cookie加密：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(<span class=\"string\">'express'</span>);</span><br><span class=\"line\">const cookieParser = require(<span class=\"string\">'cookie-parser'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">//cookieParser</span><br><span class=\"line\">server.use(cookieParser);</span><br><span class=\"line\">server.use(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    req.secret=<span class=\"string\">'hdwifbonfjfosdjhfsj'</span>;</span><br><span class=\"line\">    res.cookie(<span class=\"string\">'user'</span>,<span class=\"string\">'blue'</span>,&#123;signed:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    res.send(<span class=\"string\">'ok'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(8080);</span><br></pre></td></tr></table></figure></p>\n<p>session</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express = require(<span class=\"string\">'express'</span>);</span><br><span class=\"line\">const cookieSession = require(<span class=\"string\">'cookie-session'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">var server = express();</span><br><span class=\"line\">//cookie</span><br><span class=\"line\">server.use(cookieParser(<span class=\"string\">'dnkfvbscsvius'</span>));</span><br><span class=\"line\">server.use(cookieSession());</span><br><span class=\"line\"></span><br><span class=\"line\">server.use(<span class=\"string\">'/'</span>,<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    req.secret=<span class=\"string\">'hdwifbonfjfosdjhfsj'</span>;</span><br><span class=\"line\">    res.cookie(<span class=\"string\">'user'</span>,<span class=\"string\">'blue'</span>,&#123;signed:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    res.send(<span class=\"string\">'ok'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(8080);</span><br></pre></td></tr></table></figure>\n<h3 id=\"express框架整合\"><a href=\"#express框架整合\" class=\"headerlink\" title=\"express框架整合\"></a>express框架整合</h3><p><img src=\"/2019/08/13/node5/02.png\" alt=\"02.png\"><br><img src=\"/2019/08/13/node5/03.png\" alt=\"03.png\"></p>\n<h4 id=\"multer模块上传文件\"><a href=\"#multer模块上传文件\" class=\"headerlink\" title=\"multer模块上传文件\"></a>multer模块上传文件</h4><p>npm install multer</p>\n<ul>\n<li>body-parser:解析post数据  (application/x-form-urlencoded)<br>server.use(bodyParse.urlencode());</li>\n<li>multer:解析post文件   (multipart/form-data)</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//上传到磁盘  重命名</span><br><span class=\"line\"></span><br><span class=\"line\">const multer = require(<span class=\"string\">'multer'</span>);</span><br><span class=\"line\">const pathLib = require(<span class=\"string\">'path'</span>);</span><br><span class=\"line\">const fs = require(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//1、pathLib解析获取原始文件扩展名</span><br><span class=\"line\">    var str=<span class=\"string\">'c:\\\\wamp\\www\\a.html'</span>;</span><br><span class=\"line\">    var obj=path.parse(str);</span><br><span class=\"line\"></span><br><span class=\"line\">    base :文件名<span class=\"string\">\"a.html\"</span></span><br><span class=\"line\">    ext:扩展名<span class=\"string\">\"html\"</span></span><br><span class=\"line\">    dir:路径<span class=\"string\">'c:\\\\wamp\\www'</span></span><br><span class=\"line\">    name:文件名<span class=\"string\">\"a\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">//2.fs的rename重命名</span><br><span class=\"line\">    fs.rename(<span class=\"string\">'a.txt'</span>,<span class=\"string\">'b.txt'</span>,<span class=\"keyword\">function</span>(err)&#123;</span><br><span class=\"line\">        console.log(err)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    fs.rename(老名，新名，<span class=\"keyword\">function</span>(err)&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var obj=multer(&#123;dest:<span class=\"string\">'./www/upload/'</span>&#125;)  //文件保存的位置</span><br><span class=\"line\"></span><br><span class=\"line\">server.use(obj.any())       //接受任意类型文件</span><br><span class=\"line\">//只接收name=f1的文件 : server.use(obj.single(<span class=\"string\">'f1'</span>))  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//req.files:指上传的文件信息，如下图：</span><br><span class=\"line\">server.use(<span class=\"keyword\">function</span>(req,res)&#123;</span><br><span class=\"line\">    var newName = req.file[0].path+pathLib.parse(req.file[0].originalname).ext</span><br><span class=\"line\">    fs.rename(req.file[0].path,newName,<span class=\"keyword\">function</span>()(err)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">            res.send(<span class=\"string\">'上传失败'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            res.send(<span class=\"string\">'上传成功'</span>)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/08/13/node5/05.png\" alt=\"05.png\"><br><img src=\"/2019/08/13/node5/06.png\" alt=\"06.png\"></p>\n<ul>\n<li>html文件：</li>\n</ul>\n<p><img src=\"/2019/08/13/node5/04.png\" alt=\"04.png\"><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"string\">'http://localhost:8080/'</span> method=<span class=\"string\">'post'</span> enctype=<span class=\"string\">'multipart/form-data'</span>&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">'file'</span>/&gt;</span><br><span class=\"line\">    &lt;input <span class=\"built_in\">type</span>=<span class=\"string\">'submit'</span> value=<span class=\"string\">'上传/&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/form&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"consolidate-模板引擎整合库\"><a href=\"#consolidate-模板引擎整合库\" class=\"headerlink\" title=\"consolidate 模板引擎整合库\"></a>consolidate 模板引擎整合库</h3><p>安装：npm install consolidate<br>引用：const consolidate = require(‘consolidate’);<br>配置模板引擎：</p>\n<ul>\n<li>我要输出什么东西<br>server.set(‘view engine’,’html’)</li>\n<li>模板文件放在哪里<br>server.set(‘view’,’./views’)</li>\n<li>哪种模板引擎<br>server.engine(‘html’,consolidate.ejs)</li>\n</ul>\n<p>server.get(‘/‘,function(req,res){<br>    res.render(‘模板文件’，数据);<br>})</p>\n<h3 id=\"route路由\"><a href=\"#route路由\" class=\"headerlink\" title=\"route路由\"></a>route路由</h3><p>根据目录的不同，调用不同的模块</p>\n<p>const express = require(‘express’);</p>\n<p>var server=express();</p>\n<p>var routeUser =express.Route();<br>routeUser.get(‘1.html’,function(req,res){<br>    res.send(‘user1’)<br>})<br>routeUser.get(‘2.html’,function(req,res){<br>    res.send(‘user2’)<br>})</p>\n<p>server.use(‘/user’,routeUser);<br>server.listen(8080);</p>\n"},{"title":"jade、ejs模板库","date":"2019-09-10T08:36:44.000Z","_content":"模板引擎：生成页面\n\n主要的：\n>jade-破坏式、侵入式、强依赖\n>ejs-温和式、非侵入式、 弱依赖\n\n\n### 安装jade插件\nnpm install jade\n\n\njade写法:\n* 根据缩进，规定层级\n* 属性放在()里面，逗号分隔\n* a标签文本内容前有一个空格\n* style两种写法：普通属性写法;用json。\n* class两种写法:普通属性写法;用数组。\n* &attribute\n\njade1.js\n```bash\nconst jade = require('jade');\n//字符串：var str = jade.render('njfnejrfbjreknve');\n//文件：\nvar str = jade.renderfile('./views/1.jade',{pertty:true});\nconsole.log(str);\n```\n\n1.jade\n```bash\nhtml\n    head\n        style\n        script(src=\"a.js\")\n        link(href='a.css',rel='stylesheet')\n    body\n        div.box\n        div#div1\n        div(style=\"width:200px;height:200px;\",class=\"aaa bbb\")\n            ul\n                li\n                    input(type='text',id=\"test1\")\n                li\n                    a(href='http://baidu.com') 百度\n                li\n            div(style={width:'200px',height:'200px';},class=['aaa','bbb'])\n```\n### jade模板库高级语法\n* 识别单双标签，自定义标签默认为双标签。\n![01.png](01.png)\n* \"|\"或\".\"用来原样输出东西。\n![02.png](02.png)\n![03.png](03.png)\n* include引入文件\n![04.png](04.png)\n* 使用变量：#{}  或\"=\"\n```bash\n1.js\n    const jade= require('jade');\n    console.log(jade.renderfile('./view/1.jade',{pretty:true,name:'blue'}))\n\n1.jade\n    div 我的名字#{name}\n    div=name\n```\n* \"-\"代表：我是一段代码\n![05.png](05.png)\n* 循环：\n```bash\n1.jade\nhtml \n    head\n        body\n            .for(var i=0;i<arr.length;i++)\n            div=arr[i]\n\n1.js\nconsole.log(jade.renderfile('./view/1.jade',{pretty:true,\n    arr:['aaa','bbb','ccc']\n}))\n\n```\n* 非转义：标签原样输出：！\n```bash\n1.jade\nhtml \n    head\n        body\n            div!=content\n\n1.js\nconsole.log(jade.renderfile('./view/1.jade',{pretty:true,\n    content:'<h2>mwenfoirefwo</h2>'\n}))\n\n```\n* 生成html文件\n![06.png](06.png)\n\n\n### 安装ejs插件\nnpm install ejs\n\nejs1.js\n```bash\nconst ejs = require('ejs');\nvar str = ejs.renderfile('./views/1.ejs',{name:'blue'},function(err,data){\n    if(err)\n        console.log('编译失败')\n    else\n        console.log(data)\n});\nconsole.log(str);\n```\n1.ejs\n```bash\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n<body>\n    我的名字叫：<%= name %>\n</body>\n</html>\n\n```\n### ejs模板库高级语法\n* 灵活，支持各类型数据\n![07.png](07.png)\n* 循环\n![08.png](08.png)\n* \"=\"转义输出,\"-\"非转义输出\n* <% include ./a.txt %>\n![09.png](09.png)","source":"_posts/node6.md","raw":"---\ntitle: jade、ejs模板库\ndate: 2019-09-10 16:36:44\ncategories:\n- Node\ntags: [Node.js]\n---\n模板引擎：生成页面\n\n主要的：\n>jade-破坏式、侵入式、强依赖\n>ejs-温和式、非侵入式、 弱依赖\n\n\n### 安装jade插件\nnpm install jade\n\n\njade写法:\n* 根据缩进，规定层级\n* 属性放在()里面，逗号分隔\n* a标签文本内容前有一个空格\n* style两种写法：普通属性写法;用json。\n* class两种写法:普通属性写法;用数组。\n* &attribute\n\njade1.js\n```bash\nconst jade = require('jade');\n//字符串：var str = jade.render('njfnejrfbjreknve');\n//文件：\nvar str = jade.renderfile('./views/1.jade',{pertty:true});\nconsole.log(str);\n```\n\n1.jade\n```bash\nhtml\n    head\n        style\n        script(src=\"a.js\")\n        link(href='a.css',rel='stylesheet')\n    body\n        div.box\n        div#div1\n        div(style=\"width:200px;height:200px;\",class=\"aaa bbb\")\n            ul\n                li\n                    input(type='text',id=\"test1\")\n                li\n                    a(href='http://baidu.com') 百度\n                li\n            div(style={width:'200px',height:'200px';},class=['aaa','bbb'])\n```\n### jade模板库高级语法\n* 识别单双标签，自定义标签默认为双标签。\n![01.png](01.png)\n* \"|\"或\".\"用来原样输出东西。\n![02.png](02.png)\n![03.png](03.png)\n* include引入文件\n![04.png](04.png)\n* 使用变量：#{}  或\"=\"\n```bash\n1.js\n    const jade= require('jade');\n    console.log(jade.renderfile('./view/1.jade',{pretty:true,name:'blue'}))\n\n1.jade\n    div 我的名字#{name}\n    div=name\n```\n* \"-\"代表：我是一段代码\n![05.png](05.png)\n* 循环：\n```bash\n1.jade\nhtml \n    head\n        body\n            .for(var i=0;i<arr.length;i++)\n            div=arr[i]\n\n1.js\nconsole.log(jade.renderfile('./view/1.jade',{pretty:true,\n    arr:['aaa','bbb','ccc']\n}))\n\n```\n* 非转义：标签原样输出：！\n```bash\n1.jade\nhtml \n    head\n        body\n            div!=content\n\n1.js\nconsole.log(jade.renderfile('./view/1.jade',{pretty:true,\n    content:'<h2>mwenfoirefwo</h2>'\n}))\n\n```\n* 生成html文件\n![06.png](06.png)\n\n\n### 安装ejs插件\nnpm install ejs\n\nejs1.js\n```bash\nconst ejs = require('ejs');\nvar str = ejs.renderfile('./views/1.ejs',{name:'blue'},function(err,data){\n    if(err)\n        console.log('编译失败')\n    else\n        console.log(data)\n});\nconsole.log(str);\n```\n1.ejs\n```bash\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n<body>\n    我的名字叫：<%= name %>\n</body>\n</html>\n\n```\n### ejs模板库高级语法\n* 灵活，支持各类型数据\n![07.png](07.png)\n* 循环\n![08.png](08.png)\n* \"=\"转义输出,\"-\"非转义输出\n* <% include ./a.txt %>\n![09.png](09.png)","slug":"node6","published":1,"updated":"2019-09-11T03:05:43.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cvk0039t09zkkj5q89v","content":"<p>模板引擎：生成页面</p>\n<p>主要的：</p>\n<blockquote>\n<p>jade-破坏式、侵入式、强依赖<br>ejs-温和式、非侵入式、 弱依赖</p>\n</blockquote>\n<h3 id=\"安装jade插件\"><a href=\"#安装jade插件\" class=\"headerlink\" title=\"安装jade插件\"></a>安装jade插件</h3><p>npm install jade</p>\n<p>jade写法:</p>\n<ul>\n<li>根据缩进，规定层级</li>\n<li>属性放在()里面，逗号分隔</li>\n<li>a标签文本内容前有一个空格</li>\n<li>style两种写法：普通属性写法;用json。</li>\n<li>class两种写法:普通属性写法;用数组。</li>\n<li>&amp;attribute</li>\n</ul>\n<p>jade1.js<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const jade = require(<span class=\"string\">'jade'</span>);</span><br><span class=\"line\">//字符串：var str = jade.render(<span class=\"string\">'njfnejrfbjreknve'</span>);</span><br><span class=\"line\">//文件：</span><br><span class=\"line\">var str = jade.renderfile(<span class=\"string\">'./views/1.jade'</span>,&#123;pertty:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">console.log(str);</span><br></pre></td></tr></table></figure></p>\n<p>1.jade<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html</span><br><span class=\"line\">    head</span><br><span class=\"line\">        style</span><br><span class=\"line\">        script(src=<span class=\"string\">\"a.js\"</span>)</span><br><span class=\"line\">        link(href=<span class=\"string\">'a.css'</span>,rel=<span class=\"string\">'stylesheet'</span>)</span><br><span class=\"line\">    body</span><br><span class=\"line\">        div.box</span><br><span class=\"line\">        div<span class=\"comment\">#div1</span></span><br><span class=\"line\">        div(style=<span class=\"string\">\"width:200px;height:200px;\"</span>,class=<span class=\"string\">\"aaa bbb\"</span>)</span><br><span class=\"line\">            ul</span><br><span class=\"line\">                li</span><br><span class=\"line\">                    input(<span class=\"built_in\">type</span>=<span class=\"string\">'text'</span>,id=<span class=\"string\">\"test1\"</span>)</span><br><span class=\"line\">                li</span><br><span class=\"line\">                    a(href=<span class=\"string\">'http://baidu.com'</span>) 百度</span><br><span class=\"line\">                li</span><br><span class=\"line\">            div(style=&#123;width:<span class=\"string\">'200px'</span>,height:<span class=\"string\">'200px'</span>;&#125;,class=[<span class=\"string\">'aaa'</span>,<span class=\"string\">'bbb'</span>])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"jade模板库高级语法\"><a href=\"#jade模板库高级语法\" class=\"headerlink\" title=\"jade模板库高级语法\"></a>jade模板库高级语法</h3><ul>\n<li>识别单双标签，自定义标签默认为双标签。<br><img src=\"/2019/09/10/node6/01.png\" alt=\"01.png\"></li>\n<li>“|”或”.”用来原样输出东西。<br><img src=\"/2019/09/10/node6/02.png\" alt=\"02.png\"><br><img src=\"/2019/09/10/node6/03.png\" alt=\"03.png\"></li>\n<li>include引入文件<br><img src=\"/2019/09/10/node6/04.png\" alt=\"04.png\"></li>\n<li><p>使用变量：#{}  或”=”</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.js</span><br><span class=\"line\">    const jade= require(<span class=\"string\">'jade'</span>);</span><br><span class=\"line\">    console.log(jade.renderfile(<span class=\"string\">'./view/1.jade'</span>,&#123;pretty:<span class=\"literal\">true</span>,name:<span class=\"string\">'blue'</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">1.jade</span><br><span class=\"line\">    div 我的名字<span class=\"comment\">#&#123;name&#125;</span></span><br><span class=\"line\">    div=name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>“-“代表：我是一段代码<br><img src=\"/2019/09/10/node6/05.png\" alt=\"05.png\"></p>\n</li>\n<li><p>循环：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.jade</span><br><span class=\"line\">html </span><br><span class=\"line\">    head</span><br><span class=\"line\">        body</span><br><span class=\"line\">            .<span class=\"keyword\">for</span>(var i=0;i&lt;arr.length;i++)</span><br><span class=\"line\">            div=arr[i]</span><br><span class=\"line\"></span><br><span class=\"line\">1.js</span><br><span class=\"line\">console.log(jade.renderfile(<span class=\"string\">'./view/1.jade'</span>,&#123;pretty:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    arr:[<span class=\"string\">'aaa'</span>,<span class=\"string\">'bbb'</span>,<span class=\"string\">'ccc'</span>]</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>非转义：标签原样输出：！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.jade</span><br><span class=\"line\">html </span><br><span class=\"line\">    head</span><br><span class=\"line\">        body</span><br><span class=\"line\">            div!=content</span><br><span class=\"line\"></span><br><span class=\"line\">1.js</span><br><span class=\"line\">console.log(jade.renderfile(<span class=\"string\">'./view/1.jade'</span>,&#123;pretty:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    content:<span class=\"string\">'&lt;h2&gt;mwenfoirefwo&lt;/h2&gt;'</span></span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成html文件<br><img src=\"/2019/09/10/node6/06.png\" alt=\"06.png\"></p>\n</li>\n</ul>\n<h3 id=\"安装ejs插件\"><a href=\"#安装ejs插件\" class=\"headerlink\" title=\"安装ejs插件\"></a>安装ejs插件</h3><p>npm install ejs</p>\n<p>ejs1.js<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const ejs = require(<span class=\"string\">'ejs'</span>);</span><br><span class=\"line\">var str = ejs.renderfile(<span class=\"string\">'./views/1.ejs'</span>,&#123;name:<span class=\"string\">'blue'</span>&#125;,<span class=\"keyword\">function</span>(err,data)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">        console.log(<span class=\"string\">'编译失败'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        console.log(data)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(str);</span><br></pre></td></tr></table></figure></p>\n<p>1.ejs<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    我的名字叫：&lt;%= name %&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ejs模板库高级语法\"><a href=\"#ejs模板库高级语法\" class=\"headerlink\" title=\"ejs模板库高级语法\"></a>ejs模板库高级语法</h3><ul>\n<li>灵活，支持各类型数据<br><img src=\"/2019/09/10/node6/07.png\" alt=\"07.png\"></li>\n<li>循环<br><img src=\"/2019/09/10/node6/08.png\" alt=\"08.png\"></li>\n<li>“=”转义输出,”-“非转义输出</li>\n<li>&lt;% include ./a.txt %&gt;<br><img src=\"/2019/09/10/node6/09.png\" alt=\"09.png\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>模板引擎：生成页面</p>\n<p>主要的：</p>\n<blockquote>\n<p>jade-破坏式、侵入式、强依赖<br>ejs-温和式、非侵入式、 弱依赖</p>\n</blockquote>\n<h3 id=\"安装jade插件\"><a href=\"#安装jade插件\" class=\"headerlink\" title=\"安装jade插件\"></a>安装jade插件</h3><p>npm install jade</p>\n<p>jade写法:</p>\n<ul>\n<li>根据缩进，规定层级</li>\n<li>属性放在()里面，逗号分隔</li>\n<li>a标签文本内容前有一个空格</li>\n<li>style两种写法：普通属性写法;用json。</li>\n<li>class两种写法:普通属性写法;用数组。</li>\n<li>&amp;attribute</li>\n</ul>\n<p>jade1.js<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const jade = require(<span class=\"string\">'jade'</span>);</span><br><span class=\"line\">//字符串：var str = jade.render(<span class=\"string\">'njfnejrfbjreknve'</span>);</span><br><span class=\"line\">//文件：</span><br><span class=\"line\">var str = jade.renderfile(<span class=\"string\">'./views/1.jade'</span>,&#123;pertty:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">console.log(str);</span><br></pre></td></tr></table></figure></p>\n<p>1.jade<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html</span><br><span class=\"line\">    head</span><br><span class=\"line\">        style</span><br><span class=\"line\">        script(src=<span class=\"string\">\"a.js\"</span>)</span><br><span class=\"line\">        link(href=<span class=\"string\">'a.css'</span>,rel=<span class=\"string\">'stylesheet'</span>)</span><br><span class=\"line\">    body</span><br><span class=\"line\">        div.box</span><br><span class=\"line\">        div<span class=\"comment\">#div1</span></span><br><span class=\"line\">        div(style=<span class=\"string\">\"width:200px;height:200px;\"</span>,class=<span class=\"string\">\"aaa bbb\"</span>)</span><br><span class=\"line\">            ul</span><br><span class=\"line\">                li</span><br><span class=\"line\">                    input(<span class=\"built_in\">type</span>=<span class=\"string\">'text'</span>,id=<span class=\"string\">\"test1\"</span>)</span><br><span class=\"line\">                li</span><br><span class=\"line\">                    a(href=<span class=\"string\">'http://baidu.com'</span>) 百度</span><br><span class=\"line\">                li</span><br><span class=\"line\">            div(style=&#123;width:<span class=\"string\">'200px'</span>,height:<span class=\"string\">'200px'</span>;&#125;,class=[<span class=\"string\">'aaa'</span>,<span class=\"string\">'bbb'</span>])</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"jade模板库高级语法\"><a href=\"#jade模板库高级语法\" class=\"headerlink\" title=\"jade模板库高级语法\"></a>jade模板库高级语法</h3><ul>\n<li>识别单双标签，自定义标签默认为双标签。<br><img src=\"/2019/09/10/node6/01.png\" alt=\"01.png\"></li>\n<li>“|”或”.”用来原样输出东西。<br><img src=\"/2019/09/10/node6/02.png\" alt=\"02.png\"><br><img src=\"/2019/09/10/node6/03.png\" alt=\"03.png\"></li>\n<li>include引入文件<br><img src=\"/2019/09/10/node6/04.png\" alt=\"04.png\"></li>\n<li><p>使用变量：#{}  或”=”</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.js</span><br><span class=\"line\">    const jade= require(<span class=\"string\">'jade'</span>);</span><br><span class=\"line\">    console.log(jade.renderfile(<span class=\"string\">'./view/1.jade'</span>,&#123;pretty:<span class=\"literal\">true</span>,name:<span class=\"string\">'blue'</span>&#125;))</span><br><span class=\"line\"></span><br><span class=\"line\">1.jade</span><br><span class=\"line\">    div 我的名字<span class=\"comment\">#&#123;name&#125;</span></span><br><span class=\"line\">    div=name</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>“-“代表：我是一段代码<br><img src=\"/2019/09/10/node6/05.png\" alt=\"05.png\"></p>\n</li>\n<li><p>循环：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.jade</span><br><span class=\"line\">html </span><br><span class=\"line\">    head</span><br><span class=\"line\">        body</span><br><span class=\"line\">            .<span class=\"keyword\">for</span>(var i=0;i&lt;arr.length;i++)</span><br><span class=\"line\">            div=arr[i]</span><br><span class=\"line\"></span><br><span class=\"line\">1.js</span><br><span class=\"line\">console.log(jade.renderfile(<span class=\"string\">'./view/1.jade'</span>,&#123;pretty:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    arr:[<span class=\"string\">'aaa'</span>,<span class=\"string\">'bbb'</span>,<span class=\"string\">'ccc'</span>]</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>非转义：标签原样输出：！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.jade</span><br><span class=\"line\">html </span><br><span class=\"line\">    head</span><br><span class=\"line\">        body</span><br><span class=\"line\">            div!=content</span><br><span class=\"line\"></span><br><span class=\"line\">1.js</span><br><span class=\"line\">console.log(jade.renderfile(<span class=\"string\">'./view/1.jade'</span>,&#123;pretty:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    content:<span class=\"string\">'&lt;h2&gt;mwenfoirefwo&lt;/h2&gt;'</span></span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成html文件<br><img src=\"/2019/09/10/node6/06.png\" alt=\"06.png\"></p>\n</li>\n</ul>\n<h3 id=\"安装ejs插件\"><a href=\"#安装ejs插件\" class=\"headerlink\" title=\"安装ejs插件\"></a>安装ejs插件</h3><p>npm install ejs</p>\n<p>ejs1.js<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const ejs = require(<span class=\"string\">'ejs'</span>);</span><br><span class=\"line\">var str = ejs.renderfile(<span class=\"string\">'./views/1.ejs'</span>,&#123;name:<span class=\"string\">'blue'</span>&#125;,<span class=\"keyword\">function</span>(err,data)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">        console.log(<span class=\"string\">'编译失败'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        console.log(data)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">console.log(str);</span><br></pre></td></tr></table></figure></p>\n<p>1.ejs<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    我的名字叫：&lt;%= name %&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ejs模板库高级语法\"><a href=\"#ejs模板库高级语法\" class=\"headerlink\" title=\"ejs模板库高级语法\"></a>ejs模板库高级语法</h3><ul>\n<li>灵活，支持各类型数据<br><img src=\"/2019/09/10/node6/07.png\" alt=\"07.png\"></li>\n<li>循环<br><img src=\"/2019/09/10/node6/08.png\" alt=\"08.png\"></li>\n<li>“=”转义输出,”-“非转义输出</li>\n<li>&lt;% include ./a.txt %&gt;<br><img src=\"/2019/09/10/node6/09.png\" alt=\"09.png\"></li>\n</ul>\n"},{"title":"MySQL","date":"2019-09-11T07:11:01.000Z","_content":"### 准备\n#### mysql安装\n参考：https://www.cnblogs.com/laumians-notes/p/9069498.html\n\n\nNavicat数据库管理工具:https://blog.csdn.net/a599174211/article/details/82795658\n\n\n### nodeJS操作MySQL\nnodeJS默认不支持MySQL,需要第三方工具来驱动，这里用mysql驱动。\n* npm install mysql\n\n```bash\nconst mysql = require('mysql');\n\n1.连接\n//createConnection(哪台服务器，用户名，密码，库)\nvar db = mysql.createConnection(host:'localhost',port:'3306',user:'root',password:'123456',database:'my_db',)；\n\n2.查询\n//query(干啥，回调函数)\ndb.query(\"SELECT * FROM `user_table`;\",(err,data)=>{\n    if(err)\n        console.log('出错了'，err)\n    else\n        console.log('成功了'，data)\n        console.log(JSON.stringify(data))\n});\n\n```\n### SQL标准写法：\n1.关键字大写\n2.库、表、字段需加上饭单引号``\nSQL四大语句：增删改查\n增：INSERT\nINSERT INTO 表（字段列表） VALUES (值列表)\nINSERT INTO `user_table`（`ID`,`username`,`password`）VALUES (`0`,`blue2`,`987654`) VALUES (值列表)\n删：DELETE\n改：UPDATE\n查：SELECT\n\n","source":"_posts/node7.md","raw":"---\ntitle: MySQL\ndate: 2019-09-11 15:11:01\ncategories:\n- Node\ntags: [Node.js]\n---\n### 准备\n#### mysql安装\n参考：https://www.cnblogs.com/laumians-notes/p/9069498.html\n\n\nNavicat数据库管理工具:https://blog.csdn.net/a599174211/article/details/82795658\n\n\n### nodeJS操作MySQL\nnodeJS默认不支持MySQL,需要第三方工具来驱动，这里用mysql驱动。\n* npm install mysql\n\n```bash\nconst mysql = require('mysql');\n\n1.连接\n//createConnection(哪台服务器，用户名，密码，库)\nvar db = mysql.createConnection(host:'localhost',port:'3306',user:'root',password:'123456',database:'my_db',)；\n\n2.查询\n//query(干啥，回调函数)\ndb.query(\"SELECT * FROM `user_table`;\",(err,data)=>{\n    if(err)\n        console.log('出错了'，err)\n    else\n        console.log('成功了'，data)\n        console.log(JSON.stringify(data))\n});\n\n```\n### SQL标准写法：\n1.关键字大写\n2.库、表、字段需加上饭单引号``\nSQL四大语句：增删改查\n增：INSERT\nINSERT INTO 表（字段列表） VALUES (值列表)\nINSERT INTO `user_table`（`ID`,`username`,`password`）VALUES (`0`,`blue2`,`987654`) VALUES (值列表)\n删：DELETE\n改：UPDATE\n查：SELECT\n\n","slug":"node7","published":1,"updated":"2019-09-12T11:24:30.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cvt003ct09zzidzjdpn","content":"<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><h4 id=\"mysql安装\"><a href=\"#mysql安装\" class=\"headerlink\" title=\"mysql安装\"></a>mysql安装</h4><p>参考：<a href=\"https://www.cnblogs.com/laumians-notes/p/9069498.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/laumians-notes/p/9069498.html</a></p>\n<p>Navicat数据库管理工具:<a href=\"https://blog.csdn.net/a599174211/article/details/82795658\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/a599174211/article/details/82795658</a></p>\n<h3 id=\"nodeJS操作MySQL\"><a href=\"#nodeJS操作MySQL\" class=\"headerlink\" title=\"nodeJS操作MySQL\"></a>nodeJS操作MySQL</h3><p>nodeJS默认不支持MySQL,需要第三方工具来驱动，这里用mysql驱动。</p>\n<ul>\n<li>npm install mysql</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const mysql = require(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">1.连接</span><br><span class=\"line\">//createConnection(哪台服务器，用户名，密码，库)</span><br><span class=\"line\">var db = mysql.createConnection(host:<span class=\"string\">'localhost'</span>,port:<span class=\"string\">'3306'</span>,user:<span class=\"string\">'root'</span>,password:<span class=\"string\">'123456'</span>,database:<span class=\"string\">'my_db'</span>,)；</span><br><span class=\"line\"></span><br><span class=\"line\">2.查询</span><br><span class=\"line\">//query(干啥，回调函数)</span><br><span class=\"line\">db.query(<span class=\"string\">\"SELECT * FROM `user_table`;\"</span>,(err,data)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">        console.log(<span class=\"string\">'出错了'</span>，err)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        console.log(<span class=\"string\">'成功了'</span>，data)</span><br><span class=\"line\">        console.log(JSON.stringify(data))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"SQL标准写法：\"><a href=\"#SQL标准写法：\" class=\"headerlink\" title=\"SQL标准写法：\"></a>SQL标准写法：</h3><p>1.关键字大写<br>2.库、表、字段需加上饭单引号<code></code><br>SQL四大语句：增删改查<br>增：INSERT<br>INSERT INTO 表（字段列表） VALUES (值列表)<br>INSERT INTO <code>user_table</code>（<code>ID</code>,<code>username</code>,<code>password</code>）VALUES (<code>0</code>,<code>blue2</code>,<code>987654</code>) VALUES (值列表)<br>删：DELETE<br>改：UPDATE<br>查：SELECT</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><h4 id=\"mysql安装\"><a href=\"#mysql安装\" class=\"headerlink\" title=\"mysql安装\"></a>mysql安装</h4><p>参考：<a href=\"https://www.cnblogs.com/laumians-notes/p/9069498.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/laumians-notes/p/9069498.html</a></p>\n<p>Navicat数据库管理工具:<a href=\"https://blog.csdn.net/a599174211/article/details/82795658\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/a599174211/article/details/82795658</a></p>\n<h3 id=\"nodeJS操作MySQL\"><a href=\"#nodeJS操作MySQL\" class=\"headerlink\" title=\"nodeJS操作MySQL\"></a>nodeJS操作MySQL</h3><p>nodeJS默认不支持MySQL,需要第三方工具来驱动，这里用mysql驱动。</p>\n<ul>\n<li>npm install mysql</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const mysql = require(<span class=\"string\">'mysql'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">1.连接</span><br><span class=\"line\">//createConnection(哪台服务器，用户名，密码，库)</span><br><span class=\"line\">var db = mysql.createConnection(host:<span class=\"string\">'localhost'</span>,port:<span class=\"string\">'3306'</span>,user:<span class=\"string\">'root'</span>,password:<span class=\"string\">'123456'</span>,database:<span class=\"string\">'my_db'</span>,)；</span><br><span class=\"line\"></span><br><span class=\"line\">2.查询</span><br><span class=\"line\">//query(干啥，回调函数)</span><br><span class=\"line\">db.query(<span class=\"string\">\"SELECT * FROM `user_table`;\"</span>,(err,data)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)</span><br><span class=\"line\">        console.log(<span class=\"string\">'出错了'</span>，err)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        console.log(<span class=\"string\">'成功了'</span>，data)</span><br><span class=\"line\">        console.log(JSON.stringify(data))</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"SQL标准写法：\"><a href=\"#SQL标准写法：\" class=\"headerlink\" title=\"SQL标准写法：\"></a>SQL标准写法：</h3><p>1.关键字大写<br>2.库、表、字段需加上饭单引号<code></code><br>SQL四大语句：增删改查<br>增：INSERT<br>INSERT INTO 表（字段列表） VALUES (值列表)<br>INSERT INTO <code>user_table</code>（<code>ID</code>,<code>username</code>,<code>password</code>）VALUES (<code>0</code>,<code>blue2</code>,<code>987654</code>) VALUES (值列表)<br>删：DELETE<br>改：UPDATE<br>查：SELECT</p>\n"},{"title":"python基础(二)--语句","date":"2019-08-07T10:24:58.000Z","_content":"### Python 条件语句\nPython条件语句是通过一条或多条语句的执行结果（True或者False）来决定执行的代码块。\n```\nif 判断条件：\n    执行语句……\nelse：\n    执行语句……\n```\n![01.gif](01.gif)\nif 语句的判断条件可以用>（大于）、<(小于)、==（等于）、>=（大于等于）、<=（小于等于）来表示其关系。\n\n当判断条件为多个值时，可以使用以下形式：\n```\nif 判断条件1:\n    执行语句1……\nelif 判断条件2:\n    执行语句2……\nelif 判断条件3:\n    执行语句3……\nelse:\n    执行语句4……\n```\n简单的语句组\n```\n#!/usr/bin/python \n# -*- coding: UTF-8 -*-\n \nvar = 100 \nif ( var  == 100 ) : print \"变量 var 的值为100\" \nprint \"Good bye!\"\n```\n### Python 循环语句\n![01.png](01.png)\n循环控制语句\n![02.png](02.png)\n#### Python While 循环语句\nPython 编程中 while 语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务。其基本形式为：\n```\nwhile 判断条件：\n    执行语句……\n```\n![02.gif](02.gif)\nwhile 语句时还有另外两个重要的命令 continue，break 来跳过循环，continue 用于跳过该次循环，break .\n\n循环使用 else 语句\n在 python 中，while … else 在循环条件为 false 时执行 else 语句块：\n```\n#!/usr/bin/python\n \ncount = 0\nwhile count < 5:\n   print count, \" is  less than 5\"\n   count = count + 1\nelse:\n   print count, \" is not less than 5\"\n```\n简单语句组\n类似 if 语句的语法，如果你的 while循环体中只有一条语句，你可以将该语句与while写在同一行中， 如下所示：\n```\n#!/usr/bin/python\nflag = 1\nwhile (flag): print 'Given flag is really true!'\nprint \"Good bye!\"\n```\n#### Python for 循环语句\nPython for循环可以遍历任何序列的项目，如一个列表或者一个字符串。\n\n语法：\n```\nfor iterating_var in sequence:\n   statements(s)\n```\n\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nfor letter in 'Python':     # 第一个实例\n   print '当前字母 :', letter\n \nfruits = ['banana', 'apple',  'mango']\nfor fruit in fruits:        # 第二个实例\n   print '当前水果 :', fruit\n \nprint \"Good bye!\"\n```\n结果：\n```\n当前字母 : P\n当前字母 : y\n当前字母 : t\n当前字母 : h\n当前字母 : o\n当前字母 : n\n当前水果 : banana\n当前水果 : apple\n当前水果 : mango\nGood bye!\n```\n通过序列索引迭代:\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nfruits = ['banana', 'apple',  'mango']\nfor index in range(len(fruits)):\n   print '当前水果 :', fruits[index]\n \nprint \"Good bye!\"\n```\n循环使用 else 语句\n在 python 中，for … else 表示这样的意思，for 中的语句和普通的没有区别，else 中的语句会在循环正常执行完（即 for 不是通过 break 跳出而中断的）的情况下执行，while … else 也是一样。\n```\nfor num in range(10,20):  # 迭代 10 到 20 之间的数字\n   for i in range(2,num): # 根据因子迭代\n      if num%i == 0:      # 确定第一个因子\n         j=num/i          # 计算第二个因子\n         print '%d 等于 %d * %d' % (num,i,j)\n         break            # 跳出当前循环\n   else:                  # 循环的 else 部分\n      print num, '是一个质数'\n```\n#### Python 循环嵌套\nPython 语言允许在一个循环体里面嵌入另一个循环。\n\nPython for 循环嵌套语法：\n```\nfor iterating_var in sequence:\n   for iterating_var in sequence:\n      statements(s)\n   statements(s)\nPython while 循环嵌套语法：\n```\n\n```\nwhile expression:\n   while expression:\n      statement(s)\n   statement(s)\n```\n你可以在循环体内嵌入其他的循环体，如在while循环中可以嵌入for循环， 反之，你可以在for循环中嵌入while循环\n#### Python break 语句\nPython break语句，就像在C语言中，打破了最小封闭for或while循环。\n\nbreak语句用来终止循环语句，即循环条件没有False条件或者序列还没被完全递归完，也会停止执行循环语句。\n\nbreak语句用在while和for循环中。\n\n如果您使用嵌套循环，break语句将停止执行最深层的循环，并开始执行下一行代码。\n#### Python continue 语句\nPython continue 语句跳出本次循环，而break跳出整个循环。\n\ncontinue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。\n\ncontinue语句用在while和for循环中。\n#### Python pass 语句\nPython pass 是空语句，是为了保持程序结构的完整性。\n\npass 不做任何事情，一般用做占位语句。","source":"_posts/python基础2.md","raw":"---\ntitle: python基础(二)--语句\ndate: 2019-08-07 18:24:58\ncategories:\n- python\ntags: [python基础]\n---\n### Python 条件语句\nPython条件语句是通过一条或多条语句的执行结果（True或者False）来决定执行的代码块。\n```\nif 判断条件：\n    执行语句……\nelse：\n    执行语句……\n```\n![01.gif](01.gif)\nif 语句的判断条件可以用>（大于）、<(小于)、==（等于）、>=（大于等于）、<=（小于等于）来表示其关系。\n\n当判断条件为多个值时，可以使用以下形式：\n```\nif 判断条件1:\n    执行语句1……\nelif 判断条件2:\n    执行语句2……\nelif 判断条件3:\n    执行语句3……\nelse:\n    执行语句4……\n```\n简单的语句组\n```\n#!/usr/bin/python \n# -*- coding: UTF-8 -*-\n \nvar = 100 \nif ( var  == 100 ) : print \"变量 var 的值为100\" \nprint \"Good bye!\"\n```\n### Python 循环语句\n![01.png](01.png)\n循环控制语句\n![02.png](02.png)\n#### Python While 循环语句\nPython 编程中 while 语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务。其基本形式为：\n```\nwhile 判断条件：\n    执行语句……\n```\n![02.gif](02.gif)\nwhile 语句时还有另外两个重要的命令 continue，break 来跳过循环，continue 用于跳过该次循环，break .\n\n循环使用 else 语句\n在 python 中，while … else 在循环条件为 false 时执行 else 语句块：\n```\n#!/usr/bin/python\n \ncount = 0\nwhile count < 5:\n   print count, \" is  less than 5\"\n   count = count + 1\nelse:\n   print count, \" is not less than 5\"\n```\n简单语句组\n类似 if 语句的语法，如果你的 while循环体中只有一条语句，你可以将该语句与while写在同一行中， 如下所示：\n```\n#!/usr/bin/python\nflag = 1\nwhile (flag): print 'Given flag is really true!'\nprint \"Good bye!\"\n```\n#### Python for 循环语句\nPython for循环可以遍历任何序列的项目，如一个列表或者一个字符串。\n\n语法：\n```\nfor iterating_var in sequence:\n   statements(s)\n```\n\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nfor letter in 'Python':     # 第一个实例\n   print '当前字母 :', letter\n \nfruits = ['banana', 'apple',  'mango']\nfor fruit in fruits:        # 第二个实例\n   print '当前水果 :', fruit\n \nprint \"Good bye!\"\n```\n结果：\n```\n当前字母 : P\n当前字母 : y\n当前字母 : t\n当前字母 : h\n当前字母 : o\n当前字母 : n\n当前水果 : banana\n当前水果 : apple\n当前水果 : mango\nGood bye!\n```\n通过序列索引迭代:\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nfruits = ['banana', 'apple',  'mango']\nfor index in range(len(fruits)):\n   print '当前水果 :', fruits[index]\n \nprint \"Good bye!\"\n```\n循环使用 else 语句\n在 python 中，for … else 表示这样的意思，for 中的语句和普通的没有区别，else 中的语句会在循环正常执行完（即 for 不是通过 break 跳出而中断的）的情况下执行，while … else 也是一样。\n```\nfor num in range(10,20):  # 迭代 10 到 20 之间的数字\n   for i in range(2,num): # 根据因子迭代\n      if num%i == 0:      # 确定第一个因子\n         j=num/i          # 计算第二个因子\n         print '%d 等于 %d * %d' % (num,i,j)\n         break            # 跳出当前循环\n   else:                  # 循环的 else 部分\n      print num, '是一个质数'\n```\n#### Python 循环嵌套\nPython 语言允许在一个循环体里面嵌入另一个循环。\n\nPython for 循环嵌套语法：\n```\nfor iterating_var in sequence:\n   for iterating_var in sequence:\n      statements(s)\n   statements(s)\nPython while 循环嵌套语法：\n```\n\n```\nwhile expression:\n   while expression:\n      statement(s)\n   statement(s)\n```\n你可以在循环体内嵌入其他的循环体，如在while循环中可以嵌入for循环， 反之，你可以在for循环中嵌入while循环\n#### Python break 语句\nPython break语句，就像在C语言中，打破了最小封闭for或while循环。\n\nbreak语句用来终止循环语句，即循环条件没有False条件或者序列还没被完全递归完，也会停止执行循环语句。\n\nbreak语句用在while和for循环中。\n\n如果您使用嵌套循环，break语句将停止执行最深层的循环，并开始执行下一行代码。\n#### Python continue 语句\nPython continue 语句跳出本次循环，而break跳出整个循环。\n\ncontinue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。\n\ncontinue语句用在while和for循环中。\n#### Python pass 语句\nPython pass 是空语句，是为了保持程序结构的完整性。\n\npass 不做任何事情，一般用做占位语句。","slug":"python基础2","published":1,"updated":"2019-08-07T10:59:22.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cvw003ft09zidwsxysr","content":"<h3 id=\"Python-条件语句\"><a href=\"#Python-条件语句\" class=\"headerlink\" title=\"Python 条件语句\"></a>Python 条件语句</h3><p>Python条件语句是通过一条或多条语句的执行结果（True或者False）来决定执行的代码块。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 判断条件：</span><br><span class=\"line\">    执行语句……</span><br><span class=\"line\">else：</span><br><span class=\"line\">    执行语句……</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2019/08/07/python基础2/01.gif\" alt=\"01.gif\"><br>if 语句的判断条件可以用&gt;（大于）、&lt;(小于)、==（等于）、&gt;=（大于等于）、&lt;=（小于等于）来表示其关系。</p>\n<p>当判断条件为多个值时，可以使用以下形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 判断条件1:</span><br><span class=\"line\">    执行语句1……</span><br><span class=\"line\">elif 判断条件2:</span><br><span class=\"line\">    执行语句2……</span><br><span class=\"line\">elif 判断条件3:</span><br><span class=\"line\">    执行语句3……</span><br><span class=\"line\">else:</span><br><span class=\"line\">    执行语句4……</span><br></pre></td></tr></table></figure></p>\n<p>简单的语句组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python </span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">var = 100 </span><br><span class=\"line\">if ( var  == 100 ) : print &quot;变量 var 的值为100&quot; </span><br><span class=\"line\">print &quot;Good bye!&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Python-循环语句\"><a href=\"#Python-循环语句\" class=\"headerlink\" title=\"Python 循环语句\"></a>Python 循环语句</h3><p><img src=\"/2019/08/07/python基础2/01.png\" alt=\"01.png\"><br>循环控制语句<br><img src=\"/2019/08/07/python基础2/02.png\" alt=\"02.png\"></p>\n<h4 id=\"Python-While-循环语句\"><a href=\"#Python-While-循环语句\" class=\"headerlink\" title=\"Python While 循环语句\"></a>Python While 循环语句</h4><p>Python 编程中 while 语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务。其基本形式为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while 判断条件：</span><br><span class=\"line\">    执行语句……</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2019/08/07/python基础2/02.gif\" alt=\"02.gif\"><br>while 语句时还有另外两个重要的命令 continue，break 来跳过循环，continue 用于跳过该次循环，break .</p>\n<p>循环使用 else 语句<br>在 python 中，while … else 在循环条件为 false 时执行 else 语句块：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"> </span><br><span class=\"line\">count = 0</span><br><span class=\"line\">while count &lt; 5:</span><br><span class=\"line\">   print count, &quot; is  less than 5&quot;</span><br><span class=\"line\">   count = count + 1</span><br><span class=\"line\">else:</span><br><span class=\"line\">   print count, &quot; is not less than 5&quot;</span><br></pre></td></tr></table></figure></p>\n<p>简单语句组<br>类似 if 语句的语法，如果你的 while循环体中只有一条语句，你可以将该语句与while写在同一行中， 如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\">flag = 1</span><br><span class=\"line\">while (flag): print &apos;Given flag is really true!&apos;</span><br><span class=\"line\">print &quot;Good bye!&quot;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Python-for-循环语句\"><a href=\"#Python-for-循环语句\" class=\"headerlink\" title=\"Python for 循环语句\"></a>Python for 循环语句</h4><p>Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。</p>\n<p>语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for iterating_var in sequence:</span><br><span class=\"line\">   statements(s)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">for letter in &apos;Python&apos;:     # 第一个实例</span><br><span class=\"line\">   print &apos;当前字母 :&apos;, letter</span><br><span class=\"line\"> </span><br><span class=\"line\">fruits = [&apos;banana&apos;, &apos;apple&apos;,  &apos;mango&apos;]</span><br><span class=\"line\">for fruit in fruits:        # 第二个实例</span><br><span class=\"line\">   print &apos;当前水果 :&apos;, fruit</span><br><span class=\"line\"> </span><br><span class=\"line\">print &quot;Good bye!&quot;</span><br></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前字母 : P</span><br><span class=\"line\">当前字母 : y</span><br><span class=\"line\">当前字母 : t</span><br><span class=\"line\">当前字母 : h</span><br><span class=\"line\">当前字母 : o</span><br><span class=\"line\">当前字母 : n</span><br><span class=\"line\">当前水果 : banana</span><br><span class=\"line\">当前水果 : apple</span><br><span class=\"line\">当前水果 : mango</span><br><span class=\"line\">Good bye!</span><br></pre></td></tr></table></figure></p>\n<p>通过序列索引迭代:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">fruits = [&apos;banana&apos;, &apos;apple&apos;,  &apos;mango&apos;]</span><br><span class=\"line\">for index in range(len(fruits)):</span><br><span class=\"line\">   print &apos;当前水果 :&apos;, fruits[index]</span><br><span class=\"line\"> </span><br><span class=\"line\">print &quot;Good bye!&quot;</span><br></pre></td></tr></table></figure></p>\n<p>循环使用 else 语句<br>在 python 中，for … else 表示这样的意思，for 中的语句和普通的没有区别，else 中的语句会在循环正常执行完（即 for 不是通过 break 跳出而中断的）的情况下执行，while … else 也是一样。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for num in range(10,20):  # 迭代 10 到 20 之间的数字</span><br><span class=\"line\">   for i in range(2,num): # 根据因子迭代</span><br><span class=\"line\">      if num%i == 0:      # 确定第一个因子</span><br><span class=\"line\">         j=num/i          # 计算第二个因子</span><br><span class=\"line\">         print &apos;%d 等于 %d * %d&apos; % (num,i,j)</span><br><span class=\"line\">         break            # 跳出当前循环</span><br><span class=\"line\">   else:                  # 循环的 else 部分</span><br><span class=\"line\">      print num, &apos;是一个质数&apos;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Python-循环嵌套\"><a href=\"#Python-循环嵌套\" class=\"headerlink\" title=\"Python 循环嵌套\"></a>Python 循环嵌套</h4><p>Python 语言允许在一个循环体里面嵌入另一个循环。</p>\n<p>Python for 循环嵌套语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for iterating_var in sequence:</span><br><span class=\"line\">   for iterating_var in sequence:</span><br><span class=\"line\">      statements(s)</span><br><span class=\"line\">   statements(s)</span><br><span class=\"line\">Python while 循环嵌套语法：</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while expression:</span><br><span class=\"line\">   while expression:</span><br><span class=\"line\">      statement(s)</span><br><span class=\"line\">   statement(s)</span><br></pre></td></tr></table></figure>\n<p>你可以在循环体内嵌入其他的循环体，如在while循环中可以嵌入for循环， 反之，你可以在for循环中嵌入while循环</p>\n<h4 id=\"Python-break-语句\"><a href=\"#Python-break-语句\" class=\"headerlink\" title=\"Python break 语句\"></a>Python break 语句</h4><p>Python break语句，就像在C语言中，打破了最小封闭for或while循环。</p>\n<p>break语句用来终止循环语句，即循环条件没有False条件或者序列还没被完全递归完，也会停止执行循环语句。</p>\n<p>break语句用在while和for循环中。</p>\n<p>如果您使用嵌套循环，break语句将停止执行最深层的循环，并开始执行下一行代码。</p>\n<h4 id=\"Python-continue-语句\"><a href=\"#Python-continue-语句\" class=\"headerlink\" title=\"Python continue 语句\"></a>Python continue 语句</h4><p>Python continue 语句跳出本次循环，而break跳出整个循环。</p>\n<p>continue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。</p>\n<p>continue语句用在while和for循环中。</p>\n<h4 id=\"Python-pass-语句\"><a href=\"#Python-pass-语句\" class=\"headerlink\" title=\"Python pass 语句\"></a>Python pass 语句</h4><p>Python pass 是空语句，是为了保持程序结构的完整性。</p>\n<p>pass 不做任何事情，一般用做占位语句。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Python-条件语句\"><a href=\"#Python-条件语句\" class=\"headerlink\" title=\"Python 条件语句\"></a>Python 条件语句</h3><p>Python条件语句是通过一条或多条语句的执行结果（True或者False）来决定执行的代码块。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 判断条件：</span><br><span class=\"line\">    执行语句……</span><br><span class=\"line\">else：</span><br><span class=\"line\">    执行语句……</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2019/08/07/python基础2/01.gif\" alt=\"01.gif\"><br>if 语句的判断条件可以用&gt;（大于）、&lt;(小于)、==（等于）、&gt;=（大于等于）、&lt;=（小于等于）来表示其关系。</p>\n<p>当判断条件为多个值时，可以使用以下形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if 判断条件1:</span><br><span class=\"line\">    执行语句1……</span><br><span class=\"line\">elif 判断条件2:</span><br><span class=\"line\">    执行语句2……</span><br><span class=\"line\">elif 判断条件3:</span><br><span class=\"line\">    执行语句3……</span><br><span class=\"line\">else:</span><br><span class=\"line\">    执行语句4……</span><br></pre></td></tr></table></figure></p>\n<p>简单的语句组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python </span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">var = 100 </span><br><span class=\"line\">if ( var  == 100 ) : print &quot;变量 var 的值为100&quot; </span><br><span class=\"line\">print &quot;Good bye!&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Python-循环语句\"><a href=\"#Python-循环语句\" class=\"headerlink\" title=\"Python 循环语句\"></a>Python 循环语句</h3><p><img src=\"/2019/08/07/python基础2/01.png\" alt=\"01.png\"><br>循环控制语句<br><img src=\"/2019/08/07/python基础2/02.png\" alt=\"02.png\"></p>\n<h4 id=\"Python-While-循环语句\"><a href=\"#Python-While-循环语句\" class=\"headerlink\" title=\"Python While 循环语句\"></a>Python While 循环语句</h4><p>Python 编程中 while 语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务。其基本形式为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while 判断条件：</span><br><span class=\"line\">    执行语句……</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2019/08/07/python基础2/02.gif\" alt=\"02.gif\"><br>while 语句时还有另外两个重要的命令 continue，break 来跳过循环，continue 用于跳过该次循环，break .</p>\n<p>循环使用 else 语句<br>在 python 中，while … else 在循环条件为 false 时执行 else 语句块：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"> </span><br><span class=\"line\">count = 0</span><br><span class=\"line\">while count &lt; 5:</span><br><span class=\"line\">   print count, &quot; is  less than 5&quot;</span><br><span class=\"line\">   count = count + 1</span><br><span class=\"line\">else:</span><br><span class=\"line\">   print count, &quot; is not less than 5&quot;</span><br></pre></td></tr></table></figure></p>\n<p>简单语句组<br>类似 if 语句的语法，如果你的 while循环体中只有一条语句，你可以将该语句与while写在同一行中， 如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\">flag = 1</span><br><span class=\"line\">while (flag): print &apos;Given flag is really true!&apos;</span><br><span class=\"line\">print &quot;Good bye!&quot;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Python-for-循环语句\"><a href=\"#Python-for-循环语句\" class=\"headerlink\" title=\"Python for 循环语句\"></a>Python for 循环语句</h4><p>Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。</p>\n<p>语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for iterating_var in sequence:</span><br><span class=\"line\">   statements(s)</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">for letter in &apos;Python&apos;:     # 第一个实例</span><br><span class=\"line\">   print &apos;当前字母 :&apos;, letter</span><br><span class=\"line\"> </span><br><span class=\"line\">fruits = [&apos;banana&apos;, &apos;apple&apos;,  &apos;mango&apos;]</span><br><span class=\"line\">for fruit in fruits:        # 第二个实例</span><br><span class=\"line\">   print &apos;当前水果 :&apos;, fruit</span><br><span class=\"line\"> </span><br><span class=\"line\">print &quot;Good bye!&quot;</span><br></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前字母 : P</span><br><span class=\"line\">当前字母 : y</span><br><span class=\"line\">当前字母 : t</span><br><span class=\"line\">当前字母 : h</span><br><span class=\"line\">当前字母 : o</span><br><span class=\"line\">当前字母 : n</span><br><span class=\"line\">当前水果 : banana</span><br><span class=\"line\">当前水果 : apple</span><br><span class=\"line\">当前水果 : mango</span><br><span class=\"line\">Good bye!</span><br></pre></td></tr></table></figure></p>\n<p>通过序列索引迭代:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">fruits = [&apos;banana&apos;, &apos;apple&apos;,  &apos;mango&apos;]</span><br><span class=\"line\">for index in range(len(fruits)):</span><br><span class=\"line\">   print &apos;当前水果 :&apos;, fruits[index]</span><br><span class=\"line\"> </span><br><span class=\"line\">print &quot;Good bye!&quot;</span><br></pre></td></tr></table></figure></p>\n<p>循环使用 else 语句<br>在 python 中，for … else 表示这样的意思，for 中的语句和普通的没有区别，else 中的语句会在循环正常执行完（即 for 不是通过 break 跳出而中断的）的情况下执行，while … else 也是一样。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for num in range(10,20):  # 迭代 10 到 20 之间的数字</span><br><span class=\"line\">   for i in range(2,num): # 根据因子迭代</span><br><span class=\"line\">      if num%i == 0:      # 确定第一个因子</span><br><span class=\"line\">         j=num/i          # 计算第二个因子</span><br><span class=\"line\">         print &apos;%d 等于 %d * %d&apos; % (num,i,j)</span><br><span class=\"line\">         break            # 跳出当前循环</span><br><span class=\"line\">   else:                  # 循环的 else 部分</span><br><span class=\"line\">      print num, &apos;是一个质数&apos;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Python-循环嵌套\"><a href=\"#Python-循环嵌套\" class=\"headerlink\" title=\"Python 循环嵌套\"></a>Python 循环嵌套</h4><p>Python 语言允许在一个循环体里面嵌入另一个循环。</p>\n<p>Python for 循环嵌套语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for iterating_var in sequence:</span><br><span class=\"line\">   for iterating_var in sequence:</span><br><span class=\"line\">      statements(s)</span><br><span class=\"line\">   statements(s)</span><br><span class=\"line\">Python while 循环嵌套语法：</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">while expression:</span><br><span class=\"line\">   while expression:</span><br><span class=\"line\">      statement(s)</span><br><span class=\"line\">   statement(s)</span><br></pre></td></tr></table></figure>\n<p>你可以在循环体内嵌入其他的循环体，如在while循环中可以嵌入for循环， 反之，你可以在for循环中嵌入while循环</p>\n<h4 id=\"Python-break-语句\"><a href=\"#Python-break-语句\" class=\"headerlink\" title=\"Python break 语句\"></a>Python break 语句</h4><p>Python break语句，就像在C语言中，打破了最小封闭for或while循环。</p>\n<p>break语句用来终止循环语句，即循环条件没有False条件或者序列还没被完全递归完，也会停止执行循环语句。</p>\n<p>break语句用在while和for循环中。</p>\n<p>如果您使用嵌套循环，break语句将停止执行最深层的循环，并开始执行下一行代码。</p>\n<h4 id=\"Python-continue-语句\"><a href=\"#Python-continue-语句\" class=\"headerlink\" title=\"Python continue 语句\"></a>Python continue 语句</h4><p>Python continue 语句跳出本次循环，而break跳出整个循环。</p>\n<p>continue 语句用来告诉Python跳过当前循环的剩余语句，然后继续进行下一轮循环。</p>\n<p>continue语句用在while和for循环中。</p>\n<h4 id=\"Python-pass-语句\"><a href=\"#Python-pass-语句\" class=\"headerlink\" title=\"Python pass 语句\"></a>Python pass 语句</h4><p>Python pass 是空语句，是为了保持程序结构的完整性。</p>\n<p>pass 不做任何事情，一般用做占位语句。</p>\n"},{"title":"python基础（一）","date":"2019-08-07T02:27:58.000Z","_content":"### Python 中文编码\nPython中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。\n\n解决方法为只要在文件开头加入 # -*- coding: UTF-8 -*- 或者 # coding=utf-8 就行了\n### Python 基础语法\n#### Python 标识符\n* 在 Python 里，标识符由字母、数字、下划线组成。\n* 在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。\n* Python 中的标识符是区分大小写的。\n* 以下划线开头的标识符是有特殊意义的。以单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入。\n* 以双下划线开头的 __foo 代表类的私有成员，以双下划线开头和结尾的 __foo__ 代表 Python 里特殊方法专用的标识，如 __init__() 代表类的构造函数。\n\n* Python 可以同一行显示多条语句，方法是用分号 ; 分开，如：\n```\n>>> print 'hello';print 'runoob';\nhello\nrunoob\n```\n#### Python 保留字符\n| 1        | 2    | 3  |\n| :----:  | :----:  | :----: |\n|and |exec |   not|\n|assert | finally |or|\n|break |  for pass|\n|class  | from  |  print|\n|continue   | global | raise|\n|def |if | return|\n|del |import | try|\n|elif |   in | while|\n|else  |  is | with|\n|except | lambda | yield|\n\n#### 行和缩进\nPython 与其他语言最大的区别就是，Python的代码块不使用大括号{}来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。\n<font color='red'>缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。</font>如下所示：\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n# 文件名：test.py\n\nif True:\n    print \"Answer\"\n    print \"True\"\nelse:\n    print \"Answer\"\n    # 没有严格缩进，在执行时会报错\n  print \"False\"\n```\n执行以上代码，会出现如下错误提醒：\n```\n$ python test.py  \n  File \"test.py\", line 10\n    print \"False\"\n                ^\nIndentationError: unindent does not match any outer indentation level\n```\nIndentationError: unindent does not match any outer indentation level错误表明，你使用的缩进方式不一致，有的是 tab 键缩进，有的是空格缩进，改为一致即可。\n\n如果是 IndentationError: unexpected indent 错误, 则 python 编译器是在告诉你\"Hi，老兄，你的文件里格式不对了，可能是tab和空格没对齐的问题\"，所有 python 对格式要求非常严格。\n\n因此，在 Python 的代码块中必须使用相同数目的行首缩进空格数。\n\n建议你在每个缩进层次使用 单个制表符 或 两个空格 或 四个空格 , 切记不能混用\n#### 多行语句\nPython语句中一般以新行作为语句的结束符。\n\n但是我们可以使用斜杠（ \\）将一行的语句分为多行显示，如下所示：\n```\ntotal = item_one + \\\n        item_two + \\\n        item_three\n```\n语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下实例：\n```\ndays = ['Monday', 'Tuesday', 'Wednesday',\n        'Thursday', 'Friday']\n```\n#### Python 引号\nPython 可以使用引号( ' )、双引号( \" )、三引号( ''' 或 \"\"\" ) 来表示字符串，引号的开始与结束必须的相同类型的。\n\n其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。\n#### Python注释\npython中单行注释采用 # 开头。\n```#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n# 文件名：test.py\n\n# 第一个注释\nprint \"Hello, Python!\"  # 第二个注释\n```\npython 中多行注释使用三个单引号(''')或三个双引号(\"\"\")。\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n# 文件名：test.py\n\n\n'''\n这是多行注释，使用单引号。\n这是多行注释，使用单引号。\n这是多行注释，使用单引号。\n'''\n\n\"\"\"\n这是多行注释，使用双引号。\n这是多行注释，使用双引号。\n这是多行注释，使用双引号。\n\"\"\"\n```\n####Python空行\n函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。\n\n空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。\n\n记住：空行也是程序代码的一部分\n#### 等待用户输入\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n# \\n 实现换行。一旦用户按下 enter(回车) 键退出，其它键显示。\ninput(\"按下 enter 键退出，其他任意键显示...\\n\")   # python2 raw_input()\n```\n#### 同一行显示多条语句\nPython可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例：\n```\n#!/usr/bin/python\nimport sys; x = 'runoob'; sys.stdout.write(x + '\\n')\n```\n#### Print 输出\nprint 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号 ,\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\nx=\"a\"\ny=\"b\"\n# 换行输出\nprint x\nprint y\n\nprint '---------'\n# 不换行输出\nprint x,\nprint y,\n\n# 不换行输出\nprint x,y\n```\n以上实例执行结果为：\n```\na\nb\n---------\na b a b\n```\n#### 多个语句构成代码组\n缩进相同的一组语句构成一个代码块，我们称之代码组。\n\n像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。\n\n我们将首行及后面的代码组称为一个子句(clause)。\n```\nif expression : \n   suite \nelif expression :  \n   suite  \nelse :  \n   suite \n```\n### 变量类型\n变量存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。\n\n基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。\n\n因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。\n#### 变量赋值\n* Python 中的变量赋值不需要类型声明。\n* 每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。\n* 每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。\n* 等号（=）用来给变量赋值。\n* 等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。\n\n```\ncounter = 100 # 赋值整型变量\nmiles = 1000.0 # 浮点型\nname = \"John\" # 字符串\n \nprint counter\nprint miles\nprint name\n```\n#### 多个变量赋值\nPython允许你同时为多个变量赋值。例如：\na = b = c = 1\n以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。\n您也可以为多个对象指定多个变量。例如：\na, b, c = 1, 2, \"john\"\n以上实例，两个整型对象 1 和 2 分别分配给变量 a 和 b，字符串对象 \"john\" 分配给变量 c。\n#### 标准数据类型\n在内存中存储的数据可以有多种类型。\n例如，一个人的年龄可以用数字来存储，他的名字可以用字符来存储。\nPython 定义了一些标准类型，用于存储各种类型的数据。\nPython有五个标准的数据类型：\n* Numbers（数字）\n* String（字符串）\n* List（列表）\n* Tuple（元组）\n* Dictionary（字典）\n\n#### Python数字\n数字数据类型用于存储数值。\n\n他们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。\n\n当你指定一个值时，Number对象就会被创建：\n\nvar1 = 1\nvar2 = 10\n您也可以使用del语句删除一些对象的引用。\ndel语句的语法是：\ndel var1[,var2[,var3[....,varN]]]]\n您可以通过使用del语句删除单个或多个对象的引用。例如：\ndel var\ndel var_a, var_b\nPython支持四种不同的数字类型：\n>int（有符号整型）\n>long（长整型[也可以代表八进制和十六进制]）\n>float（浮点型）\n>complex（复数）\n\n#### Python字符串\n字符串或串(String)是由数字、字母、下划线组成的一串字符。\n一般记为 :\ns=\"a1a2···an\"(n>=0)\npython的字串列表有2种取值顺序:\n\n* 从左到右索引默认0开始的，最大范围是字符串长度少1\n* 从右到左索引默认-1开始的，最大范围是字符串开头\n\n![01.png](01.png)\n如果你要实现从字符串中获取一段子字符串的话，可以使用 [头下标:尾下标] 来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。\n[头下标:尾下标] 获取的子字符串包含头下标的字符，但不包含尾下标的字符。\n比如:\n```\ns = 'abcdef'\ns[1:5]\n'bcde'\n```\n当使用以冒号分隔的字符串，python 返回一个新的对象，结果包含了以这对偏移标识的连续的内容，左边的开始是包含了下边界。\n上面的结果包含了 s[1] 的值 b，而取到的最大范围不包括尾下标，就是 s[5] 的值 f。\n![02.png](02.png)\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nstr = 'Hello World!'\nprint str           # 输出完整字符串\nprint str[0]        # 输出字符串中的第一个字符\nprint str[2:5]      # 输出字符串中第三个至第六个之间的字符串\nprint str[2:]       # 输出从第三个字符开始的字符串\nprint str * 2       # 输出字符串两次\nprint str + \"TEST\"  # 输出连接的字符串\n```\n以上实例输出结果：\n```\nHello World!\nH\nllo\nllo World!\nHello World!Hello World!\nHello World!TEST\n```\nPython 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：\n![03.png](03.png)\n#### Python列表\nList（列表） 是 Python 中使用最频繁的数据类型。\n列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。\n列表用 [ ] 标识，是 python 最通用的复合数据类型。\n列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。\n![04.png](04.png)\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nlist = [ 'runoob', 786 , 2.23, 'john', 70.2 ]\ntinylist = [123, 'john']\nprint list               # 输出完整列表\nprint list[0]            # 输出列表的第一个元素\nprint list[1:3]          # 输出第二个至第三个元素 \nprint list[2:]           # 输出从第三个开始至列表末尾的所有元素\nprint tinylist * 2       # 输出列表两次\nprint list + tinylist    # 打印组合的列表\n```\n以上实例输出结果：\n```\n['runoob', 786, 2.23, 'john', 70.2]\nrunoob\n[786, 2.23]\n[2.23, 'john', 70.2]\n[123, 'john', 123, 'john']\n['runoob', 786, 2.23, 'john', 70.2, 123, 'john']\n```\n#### Python 元组\n元组是另一个数据类型，类似于 List（列表）。\n元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \ntuple = ( 'runoob', 786 , 2.23, 'john', 70.2 )\ntinytuple = (123, 'john')\n \nprint tuple               # 输出完整元组\nprint tuple[0]            # 输出元组的第一个元素\nprint tuple[1:3]          # 输出第二个至第四个（不包含）的元素 \nprint tuple[2:]           # 输出从第三个开始至列表末尾的所有元素\nprint tinytuple * 2       # 输出元组两次\nprint tuple + tinytuple   # 打印组合的元组\n```\n以上实例输出结果：\n```\n('runoob', 786, 2.23, 'john', 70.2)\nrunoob\n(786, 2.23)\n(2.23, 'john', 70.2)\n(123, 'john', 123, 'john')\n('runoob', 786, 2.23, 'john', 70.2, 123, 'john')\n```\n以下是元组无效的，因为元组是不允许更新的。而列表是允许更新的：\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \ntuple = ( 'runoob', 786 , 2.23, 'john', 70.2 )\nlist = [ 'runoob', 786 , 2.23, 'john', 70.2 ]\ntuple[2] = 1000    # 元组中是非法应用\nlist[2] = 1000     # 列表中是合法应用\n```\n#### Python 字典\n字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。\n两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。\n字典用\"{ }\"标识。字典由索引(key)和它对应的值value组成。\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \ndict = {}\ndict['one'] = \"This is one\"\ndict[2] = \"This is two\"\ntinydict = {'name': 'john','code':6734, 'dept': 'sales'}\nprint dict['one']          # 输出键为'one' 的值\nprint dict[2]              # 输出键为 2 的值\nprint tinydict             # 输出完整的字典\nprint tinydict.keys()      # 输出所有键\nprint tinydict.values()    # 输出所有值\n```\n输出结果为：\n```\nThis is one\nThis is two\n{'dept': 'sales', 'code': 6734, 'name': 'john'}\n['dept', 'code', 'name']\n['sales', 6734, 'john']\n```\n#### Python数据类型转换\n|函数 | 描述|\n|----|----|\n|int(x [,base])|将x转换为一个整数|\n|long(x [,base] )|将x转换为一个长整数|\n|float(x)|将x转换到一个浮点数|\n|complex(real [,imag])|创建一个复数|\n|str(x)|将对象 x 转换为字符串|\n|repr(x)|将对象 x 转换为表达式字符串|\n|eval(str)|用来计算在字符串中的有效Python表达式,并返回一个对象|\n|tuple(s)|将序列 s 转换为一个元组|\n|list(s)|将序列 s 转换为一个列表|\n|set(s)|转换为可变集合|\n|dict(d)|创建一个字典。d 必须是一个序列 (key,value)元组。|\n|frozenset(s)|转换为不可变集合|\n|chr(x)|将一个整数转换为一个字符|\n|unichr(x)|将一个整数转换为Unicode字符|\n|ord(x)|将一个字符转换为它的整数值|\n|hex(x)|将一个整数转换为一个十六进制字符串|\n|oct(x)|将一个整数转换为一个八进制字符串|\n### Python 运算符\n* 算术运算符\n* 比较（关系）运算符\n* 赋值运算符\n* 逻辑运算符\n* 位运算符\n* 成员运算符\n* 身份运算符\n* 运算符优先级\n\n#### Python算术运算符\n|运算符| 描述  |实例|\n|----|----|----|\n|+ |  加 - 两个对象相加 | a + b 输出结果 30|\n|- |  减 - 得到负数或是一个数减去另一个数 |a - b 输出结果 -10|\n|* |  乘 - 两个数相乘或是返回一个被重复若干次的字符串  | a * b 输出结果 200|\n|/ |  除 - x除以y   | b / a 输出结果 2|\n|% |  取模 - 返回除法的余数  |  b % a 输出结果 0|\n|**|  幂 - 返回x的y次幂 a**b 为10的20次方，| 输出结果 100000000000000000000|\n|//|  取整除 - 返回商的整数部分（向下取整） |    9//2    结果：4|\n#### Python比较运算符\n![05.png](05.png)\n#### Python赋值运算符\n![06.png](06.png)\n#### Python位运算符\n![07.png](07.png)\n#### Python逻辑运算符\n![08.png](08.png)\n#### Python成员运算符\n![09.png](09.png)\n#### Python身份运算符\n![10.png](10.png)\n#### Python运算符优先级\n![11.png](11.png)","source":"_posts/python基础1.md","raw":"---\ntitle: python基础（一）\ndate: 2019-08-07 10:27:58\ncategories:\n- python\ntags: [python基础]\n---\n### Python 中文编码\nPython中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。\n\n解决方法为只要在文件开头加入 # -*- coding: UTF-8 -*- 或者 # coding=utf-8 就行了\n### Python 基础语法\n#### Python 标识符\n* 在 Python 里，标识符由字母、数字、下划线组成。\n* 在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。\n* Python 中的标识符是区分大小写的。\n* 以下划线开头的标识符是有特殊意义的。以单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入。\n* 以双下划线开头的 __foo 代表类的私有成员，以双下划线开头和结尾的 __foo__ 代表 Python 里特殊方法专用的标识，如 __init__() 代表类的构造函数。\n\n* Python 可以同一行显示多条语句，方法是用分号 ; 分开，如：\n```\n>>> print 'hello';print 'runoob';\nhello\nrunoob\n```\n#### Python 保留字符\n| 1        | 2    | 3  |\n| :----:  | :----:  | :----: |\n|and |exec |   not|\n|assert | finally |or|\n|break |  for pass|\n|class  | from  |  print|\n|continue   | global | raise|\n|def |if | return|\n|del |import | try|\n|elif |   in | while|\n|else  |  is | with|\n|except | lambda | yield|\n\n#### 行和缩进\nPython 与其他语言最大的区别就是，Python的代码块不使用大括号{}来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。\n<font color='red'>缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。</font>如下所示：\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n# 文件名：test.py\n\nif True:\n    print \"Answer\"\n    print \"True\"\nelse:\n    print \"Answer\"\n    # 没有严格缩进，在执行时会报错\n  print \"False\"\n```\n执行以上代码，会出现如下错误提醒：\n```\n$ python test.py  \n  File \"test.py\", line 10\n    print \"False\"\n                ^\nIndentationError: unindent does not match any outer indentation level\n```\nIndentationError: unindent does not match any outer indentation level错误表明，你使用的缩进方式不一致，有的是 tab 键缩进，有的是空格缩进，改为一致即可。\n\n如果是 IndentationError: unexpected indent 错误, 则 python 编译器是在告诉你\"Hi，老兄，你的文件里格式不对了，可能是tab和空格没对齐的问题\"，所有 python 对格式要求非常严格。\n\n因此，在 Python 的代码块中必须使用相同数目的行首缩进空格数。\n\n建议你在每个缩进层次使用 单个制表符 或 两个空格 或 四个空格 , 切记不能混用\n#### 多行语句\nPython语句中一般以新行作为语句的结束符。\n\n但是我们可以使用斜杠（ \\）将一行的语句分为多行显示，如下所示：\n```\ntotal = item_one + \\\n        item_two + \\\n        item_three\n```\n语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下实例：\n```\ndays = ['Monday', 'Tuesday', 'Wednesday',\n        'Thursday', 'Friday']\n```\n#### Python 引号\nPython 可以使用引号( ' )、双引号( \" )、三引号( ''' 或 \"\"\" ) 来表示字符串，引号的开始与结束必须的相同类型的。\n\n其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。\n#### Python注释\npython中单行注释采用 # 开头。\n```#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n# 文件名：test.py\n\n# 第一个注释\nprint \"Hello, Python!\"  # 第二个注释\n```\npython 中多行注释使用三个单引号(''')或三个双引号(\"\"\")。\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n# 文件名：test.py\n\n\n'''\n这是多行注释，使用单引号。\n这是多行注释，使用单引号。\n这是多行注释，使用单引号。\n'''\n\n\"\"\"\n这是多行注释，使用双引号。\n这是多行注释，使用双引号。\n这是多行注释，使用双引号。\n\"\"\"\n```\n####Python空行\n函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。\n\n空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。\n\n记住：空行也是程序代码的一部分\n#### 等待用户输入\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n# \\n 实现换行。一旦用户按下 enter(回车) 键退出，其它键显示。\ninput(\"按下 enter 键退出，其他任意键显示...\\n\")   # python2 raw_input()\n```\n#### 同一行显示多条语句\nPython可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例：\n```\n#!/usr/bin/python\nimport sys; x = 'runoob'; sys.stdout.write(x + '\\n')\n```\n#### Print 输出\nprint 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号 ,\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\nx=\"a\"\ny=\"b\"\n# 换行输出\nprint x\nprint y\n\nprint '---------'\n# 不换行输出\nprint x,\nprint y,\n\n# 不换行输出\nprint x,y\n```\n以上实例执行结果为：\n```\na\nb\n---------\na b a b\n```\n#### 多个语句构成代码组\n缩进相同的一组语句构成一个代码块，我们称之代码组。\n\n像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。\n\n我们将首行及后面的代码组称为一个子句(clause)。\n```\nif expression : \n   suite \nelif expression :  \n   suite  \nelse :  \n   suite \n```\n### 变量类型\n变量存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。\n\n基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。\n\n因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。\n#### 变量赋值\n* Python 中的变量赋值不需要类型声明。\n* 每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。\n* 每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。\n* 等号（=）用来给变量赋值。\n* 等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。\n\n```\ncounter = 100 # 赋值整型变量\nmiles = 1000.0 # 浮点型\nname = \"John\" # 字符串\n \nprint counter\nprint miles\nprint name\n```\n#### 多个变量赋值\nPython允许你同时为多个变量赋值。例如：\na = b = c = 1\n以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。\n您也可以为多个对象指定多个变量。例如：\na, b, c = 1, 2, \"john\"\n以上实例，两个整型对象 1 和 2 分别分配给变量 a 和 b，字符串对象 \"john\" 分配给变量 c。\n#### 标准数据类型\n在内存中存储的数据可以有多种类型。\n例如，一个人的年龄可以用数字来存储，他的名字可以用字符来存储。\nPython 定义了一些标准类型，用于存储各种类型的数据。\nPython有五个标准的数据类型：\n* Numbers（数字）\n* String（字符串）\n* List（列表）\n* Tuple（元组）\n* Dictionary（字典）\n\n#### Python数字\n数字数据类型用于存储数值。\n\n他们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。\n\n当你指定一个值时，Number对象就会被创建：\n\nvar1 = 1\nvar2 = 10\n您也可以使用del语句删除一些对象的引用。\ndel语句的语法是：\ndel var1[,var2[,var3[....,varN]]]]\n您可以通过使用del语句删除单个或多个对象的引用。例如：\ndel var\ndel var_a, var_b\nPython支持四种不同的数字类型：\n>int（有符号整型）\n>long（长整型[也可以代表八进制和十六进制]）\n>float（浮点型）\n>complex（复数）\n\n#### Python字符串\n字符串或串(String)是由数字、字母、下划线组成的一串字符。\n一般记为 :\ns=\"a1a2···an\"(n>=0)\npython的字串列表有2种取值顺序:\n\n* 从左到右索引默认0开始的，最大范围是字符串长度少1\n* 从右到左索引默认-1开始的，最大范围是字符串开头\n\n![01.png](01.png)\n如果你要实现从字符串中获取一段子字符串的话，可以使用 [头下标:尾下标] 来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。\n[头下标:尾下标] 获取的子字符串包含头下标的字符，但不包含尾下标的字符。\n比如:\n```\ns = 'abcdef'\ns[1:5]\n'bcde'\n```\n当使用以冒号分隔的字符串，python 返回一个新的对象，结果包含了以这对偏移标识的连续的内容，左边的开始是包含了下边界。\n上面的结果包含了 s[1] 的值 b，而取到的最大范围不包括尾下标，就是 s[5] 的值 f。\n![02.png](02.png)\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nstr = 'Hello World!'\nprint str           # 输出完整字符串\nprint str[0]        # 输出字符串中的第一个字符\nprint str[2:5]      # 输出字符串中第三个至第六个之间的字符串\nprint str[2:]       # 输出从第三个字符开始的字符串\nprint str * 2       # 输出字符串两次\nprint str + \"TEST\"  # 输出连接的字符串\n```\n以上实例输出结果：\n```\nHello World!\nH\nllo\nllo World!\nHello World!Hello World!\nHello World!TEST\n```\nPython 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：\n![03.png](03.png)\n#### Python列表\nList（列表） 是 Python 中使用最频繁的数据类型。\n列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。\n列表用 [ ] 标识，是 python 最通用的复合数据类型。\n列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。\n![04.png](04.png)\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nlist = [ 'runoob', 786 , 2.23, 'john', 70.2 ]\ntinylist = [123, 'john']\nprint list               # 输出完整列表\nprint list[0]            # 输出列表的第一个元素\nprint list[1:3]          # 输出第二个至第三个元素 \nprint list[2:]           # 输出从第三个开始至列表末尾的所有元素\nprint tinylist * 2       # 输出列表两次\nprint list + tinylist    # 打印组合的列表\n```\n以上实例输出结果：\n```\n['runoob', 786, 2.23, 'john', 70.2]\nrunoob\n[786, 2.23]\n[2.23, 'john', 70.2]\n[123, 'john', 123, 'john']\n['runoob', 786, 2.23, 'john', 70.2, 123, 'john']\n```\n#### Python 元组\n元组是另一个数据类型，类似于 List（列表）。\n元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \ntuple = ( 'runoob', 786 , 2.23, 'john', 70.2 )\ntinytuple = (123, 'john')\n \nprint tuple               # 输出完整元组\nprint tuple[0]            # 输出元组的第一个元素\nprint tuple[1:3]          # 输出第二个至第四个（不包含）的元素 \nprint tuple[2:]           # 输出从第三个开始至列表末尾的所有元素\nprint tinytuple * 2       # 输出元组两次\nprint tuple + tinytuple   # 打印组合的元组\n```\n以上实例输出结果：\n```\n('runoob', 786, 2.23, 'john', 70.2)\nrunoob\n(786, 2.23)\n(2.23, 'john', 70.2)\n(123, 'john', 123, 'john')\n('runoob', 786, 2.23, 'john', 70.2, 123, 'john')\n```\n以下是元组无效的，因为元组是不允许更新的。而列表是允许更新的：\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \ntuple = ( 'runoob', 786 , 2.23, 'john', 70.2 )\nlist = [ 'runoob', 786 , 2.23, 'john', 70.2 ]\ntuple[2] = 1000    # 元组中是非法应用\nlist[2] = 1000     # 列表中是合法应用\n```\n#### Python 字典\n字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。\n两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。\n字典用\"{ }\"标识。字典由索引(key)和它对应的值value组成。\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \ndict = {}\ndict['one'] = \"This is one\"\ndict[2] = \"This is two\"\ntinydict = {'name': 'john','code':6734, 'dept': 'sales'}\nprint dict['one']          # 输出键为'one' 的值\nprint dict[2]              # 输出键为 2 的值\nprint tinydict             # 输出完整的字典\nprint tinydict.keys()      # 输出所有键\nprint tinydict.values()    # 输出所有值\n```\n输出结果为：\n```\nThis is one\nThis is two\n{'dept': 'sales', 'code': 6734, 'name': 'john'}\n['dept', 'code', 'name']\n['sales', 6734, 'john']\n```\n#### Python数据类型转换\n|函数 | 描述|\n|----|----|\n|int(x [,base])|将x转换为一个整数|\n|long(x [,base] )|将x转换为一个长整数|\n|float(x)|将x转换到一个浮点数|\n|complex(real [,imag])|创建一个复数|\n|str(x)|将对象 x 转换为字符串|\n|repr(x)|将对象 x 转换为表达式字符串|\n|eval(str)|用来计算在字符串中的有效Python表达式,并返回一个对象|\n|tuple(s)|将序列 s 转换为一个元组|\n|list(s)|将序列 s 转换为一个列表|\n|set(s)|转换为可变集合|\n|dict(d)|创建一个字典。d 必须是一个序列 (key,value)元组。|\n|frozenset(s)|转换为不可变集合|\n|chr(x)|将一个整数转换为一个字符|\n|unichr(x)|将一个整数转换为Unicode字符|\n|ord(x)|将一个字符转换为它的整数值|\n|hex(x)|将一个整数转换为一个十六进制字符串|\n|oct(x)|将一个整数转换为一个八进制字符串|\n### Python 运算符\n* 算术运算符\n* 比较（关系）运算符\n* 赋值运算符\n* 逻辑运算符\n* 位运算符\n* 成员运算符\n* 身份运算符\n* 运算符优先级\n\n#### Python算术运算符\n|运算符| 描述  |实例|\n|----|----|----|\n|+ |  加 - 两个对象相加 | a + b 输出结果 30|\n|- |  减 - 得到负数或是一个数减去另一个数 |a - b 输出结果 -10|\n|* |  乘 - 两个数相乘或是返回一个被重复若干次的字符串  | a * b 输出结果 200|\n|/ |  除 - x除以y   | b / a 输出结果 2|\n|% |  取模 - 返回除法的余数  |  b % a 输出结果 0|\n|**|  幂 - 返回x的y次幂 a**b 为10的20次方，| 输出结果 100000000000000000000|\n|//|  取整除 - 返回商的整数部分（向下取整） |    9//2    结果：4|\n#### Python比较运算符\n![05.png](05.png)\n#### Python赋值运算符\n![06.png](06.png)\n#### Python位运算符\n![07.png](07.png)\n#### Python逻辑运算符\n![08.png](08.png)\n#### Python成员运算符\n![09.png](09.png)\n#### Python身份运算符\n![10.png](10.png)\n#### Python运算符优先级\n![11.png](11.png)","slug":"python基础1","published":1,"updated":"2019-08-07T10:24:20.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cw0003jt09zx4w2yjn1","content":"<h3 id=\"Python-中文编码\"><a href=\"#Python-中文编码\" class=\"headerlink\" title=\"Python 中文编码\"></a>Python 中文编码</h3><p>Python中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。</p>\n<p>解决方法为只要在文件开头加入 # -<em>- coding: UTF-8 -</em>- 或者 # coding=utf-8 就行了</p>\n<h3 id=\"Python-基础语法\"><a href=\"#Python-基础语法\" class=\"headerlink\" title=\"Python 基础语法\"></a>Python 基础语法</h3><h4 id=\"Python-标识符\"><a href=\"#Python-标识符\" class=\"headerlink\" title=\"Python 标识符\"></a>Python 标识符</h4><ul>\n<li>在 Python 里，标识符由字母、数字、下划线组成。</li>\n<li>在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。</li>\n<li>Python 中的标识符是区分大小写的。</li>\n<li>以下划线开头的标识符是有特殊意义的。以单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入。</li>\n<li><p>以双下划线开头的 <strong>foo 代表类的私有成员，以双下划线开头和结尾的 </strong>foo__ 代表 Python 里特殊方法专用的标识，如 <strong>init</strong>() 代表类的构造函数。</p>\n</li>\n<li><p>Python 可以同一行显示多条语句，方法是用分号 ; 分开，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; print &apos;hello&apos;;print &apos;runoob&apos;;</span><br><span class=\"line\">hello</span><br><span class=\"line\">runoob</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Python-保留字符\"><a href=\"#Python-保留字符\" class=\"headerlink\" title=\"Python 保留字符\"></a>Python 保留字符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">and</td>\n<td style=\"text-align:center\">exec</td>\n<td style=\"text-align:center\">not</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">assert</td>\n<td style=\"text-align:center\">finally</td>\n<td style=\"text-align:center\">or</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">break</td>\n<td style=\"text-align:center\">for pass</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">class</td>\n<td style=\"text-align:center\">from</td>\n<td style=\"text-align:center\">print</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">continue</td>\n<td style=\"text-align:center\">global</td>\n<td style=\"text-align:center\">raise</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">def</td>\n<td style=\"text-align:center\">if</td>\n<td style=\"text-align:center\">return</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">del</td>\n<td style=\"text-align:center\">import</td>\n<td style=\"text-align:center\">try</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">elif</td>\n<td style=\"text-align:center\">in</td>\n<td style=\"text-align:center\">while</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">else</td>\n<td style=\"text-align:center\">is</td>\n<td style=\"text-align:center\">with</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">except</td>\n<td style=\"text-align:center\">lambda</td>\n<td style=\"text-align:center\">yield</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"行和缩进\"><a href=\"#行和缩进\" class=\"headerlink\" title=\"行和缩进\"></a>行和缩进</h4><p>Python 与其他语言最大的区别就是，Python的代码块不使用大括号{}来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。</p>\n<p><font color=\"red\">缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。</font>如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"># 文件名：test.py</span><br><span class=\"line\"></span><br><span class=\"line\">if True:</span><br><span class=\"line\">    print &quot;Answer&quot;</span><br><span class=\"line\">    print &quot;True&quot;</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print &quot;Answer&quot;</span><br><span class=\"line\">    # 没有严格缩进，在执行时会报错</span><br><span class=\"line\">  print &quot;False&quot;</span><br></pre></td></tr></table></figure></p>\n<p>执行以上代码，会出现如下错误提醒：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python test.py  </span><br><span class=\"line\">  File &quot;test.py&quot;, line 10</span><br><span class=\"line\">    print &quot;False&quot;</span><br><span class=\"line\">                ^</span><br><span class=\"line\">IndentationError: unindent does not match any outer indentation level</span><br></pre></td></tr></table></figure></p>\n<p>IndentationError: unindent does not match any outer indentation level错误表明，你使用的缩进方式不一致，有的是 tab 键缩进，有的是空格缩进，改为一致即可。</p>\n<p>如果是 IndentationError: unexpected indent 错误, 则 python 编译器是在告诉你”Hi，老兄，你的文件里格式不对了，可能是tab和空格没对齐的问题”，所有 python 对格式要求非常严格。</p>\n<p>因此，在 Python 的代码块中必须使用相同数目的行首缩进空格数。</p>\n<p>建议你在每个缩进层次使用 单个制表符 或 两个空格 或 四个空格 , 切记不能混用</p>\n<h4 id=\"多行语句\"><a href=\"#多行语句\" class=\"headerlink\" title=\"多行语句\"></a>多行语句</h4><p>Python语句中一般以新行作为语句的结束符。</p>\n<p>但是我们可以使用斜杠（ \\）将一行的语句分为多行显示，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = item_one + \\</span><br><span class=\"line\">        item_two + \\</span><br><span class=\"line\">        item_three</span><br></pre></td></tr></table></figure></p>\n<p>语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">days = [&apos;Monday&apos;, &apos;Tuesday&apos;, &apos;Wednesday&apos;,</span><br><span class=\"line\">        &apos;Thursday&apos;, &apos;Friday&apos;]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Python-引号\"><a href=\"#Python-引号\" class=\"headerlink\" title=\"Python 引号\"></a>Python 引号</h4><p>Python 可以使用引号( ‘ )、双引号( “ )、三引号( ‘’’ 或 “”” ) 来表示字符串，引号的开始与结束必须的相同类型的。</p>\n<p>其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。</p>\n<h4 id=\"Python注释\"><a href=\"#Python注释\" class=\"headerlink\" title=\"Python注释\"></a>Python注释</h4><p>python中单行注释采用 # 开头。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"># 文件名：test.py</span><br><span class=\"line\"></span><br><span class=\"line\"># 第一个注释</span><br><span class=\"line\">print &quot;Hello, Python!&quot;  # 第二个注释</span><br></pre></td></tr></table></figure></p>\n<p>python 中多行注释使用三个单引号(‘’’)或三个双引号(“””)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"># 文件名：test.py</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">这是多行注释，使用单引号。</span><br><span class=\"line\">这是多行注释，使用单引号。</span><br><span class=\"line\">这是多行注释，使用单引号。</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">这是多行注释，使用双引号。</span><br><span class=\"line\">这是多行注释，使用双引号。</span><br><span class=\"line\">这是多行注释，使用双引号。</span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></p>\n<p>####Python空行<br>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p>\n<p>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p>\n<p>记住：空行也是程序代码的一部分</p>\n<h4 id=\"等待用户输入\"><a href=\"#等待用户输入\" class=\"headerlink\" title=\"等待用户输入\"></a>等待用户输入</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"># \\n 实现换行。一旦用户按下 enter(回车) 键退出，其它键显示。</span><br><span class=\"line\">input(&quot;按下 enter 键退出，其他任意键显示...\\n&quot;)   # python2 raw_input()</span><br></pre></td></tr></table></figure>\n<h4 id=\"同一行显示多条语句\"><a href=\"#同一行显示多条语句\" class=\"headerlink\" title=\"同一行显示多条语句\"></a>同一行显示多条语句</h4><p>Python可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\">import sys; x = &apos;runoob&apos;; sys.stdout.write(x + &apos;\\n&apos;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Print-输出\"><a href=\"#Print-输出\" class=\"headerlink\" title=\"Print 输出\"></a>Print 输出</h4><p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号 ,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"></span><br><span class=\"line\">x=&quot;a&quot;</span><br><span class=\"line\">y=&quot;b&quot;</span><br><span class=\"line\"># 换行输出</span><br><span class=\"line\">print x</span><br><span class=\"line\">print y</span><br><span class=\"line\"></span><br><span class=\"line\">print &apos;---------&apos;</span><br><span class=\"line\"># 不换行输出</span><br><span class=\"line\">print x,</span><br><span class=\"line\">print y,</span><br><span class=\"line\"></span><br><span class=\"line\"># 不换行输出</span><br><span class=\"line\">print x,y</span><br></pre></td></tr></table></figure></p>\n<p>以上实例执行结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">---------</span><br><span class=\"line\">a b a b</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"多个语句构成代码组\"><a href=\"#多个语句构成代码组\" class=\"headerlink\" title=\"多个语句构成代码组\"></a>多个语句构成代码组</h4><p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p>\n<p>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p>\n<p>我们将首行及后面的代码组称为一个子句(clause)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if expression : </span><br><span class=\"line\">   suite </span><br><span class=\"line\">elif expression :  </span><br><span class=\"line\">   suite  </span><br><span class=\"line\">else :  </span><br><span class=\"line\">   suite</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h3><p>变量存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。</p>\n<p>基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。</p>\n<p>因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。</p>\n<h4 id=\"变量赋值\"><a href=\"#变量赋值\" class=\"headerlink\" title=\"变量赋值\"></a>变量赋值</h4><ul>\n<li>Python 中的变量赋值不需要类型声明。</li>\n<li>每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。</li>\n<li>每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</li>\n<li>等号（=）用来给变量赋值。</li>\n<li>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">counter = 100 # 赋值整型变量</span><br><span class=\"line\">miles = 1000.0 # 浮点型</span><br><span class=\"line\">name = &quot;John&quot; # 字符串</span><br><span class=\"line\"> </span><br><span class=\"line\">print counter</span><br><span class=\"line\">print miles</span><br><span class=\"line\">print name</span><br></pre></td></tr></table></figure>\n<h4 id=\"多个变量赋值\"><a href=\"#多个变量赋值\" class=\"headerlink\" title=\"多个变量赋值\"></a>多个变量赋值</h4><p>Python允许你同时为多个变量赋值。例如：<br>a = b = c = 1<br>以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。<br>您也可以为多个对象指定多个变量。例如：<br>a, b, c = 1, 2, “john”<br>以上实例，两个整型对象 1 和 2 分别分配给变量 a 和 b，字符串对象 “john” 分配给变量 c。</p>\n<h4 id=\"标准数据类型\"><a href=\"#标准数据类型\" class=\"headerlink\" title=\"标准数据类型\"></a>标准数据类型</h4><p>在内存中存储的数据可以有多种类型。<br>例如，一个人的年龄可以用数字来存储，他的名字可以用字符来存储。<br>Python 定义了一些标准类型，用于存储各种类型的数据。<br>Python有五个标准的数据类型：</p>\n<ul>\n<li>Numbers（数字）</li>\n<li>String（字符串）</li>\n<li>List（列表）</li>\n<li>Tuple（元组）</li>\n<li>Dictionary（字典）</li>\n</ul>\n<h4 id=\"Python数字\"><a href=\"#Python数字\" class=\"headerlink\" title=\"Python数字\"></a>Python数字</h4><p>数字数据类型用于存储数值。</p>\n<p>他们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。</p>\n<p>当你指定一个值时，Number对象就会被创建：</p>\n<p>var1 = 1<br>var2 = 10<br>您也可以使用del语句删除一些对象的引用。<br>del语句的语法是：<br>del var1[,var2[,var3[….,varN]]]]<br>您可以通过使用del语句删除单个或多个对象的引用。例如：<br>del var<br>del var_a, var_b<br>Python支持四种不同的数字类型：</p>\n<blockquote>\n<p>int（有符号整型）<br>long（长整型[也可以代表八进制和十六进制]）<br>float（浮点型）<br>complex（复数）</p>\n</blockquote>\n<h4 id=\"Python字符串\"><a href=\"#Python字符串\" class=\"headerlink\" title=\"Python字符串\"></a>Python字符串</h4><p>字符串或串(String)是由数字、字母、下划线组成的一串字符。<br>一般记为 :<br>s=”a1a2···an”(n&gt;=0)<br>python的字串列表有2种取值顺序:</p>\n<ul>\n<li>从左到右索引默认0开始的，最大范围是字符串长度少1</li>\n<li>从右到左索引默认-1开始的，最大范围是字符串开头</li>\n</ul>\n<p><img src=\"/2019/08/07/python基础1/01.png\" alt=\"01.png\"><br>如果你要实现从字符串中获取一段子字符串的话，可以使用 [头下标:尾下标] 来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。<br>[头下标:尾下标] 获取的子字符串包含头下标的字符，但不包含尾下标的字符。<br>比如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = &apos;abcdef&apos;</span><br><span class=\"line\">s[1:5]</span><br><span class=\"line\">&apos;bcde&apos;</span><br></pre></td></tr></table></figure></p>\n<p>当使用以冒号分隔的字符串，python 返回一个新的对象，结果包含了以这对偏移标识的连续的内容，左边的开始是包含了下边界。<br>上面的结果包含了 s[1] 的值 b，而取到的最大范围不包括尾下标，就是 s[5] 的值 f。<br><img src=\"/2019/08/07/python基础1/02.png\" alt=\"02.png\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\">str = &apos;Hello World!&apos;</span><br><span class=\"line\">print str           # 输出完整字符串</span><br><span class=\"line\">print str[0]        # 输出字符串中的第一个字符</span><br><span class=\"line\">print str[2:5]      # 输出字符串中第三个至第六个之间的字符串</span><br><span class=\"line\">print str[2:]       # 输出从第三个字符开始的字符串</span><br><span class=\"line\">print str * 2       # 输出字符串两次</span><br><span class=\"line\">print str + &quot;TEST&quot;  # 输出连接的字符串</span><br></pre></td></tr></table></figure></p>\n<p>以上实例输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World!</span><br><span class=\"line\">H</span><br><span class=\"line\">llo</span><br><span class=\"line\">llo World!</span><br><span class=\"line\">Hello World!Hello World!</span><br><span class=\"line\">Hello World!TEST</span><br></pre></td></tr></table></figure></p>\n<p>Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：<br><img src=\"/2019/08/07/python基础1/03.png\" alt=\"03.png\"></p>\n<h4 id=\"Python列表\"><a href=\"#Python列表\" class=\"headerlink\" title=\"Python列表\"></a>Python列表</h4><p>List（列表） 是 Python 中使用最频繁的数据类型。<br>列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。<br>列表用 [ ] 标识，是 python 最通用的复合数据类型。<br>列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。<br><img src=\"/2019/08/07/python基础1/04.png\" alt=\"04.png\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">list = [ &apos;runoob&apos;, 786 , 2.23, &apos;john&apos;, 70.2 ]</span><br><span class=\"line\">tinylist = [123, &apos;john&apos;]</span><br><span class=\"line\">print list               # 输出完整列表</span><br><span class=\"line\">print list[0]            # 输出列表的第一个元素</span><br><span class=\"line\">print list[1:3]          # 输出第二个至第三个元素 </span><br><span class=\"line\">print list[2:]           # 输出从第三个开始至列表末尾的所有元素</span><br><span class=\"line\">print tinylist * 2       # 输出列表两次</span><br><span class=\"line\">print list + tinylist    # 打印组合的列表</span><br></pre></td></tr></table></figure></p>\n<p>以上实例输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;runoob&apos;, 786, 2.23, &apos;john&apos;, 70.2]</span><br><span class=\"line\">runoob</span><br><span class=\"line\">[786, 2.23]</span><br><span class=\"line\">[2.23, &apos;john&apos;, 70.2]</span><br><span class=\"line\">[123, &apos;john&apos;, 123, &apos;john&apos;]</span><br><span class=\"line\">[&apos;runoob&apos;, 786, 2.23, &apos;john&apos;, 70.2, 123, &apos;john&apos;]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Python-元组\"><a href=\"#Python-元组\" class=\"headerlink\" title=\"Python 元组\"></a>Python 元组</h4><p>元组是另一个数据类型，类似于 List（列表）。<br>元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">tuple = ( &apos;runoob&apos;, 786 , 2.23, &apos;john&apos;, 70.2 )</span><br><span class=\"line\">tinytuple = (123, &apos;john&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">print tuple               # 输出完整元组</span><br><span class=\"line\">print tuple[0]            # 输出元组的第一个元素</span><br><span class=\"line\">print tuple[1:3]          # 输出第二个至第四个（不包含）的元素 </span><br><span class=\"line\">print tuple[2:]           # 输出从第三个开始至列表末尾的所有元素</span><br><span class=\"line\">print tinytuple * 2       # 输出元组两次</span><br><span class=\"line\">print tuple + tinytuple   # 打印组合的元组</span><br></pre></td></tr></table></figure></p>\n<p>以上实例输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&apos;runoob&apos;, 786, 2.23, &apos;john&apos;, 70.2)</span><br><span class=\"line\">runoob</span><br><span class=\"line\">(786, 2.23)</span><br><span class=\"line\">(2.23, &apos;john&apos;, 70.2)</span><br><span class=\"line\">(123, &apos;john&apos;, 123, &apos;john&apos;)</span><br><span class=\"line\">(&apos;runoob&apos;, 786, 2.23, &apos;john&apos;, 70.2, 123, &apos;john&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>以下是元组无效的，因为元组是不允许更新的。而列表是允许更新的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">tuple = ( &apos;runoob&apos;, 786 , 2.23, &apos;john&apos;, 70.2 )</span><br><span class=\"line\">list = [ &apos;runoob&apos;, 786 , 2.23, &apos;john&apos;, 70.2 ]</span><br><span class=\"line\">tuple[2] = 1000    # 元组中是非法应用</span><br><span class=\"line\">list[2] = 1000     # 列表中是合法应用</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Python-字典\"><a href=\"#Python-字典\" class=\"headerlink\" title=\"Python 字典\"></a>Python 字典</h4><p>字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。<br>两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。<br>字典用”{ }”标识。字典由索引(key)和它对应的值value组成。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">dict = &#123;&#125;</span><br><span class=\"line\">dict[&apos;one&apos;] = &quot;This is one&quot;</span><br><span class=\"line\">dict[2] = &quot;This is two&quot;</span><br><span class=\"line\">tinydict = &#123;&apos;name&apos;: &apos;john&apos;,&apos;code&apos;:6734, &apos;dept&apos;: &apos;sales&apos;&#125;</span><br><span class=\"line\">print dict[&apos;one&apos;]          # 输出键为&apos;one&apos; 的值</span><br><span class=\"line\">print dict[2]              # 输出键为 2 的值</span><br><span class=\"line\">print tinydict             # 输出完整的字典</span><br><span class=\"line\">print tinydict.keys()      # 输出所有键</span><br><span class=\"line\">print tinydict.values()    # 输出所有值</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is one</span><br><span class=\"line\">This is two</span><br><span class=\"line\">&#123;&apos;dept&apos;: &apos;sales&apos;, &apos;code&apos;: 6734, &apos;name&apos;: &apos;john&apos;&#125;</span><br><span class=\"line\">[&apos;dept&apos;, &apos;code&apos;, &apos;name&apos;]</span><br><span class=\"line\">[&apos;sales&apos;, 6734, &apos;john&apos;]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Python数据类型转换\"><a href=\"#Python数据类型转换\" class=\"headerlink\" title=\"Python数据类型转换\"></a>Python数据类型转换</h4><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int(x [,base])</td>\n<td>将x转换为一个整数</td>\n</tr>\n<tr>\n<td>long(x [,base] )</td>\n<td>将x转换为一个长整数</td>\n</tr>\n<tr>\n<td>float(x)</td>\n<td>将x转换到一个浮点数</td>\n</tr>\n<tr>\n<td>complex(real [,imag])</td>\n<td>创建一个复数</td>\n</tr>\n<tr>\n<td>str(x)</td>\n<td>将对象 x 转换为字符串</td>\n</tr>\n<tr>\n<td>repr(x)</td>\n<td>将对象 x 转换为表达式字符串</td>\n</tr>\n<tr>\n<td>eval(str)</td>\n<td>用来计算在字符串中的有效Python表达式,并返回一个对象</td>\n</tr>\n<tr>\n<td>tuple(s)</td>\n<td>将序列 s 转换为一个元组</td>\n</tr>\n<tr>\n<td>list(s)</td>\n<td>将序列 s 转换为一个列表</td>\n</tr>\n<tr>\n<td>set(s)</td>\n<td>转换为可变集合</td>\n</tr>\n<tr>\n<td>dict(d)</td>\n<td>创建一个字典。d 必须是一个序列 (key,value)元组。</td>\n</tr>\n<tr>\n<td>frozenset(s)</td>\n<td>转换为不可变集合</td>\n</tr>\n<tr>\n<td>chr(x)</td>\n<td>将一个整数转换为一个字符</td>\n</tr>\n<tr>\n<td>unichr(x)</td>\n<td>将一个整数转换为Unicode字符</td>\n</tr>\n<tr>\n<td>ord(x)</td>\n<td>将一个字符转换为它的整数值</td>\n</tr>\n<tr>\n<td>hex(x)</td>\n<td>将一个整数转换为一个十六进制字符串</td>\n</tr>\n<tr>\n<td>oct(x)</td>\n<td>将一个整数转换为一个八进制字符串</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Python-运算符\"><a href=\"#Python-运算符\" class=\"headerlink\" title=\"Python 运算符\"></a>Python 运算符</h3><ul>\n<li>算术运算符</li>\n<li>比较（关系）运算符</li>\n<li>赋值运算符</li>\n<li>逻辑运算符</li>\n<li>位运算符</li>\n<li>成员运算符</li>\n<li>身份运算符</li>\n<li>运算符优先级</li>\n</ul>\n<h4 id=\"Python算术运算符\"><a href=\"#Python算术运算符\" class=\"headerlink\" title=\"Python算术运算符\"></a>Python算术运算符</h4><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>加 - 两个对象相加</td>\n<td>a + b 输出结果 30</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减 - 得到负数或是一个数减去另一个数</td>\n<td>a - b 输出结果 -10</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>\n<td>a * b 输出结果 200</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除 - x除以y</td>\n<td>b / a 输出结果 2</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取模 - 返回除法的余数</td>\n<td>b % a 输出结果 0</td>\n</tr>\n<tr>\n<td>**</td>\n<td>幂 - 返回x的y次幂 a**b 为10的20次方，</td>\n<td>输出结果 100000000000000000000</td>\n</tr>\n<tr>\n<td>//</td>\n<td>取整除 - 返回商的整数部分（向下取整）</td>\n<td>9//2    结果：4</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Python比较运算符\"><a href=\"#Python比较运算符\" class=\"headerlink\" title=\"Python比较运算符\"></a>Python比较运算符</h4><p><img src=\"/2019/08/07/python基础1/05.png\" alt=\"05.png\"></p>\n<h4 id=\"Python赋值运算符\"><a href=\"#Python赋值运算符\" class=\"headerlink\" title=\"Python赋值运算符\"></a>Python赋值运算符</h4><p><img src=\"/2019/08/07/python基础1/06.png\" alt=\"06.png\"></p>\n<h4 id=\"Python位运算符\"><a href=\"#Python位运算符\" class=\"headerlink\" title=\"Python位运算符\"></a>Python位运算符</h4><p><img src=\"/2019/08/07/python基础1/07.png\" alt=\"07.png\"></p>\n<h4 id=\"Python逻辑运算符\"><a href=\"#Python逻辑运算符\" class=\"headerlink\" title=\"Python逻辑运算符\"></a>Python逻辑运算符</h4><p><img src=\"/2019/08/07/python基础1/08.png\" alt=\"08.png\"></p>\n<h4 id=\"Python成员运算符\"><a href=\"#Python成员运算符\" class=\"headerlink\" title=\"Python成员运算符\"></a>Python成员运算符</h4><p><img src=\"/2019/08/07/python基础1/09.png\" alt=\"09.png\"></p>\n<h4 id=\"Python身份运算符\"><a href=\"#Python身份运算符\" class=\"headerlink\" title=\"Python身份运算符\"></a>Python身份运算符</h4><p><img src=\"/2019/08/07/python基础1/10.png\" alt=\"10.png\"></p>\n<h4 id=\"Python运算符优先级\"><a href=\"#Python运算符优先级\" class=\"headerlink\" title=\"Python运算符优先级\"></a>Python运算符优先级</h4><p><img src=\"/2019/08/07/python基础1/11.png\" alt=\"11.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Python-中文编码\"><a href=\"#Python-中文编码\" class=\"headerlink\" title=\"Python 中文编码\"></a>Python 中文编码</h3><p>Python中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。</p>\n<p>解决方法为只要在文件开头加入 # -<em>- coding: UTF-8 -</em>- 或者 # coding=utf-8 就行了</p>\n<h3 id=\"Python-基础语法\"><a href=\"#Python-基础语法\" class=\"headerlink\" title=\"Python 基础语法\"></a>Python 基础语法</h3><h4 id=\"Python-标识符\"><a href=\"#Python-标识符\" class=\"headerlink\" title=\"Python 标识符\"></a>Python 标识符</h4><ul>\n<li>在 Python 里，标识符由字母、数字、下划线组成。</li>\n<li>在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。</li>\n<li>Python 中的标识符是区分大小写的。</li>\n<li>以下划线开头的标识符是有特殊意义的。以单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入。</li>\n<li><p>以双下划线开头的 <strong>foo 代表类的私有成员，以双下划线开头和结尾的 </strong>foo__ 代表 Python 里特殊方法专用的标识，如 <strong>init</strong>() 代表类的构造函数。</p>\n</li>\n<li><p>Python 可以同一行显示多条语句，方法是用分号 ; 分开，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; print &apos;hello&apos;;print &apos;runoob&apos;;</span><br><span class=\"line\">hello</span><br><span class=\"line\">runoob</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Python-保留字符\"><a href=\"#Python-保留字符\" class=\"headerlink\" title=\"Python 保留字符\"></a>Python 保留字符</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">1</th>\n<th style=\"text-align:center\">2</th>\n<th style=\"text-align:center\">3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">and</td>\n<td style=\"text-align:center\">exec</td>\n<td style=\"text-align:center\">not</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">assert</td>\n<td style=\"text-align:center\">finally</td>\n<td style=\"text-align:center\">or</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">break</td>\n<td style=\"text-align:center\">for pass</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">class</td>\n<td style=\"text-align:center\">from</td>\n<td style=\"text-align:center\">print</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">continue</td>\n<td style=\"text-align:center\">global</td>\n<td style=\"text-align:center\">raise</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">def</td>\n<td style=\"text-align:center\">if</td>\n<td style=\"text-align:center\">return</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">del</td>\n<td style=\"text-align:center\">import</td>\n<td style=\"text-align:center\">try</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">elif</td>\n<td style=\"text-align:center\">in</td>\n<td style=\"text-align:center\">while</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">else</td>\n<td style=\"text-align:center\">is</td>\n<td style=\"text-align:center\">with</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">except</td>\n<td style=\"text-align:center\">lambda</td>\n<td style=\"text-align:center\">yield</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"行和缩进\"><a href=\"#行和缩进\" class=\"headerlink\" title=\"行和缩进\"></a>行和缩进</h4><p>Python 与其他语言最大的区别就是，Python的代码块不使用大括号{}来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。</p>\n<p><font color=\"red\">缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。</font>如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"># 文件名：test.py</span><br><span class=\"line\"></span><br><span class=\"line\">if True:</span><br><span class=\"line\">    print &quot;Answer&quot;</span><br><span class=\"line\">    print &quot;True&quot;</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print &quot;Answer&quot;</span><br><span class=\"line\">    # 没有严格缩进，在执行时会报错</span><br><span class=\"line\">  print &quot;False&quot;</span><br></pre></td></tr></table></figure></p>\n<p>执行以上代码，会出现如下错误提醒：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python test.py  </span><br><span class=\"line\">  File &quot;test.py&quot;, line 10</span><br><span class=\"line\">    print &quot;False&quot;</span><br><span class=\"line\">                ^</span><br><span class=\"line\">IndentationError: unindent does not match any outer indentation level</span><br></pre></td></tr></table></figure></p>\n<p>IndentationError: unindent does not match any outer indentation level错误表明，你使用的缩进方式不一致，有的是 tab 键缩进，有的是空格缩进，改为一致即可。</p>\n<p>如果是 IndentationError: unexpected indent 错误, 则 python 编译器是在告诉你”Hi，老兄，你的文件里格式不对了，可能是tab和空格没对齐的问题”，所有 python 对格式要求非常严格。</p>\n<p>因此，在 Python 的代码块中必须使用相同数目的行首缩进空格数。</p>\n<p>建议你在每个缩进层次使用 单个制表符 或 两个空格 或 四个空格 , 切记不能混用</p>\n<h4 id=\"多行语句\"><a href=\"#多行语句\" class=\"headerlink\" title=\"多行语句\"></a>多行语句</h4><p>Python语句中一般以新行作为语句的结束符。</p>\n<p>但是我们可以使用斜杠（ \\）将一行的语句分为多行显示，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = item_one + \\</span><br><span class=\"line\">        item_two + \\</span><br><span class=\"line\">        item_three</span><br></pre></td></tr></table></figure></p>\n<p>语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">days = [&apos;Monday&apos;, &apos;Tuesday&apos;, &apos;Wednesday&apos;,</span><br><span class=\"line\">        &apos;Thursday&apos;, &apos;Friday&apos;]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Python-引号\"><a href=\"#Python-引号\" class=\"headerlink\" title=\"Python 引号\"></a>Python 引号</h4><p>Python 可以使用引号( ‘ )、双引号( “ )、三引号( ‘’’ 或 “”” ) 来表示字符串，引号的开始与结束必须的相同类型的。</p>\n<p>其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。</p>\n<h4 id=\"Python注释\"><a href=\"#Python注释\" class=\"headerlink\" title=\"Python注释\"></a>Python注释</h4><p>python中单行注释采用 # 开头。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"># 文件名：test.py</span><br><span class=\"line\"></span><br><span class=\"line\"># 第一个注释</span><br><span class=\"line\">print &quot;Hello, Python!&quot;  # 第二个注释</span><br></pre></td></tr></table></figure></p>\n<p>python 中多行注释使用三个单引号(‘’’)或三个双引号(“””)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"># 文件名：test.py</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\">这是多行注释，使用单引号。</span><br><span class=\"line\">这是多行注释，使用单引号。</span><br><span class=\"line\">这是多行注释，使用单引号。</span><br><span class=\"line\">&apos;&apos;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">这是多行注释，使用双引号。</span><br><span class=\"line\">这是多行注释，使用双引号。</span><br><span class=\"line\">这是多行注释，使用双引号。</span><br><span class=\"line\">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></p>\n<p>####Python空行<br>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p>\n<p>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p>\n<p>记住：空行也是程序代码的一部分</p>\n<h4 id=\"等待用户输入\"><a href=\"#等待用户输入\" class=\"headerlink\" title=\"等待用户输入\"></a>等待用户输入</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"># \\n 实现换行。一旦用户按下 enter(回车) 键退出，其它键显示。</span><br><span class=\"line\">input(&quot;按下 enter 键退出，其他任意键显示...\\n&quot;)   # python2 raw_input()</span><br></pre></td></tr></table></figure>\n<h4 id=\"同一行显示多条语句\"><a href=\"#同一行显示多条语句\" class=\"headerlink\" title=\"同一行显示多条语句\"></a>同一行显示多条语句</h4><p>Python可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\">import sys; x = &apos;runoob&apos;; sys.stdout.write(x + &apos;\\n&apos;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Print-输出\"><a href=\"#Print-输出\" class=\"headerlink\" title=\"Print 输出\"></a>Print 输出</h4><p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号 ,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"></span><br><span class=\"line\">x=&quot;a&quot;</span><br><span class=\"line\">y=&quot;b&quot;</span><br><span class=\"line\"># 换行输出</span><br><span class=\"line\">print x</span><br><span class=\"line\">print y</span><br><span class=\"line\"></span><br><span class=\"line\">print &apos;---------&apos;</span><br><span class=\"line\"># 不换行输出</span><br><span class=\"line\">print x,</span><br><span class=\"line\">print y,</span><br><span class=\"line\"></span><br><span class=\"line\"># 不换行输出</span><br><span class=\"line\">print x,y</span><br></pre></td></tr></table></figure></p>\n<p>以上实例执行结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">---------</span><br><span class=\"line\">a b a b</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"多个语句构成代码组\"><a href=\"#多个语句构成代码组\" class=\"headerlink\" title=\"多个语句构成代码组\"></a>多个语句构成代码组</h4><p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p>\n<p>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p>\n<p>我们将首行及后面的代码组称为一个子句(clause)。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if expression : </span><br><span class=\"line\">   suite </span><br><span class=\"line\">elif expression :  </span><br><span class=\"line\">   suite  </span><br><span class=\"line\">else :  </span><br><span class=\"line\">   suite</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h3><p>变量存储在内存中的值。这就意味着在创建变量时会在内存中开辟一个空间。</p>\n<p>基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。</p>\n<p>因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。</p>\n<h4 id=\"变量赋值\"><a href=\"#变量赋值\" class=\"headerlink\" title=\"变量赋值\"></a>变量赋值</h4><ul>\n<li>Python 中的变量赋值不需要类型声明。</li>\n<li>每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。</li>\n<li>每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</li>\n<li>等号（=）用来给变量赋值。</li>\n<li>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">counter = 100 # 赋值整型变量</span><br><span class=\"line\">miles = 1000.0 # 浮点型</span><br><span class=\"line\">name = &quot;John&quot; # 字符串</span><br><span class=\"line\"> </span><br><span class=\"line\">print counter</span><br><span class=\"line\">print miles</span><br><span class=\"line\">print name</span><br></pre></td></tr></table></figure>\n<h4 id=\"多个变量赋值\"><a href=\"#多个变量赋值\" class=\"headerlink\" title=\"多个变量赋值\"></a>多个变量赋值</h4><p>Python允许你同时为多个变量赋值。例如：<br>a = b = c = 1<br>以上实例，创建一个整型对象，值为1，三个变量被分配到相同的内存空间上。<br>您也可以为多个对象指定多个变量。例如：<br>a, b, c = 1, 2, “john”<br>以上实例，两个整型对象 1 和 2 分别分配给变量 a 和 b，字符串对象 “john” 分配给变量 c。</p>\n<h4 id=\"标准数据类型\"><a href=\"#标准数据类型\" class=\"headerlink\" title=\"标准数据类型\"></a>标准数据类型</h4><p>在内存中存储的数据可以有多种类型。<br>例如，一个人的年龄可以用数字来存储，他的名字可以用字符来存储。<br>Python 定义了一些标准类型，用于存储各种类型的数据。<br>Python有五个标准的数据类型：</p>\n<ul>\n<li>Numbers（数字）</li>\n<li>String（字符串）</li>\n<li>List（列表）</li>\n<li>Tuple（元组）</li>\n<li>Dictionary（字典）</li>\n</ul>\n<h4 id=\"Python数字\"><a href=\"#Python数字\" class=\"headerlink\" title=\"Python数字\"></a>Python数字</h4><p>数字数据类型用于存储数值。</p>\n<p>他们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。</p>\n<p>当你指定一个值时，Number对象就会被创建：</p>\n<p>var1 = 1<br>var2 = 10<br>您也可以使用del语句删除一些对象的引用。<br>del语句的语法是：<br>del var1[,var2[,var3[….,varN]]]]<br>您可以通过使用del语句删除单个或多个对象的引用。例如：<br>del var<br>del var_a, var_b<br>Python支持四种不同的数字类型：</p>\n<blockquote>\n<p>int（有符号整型）<br>long（长整型[也可以代表八进制和十六进制]）<br>float（浮点型）<br>complex（复数）</p>\n</blockquote>\n<h4 id=\"Python字符串\"><a href=\"#Python字符串\" class=\"headerlink\" title=\"Python字符串\"></a>Python字符串</h4><p>字符串或串(String)是由数字、字母、下划线组成的一串字符。<br>一般记为 :<br>s=”a1a2···an”(n&gt;=0)<br>python的字串列表有2种取值顺序:</p>\n<ul>\n<li>从左到右索引默认0开始的，最大范围是字符串长度少1</li>\n<li>从右到左索引默认-1开始的，最大范围是字符串开头</li>\n</ul>\n<p><img src=\"/2019/08/07/python基础1/01.png\" alt=\"01.png\"><br>如果你要实现从字符串中获取一段子字符串的话，可以使用 [头下标:尾下标] 来截取相应的字符串，其中下标是从 0 开始算起，可以是正数或负数，下标可以为空表示取到头或尾。<br>[头下标:尾下标] 获取的子字符串包含头下标的字符，但不包含尾下标的字符。<br>比如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = &apos;abcdef&apos;</span><br><span class=\"line\">s[1:5]</span><br><span class=\"line\">&apos;bcde&apos;</span><br></pre></td></tr></table></figure></p>\n<p>当使用以冒号分隔的字符串，python 返回一个新的对象，结果包含了以这对偏移标识的连续的内容，左边的开始是包含了下边界。<br>上面的结果包含了 s[1] 的值 b，而取到的最大范围不包括尾下标，就是 s[5] 的值 f。<br><img src=\"/2019/08/07/python基础1/02.png\" alt=\"02.png\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\">str = &apos;Hello World!&apos;</span><br><span class=\"line\">print str           # 输出完整字符串</span><br><span class=\"line\">print str[0]        # 输出字符串中的第一个字符</span><br><span class=\"line\">print str[2:5]      # 输出字符串中第三个至第六个之间的字符串</span><br><span class=\"line\">print str[2:]       # 输出从第三个字符开始的字符串</span><br><span class=\"line\">print str * 2       # 输出字符串两次</span><br><span class=\"line\">print str + &quot;TEST&quot;  # 输出连接的字符串</span><br></pre></td></tr></table></figure></p>\n<p>以上实例输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World!</span><br><span class=\"line\">H</span><br><span class=\"line\">llo</span><br><span class=\"line\">llo World!</span><br><span class=\"line\">Hello World!Hello World!</span><br><span class=\"line\">Hello World!TEST</span><br></pre></td></tr></table></figure></p>\n<p>Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：<br><img src=\"/2019/08/07/python基础1/03.png\" alt=\"03.png\"></p>\n<h4 id=\"Python列表\"><a href=\"#Python列表\" class=\"headerlink\" title=\"Python列表\"></a>Python列表</h4><p>List（列表） 是 Python 中使用最频繁的数据类型。<br>列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。<br>列表用 [ ] 标识，是 python 最通用的复合数据类型。<br>列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。<br><img src=\"/2019/08/07/python基础1/04.png\" alt=\"04.png\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">list = [ &apos;runoob&apos;, 786 , 2.23, &apos;john&apos;, 70.2 ]</span><br><span class=\"line\">tinylist = [123, &apos;john&apos;]</span><br><span class=\"line\">print list               # 输出完整列表</span><br><span class=\"line\">print list[0]            # 输出列表的第一个元素</span><br><span class=\"line\">print list[1:3]          # 输出第二个至第三个元素 </span><br><span class=\"line\">print list[2:]           # 输出从第三个开始至列表末尾的所有元素</span><br><span class=\"line\">print tinylist * 2       # 输出列表两次</span><br><span class=\"line\">print list + tinylist    # 打印组合的列表</span><br></pre></td></tr></table></figure></p>\n<p>以上实例输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;runoob&apos;, 786, 2.23, &apos;john&apos;, 70.2]</span><br><span class=\"line\">runoob</span><br><span class=\"line\">[786, 2.23]</span><br><span class=\"line\">[2.23, &apos;john&apos;, 70.2]</span><br><span class=\"line\">[123, &apos;john&apos;, 123, &apos;john&apos;]</span><br><span class=\"line\">[&apos;runoob&apos;, 786, 2.23, &apos;john&apos;, 70.2, 123, &apos;john&apos;]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Python-元组\"><a href=\"#Python-元组\" class=\"headerlink\" title=\"Python 元组\"></a>Python 元组</h4><p>元组是另一个数据类型，类似于 List（列表）。<br>元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">tuple = ( &apos;runoob&apos;, 786 , 2.23, &apos;john&apos;, 70.2 )</span><br><span class=\"line\">tinytuple = (123, &apos;john&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\">print tuple               # 输出完整元组</span><br><span class=\"line\">print tuple[0]            # 输出元组的第一个元素</span><br><span class=\"line\">print tuple[1:3]          # 输出第二个至第四个（不包含）的元素 </span><br><span class=\"line\">print tuple[2:]           # 输出从第三个开始至列表末尾的所有元素</span><br><span class=\"line\">print tinytuple * 2       # 输出元组两次</span><br><span class=\"line\">print tuple + tinytuple   # 打印组合的元组</span><br></pre></td></tr></table></figure></p>\n<p>以上实例输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&apos;runoob&apos;, 786, 2.23, &apos;john&apos;, 70.2)</span><br><span class=\"line\">runoob</span><br><span class=\"line\">(786, 2.23)</span><br><span class=\"line\">(2.23, &apos;john&apos;, 70.2)</span><br><span class=\"line\">(123, &apos;john&apos;, 123, &apos;john&apos;)</span><br><span class=\"line\">(&apos;runoob&apos;, 786, 2.23, &apos;john&apos;, 70.2, 123, &apos;john&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>以下是元组无效的，因为元组是不允许更新的。而列表是允许更新的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">tuple = ( &apos;runoob&apos;, 786 , 2.23, &apos;john&apos;, 70.2 )</span><br><span class=\"line\">list = [ &apos;runoob&apos;, 786 , 2.23, &apos;john&apos;, 70.2 ]</span><br><span class=\"line\">tuple[2] = 1000    # 元组中是非法应用</span><br><span class=\"line\">list[2] = 1000     # 列表中是合法应用</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Python-字典\"><a href=\"#Python-字典\" class=\"headerlink\" title=\"Python 字典\"></a>Python 字典</h4><p>字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。<br>两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。<br>字典用”{ }”标识。字典由索引(key)和它对应的值value组成。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">dict = &#123;&#125;</span><br><span class=\"line\">dict[&apos;one&apos;] = &quot;This is one&quot;</span><br><span class=\"line\">dict[2] = &quot;This is two&quot;</span><br><span class=\"line\">tinydict = &#123;&apos;name&apos;: &apos;john&apos;,&apos;code&apos;:6734, &apos;dept&apos;: &apos;sales&apos;&#125;</span><br><span class=\"line\">print dict[&apos;one&apos;]          # 输出键为&apos;one&apos; 的值</span><br><span class=\"line\">print dict[2]              # 输出键为 2 的值</span><br><span class=\"line\">print tinydict             # 输出完整的字典</span><br><span class=\"line\">print tinydict.keys()      # 输出所有键</span><br><span class=\"line\">print tinydict.values()    # 输出所有值</span><br></pre></td></tr></table></figure></p>\n<p>输出结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is one</span><br><span class=\"line\">This is two</span><br><span class=\"line\">&#123;&apos;dept&apos;: &apos;sales&apos;, &apos;code&apos;: 6734, &apos;name&apos;: &apos;john&apos;&#125;</span><br><span class=\"line\">[&apos;dept&apos;, &apos;code&apos;, &apos;name&apos;]</span><br><span class=\"line\">[&apos;sales&apos;, 6734, &apos;john&apos;]</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Python数据类型转换\"><a href=\"#Python数据类型转换\" class=\"headerlink\" title=\"Python数据类型转换\"></a>Python数据类型转换</h4><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int(x [,base])</td>\n<td>将x转换为一个整数</td>\n</tr>\n<tr>\n<td>long(x [,base] )</td>\n<td>将x转换为一个长整数</td>\n</tr>\n<tr>\n<td>float(x)</td>\n<td>将x转换到一个浮点数</td>\n</tr>\n<tr>\n<td>complex(real [,imag])</td>\n<td>创建一个复数</td>\n</tr>\n<tr>\n<td>str(x)</td>\n<td>将对象 x 转换为字符串</td>\n</tr>\n<tr>\n<td>repr(x)</td>\n<td>将对象 x 转换为表达式字符串</td>\n</tr>\n<tr>\n<td>eval(str)</td>\n<td>用来计算在字符串中的有效Python表达式,并返回一个对象</td>\n</tr>\n<tr>\n<td>tuple(s)</td>\n<td>将序列 s 转换为一个元组</td>\n</tr>\n<tr>\n<td>list(s)</td>\n<td>将序列 s 转换为一个列表</td>\n</tr>\n<tr>\n<td>set(s)</td>\n<td>转换为可变集合</td>\n</tr>\n<tr>\n<td>dict(d)</td>\n<td>创建一个字典。d 必须是一个序列 (key,value)元组。</td>\n</tr>\n<tr>\n<td>frozenset(s)</td>\n<td>转换为不可变集合</td>\n</tr>\n<tr>\n<td>chr(x)</td>\n<td>将一个整数转换为一个字符</td>\n</tr>\n<tr>\n<td>unichr(x)</td>\n<td>将一个整数转换为Unicode字符</td>\n</tr>\n<tr>\n<td>ord(x)</td>\n<td>将一个字符转换为它的整数值</td>\n</tr>\n<tr>\n<td>hex(x)</td>\n<td>将一个整数转换为一个十六进制字符串</td>\n</tr>\n<tr>\n<td>oct(x)</td>\n<td>将一个整数转换为一个八进制字符串</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Python-运算符\"><a href=\"#Python-运算符\" class=\"headerlink\" title=\"Python 运算符\"></a>Python 运算符</h3><ul>\n<li>算术运算符</li>\n<li>比较（关系）运算符</li>\n<li>赋值运算符</li>\n<li>逻辑运算符</li>\n<li>位运算符</li>\n<li>成员运算符</li>\n<li>身份运算符</li>\n<li>运算符优先级</li>\n</ul>\n<h4 id=\"Python算术运算符\"><a href=\"#Python算术运算符\" class=\"headerlink\" title=\"Python算术运算符\"></a>Python算术运算符</h4><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>加 - 两个对象相加</td>\n<td>a + b 输出结果 30</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减 - 得到负数或是一个数减去另一个数</td>\n<td>a - b 输出结果 -10</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>\n<td>a * b 输出结果 200</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除 - x除以y</td>\n<td>b / a 输出结果 2</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取模 - 返回除法的余数</td>\n<td>b % a 输出结果 0</td>\n</tr>\n<tr>\n<td>**</td>\n<td>幂 - 返回x的y次幂 a**b 为10的20次方，</td>\n<td>输出结果 100000000000000000000</td>\n</tr>\n<tr>\n<td>//</td>\n<td>取整除 - 返回商的整数部分（向下取整）</td>\n<td>9//2    结果：4</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Python比较运算符\"><a href=\"#Python比较运算符\" class=\"headerlink\" title=\"Python比较运算符\"></a>Python比较运算符</h4><p><img src=\"/2019/08/07/python基础1/05.png\" alt=\"05.png\"></p>\n<h4 id=\"Python赋值运算符\"><a href=\"#Python赋值运算符\" class=\"headerlink\" title=\"Python赋值运算符\"></a>Python赋值运算符</h4><p><img src=\"/2019/08/07/python基础1/06.png\" alt=\"06.png\"></p>\n<h4 id=\"Python位运算符\"><a href=\"#Python位运算符\" class=\"headerlink\" title=\"Python位运算符\"></a>Python位运算符</h4><p><img src=\"/2019/08/07/python基础1/07.png\" alt=\"07.png\"></p>\n<h4 id=\"Python逻辑运算符\"><a href=\"#Python逻辑运算符\" class=\"headerlink\" title=\"Python逻辑运算符\"></a>Python逻辑运算符</h4><p><img src=\"/2019/08/07/python基础1/08.png\" alt=\"08.png\"></p>\n<h4 id=\"Python成员运算符\"><a href=\"#Python成员运算符\" class=\"headerlink\" title=\"Python成员运算符\"></a>Python成员运算符</h4><p><img src=\"/2019/08/07/python基础1/09.png\" alt=\"09.png\"></p>\n<h4 id=\"Python身份运算符\"><a href=\"#Python身份运算符\" class=\"headerlink\" title=\"Python身份运算符\"></a>Python身份运算符</h4><p><img src=\"/2019/08/07/python基础1/10.png\" alt=\"10.png\"></p>\n<h4 id=\"Python运算符优先级\"><a href=\"#Python运算符优先级\" class=\"headerlink\" title=\"Python运算符优先级\"></a>Python运算符优先级</h4><p><img src=\"/2019/08/07/python基础1/11.png\" alt=\"11.png\"></p>\n"},{"title":"React","date":"2019-07-13T13:35:13.000Z","_content":"# ","source":"_posts/react.md","raw":"---\ntitle: React\ndate: 2019-7-13 21:35:13\ncategories:\n- React\ntags: \n    - React\n---\n# ","slug":"react","published":1,"updated":"2019-07-17T11:42:39.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cw4003mt09zrjgxfga0","content":"<p># </p>\n","site":{"data":{}},"excerpt":"","more":"<p># </p>\n"},{"title":"tcp","date":"2019-02-15T01:40:54.000Z","_content":"> 参考：[https://juejin.im/post/5a7ef7ce5188257a856f38b0](https://juejin.im/post/5a7ef7ce5188257a856f38b0)\n\n## TCP三次握手与四次挥手解释1\n首先来看看OSI的七层模型：\n![OSI.jpg](OSI.jpg)\n我们需要知道TCP工作在网络OSI的七层模型中的第四层——Transport层，IP在第三层——Network层，ARP在第二层——Data Link层；在第二层上的数据，我们把它叫Frame，在第三层上的数据叫Packet，第四层的数据叫Segment。 同时，我们需要简单的知道，数据从应用层发下来，会在每一层都会加上头部信息，进行封装，然后再发送到数据接收端。这个基本的流程你需要知道，就是每个数据都会经过数据的封装和解封装的过程。 在OSI七层模型中，每一层的作用和对应的协议如下：\n![OSI01.jpg](OSI01.jpg)\nTCP是一个协议，那这个协议是如何定义的，它的数据格式是什么样子的呢？要进行更深层次的剖析，就需要了解，甚至是熟记TCP协议中每个字段的含义。哦，来吧。\n\nTCP是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息。这就是面试中经常会被问到的TCP三次握手。只是了解TCP三次握手的概念，对你获得一份工作是没有任何帮助的，你需要去了解TCP三次握手中的一些细节。先来看图说话。\n![tcp03.jpg](tcp03.jpg)\n### 握手说明\n- 第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；\n- 第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；\n- 第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。\n完成了三次握手，客户端和服务器端就可以开始传送数据。以上就是TCP三次握手的总体介绍。\n那四次分手呢？\n\n### 挥手说明\n当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次分手”。\n- 第一次分手：主机1（可以使客户端，也可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段；此时，主机1进入FIN_WAIT_1状态；这表示主机1没有数据要发送给主机2了；\n-第二次分手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入FIN_WAIT_2状态；主机2告诉主机1，我“同意”你的关闭请求；\n- 第三次分手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态；\n- 第四次分手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。\n\n### 为什么要三次握手?\n既然总结了TCP的三次握手，那为什么非要三次呢？怎么觉得两次就可以完成了。那TCP为什么非要进行三次连接呢？在谢希仁的《计算机网络》中是这样说的：\n\n为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。\n\n在书中同时举了一个例子，如下：\n```bash\n“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”\n```\n这就很明白了，防止了服务器端的一直等待而浪费资源。\n### 为什么要四次挥手?\n那四次分手又是为何呢？TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双工模式，这就意味着，当主机1发出FIN报文段时，只是表示主机1已经没有数据要发送了，主机1告诉主机2，它的数据已经全部发送完毕了；但是，这个时候主机1还是可以接受来自主机2的数据；当主机2返回ACK报文段时，表示它已经知道主机1没有数据发送了，但是主机2还是可以发送数据到主机1的；当主机2也发送了FIN报文段时，这个时候就表示主机2也没有数据要发送了，就会告诉主机1，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。如果要正确的理解四次分手的原理，就需要了解四次分手过程中的状态变化。\n- FIN_WAIT_1: 这个状态要好好解释一下，其实FIN_WAIT_1和FIN_WAIT_2状态的真正含义都是表示等待对方的FIN报文。而这两种状态的区别是：FIN_WAIT_1状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET即进入到FIN_WAIT_1状态。而当对方回应ACK报文后，则进入到FIN_WAIT_2状态，当然在实际的正常情况下，无论对方何种情况下，都应该马上回应ACK报文，所以FIN_WAIT_1状态一般是比较难见到的，而FIN_WAIT_2状态还有时常常可以用netstat看到。（主动方）\n- FIN_WAIT_2：上面已经详细解释了这种状态，实际上FIN_WAIT_2状态下的SOCKET，表示半连接，也即有一方要求close连接，但另外还告诉对方，我暂时还有点数据需要传送给你(ACK信息)，稍后再关闭连接。（主动方）\n- CLOSE_WAIT：这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是察看你是否还有数据发送给对方，如果没有的话，那么你也就可以 close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。（被动方）\n- LAST_ACK: 这个状态还是比较容易好理解的，它是被动关闭一方在发送FIN报文后，最后等待对方的ACK报文。当收到ACK报文后，也即可以进入到CLOSED可用状态了。（被动方）\n- TIME_WAIT: 表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。如果FINWAIT1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。（主动方）\n- CLOSED: 表示连接中断。\n\n\n\n## TCP三次握手与四次挥手解释2\n### TCP三次握手\n![tcp01.jpg](tcp01.jpg)\n>PS：TCP协议中，主动发起请求的一端称为『客户端』，被动连接的一端称为『服务端』。不管是客户端还是服务端，TCP连接建立完后都能发送和接收数据。\n\n起初，服务器和客户端都为CLOSED状态。在通信开始前，双方都得创建各自的传输控制块（TCB）。 \n服务器创建完TCB后遍进入LISTEN状态，此时准备接收客户端发来的连接请求。\n#### 第一次握手\n客户端向服务端发送连接请求报文段。该报文段的头部中SYN=1，ACK=0，seq=x。请求发送后，客户端便进入SYN-SENT状态。\n- PS1：SYN=1，ACK=0表示该报文段为连接请求报文。\n- PS2：x为本次TCP通信的字节流的初始序号。 TCP规定：SYN=1的报文段不能有数据部分，但要消耗掉一个序号。\n\n\n\n#### 第二次握手 \n服务端收到连接请求报文段后，如果同意连接，则会发送一个应答：SYN=1，ACK=1，seq=y，ack=x+1。 \n该应答发送完成后便进入SYN-RCVD状态。\n- PS1：SYN=1，ACK=1表示该报文段为连接同意的应答报文。\n- PS2：seq=y表示服务端作为发送者时，发送字节流的初始序号。\n- PS3：ack=x+1表示服务端希望下一个数据报发送序号从x+1开始的字节。\n\n#### 第三次握手 \n当客户端收到连接同意的应答后，还要向服务端发送一个确认报文段，表示：服务端发来的连接同意应答已经成功收到。 \n该报文段的头部为：ACK=1，seq=x+1，ack=y+1。\n客户端发完这个报文段后便进入ESTABLISHED状态，服务端收到这个应答后也进入ESTABLISHED状态，此时连接的建立完成！\n为什么连接建立需要三次握手，而不是两次握手？ \n防止失效的连接请求报文段被服务端接收，从而产生错误。\nPS：失效的连接请求：若客户端向服务端发送的连接请求丢失，客户端等待应答超时后就会再次发送连接请求，此时，上一个连接请求就是『失效的』。\n若建立连接只需两次握手，客户端并没有太大的变化，仍然需要获得服务端的应答后才进入ESTABLISHED状态，而服务端在收到连接请求后就进入ESTABLISHED状态。此时如果网络拥塞，客户端发送的连接请求迟迟到不了服务端，客户端便超时重发请求，如果服务端正确接收并确认应答，双方便开始通信，通信结束后释放连接。此时，如果那个失效的连接请求抵达了服务端，由于只有两次握手，服务端收到请求就会进入ESTABLISHED状态，等待发送数据或主动发送数据。但此时的客户端早已进入CLOSED状态，服务端将会一直等待下去，这样浪费服务端连接资源。\n\n### TCP四次挥手\n![tcp02.jpg](tcp02.jpg)\nTCP连接的释放一共需要四步，因此称为『四次挥手』。 \n我们知道，TCP连接是双向的，因此在四次挥手中，前两次挥手用于断开一个方向的连接，后两次挥手用于断开另一方向的连接。\n#### 第一次挥手 \n若A认为数据发送完成，则它需要向B发送连接释放请求。该请求只有报文头，头中携带的主要参数为： \nFIN=1，seq=u。此时，A将进入FIN-WAIT-1状态。\n- PS1：FIN=1表示该报文段是一个连接释放请求。\n- PS2：seq=u，u-1是A向B发送的最后一个字节的序号。\n\n#### 第二次挥手 \nB收到连接释放请求后，会通知相应的应用程序，告诉它A向B这个方向的连接已经释放。此时B进入CLOSE-WAIT状态，并向A发送连接释放的应答，其报文头包含： \nACK=1，seq=v，ack=u+1。\n- PS1：ACK=1：除TCP连接请求报文段以外，TCP通信过程中所有数据报的ACK都为1，表示应答。\n- PS2：seq=v，v-1是B向A发送的最后一个字节的序号。\n- PS3：ack=u+1表示希望收到从第u+1个字节开始的报文段，并且已经成功接收了前u个字节。\n\nA收到该应答，进入FIN-WAIT-2状态，等待B发送连接释放请求。\n第二次挥手完成后，A到B方向的连接已经释放，B不会再接收数据，A也不会再发送数据。但B到A方向的连接仍然存在，B可以继续向A发送数据。\n#### 第三次挥手 \n当B向A发完所有数据后，向A发送连接释放请求，请求头：FIN=1，ACK=1，seq=w，ack=u+1。B便进入LAST-ACK状态。\n#### 第四次挥手 \nA收到释放请求后，向B发送确认应答，此时A进入TIME-WAIT状态。该状态会持续2MSL时间，若该时间段内没有B的重发请求的话，就进入CLOSED状态，撤销TCB。当B收到确认应答后，也便进入CLOSED状态，撤销TCB。\n\n为什么A要先进入TIME-WAIT状态，等待2MSL时间后才进入CLOSED状态？ 为了保证B能收到A的确认应答。 若A发完确认应答后直接进入CLOSED状态，那么如果该应答丢失，B等待超时后就会重新发送连接释放请求，但此时A已经关闭了，不会作出任何响应，因此B永远无法正常关闭。\n\n\n","source":"_posts/tcp.md","raw":"---\ntitle: tcp\ndate: 2019-02-15 09:40:54\ncategories:\n- 基础前端技术\ntags: [tcp]\n---\n> 参考：[https://juejin.im/post/5a7ef7ce5188257a856f38b0](https://juejin.im/post/5a7ef7ce5188257a856f38b0)\n\n## TCP三次握手与四次挥手解释1\n首先来看看OSI的七层模型：\n![OSI.jpg](OSI.jpg)\n我们需要知道TCP工作在网络OSI的七层模型中的第四层——Transport层，IP在第三层——Network层，ARP在第二层——Data Link层；在第二层上的数据，我们把它叫Frame，在第三层上的数据叫Packet，第四层的数据叫Segment。 同时，我们需要简单的知道，数据从应用层发下来，会在每一层都会加上头部信息，进行封装，然后再发送到数据接收端。这个基本的流程你需要知道，就是每个数据都会经过数据的封装和解封装的过程。 在OSI七层模型中，每一层的作用和对应的协议如下：\n![OSI01.jpg](OSI01.jpg)\nTCP是一个协议，那这个协议是如何定义的，它的数据格式是什么样子的呢？要进行更深层次的剖析，就需要了解，甚至是熟记TCP协议中每个字段的含义。哦，来吧。\n\nTCP是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息。这就是面试中经常会被问到的TCP三次握手。只是了解TCP三次握手的概念，对你获得一份工作是没有任何帮助的，你需要去了解TCP三次握手中的一些细节。先来看图说话。\n![tcp03.jpg](tcp03.jpg)\n### 握手说明\n- 第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；\n- 第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；\n- 第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。\n完成了三次握手，客户端和服务器端就可以开始传送数据。以上就是TCP三次握手的总体介绍。\n那四次分手呢？\n\n### 挥手说明\n当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次分手”。\n- 第一次分手：主机1（可以使客户端，也可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段；此时，主机1进入FIN_WAIT_1状态；这表示主机1没有数据要发送给主机2了；\n-第二次分手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入FIN_WAIT_2状态；主机2告诉主机1，我“同意”你的关闭请求；\n- 第三次分手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态；\n- 第四次分手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。\n\n### 为什么要三次握手?\n既然总结了TCP的三次握手，那为什么非要三次呢？怎么觉得两次就可以完成了。那TCP为什么非要进行三次连接呢？在谢希仁的《计算机网络》中是这样说的：\n\n为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。\n\n在书中同时举了一个例子，如下：\n```bash\n“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”\n```\n这就很明白了，防止了服务器端的一直等待而浪费资源。\n### 为什么要四次挥手?\n那四次分手又是为何呢？TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双工模式，这就意味着，当主机1发出FIN报文段时，只是表示主机1已经没有数据要发送了，主机1告诉主机2，它的数据已经全部发送完毕了；但是，这个时候主机1还是可以接受来自主机2的数据；当主机2返回ACK报文段时，表示它已经知道主机1没有数据发送了，但是主机2还是可以发送数据到主机1的；当主机2也发送了FIN报文段时，这个时候就表示主机2也没有数据要发送了，就会告诉主机1，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。如果要正确的理解四次分手的原理，就需要了解四次分手过程中的状态变化。\n- FIN_WAIT_1: 这个状态要好好解释一下，其实FIN_WAIT_1和FIN_WAIT_2状态的真正含义都是表示等待对方的FIN报文。而这两种状态的区别是：FIN_WAIT_1状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET即进入到FIN_WAIT_1状态。而当对方回应ACK报文后，则进入到FIN_WAIT_2状态，当然在实际的正常情况下，无论对方何种情况下，都应该马上回应ACK报文，所以FIN_WAIT_1状态一般是比较难见到的，而FIN_WAIT_2状态还有时常常可以用netstat看到。（主动方）\n- FIN_WAIT_2：上面已经详细解释了这种状态，实际上FIN_WAIT_2状态下的SOCKET，表示半连接，也即有一方要求close连接，但另外还告诉对方，我暂时还有点数据需要传送给你(ACK信息)，稍后再关闭连接。（主动方）\n- CLOSE_WAIT：这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是察看你是否还有数据发送给对方，如果没有的话，那么你也就可以 close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。（被动方）\n- LAST_ACK: 这个状态还是比较容易好理解的，它是被动关闭一方在发送FIN报文后，最后等待对方的ACK报文。当收到ACK报文后，也即可以进入到CLOSED可用状态了。（被动方）\n- TIME_WAIT: 表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。如果FINWAIT1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。（主动方）\n- CLOSED: 表示连接中断。\n\n\n\n## TCP三次握手与四次挥手解释2\n### TCP三次握手\n![tcp01.jpg](tcp01.jpg)\n>PS：TCP协议中，主动发起请求的一端称为『客户端』，被动连接的一端称为『服务端』。不管是客户端还是服务端，TCP连接建立完后都能发送和接收数据。\n\n起初，服务器和客户端都为CLOSED状态。在通信开始前，双方都得创建各自的传输控制块（TCB）。 \n服务器创建完TCB后遍进入LISTEN状态，此时准备接收客户端发来的连接请求。\n#### 第一次握手\n客户端向服务端发送连接请求报文段。该报文段的头部中SYN=1，ACK=0，seq=x。请求发送后，客户端便进入SYN-SENT状态。\n- PS1：SYN=1，ACK=0表示该报文段为连接请求报文。\n- PS2：x为本次TCP通信的字节流的初始序号。 TCP规定：SYN=1的报文段不能有数据部分，但要消耗掉一个序号。\n\n\n\n#### 第二次握手 \n服务端收到连接请求报文段后，如果同意连接，则会发送一个应答：SYN=1，ACK=1，seq=y，ack=x+1。 \n该应答发送完成后便进入SYN-RCVD状态。\n- PS1：SYN=1，ACK=1表示该报文段为连接同意的应答报文。\n- PS2：seq=y表示服务端作为发送者时，发送字节流的初始序号。\n- PS3：ack=x+1表示服务端希望下一个数据报发送序号从x+1开始的字节。\n\n#### 第三次握手 \n当客户端收到连接同意的应答后，还要向服务端发送一个确认报文段，表示：服务端发来的连接同意应答已经成功收到。 \n该报文段的头部为：ACK=1，seq=x+1，ack=y+1。\n客户端发完这个报文段后便进入ESTABLISHED状态，服务端收到这个应答后也进入ESTABLISHED状态，此时连接的建立完成！\n为什么连接建立需要三次握手，而不是两次握手？ \n防止失效的连接请求报文段被服务端接收，从而产生错误。\nPS：失效的连接请求：若客户端向服务端发送的连接请求丢失，客户端等待应答超时后就会再次发送连接请求，此时，上一个连接请求就是『失效的』。\n若建立连接只需两次握手，客户端并没有太大的变化，仍然需要获得服务端的应答后才进入ESTABLISHED状态，而服务端在收到连接请求后就进入ESTABLISHED状态。此时如果网络拥塞，客户端发送的连接请求迟迟到不了服务端，客户端便超时重发请求，如果服务端正确接收并确认应答，双方便开始通信，通信结束后释放连接。此时，如果那个失效的连接请求抵达了服务端，由于只有两次握手，服务端收到请求就会进入ESTABLISHED状态，等待发送数据或主动发送数据。但此时的客户端早已进入CLOSED状态，服务端将会一直等待下去，这样浪费服务端连接资源。\n\n### TCP四次挥手\n![tcp02.jpg](tcp02.jpg)\nTCP连接的释放一共需要四步，因此称为『四次挥手』。 \n我们知道，TCP连接是双向的，因此在四次挥手中，前两次挥手用于断开一个方向的连接，后两次挥手用于断开另一方向的连接。\n#### 第一次挥手 \n若A认为数据发送完成，则它需要向B发送连接释放请求。该请求只有报文头，头中携带的主要参数为： \nFIN=1，seq=u。此时，A将进入FIN-WAIT-1状态。\n- PS1：FIN=1表示该报文段是一个连接释放请求。\n- PS2：seq=u，u-1是A向B发送的最后一个字节的序号。\n\n#### 第二次挥手 \nB收到连接释放请求后，会通知相应的应用程序，告诉它A向B这个方向的连接已经释放。此时B进入CLOSE-WAIT状态，并向A发送连接释放的应答，其报文头包含： \nACK=1，seq=v，ack=u+1。\n- PS1：ACK=1：除TCP连接请求报文段以外，TCP通信过程中所有数据报的ACK都为1，表示应答。\n- PS2：seq=v，v-1是B向A发送的最后一个字节的序号。\n- PS3：ack=u+1表示希望收到从第u+1个字节开始的报文段，并且已经成功接收了前u个字节。\n\nA收到该应答，进入FIN-WAIT-2状态，等待B发送连接释放请求。\n第二次挥手完成后，A到B方向的连接已经释放，B不会再接收数据，A也不会再发送数据。但B到A方向的连接仍然存在，B可以继续向A发送数据。\n#### 第三次挥手 \n当B向A发完所有数据后，向A发送连接释放请求，请求头：FIN=1，ACK=1，seq=w，ack=u+1。B便进入LAST-ACK状态。\n#### 第四次挥手 \nA收到释放请求后，向B发送确认应答，此时A进入TIME-WAIT状态。该状态会持续2MSL时间，若该时间段内没有B的重发请求的话，就进入CLOSED状态，撤销TCB。当B收到确认应答后，也便进入CLOSED状态，撤销TCB。\n\n为什么A要先进入TIME-WAIT状态，等待2MSL时间后才进入CLOSED状态？ 为了保证B能收到A的确认应答。 若A发完确认应答后直接进入CLOSED状态，那么如果该应答丢失，B等待超时后就会重新发送连接释放请求，但此时A已经关闭了，不会作出任何响应，因此B永远无法正常关闭。\n\n\n","slug":"tcp","published":1,"updated":"2019-07-29T10:02:02.916Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cw7003qt09zu4oftp1o","content":"<blockquote>\n<p>参考：<a href=\"https://juejin.im/post/5a7ef7ce5188257a856f38b0\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a7ef7ce5188257a856f38b0</a></p>\n</blockquote>\n<h2 id=\"TCP三次握手与四次挥手解释1\"><a href=\"#TCP三次握手与四次挥手解释1\" class=\"headerlink\" title=\"TCP三次握手与四次挥手解释1\"></a>TCP三次握手与四次挥手解释1</h2><p>首先来看看OSI的七层模型：<br><img src=\"/2019/02/15/tcp/OSI.jpg\" alt=\"OSI.jpg\"><br>我们需要知道TCP工作在网络OSI的七层模型中的第四层——Transport层，IP在第三层——Network层，ARP在第二层——Data Link层；在第二层上的数据，我们把它叫Frame，在第三层上的数据叫Packet，第四层的数据叫Segment。 同时，我们需要简单的知道，数据从应用层发下来，会在每一层都会加上头部信息，进行封装，然后再发送到数据接收端。这个基本的流程你需要知道，就是每个数据都会经过数据的封装和解封装的过程。 在OSI七层模型中，每一层的作用和对应的协议如下：<br><img src=\"/2019/02/15/tcp/OSI01.jpg\" alt=\"OSI01.jpg\"><br>TCP是一个协议，那这个协议是如何定义的，它的数据格式是什么样子的呢？要进行更深层次的剖析，就需要了解，甚至是熟记TCP协议中每个字段的含义。哦，来吧。</p>\n<p>TCP是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息。这就是面试中经常会被问到的TCP三次握手。只是了解TCP三次握手的概念，对你获得一份工作是没有任何帮助的，你需要去了解TCP三次握手中的一些细节。先来看图说话。<br><img src=\"/2019/02/15/tcp/tcp03.jpg\" alt=\"tcp03.jpg\"></p>\n<h3 id=\"握手说明\"><a href=\"#握手说明\" class=\"headerlink\" title=\"握手说明\"></a>握手说明</h3><ul>\n<li>第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；</li>\n<li>第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；</li>\n<li>第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。<br>完成了三次握手，客户端和服务器端就可以开始传送数据。以上就是TCP三次握手的总体介绍。<br>那四次分手呢？</li>\n</ul>\n<h3 id=\"挥手说明\"><a href=\"#挥手说明\" class=\"headerlink\" title=\"挥手说明\"></a>挥手说明</h3><p>当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次分手”。</p>\n<ul>\n<li>第一次分手：主机1（可以使客户端，也可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段；此时，主机1进入FIN_WAIT_1状态；这表示主机1没有数据要发送给主机2了；<br>-第二次分手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入FIN_WAIT_2状态；主机2告诉主机1，我“同意”你的关闭请求；</li>\n<li>第三次分手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态；</li>\n<li>第四次分手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。</li>\n</ul>\n<h3 id=\"为什么要三次握手\"><a href=\"#为什么要三次握手\" class=\"headerlink\" title=\"为什么要三次握手?\"></a>为什么要三次握手?</h3><p>既然总结了TCP的三次握手，那为什么非要三次呢？怎么觉得两次就可以完成了。那TCP为什么非要进行三次连接呢？在谢希仁的《计算机网络》中是这样说的：</p>\n<p>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p>\n<p>在书中同时举了一个例子，如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</span><br></pre></td></tr></table></figure></p>\n<p>这就很明白了，防止了服务器端的一直等待而浪费资源。</p>\n<h3 id=\"为什么要四次挥手\"><a href=\"#为什么要四次挥手\" class=\"headerlink\" title=\"为什么要四次挥手?\"></a>为什么要四次挥手?</h3><p>那四次分手又是为何呢？TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双工模式，这就意味着，当主机1发出FIN报文段时，只是表示主机1已经没有数据要发送了，主机1告诉主机2，它的数据已经全部发送完毕了；但是，这个时候主机1还是可以接受来自主机2的数据；当主机2返回ACK报文段时，表示它已经知道主机1没有数据发送了，但是主机2还是可以发送数据到主机1的；当主机2也发送了FIN报文段时，这个时候就表示主机2也没有数据要发送了，就会告诉主机1，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。如果要正确的理解四次分手的原理，就需要了解四次分手过程中的状态变化。</p>\n<ul>\n<li>FIN_WAIT_1: 这个状态要好好解释一下，其实FIN_WAIT_1和FIN_WAIT_2状态的真正含义都是表示等待对方的FIN报文。而这两种状态的区别是：FIN_WAIT_1状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET即进入到FIN_WAIT_1状态。而当对方回应ACK报文后，则进入到FIN_WAIT_2状态，当然在实际的正常情况下，无论对方何种情况下，都应该马上回应ACK报文，所以FIN_WAIT_1状态一般是比较难见到的，而FIN_WAIT_2状态还有时常常可以用netstat看到。（主动方）</li>\n<li>FIN_WAIT_2：上面已经详细解释了这种状态，实际上FIN_WAIT_2状态下的SOCKET，表示半连接，也即有一方要求close连接，但另外还告诉对方，我暂时还有点数据需要传送给你(ACK信息)，稍后再关闭连接。（主动方）</li>\n<li>CLOSE_WAIT：这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是察看你是否还有数据发送给对方，如果没有的话，那么你也就可以 close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。（被动方）</li>\n<li>LAST_ACK: 这个状态还是比较容易好理解的，它是被动关闭一方在发送FIN报文后，最后等待对方的ACK报文。当收到ACK报文后，也即可以进入到CLOSED可用状态了。（被动方）</li>\n<li>TIME_WAIT: 表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。如果FINWAIT1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。（主动方）</li>\n<li>CLOSED: 表示连接中断。</li>\n</ul>\n<h2 id=\"TCP三次握手与四次挥手解释2\"><a href=\"#TCP三次握手与四次挥手解释2\" class=\"headerlink\" title=\"TCP三次握手与四次挥手解释2\"></a>TCP三次握手与四次挥手解释2</h2><h3 id=\"TCP三次握手\"><a href=\"#TCP三次握手\" class=\"headerlink\" title=\"TCP三次握手\"></a>TCP三次握手</h3><p><img src=\"/2019/02/15/tcp/tcp01.jpg\" alt=\"tcp01.jpg\"></p>\n<blockquote>\n<p>PS：TCP协议中，主动发起请求的一端称为『客户端』，被动连接的一端称为『服务端』。不管是客户端还是服务端，TCP连接建立完后都能发送和接收数据。</p>\n</blockquote>\n<p>起初，服务器和客户端都为CLOSED状态。在通信开始前，双方都得创建各自的传输控制块（TCB）。<br>服务器创建完TCB后遍进入LISTEN状态，此时准备接收客户端发来的连接请求。</p>\n<h4 id=\"第一次握手\"><a href=\"#第一次握手\" class=\"headerlink\" title=\"第一次握手\"></a>第一次握手</h4><p>客户端向服务端发送连接请求报文段。该报文段的头部中SYN=1，ACK=0，seq=x。请求发送后，客户端便进入SYN-SENT状态。</p>\n<ul>\n<li>PS1：SYN=1，ACK=0表示该报文段为连接请求报文。</li>\n<li>PS2：x为本次TCP通信的字节流的初始序号。 TCP规定：SYN=1的报文段不能有数据部分，但要消耗掉一个序号。</li>\n</ul>\n<h4 id=\"第二次握手\"><a href=\"#第二次握手\" class=\"headerlink\" title=\"第二次握手\"></a>第二次握手</h4><p>服务端收到连接请求报文段后，如果同意连接，则会发送一个应答：SYN=1，ACK=1，seq=y，ack=x+1。<br>该应答发送完成后便进入SYN-RCVD状态。</p>\n<ul>\n<li>PS1：SYN=1，ACK=1表示该报文段为连接同意的应答报文。</li>\n<li>PS2：seq=y表示服务端作为发送者时，发送字节流的初始序号。</li>\n<li>PS3：ack=x+1表示服务端希望下一个数据报发送序号从x+1开始的字节。</li>\n</ul>\n<h4 id=\"第三次握手\"><a href=\"#第三次握手\" class=\"headerlink\" title=\"第三次握手\"></a>第三次握手</h4><p>当客户端收到连接同意的应答后，还要向服务端发送一个确认报文段，表示：服务端发来的连接同意应答已经成功收到。<br>该报文段的头部为：ACK=1，seq=x+1，ack=y+1。<br>客户端发完这个报文段后便进入ESTABLISHED状态，服务端收到这个应答后也进入ESTABLISHED状态，此时连接的建立完成！<br>为什么连接建立需要三次握手，而不是两次握手？<br>防止失效的连接请求报文段被服务端接收，从而产生错误。<br>PS：失效的连接请求：若客户端向服务端发送的连接请求丢失，客户端等待应答超时后就会再次发送连接请求，此时，上一个连接请求就是『失效的』。<br>若建立连接只需两次握手，客户端并没有太大的变化，仍然需要获得服务端的应答后才进入ESTABLISHED状态，而服务端在收到连接请求后就进入ESTABLISHED状态。此时如果网络拥塞，客户端发送的连接请求迟迟到不了服务端，客户端便超时重发请求，如果服务端正确接收并确认应答，双方便开始通信，通信结束后释放连接。此时，如果那个失效的连接请求抵达了服务端，由于只有两次握手，服务端收到请求就会进入ESTABLISHED状态，等待发送数据或主动发送数据。但此时的客户端早已进入CLOSED状态，服务端将会一直等待下去，这样浪费服务端连接资源。</p>\n<h3 id=\"TCP四次挥手\"><a href=\"#TCP四次挥手\" class=\"headerlink\" title=\"TCP四次挥手\"></a>TCP四次挥手</h3><p><img src=\"/2019/02/15/tcp/tcp02.jpg\" alt=\"tcp02.jpg\"><br>TCP连接的释放一共需要四步，因此称为『四次挥手』。<br>我们知道，TCP连接是双向的，因此在四次挥手中，前两次挥手用于断开一个方向的连接，后两次挥手用于断开另一方向的连接。</p>\n<h4 id=\"第一次挥手\"><a href=\"#第一次挥手\" class=\"headerlink\" title=\"第一次挥手\"></a>第一次挥手</h4><p>若A认为数据发送完成，则它需要向B发送连接释放请求。该请求只有报文头，头中携带的主要参数为：<br>FIN=1，seq=u。此时，A将进入FIN-WAIT-1状态。</p>\n<ul>\n<li>PS1：FIN=1表示该报文段是一个连接释放请求。</li>\n<li>PS2：seq=u，u-1是A向B发送的最后一个字节的序号。</li>\n</ul>\n<h4 id=\"第二次挥手\"><a href=\"#第二次挥手\" class=\"headerlink\" title=\"第二次挥手\"></a>第二次挥手</h4><p>B收到连接释放请求后，会通知相应的应用程序，告诉它A向B这个方向的连接已经释放。此时B进入CLOSE-WAIT状态，并向A发送连接释放的应答，其报文头包含：<br>ACK=1，seq=v，ack=u+1。</p>\n<ul>\n<li>PS1：ACK=1：除TCP连接请求报文段以外，TCP通信过程中所有数据报的ACK都为1，表示应答。</li>\n<li>PS2：seq=v，v-1是B向A发送的最后一个字节的序号。</li>\n<li>PS3：ack=u+1表示希望收到从第u+1个字节开始的报文段，并且已经成功接收了前u个字节。</li>\n</ul>\n<p>A收到该应答，进入FIN-WAIT-2状态，等待B发送连接释放请求。<br>第二次挥手完成后，A到B方向的连接已经释放，B不会再接收数据，A也不会再发送数据。但B到A方向的连接仍然存在，B可以继续向A发送数据。</p>\n<h4 id=\"第三次挥手\"><a href=\"#第三次挥手\" class=\"headerlink\" title=\"第三次挥手\"></a>第三次挥手</h4><p>当B向A发完所有数据后，向A发送连接释放请求，请求头：FIN=1，ACK=1，seq=w，ack=u+1。B便进入LAST-ACK状态。</p>\n<h4 id=\"第四次挥手\"><a href=\"#第四次挥手\" class=\"headerlink\" title=\"第四次挥手\"></a>第四次挥手</h4><p>A收到释放请求后，向B发送确认应答，此时A进入TIME-WAIT状态。该状态会持续2MSL时间，若该时间段内没有B的重发请求的话，就进入CLOSED状态，撤销TCB。当B收到确认应答后，也便进入CLOSED状态，撤销TCB。</p>\n<p>为什么A要先进入TIME-WAIT状态，等待2MSL时间后才进入CLOSED状态？ 为了保证B能收到A的确认应答。 若A发完确认应答后直接进入CLOSED状态，那么如果该应答丢失，B等待超时后就会重新发送连接释放请求，但此时A已经关闭了，不会作出任何响应，因此B永远无法正常关闭。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>参考：<a href=\"https://juejin.im/post/5a7ef7ce5188257a856f38b0\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5a7ef7ce5188257a856f38b0</a></p>\n</blockquote>\n<h2 id=\"TCP三次握手与四次挥手解释1\"><a href=\"#TCP三次握手与四次挥手解释1\" class=\"headerlink\" title=\"TCP三次握手与四次挥手解释1\"></a>TCP三次握手与四次挥手解释1</h2><p>首先来看看OSI的七层模型：<br><img src=\"/2019/02/15/tcp/OSI.jpg\" alt=\"OSI.jpg\"><br>我们需要知道TCP工作在网络OSI的七层模型中的第四层——Transport层，IP在第三层——Network层，ARP在第二层——Data Link层；在第二层上的数据，我们把它叫Frame，在第三层上的数据叫Packet，第四层的数据叫Segment。 同时，我们需要简单的知道，数据从应用层发下来，会在每一层都会加上头部信息，进行封装，然后再发送到数据接收端。这个基本的流程你需要知道，就是每个数据都会经过数据的封装和解封装的过程。 在OSI七层模型中，每一层的作用和对应的协议如下：<br><img src=\"/2019/02/15/tcp/OSI01.jpg\" alt=\"OSI01.jpg\"><br>TCP是一个协议，那这个协议是如何定义的，它的数据格式是什么样子的呢？要进行更深层次的剖析，就需要了解，甚至是熟记TCP协议中每个字段的含义。哦，来吧。</p>\n<p>TCP是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息。这就是面试中经常会被问到的TCP三次握手。只是了解TCP三次握手的概念，对你获得一份工作是没有任何帮助的，你需要去了解TCP三次握手中的一些细节。先来看图说话。<br><img src=\"/2019/02/15/tcp/tcp03.jpg\" alt=\"tcp03.jpg\"></p>\n<h3 id=\"握手说明\"><a href=\"#握手说明\" class=\"headerlink\" title=\"握手说明\"></a>握手说明</h3><ul>\n<li>第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；</li>\n<li>第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；</li>\n<li>第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。<br>完成了三次握手，客户端和服务器端就可以开始传送数据。以上就是TCP三次握手的总体介绍。<br>那四次分手呢？</li>\n</ul>\n<h3 id=\"挥手说明\"><a href=\"#挥手说明\" class=\"headerlink\" title=\"挥手说明\"></a>挥手说明</h3><p>当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次分手”。</p>\n<ul>\n<li>第一次分手：主机1（可以使客户端，也可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段；此时，主机1进入FIN_WAIT_1状态；这表示主机1没有数据要发送给主机2了；<br>-第二次分手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入FIN_WAIT_2状态；主机2告诉主机1，我“同意”你的关闭请求；</li>\n<li>第三次分手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态；</li>\n<li>第四次分手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。</li>\n</ul>\n<h3 id=\"为什么要三次握手\"><a href=\"#为什么要三次握手\" class=\"headerlink\" title=\"为什么要三次握手?\"></a>为什么要三次握手?</h3><p>既然总结了TCP的三次握手，那为什么非要三次呢？怎么觉得两次就可以完成了。那TCP为什么非要进行三次连接呢？在谢希仁的《计算机网络》中是这样说的：</p>\n<p>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p>\n<p>在书中同时举了一个例子，如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</span><br></pre></td></tr></table></figure></p>\n<p>这就很明白了，防止了服务器端的一直等待而浪费资源。</p>\n<h3 id=\"为什么要四次挥手\"><a href=\"#为什么要四次挥手\" class=\"headerlink\" title=\"为什么要四次挥手?\"></a>为什么要四次挥手?</h3><p>那四次分手又是为何呢？TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双工模式，这就意味着，当主机1发出FIN报文段时，只是表示主机1已经没有数据要发送了，主机1告诉主机2，它的数据已经全部发送完毕了；但是，这个时候主机1还是可以接受来自主机2的数据；当主机2返回ACK报文段时，表示它已经知道主机1没有数据发送了，但是主机2还是可以发送数据到主机1的；当主机2也发送了FIN报文段时，这个时候就表示主机2也没有数据要发送了，就会告诉主机1，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。如果要正确的理解四次分手的原理，就需要了解四次分手过程中的状态变化。</p>\n<ul>\n<li>FIN_WAIT_1: 这个状态要好好解释一下，其实FIN_WAIT_1和FIN_WAIT_2状态的真正含义都是表示等待对方的FIN报文。而这两种状态的区别是：FIN_WAIT_1状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET即进入到FIN_WAIT_1状态。而当对方回应ACK报文后，则进入到FIN_WAIT_2状态，当然在实际的正常情况下，无论对方何种情况下，都应该马上回应ACK报文，所以FIN_WAIT_1状态一般是比较难见到的，而FIN_WAIT_2状态还有时常常可以用netstat看到。（主动方）</li>\n<li>FIN_WAIT_2：上面已经详细解释了这种状态，实际上FIN_WAIT_2状态下的SOCKET，表示半连接，也即有一方要求close连接，但另外还告诉对方，我暂时还有点数据需要传送给你(ACK信息)，稍后再关闭连接。（主动方）</li>\n<li>CLOSE_WAIT：这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是察看你是否还有数据发送给对方，如果没有的话，那么你也就可以 close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。（被动方）</li>\n<li>LAST_ACK: 这个状态还是比较容易好理解的，它是被动关闭一方在发送FIN报文后，最后等待对方的ACK报文。当收到ACK报文后，也即可以进入到CLOSED可用状态了。（被动方）</li>\n<li>TIME_WAIT: 表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。如果FINWAIT1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。（主动方）</li>\n<li>CLOSED: 表示连接中断。</li>\n</ul>\n<h2 id=\"TCP三次握手与四次挥手解释2\"><a href=\"#TCP三次握手与四次挥手解释2\" class=\"headerlink\" title=\"TCP三次握手与四次挥手解释2\"></a>TCP三次握手与四次挥手解释2</h2><h3 id=\"TCP三次握手\"><a href=\"#TCP三次握手\" class=\"headerlink\" title=\"TCP三次握手\"></a>TCP三次握手</h3><p><img src=\"/2019/02/15/tcp/tcp01.jpg\" alt=\"tcp01.jpg\"></p>\n<blockquote>\n<p>PS：TCP协议中，主动发起请求的一端称为『客户端』，被动连接的一端称为『服务端』。不管是客户端还是服务端，TCP连接建立完后都能发送和接收数据。</p>\n</blockquote>\n<p>起初，服务器和客户端都为CLOSED状态。在通信开始前，双方都得创建各自的传输控制块（TCB）。<br>服务器创建完TCB后遍进入LISTEN状态，此时准备接收客户端发来的连接请求。</p>\n<h4 id=\"第一次握手\"><a href=\"#第一次握手\" class=\"headerlink\" title=\"第一次握手\"></a>第一次握手</h4><p>客户端向服务端发送连接请求报文段。该报文段的头部中SYN=1，ACK=0，seq=x。请求发送后，客户端便进入SYN-SENT状态。</p>\n<ul>\n<li>PS1：SYN=1，ACK=0表示该报文段为连接请求报文。</li>\n<li>PS2：x为本次TCP通信的字节流的初始序号。 TCP规定：SYN=1的报文段不能有数据部分，但要消耗掉一个序号。</li>\n</ul>\n<h4 id=\"第二次握手\"><a href=\"#第二次握手\" class=\"headerlink\" title=\"第二次握手\"></a>第二次握手</h4><p>服务端收到连接请求报文段后，如果同意连接，则会发送一个应答：SYN=1，ACK=1，seq=y，ack=x+1。<br>该应答发送完成后便进入SYN-RCVD状态。</p>\n<ul>\n<li>PS1：SYN=1，ACK=1表示该报文段为连接同意的应答报文。</li>\n<li>PS2：seq=y表示服务端作为发送者时，发送字节流的初始序号。</li>\n<li>PS3：ack=x+1表示服务端希望下一个数据报发送序号从x+1开始的字节。</li>\n</ul>\n<h4 id=\"第三次握手\"><a href=\"#第三次握手\" class=\"headerlink\" title=\"第三次握手\"></a>第三次握手</h4><p>当客户端收到连接同意的应答后，还要向服务端发送一个确认报文段，表示：服务端发来的连接同意应答已经成功收到。<br>该报文段的头部为：ACK=1，seq=x+1，ack=y+1。<br>客户端发完这个报文段后便进入ESTABLISHED状态，服务端收到这个应答后也进入ESTABLISHED状态，此时连接的建立完成！<br>为什么连接建立需要三次握手，而不是两次握手？<br>防止失效的连接请求报文段被服务端接收，从而产生错误。<br>PS：失效的连接请求：若客户端向服务端发送的连接请求丢失，客户端等待应答超时后就会再次发送连接请求，此时，上一个连接请求就是『失效的』。<br>若建立连接只需两次握手，客户端并没有太大的变化，仍然需要获得服务端的应答后才进入ESTABLISHED状态，而服务端在收到连接请求后就进入ESTABLISHED状态。此时如果网络拥塞，客户端发送的连接请求迟迟到不了服务端，客户端便超时重发请求，如果服务端正确接收并确认应答，双方便开始通信，通信结束后释放连接。此时，如果那个失效的连接请求抵达了服务端，由于只有两次握手，服务端收到请求就会进入ESTABLISHED状态，等待发送数据或主动发送数据。但此时的客户端早已进入CLOSED状态，服务端将会一直等待下去，这样浪费服务端连接资源。</p>\n<h3 id=\"TCP四次挥手\"><a href=\"#TCP四次挥手\" class=\"headerlink\" title=\"TCP四次挥手\"></a>TCP四次挥手</h3><p><img src=\"/2019/02/15/tcp/tcp02.jpg\" alt=\"tcp02.jpg\"><br>TCP连接的释放一共需要四步，因此称为『四次挥手』。<br>我们知道，TCP连接是双向的，因此在四次挥手中，前两次挥手用于断开一个方向的连接，后两次挥手用于断开另一方向的连接。</p>\n<h4 id=\"第一次挥手\"><a href=\"#第一次挥手\" class=\"headerlink\" title=\"第一次挥手\"></a>第一次挥手</h4><p>若A认为数据发送完成，则它需要向B发送连接释放请求。该请求只有报文头，头中携带的主要参数为：<br>FIN=1，seq=u。此时，A将进入FIN-WAIT-1状态。</p>\n<ul>\n<li>PS1：FIN=1表示该报文段是一个连接释放请求。</li>\n<li>PS2：seq=u，u-1是A向B发送的最后一个字节的序号。</li>\n</ul>\n<h4 id=\"第二次挥手\"><a href=\"#第二次挥手\" class=\"headerlink\" title=\"第二次挥手\"></a>第二次挥手</h4><p>B收到连接释放请求后，会通知相应的应用程序，告诉它A向B这个方向的连接已经释放。此时B进入CLOSE-WAIT状态，并向A发送连接释放的应答，其报文头包含：<br>ACK=1，seq=v，ack=u+1。</p>\n<ul>\n<li>PS1：ACK=1：除TCP连接请求报文段以外，TCP通信过程中所有数据报的ACK都为1，表示应答。</li>\n<li>PS2：seq=v，v-1是B向A发送的最后一个字节的序号。</li>\n<li>PS3：ack=u+1表示希望收到从第u+1个字节开始的报文段，并且已经成功接收了前u个字节。</li>\n</ul>\n<p>A收到该应答，进入FIN-WAIT-2状态，等待B发送连接释放请求。<br>第二次挥手完成后，A到B方向的连接已经释放，B不会再接收数据，A也不会再发送数据。但B到A方向的连接仍然存在，B可以继续向A发送数据。</p>\n<h4 id=\"第三次挥手\"><a href=\"#第三次挥手\" class=\"headerlink\" title=\"第三次挥手\"></a>第三次挥手</h4><p>当B向A发完所有数据后，向A发送连接释放请求，请求头：FIN=1，ACK=1，seq=w，ack=u+1。B便进入LAST-ACK状态。</p>\n<h4 id=\"第四次挥手\"><a href=\"#第四次挥手\" class=\"headerlink\" title=\"第四次挥手\"></a>第四次挥手</h4><p>A收到释放请求后，向B发送确认应答，此时A进入TIME-WAIT状态。该状态会持续2MSL时间，若该时间段内没有B的重发请求的话，就进入CLOSED状态，撤销TCB。当B收到确认应答后，也便进入CLOSED状态，撤销TCB。</p>\n<p>为什么A要先进入TIME-WAIT状态，等待2MSL时间后才进入CLOSED状态？ 为了保证B能收到A的确认应答。 若A发完确认应答后直接进入CLOSED状态，那么如果该应答丢失，B等待超时后就会重新发送连接释放请求，但此时A已经关闭了，不会作出任何响应，因此B永远无法正常关闭。</p>\n"},{"title":"vue","date":"2019-07-13T13:35:13.000Z","_content":"# IntellIJ IDEA 配置支持Vue\n参考：https://www.jianshu.com/p/01d832e028ea\n第一步：先安装vue插件:\nfile --> settings --> plugins，然后什么都不用输入，直接点击Browse repositories... 紧接着左上方输入“vue”，点击搜索结果里的vue.js，右边会有绿色install按钮，安装成功后重启idea，这样idea就能识别.vue文件了。\n第二步：设置vue新建文件模板。\n# 安装Element-ui \n\n# vue2.0 + element UI 中 el-table 数据导出Excel\n最近后台项目中有需要将游戏用户提交的返利数据信息导出为excel表的形式，所以对此功能进行了简单的总结：\n## 安装相关依赖\n```bash\n主要是两个依赖:(xlsx 和 file-saver)\nnpm install --save xlsx file-saver\n```\n对于这两个插件使用，github上边有更加详细的参考\n```bash\nhttps://github.com/SheetJS/js-xlsx](https://github.com/SheetJS/js-xlsx)\nhttps://github.com/eligrey/FileSaver.js](https://github.com/eligrey/FileSaver.js\n```\n## 在组件头里边引入插件\n(测试的时候，下边代码放到入口js文件main.js的时候没有效果，遗留问题，有待解决)（放到组件头里边能够实现效果）\n```bash\nimport FileSaver from 'file-saver'\nimport XLSX from 'xlsx'\n```\n## 在对应组件里边methods里边写一个方法\n（到处的时候进行调用）\n```bash\nexportExcel () {\n    /* generate workbook object from table */\n    let wb = XLSX.utils.table_to_book(document.querySelector('#rebateSetTable'));\n    /* get binary string as output */\n    let wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'array' });\n    try {\n        FileSaver.saveAs(new Blob([wbout], { type: 'application/octet-stream' }), '用户提交返利表.xlsx');\n    } catch (e)\n    {\n        if (typeof console !== 'undefined')\n            console.log(e, wbout)\n    }\n    return wbout\n },\n```\n提示：\n上边方法中：XLSX.uitls.table_to_book( 放入的是table 的DOM 节点 ) ，sheetjs.xlsx 即为导出表格的名字，可修改！\n## 点击导出按钮执行 exportExcel 的方法即可 。\n```bash\n<div class=\"export\">\n     <el-button @click=\"exportExcel\" style=\"margin-top: 2px;\" size=\"medium\" type=\"success\">导出</el-button>\n</div>\n```\n\n# vue element-ui自定义主题样式\n\n### 新建一个element-variables.scss，并在(main|app).js入口文件引入\n```bash\nimport Vue from 'vue'\n\nimport Element from 'element-ui'\nimport '@/styles/element-variables.scss'\n```\n\n### 在 element-variables.scss，修改你要的主题或组件预设的样式变量即可\n```bash\n/* 改变 主题/样式相关 变量 */\n$--color-primary: #1ABCB0;\n$--select-option-hover-background: #def1f2;\n$--select-option-selected-hover: #1abcb0;\n$--table-row-hover-background: #f2f2f2;\n$--table-header-color: #444;\n$--pagination-button-disabled-fill: transparent;\n$--pagination-fill: transparent;\n\n/* 改变 icon 字体路径变量，必需 */\n$--font-path: '~element-ui/lib/theme-chalk/fonts';\n\n/* 改变 路径变量，必需 */\n@import \"~element-ui/packages/theme-chalk/src/index\";\n```\n### 默认 element-variables.scss 全部变量内容\n```bash\n/* Element Chalk Variables */\n\n/* Transition\n-------------------------- */\n$--all-transition: all .3s cubic-bezier(.645,.045,.355,1) !default;\n$--fade-transition: opacity 300ms cubic-bezier(0.23, 1, 0.32, 1) !default;\n$--fade-linear-transition: opacity 200ms linear !default;\n$--md-fade-transition: transform 300ms cubic-bezier(0.23, 1, 0.32, 1), opacity 300ms cubic-bezier(0.23, 1, 0.32, 1) !default;\n$--border-transition-base: border-color .2s cubic-bezier(.645,.045,.355,1) !default;\n$--color-transition-base: color .2s cubic-bezier(.645,.045,.355,1) !default;\n\n/* Colors\n-------------------------- */\n$--color-white: #fff !default;\n$--color-black: #000 !default;\n\n$--color-primary: #1ABCB0 !default;\n$--color-primary-light-1: mix($--color-white, $--color-primary, 10%) !default; /* 53a8ff */\n$--color-primary-light-2: mix($--color-white, $--color-primary, 20%) !default; /* 66b1ff */\n$--color-primary-light-3: mix($--color-white, $--color-primary, 30%) !default; /* 79bbff */\n$--color-primary-light-4: mix($--color-white, $--color-primary, 40%) !default; /* 8cc5ff */\n$--color-primary-light-5: mix($--color-white, $--color-primary, 50%) !default; /* a0cfff */\n$--color-primary-light-6: mix($--color-white, $--color-primary, 60%) !default; /* b3d8ff */\n$--color-primary-light-7: mix($--color-white, $--color-primary, 70%) !default; /* c6e2ff */\n$--color-primary-light-8: mix($--color-white, $--color-primary, 80%) !default; /* d9ecff */\n$--color-primary-light-9: mix($--color-white, $--color-primary, 90%) !default; /* ecf5ff */\n\n$--color-success: #67c23a !default;\n$--color-warning: #e6a23c !default;\n$--color-danger: #f56c6c !default;\n$--color-info: #909399 !default;\n\n$--color-success-light: mix($--color-white, $--color-success, 80%) !default;\n$--color-warning-light: mix($--color-white, $--color-warning, 80%) !default;\n$--color-danger-light: mix($--color-white, $--color-danger, 80%) !default;\n$--color-info-light: mix($--color-white, $--color-info, 80%) !default;\n\n$--color-success-lighter: mix($--color-white, $--color-success, 90%) !default;\n$--color-warning-lighter: mix($--color-white, $--color-warning, 90%) !default;\n$--color-danger-lighter: mix($--color-white, $--color-danger, 90%) !default;\n$--color-info-lighter: mix($--color-white, $--color-info, 90%) !default;\n\n$--color-text-primary: #303133 !default;\n$--color-text-regular: #606266 !default;\n$--color-text-secondary: #909399 !default;\n$--color-text-placeholder: #c0c4cc !default;\n\n/* Link\n-------------------------- */\n$--link-color: $--color-primary-light-2 !default;\n$--link-hover-color: $--color-primary !default;\n\n/* Background\n-------------------------- */\n$--background-color-base: #f5f7fa !default;\n\n/* Border\n-------------------------- */\n$--border-width-base: 1px !default;\n$--border-style-base: solid !default;\n$--border-color-base: #dcdfe6 !default;\n$--border-color-light: #e4e7ed !default;\n$--border-color-lighter: #ebeef5 !default;\n$--border-color-extra-light: #f2f6fc !default;\n$--border-color-hover: $--color-text-placeholder !default;\n$--border-base: $--border-width-base $--border-style-base $--border-color-base !default;\n$--border-radius-base: 4px !default;\n$--border-radius-small: 2px !default;\n$--border-radius-circle: 100% !default;\n\n/* Box-shadow\n-------------------------- */\n$--box-shadow-base: 0 2px 4px rgba(0, 0, 0, .12), 0 0 6px rgba(0, 0, 0, .04) !default;\n$--box-shadow-dark: 0 2px 4px rgba(0, 0, 0, .12), 0 0 6px rgba(0, 0, 0, .12) !default;\n$--box-shadow-light: 0 2px 12px 0 rgba(0, 0, 0, 0.1) !default;\n\n/* Fill\n-------------------------- */\n$--fill-base: $--color-white !default;\n\n/* Font\n-------------------------- */\n$--font-path: 'fonts' !default;\n$--font-size-base: 14px !default;\n$--font-size-small: 13px !default;\n$--font-size-large: 18px !default;\n$--font-color-disabled-base: #bbb !default;\n$--font-weight-primary: 500 !default;\n$--font-line-height-primary: 24px !default;\n\n/* Size\n-------------------------- */\n$--size-base: 14px !default;\n\n/* z-index\n-------------------------- */\n$--index-normal: 1 !default;\n$--index-top: 1000 !default;\n$--index-popper: 2000 !default;\n\n/* Disable base\n-------------------------- */\n$--disabled-fill-base: $--background-color-base !default;\n$--disabled-color-base: $--color-text-placeholder !default;\n$--disabled-border-base: $--border-color-light !default;\n\n/* Icon\n-------------------------- */\n$--icon-color: #666 !default;\n$--icon-color-base: $--color-info !default;\n\n/* Checkbox\n-------------------------- */\n$--checkbox-font-size: 14px !default;\n$--checkbox-font-weight: $--font-weight-primary !default;\n$--checkbox-color: $--color-text-regular !default;\n$--checkbox-input-height: 14px !default;\n$--checkbox-input-width: 14px !default;\n$--checkbox-input-border-radius: $--border-radius-small !default;\n$--checkbox-input-fill: $--color-white !default;\n$--checkbox-input-border: $--border-base !default;\n$--checkbox-input-border-color: $--border-color-base !default;\n$--checkbox-icon-color: $--color-white !default;\n\n$--checkbox-disabled-input-border-color: $--border-color-base !default;\n$--checkbox-disabled-input-fill: #edf2fc !default;\n$--checkbox-disabled-icon-color: $--color-text-placeholder !default;\n\n$--checkbox-disabled-checked-input-fill: $--border-color-extra-light !default;\n$--checkbox-disabled-checked-input-border-color: $--border-color-base !default;\n$--checkbox-disabled-checked-icon-color: $--color-text-placeholder !default;\n\n$--checkbox-checked-text-color: $--color-primary !default;\n$--checkbox-checked-input-border-color: $--color-primary !default;\n$--checkbox-checked-input-fill: $--color-primary !default;\n$--checkbox-checked-icon-color: $--fill-base !default;\n\n$--checkbox-input-border-color-hover: $--color-primary !default;\n\n$--checkbox-bordered-height: 40px !default;\n$--checkbox-bordered-padding: 9px 20px 9px 10px !default;\n$--checkbox-bordered-medium-padding: 7px 20px 7px 10px !default;\n$--checkbox-bordered-small-padding: 5px 15px 5px 10px !default;\n$--checkbox-bordered-mini-padding: 3px 15px 3px 10px !default;\n$--checkbox-bordered-medium-input-height: 14px !default;\n$--checkbox-bordered-medium-input-width: 14px !default;\n$--checkbox-bordered-medium-height: 36px !default;\n$--checkbox-bordered-small-input-height: 12px !default;\n$--checkbox-bordered-small-input-width: 12px !default;\n$--checkbox-bordered-small-height: 32px !default;\n$--checkbox-bordered-mini-input-height: 12px !default;\n$--checkbox-bordered-mini-input-width: 12px !default;\n$--checkbox-bordered-mini-height: 28px !default;\n\n$--checkbox-button-font-size: $--font-size-base !default;\n$--checkbox-button-checked-fill: $--color-primary !default;\n$--checkbox-button-checked-color: $--color-white !default;\n$--checkbox-button-checked-border-color: $--color-primary !default;\n\n\n\n/* Radio\n-------------------------- */\n$--radio-font-size: 14px !default;\n$--radio-font-weight: $--font-weight-primary !default;\n$--radio-color: $--color-text-regular !default;\n$--radio-input-height: 14px !default;\n$--radio-input-width: 14px !default;\n$--radio-input-border-radius: $--border-radius-circle !default;\n$--radio-input-fill: $--color-white !default;\n$--radio-input-border: $--border-base !default;\n$--radio-input-border-color: $--border-color-base !default;\n$--radio-icon-color: $--color-white !default;\n\n$--radio-disabled-input-border-color: $--disabled-border-base !default;\n$--radio-disabled-input-fill: $--disabled-fill-base !default;\n$--radio-disabled-icon-color: $--disabled-fill-base !default;\n\n$--radio-disabled-checked-input-border-color: $--disabled-border-base !default;\n$--radio-disabled-checked-input-fill: $--disabled-fill-base !default;\n$--radio-disabled-checked-icon-color: $--color-text-placeholder !default;\n\n$--radio-checked-text-color: $--color-primary !default;\n$--radio-checked-input-border-color: $--color-primary !default;\n$--radio-checked-input-fill: $--color-white !default;\n$--radio-checked-icon-color: $--color-primary !default;\n\n$--radio-input-border-color-hover: $--color-primary !default;\n\n$--radio-bordered-height: 40px !default;\n$--radio-bordered-padding: 12px 20px 0 10px !default;\n$--radio-bordered-medium-padding: 10px 20px 0 10px !default;\n$--radio-bordered-small-padding: 8px 15px 0 10px !default;\n$--radio-bordered-mini-padding: 6px 15px 0 10px !default;\n$--radio-bordered-medium-input-height: 14px !default;\n$--radio-bordered-medium-input-width: 14px !default;\n$--radio-bordered-medium-height: 36px !default;\n$--radio-bordered-small-input-height: 12px !default;\n$--radio-bordered-small-input-width: 12px !default;\n$--radio-bordered-small-height: 32px !default;\n$--radio-bordered-mini-input-height: 12px !default;\n$--radio-bordered-mini-input-width: 12px !default;\n$--radio-bordered-mini-height: 28px !default;\n\n$--radio-button-font-size: $--font-size-base !default;\n$--radio-button-checked-fill: $--color-primary !default;\n$--radio-button-checked-color: $--color-white !default;\n$--radio-button-checked-border-color: $--color-primary !default;\n$--radio-button-disabled-checked-fill: $--border-color-extra-light !default;\n\n/* Select\n-------------------------- */\n$--select-border-color-hover: $--border-color-hover !default;\n$--select-disabled-border: $--disabled-border-base !default;\n$--select-font-size: $--font-size-base !default;\n$--select-close-hover-color: $--color-text-secondary !default;\n\n$--select-input-color: $--color-text-placeholder !default;\n$--select-multiple-input-color: #666 !default;\n$--select-input-focus-background: $--color-primary !default;\n$--select-input-font-size: 14px !default;\n\n$--select-option-color: $--color-text-regular !default;\n$--select-option-disabled-color: $--color-text-placeholder !default;\n$--select-option-disabled-background: $--color-white !default;\n$--select-option-height: 34px !default;\n$--select-option-hover-background: $--border-color-base !default;\n$--select-option-selected: $--color-primary !default;\n$--select-option-selected-hover: red !default;\n\n$--select-group-color: $--color-info !default;\n$--select-group-height: 30px !default;\n$--select-group-font-size: 12px !default;\n\n$--select-dropdown-background: $--color-white !default;\n$--select-dropdown-shadow: $--box-shadow-light !default;\n$--select-dropdown-empty-color: #999 !default;\n$--select-dropdown-max-height: 274px !default;\n$--select-dropdown-padding: 6px 0 !default;\n$--select-dropdown-empty-padding: 10px 0 !default;\n$--select-dropdown-border: solid 1px $--border-color-light !default;\n\n/* Alert\n-------------------------- */\n$--alert-padding: 8px 16px !default;\n$--alert-border-radius: $--border-radius-base !default;\n$--alert-title-font-size: 13px !default;\n$--alert-description-font-size: 12px !default;\n$--alert-close-font-size: 12px !default;\n$--alert-close-customed-font-size: 13px !default;\n\n$--alert-success-color: $--color-success-lighter !default;\n$--alert-info-color: $--color-info-lighter !default;\n$--alert-warning-color: $--color-warning-lighter !default;\n$--alert-danger-color: $--color-danger-lighter !default;\n\n$--alert-icon-size: 16px !default;\n$--alert-icon-large-size: 28px !default;\n\n/* Message Box\n-------------------------- */\n$--msgbox-width: 420px !default;\n$--msgbox-border-radius: 4px !default;\n$--msgbox-font-size: $--font-size-large !default;\n$--msgbox-content-font-size: $--font-size-base !default;\n$--msgbox-content-color: $--color-text-regular !default;\n$--msgbox-error-font-size: 12px !default;\n$--msgbox-padding-primary: 15px !default;\n\n$--msgbox-success-color: $--color-success !default;\n$--msgbox-info-color: $--color-info !default;\n$--msgbox-warning-color: $--color-warning !default;\n$--msgbox-danger-color: $--color-danger !default;\n\n/* Message\n-------------------------- */\n$--message-shadow: $--box-shadow-base !default;\n$--message-min-width: 380px !default;\n$--message-background-color: #edf2fc !default;\n$--message-padding: 15px 15px 15px 20px !default;\n$--message-content-color: $--color-text-regular !default;\n$--message-close-color: $--color-text-placeholder !default;\n$--message-close-size: 16px !default;\n$--message-close-hover-color: $--color-text-secondary !default;\n\n$--message-success-color: $--color-success !default;\n$--message-info-color: $--color-info !default;\n$--message-warning-color: $--color-warning !default;\n$--message-danger-color: $--color-danger !default;\n\n/* Notification\n-------------------------- */\n$--notification-width: 330px !default;\n$--notification-padding: 14px 26px 14px 13px !default;\n$--notification-radius: 8px !default;\n$--notification-shadow: $--box-shadow-light !default;\n$--notification-border-color: $--border-color-lighter !default;\n$--notification-icon-size: 24px !default;\n$--notification-close-font-size: $--message-close-size !default;\n$--notification-group-margin: 13px !default;\n$--notification-font-size: $--font-size-base !default;\n$--notification-color: $--color-text-regular !default;\n$--notification-title-font-size: 16px !default;\n$--notification-title-color: $--color-text-primary !default;\n\n$--notification-close-color: $--color-text-secondary !default;\n$--notification-close-hover-color: $--color-text-regular !default;\n\n$--notification-success-color: $--color-success !default;\n$--notification-info-color: $--color-info !default;\n$--notification-warning-color: $--color-warning !default;\n$--notification-danger-color: $--color-danger !default;\n\n/* Input\n-------------------------- */\n$--input-font-size: $--font-size-base !default;\n$--input-color: $--color-text-regular !default;\n$--input-width: 140px !default;\n$--input-height: 40px !default;\n$--input-border: $--border-base !default;\n$--input-border-color: $--border-color-base !default;\n$--input-border-radius: $--border-radius-base !default;\n$--input-border-color-hover: $--border-color-hover !default;\n$--input-fill: $--color-white !default;\n$--input-fill-disabled: $--disabled-fill-base !default;\n$--input-color-disabled: $--font-color-disabled-base !default;\n$--input-icon-color: $--color-text-placeholder !default;\n$--input-placeholder-color: $--color-text-placeholder !default;\n$--input-max-width: 314px !default;\n\n$--input-hover-border: $--border-color-hover !default;\n$--input-clear-hover-color: $--color-text-secondary !default;\n\n$--input-focus-border: $--color-primary !default;\n$--input-focus-fill: $--color-white !default;\n\n$--input-disabled-fill: $--disabled-fill-base !default;\n$--input-disabled-border: $--disabled-border-base !default;\n$--input-disabled-color: $--disabled-color-base !default;\n$--input-disabled-placeholder-color: $--color-text-placeholder !default;\n\n$--input-medium-font-size: 14px !default;\n$--input-medium-height: 36px !default;\n\n$--input-small-font-size: 13px !default;\n$--input-small-height: 32px !default;\n\n$--input-mini-font-size: 12px !default;\n$--input-mini-height: 28px !default;\n\n/* Cascader\n-------------------------- */\n$--cascader-menu-fill: $--fill-base !default;\n$--cascader-menu-font-size: $--font-size-base !default;\n$--cascader-menu-radius: $--border-radius-base !default;\n$--cascader-menu-border: $--border-base !default;\n$--cascader-menu-border-color: $--border-color-base !default;\n$--cascader-menu-border-width: $--border-width-base !default;\n$--cascader-menu-color: $--color-text-regular !default;\n$--cascader-menu-option-color-active: $--color-text-secondary !default;\n$--cascader-menu-option-fill-active: rgba($--color-text-secondary, 0.12) !default;\n$--cascader-menu-option-color-hover: $--color-text-regular !default;\n$--cascader-menu-option-fill-hover: rgba($--color-text-primary, 0.06) !default;\n$--cascader-menu-option-color-disabled: #999 !default;\n$--cascader-menu-option-fill-disabled: rgba($--color-black, 0.06) !default;\n$--cascader-menu-option-empty-color: #666 !default;\n$--cascader-menu-group-color: #999 !default;\n$--cascader-menu-shadow: 0 1px 2px rgba($--color-black, 0.14), 0 0 3px rgba($--color-black, 0.14) !default;\n$--cascader-menu-option-pinyin-color: #999 !default;\n$--cascader-menu-submenu-shadow: 1px 1px 2px rgba($--color-black, 0.14), 1px 0 2px rgba($--color-black, 0.14) !default;\n\n/* Group\n-------------------------- */\n$--group-option-flex: 0 0 (1/5) * 100% !default;\n$--group-option-offset-bottom: 12px !default;\n$--group-option-fill-hover: rgba($--color-black, 0.06) !default;\n$--group-title-color: $--color-black !default;\n$--group-title-font-size: $--font-size-base !default;\n$--group-title-width: 66px !default;\n\n/* Tab\n-------------------------- */\n$--tab-font-size: $--font-size-base !default;\n$--tab-border-line: 1px solid #e4e4e4 !default;\n$--tab-header-color-active: $--color-text-secondary !default;\n$--tab-header-color-hover: $--color-text-regular !default;\n$--tab-header-color: $--color-text-regular !default;\n$--tab-header-fill-active: rgba($--color-black, 0.06) !default;\n$--tab-header-fill-hover: rgba($--color-black, 0.06) !default;\n$--tab-vertical-header-width: 90px !default;\n$--tab-vertical-header-count-color: $--color-white !default;\n$--tab-vertical-header-count-fill: $--color-text-secondary !default;\n\n/* Button\n-------------------------- */\n$--button-font-size: 14px !default;\n$--button-font-weight: $--font-weight-primary !default;\n$--button-border-radius: $--border-radius-base !default;\n$--button-padding-vertical: 12px !default;\n$--button-padding-horizontal: 20px !default;\n\n$--button-medium-font-size: 14px !default;\n$--button-medium-border-radius: $--border-radius-base !default;\n$--button-medium-padding-vertical: 10px !default;\n$--button-medium-padding-horizontal: 20px !default;\n\n$--button-small-font-size: 12px !default;\n$--button-small-border-radius: #{$--border-radius-base - 1} !default;\n$--button-small-padding-vertical: 9px !default;\n$--button-small-padding-horizontal: 15px !default;\n\n$--button-mini-font-size: 12px !default;\n$--button-mini-border-radius: #{$--border-radius-base - 1} !default;\n$--button-mini-padding-vertical: 7px !default;\n$--button-mini-padding-horizontal: 15px !default;\n\n$--button-default-color: $--color-text-regular !default;\n$--button-default-fill: $--color-white !default;\n$--button-default-border: $--border-color-base !default;\n\n$--button-disabled-color: $--color-text-placeholder !default;\n$--button-disabled-fill: $--color-white !default;\n$--button-disabled-border: $--border-color-lighter !default;\n\n$--button-primary-border: $--color-primary !default;\n$--button-primary-color: $--color-white !default;\n$--button-primary-fill: $--color-primary !default;\n\n$--button-success-border: $--color-success !default;\n$--button-success-color: $--color-white !default;\n$--button-success-fill: $--color-success !default;\n\n$--button-warning-border: $--color-warning !default;\n$--button-warning-color: $--color-white !default;\n$--button-warning-fill: $--color-warning !default;\n\n$--button-danger-border: $--color-danger !default;\n$--button-danger-color: $--color-white !default;\n$--button-danger-fill: $--color-danger !default;\n\n$--button-info-border: $--color-info !default;\n$--button-info-color: $--color-white !default;\n$--button-info-fill: $--color-info !default;\n\n$--button-hover-tint-percent: 20% !default;\n$--button-active-shade-percent: 10% !default;\n\n\n/* cascader\n-------------------------- */\n$--cascader-height: 200px !default;\n\n/* Switch\n-------------------------- */\n$--switch-on-color: $--color-primary !default;\n$--switch-off-color: $--border-color-base !default;\n$--switch-disabled-color: $--border-color-lighter !default;\n$--switch-disabled-text-color: $--color-text-placeholder !default;\n\n$--switch-font-size: $--font-size-base !default;\n$--switch-core-border-radius: 10px !default;\n$--switch-width: 40px !default;\n$--switch-height: 20px !default;\n$--switch-button-size: 16px !default;\n\n/* Dialog\n-------------------------- */\n$--dialog-background-color: $--color-primary-light-4 !default;\n$--dialog-box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3) !default;\n$--dialog-close-hover-color: $--color-primary !default;\n$--dialog-title-font-size: $--font-size-large !default;\n$--dialog-font-size: 14px !default;\n$--dialog-line-height: $--font-line-height-primary !default;\n$--dialog-padding-primary: 20px !default;\n\n/* Table\n-------------------------- */\n$--table-border-color: $--border-color-lighter !default;\n$--table-border: 1px solid $--table-border-color !default;\n$--table-text-color: $--color-text-regular !default;\n$--table-header-color: $--color-text-secondary !default;\n$--table-row-hover-background: $--background-color-base !default;\n$--table-current-row-background: $--color-primary-light-9 !default;\n$--table-header-background: $--color-white !default;\n$--table-footer-background: $--color-text-placeholder !default;\n$--table-fixed-box-shadow: 0 0 10px rgba(0, 0, 0, .12) !default;\n\n/* Pagination\n-------------------------- */\n$--pagination-font-size: 13px !default;\n$--pagination-fill: $--color-white !default;\n$--pagination-color: $--color-text-primary !default;\n$--pagination-border-radius: 3px !default;\n$--pagination-button-color: $--color-text-primary !default;\n$--pagination-button-width: 35.5px !default;\n$--pagination-button-height: 28px !default;\n$--pagination-button-disabled-color: $--color-text-placeholder !default;\n$--pagination-button-disabled-fill: $--color-white !default;\n$--pagination-hover-fill: $--color-primary !default;\n$--pagination-hover-color: $--color-white !default;\n\n/* Popover\n-------------------------- */\n$--popover-fill: $--color-white !default;\n$--popover-font-size: $--font-size-base !default;\n$--popover-border-color: $--border-color-lighter !default;\n$--popover-arrow-size: 6px !default;\n$--popover-padding: 12px !default;\n$--popover-padding-large: 18px 20px !default;\n$--popover-title-font-size: 16px !default;\n$--popover-title-color: $--color-text-primary !default;\n\n/* Tooltip\n-------------------------- */\n$--tooltip-fill: $--color-text-primary !default;\n$--tooltip-color: $--color-white !default;\n$--tooltip-font-size: 12px !default;\n$--tooltip-border-color: $--color-text-primary !default;\n$--tooltip-arrow-size: 6px !default;\n$--tooltip-padding: 10px !default;\n\n/* Tag\n-------------------------- */\n$--tag-padding: 0 10px !default;\n$--tag-fill: rgba($--color-primary, 0.10) !default;\n$--tag-color: $--color-primary !default;\n$--tag-border: rgba($--color-primary, 0.20) !default;\n$--tag-font-size: 12px !default;\n$--tag-border-radius: 4px !default;\n\n$--tag-info-fill: rgba($--color-info, 0.10) !default;\n$--tag-info-border: rgba($--color-info, 0.20) !default;\n$--tag-info-color: $--color-info !default;\n\n$--tag-primary-fill: rgba($--color-primary, 0.10) !default;\n$--tag-primary-border: rgba($--color-primary, 0.20) !default;\n$--tag-primary-color: $--color-primary !default;\n\n$--tag-success-fill: rgba($--color-success, 0.10) !default;\n$--tag-success-border: rgba($--color-success, 0.20) !default;\n$--tag-success-color: $--color-success !default;\n\n$--tag-warning-fill: rgba($--color-warning, 0.10) !default;\n$--tag-warning-border: rgba($--color-warning, 0.20) !default;\n$--tag-warning-color: $--color-warning !default;\n\n$--tag-danger-fill: rgba($--color-danger, 0.10) !default;\n$--tag-danger-border: rgba($--color-danger, 0.20) !default;\n$--tag-danger-color: $--color-danger !default;\n\n/* Tree\n-------------------------- */\n$--tree-node-hover-color: $--background-color-base !default;\n$--tree-text-color: $--color-text-regular !default;\n$--tree-expand-icon-color: $--color-text-placeholder !default;\n\n/* Dropdown\n-------------------------- */\n$--dropdown-menu-box-shadow: $--box-shadow-light !default;\n$--dropdown-menuItem-hover-fill: $--color-primary-light-9 !default;\n$--dropdown-menuItem-hover-color: $--link-color !default;\n\n/* Badge\n-------------------------- */\n$--badge-fill: $--color-danger !default;\n$--badge-radius: 10px !default;\n$--badge-font-size: 12px !default;\n$--badge-padding: 6px !default;\n$--badge-size: 18px !default;\n\n/* Card\n--------------------------*/\n$--card-border-color: $--border-color-lighter !default;\n$--card-border-radius: 4px !default;\n$--card-padding: 20px !default;\n\n/* Slider\n--------------------------*/\n$--slider-main-background-color: $--color-primary !default;\n$--slider-runway-background-color: $--border-color-light !default;\n$--slider-button-hover-color: mix($--color-primary, black, 97%) !default;\n$--slider-stop-background-color: $--color-white !default;\n$--slider-disable-color: $--color-text-placeholder !default;\n\n$--slider-margin: 16px 0 !default;\n$--slider-border-radius: 3px !default;\n$--slider-height: 6px !default;\n$--slider-button-size: 16px !default;\n$--slider-button-wrapper-size: 36px !default;\n$--slider-button-wrapper-offset: -15px !default;\n\n/* Steps\n--------------------------*/\n$--steps-border-color: $--disabled-border-base !default;\n$--steps-border-radius: 4px !default;\n$--steps-padding: 20px !default;\n\n/* Menu\n--------------------------*/\n$--menu-item-font-size: $--font-size-base !default;\n$--menu-item-color: $--color-text-primary !default;\n$--menu-item-fill: $--color-white !default;\n$--menu-item-hover-fill: $--color-primary-light-9 !default;\n\n/* Rate\n--------------------------*/\n$--rate-height: 20px !default;\n$--rate-font-size: $--font-size-base !default;\n$--rate-icon-size: 18px !default;\n$--rate-icon-margin: 6px !default;\n$--rate-icon-color: $--color-text-placeholder !default;\n\n/* DatePicker\n--------------------------*/\n$--datepicker-color: $--color-text-regular !default;\n$--datepicker-off-color: $--color-text-placeholder !default;\n$--datepicker-header-color: $--color-text-regular !default;\n$--datepicker-icon-color: $--color-text-primary !default;\n$--datepicker-border-color: $--disabled-border-base !default;\n$--datepicker-inner-border-color: #e4e4e4 !default;\n$--datepicker-inrange-color: $--border-color-extra-light !default;\n$--datepicker-inrange-hover-color: $--border-color-extra-light !default;\n$--datepicker-active-color: $--color-primary !default;\n$--datepicker-text-hover-color: $--color-primary !default;\n$--datepicker-cell-hover-color: #fff !default;\n\n/* Loading\n--------------------------*/\n$--loading-spinner-size: 42px !default;\n$--loading-fullscreen-spinner-size: 50px !default;\n\n/* Scrollbar\n--------------------------*/\n$--scrollbar-background-color: rgba($--color-text-secondary, .3) !default;\n$--scrollbar-hover-background-color: rgba($--color-text-secondary, .5) !default;\n\n/* Carousel\n--------------------------*/\n$--carousel-arrow-font-size: 12px !default;\n$--carousel-arrow-size: 36px !default;\n$--carousel-arrow-background: rgba(31, 45, 61, 0.11) !default;\n$--carousel-arrow-hover-background: rgba(31, 45, 61, 0.23) !default;\n$--carousel-indicator-width: 30px !default;\n$--carousel-indicator-height: 2px !default;\n$--carousel-indicator-padding-horizontal: 4px !default;\n$--carousel-indicator-padding-vertical: 12px !default;\n$--carousel-indicator-out-color: $--border-color-hover !default;\n\n/* Collapse\n--------------------------*/\n$--collapse-border-color: $--border-color-lighter !default;\n$--collapse-header-height: 48px !default;\n$--collapse-header-padding: 20px !default;\n$--collapse-header-fill: $--color-white !default;\n$--collapse-header-color: $--color-text-primary !default;\n$--collapse-header-size: 13px !default;\n$--collapse-content-fill: $--color-white !default;\n$--collapse-content-size: 13px !default;\n$--collapse-content-color: $--color-text-primary !default;\n\n/* Transfer\n--------------------------*/\n$--transfer-border-color: $--border-color-lighter !default;\n$--transfer-border-radius: $--border-radius-base !default;\n$--transfer-panel-width: 200px !default;\n$--transfer-panel-header-height: 40px !default;\n$--transfer-panel-header-background: $--background-color-base !default;\n$--transfer-panel-footer-height: 40px !default;\n$--transfer-panel-body-height: 246px !default;\n$--transfer-item-height: 30px !default;\n$--transfer-item-hover-background: $--color-text-secondary !default;\n$--transfer-filter-height: 32px !default;\n\n/* Header\n  --------------------------*/\n$--header-padding: 0 20px !default;\n\n/* Footer\n--------------------------*/\n$--footer-padding: 0 20px !default;\n\n/* Main\n--------------------------*/\n$--main-padding: 20px !default;\n\n/* Break-point\n--------------------------*/\n$--sm: 768px !default;\n$--md: 992px !default;\n$--lg: 1200px !default;\n$--xl: 1920px !default;\n\n$--breakpoints: (\n  'xs' : (max-width: $--sm - 1),\n  'sm' : (min-width: $--sm),\n  'md' : (min-width: $--md),\n  'lg' : (min-width: $--lg),\n  'xl' : (min-width: $--xl)\n);\n\n$--breakpoints-spec: (\n  'xs-only' : (max-width: $--sm - 1),\n  'sm-and-up' : (min-width: $--sm),\n  'sm-only': \"(min-width: #{$--sm}) and (max-width: #{$--md} - 1)\",\n  'sm-and-down': (max-width: $--md - 1),\n  'md-and-up' : (min-width: $--md),\n  'md-only': \"(min-width: #{$--md}) and (max-width: #{$--lg } - 1)\",\n  'md-and-down': (max-width: $--lg - 1),\n  'lg-and-up' : (min-width: $--lg),\n  'lg-only': \"(min-width: #{$--lg}) and (max-width: #{$--xl } - 1)\",\n  'lg-and-down': (max-width: $--xl - 1),\n  'xl-only' : (min-width: $--xl),\n);\n```","source":"_posts/vue.md","raw":"---\ntitle: vue\ndate: 2019-7-13 21:35:13\ncategories:\n- VUE\ntags: \n    - VUE\n---\n# IntellIJ IDEA 配置支持Vue\n参考：https://www.jianshu.com/p/01d832e028ea\n第一步：先安装vue插件:\nfile --> settings --> plugins，然后什么都不用输入，直接点击Browse repositories... 紧接着左上方输入“vue”，点击搜索结果里的vue.js，右边会有绿色install按钮，安装成功后重启idea，这样idea就能识别.vue文件了。\n第二步：设置vue新建文件模板。\n# 安装Element-ui \n\n# vue2.0 + element UI 中 el-table 数据导出Excel\n最近后台项目中有需要将游戏用户提交的返利数据信息导出为excel表的形式，所以对此功能进行了简单的总结：\n## 安装相关依赖\n```bash\n主要是两个依赖:(xlsx 和 file-saver)\nnpm install --save xlsx file-saver\n```\n对于这两个插件使用，github上边有更加详细的参考\n```bash\nhttps://github.com/SheetJS/js-xlsx](https://github.com/SheetJS/js-xlsx)\nhttps://github.com/eligrey/FileSaver.js](https://github.com/eligrey/FileSaver.js\n```\n## 在组件头里边引入插件\n(测试的时候，下边代码放到入口js文件main.js的时候没有效果，遗留问题，有待解决)（放到组件头里边能够实现效果）\n```bash\nimport FileSaver from 'file-saver'\nimport XLSX from 'xlsx'\n```\n## 在对应组件里边methods里边写一个方法\n（到处的时候进行调用）\n```bash\nexportExcel () {\n    /* generate workbook object from table */\n    let wb = XLSX.utils.table_to_book(document.querySelector('#rebateSetTable'));\n    /* get binary string as output */\n    let wbout = XLSX.write(wb, { bookType: 'xlsx', bookSST: true, type: 'array' });\n    try {\n        FileSaver.saveAs(new Blob([wbout], { type: 'application/octet-stream' }), '用户提交返利表.xlsx');\n    } catch (e)\n    {\n        if (typeof console !== 'undefined')\n            console.log(e, wbout)\n    }\n    return wbout\n },\n```\n提示：\n上边方法中：XLSX.uitls.table_to_book( 放入的是table 的DOM 节点 ) ，sheetjs.xlsx 即为导出表格的名字，可修改！\n## 点击导出按钮执行 exportExcel 的方法即可 。\n```bash\n<div class=\"export\">\n     <el-button @click=\"exportExcel\" style=\"margin-top: 2px;\" size=\"medium\" type=\"success\">导出</el-button>\n</div>\n```\n\n# vue element-ui自定义主题样式\n\n### 新建一个element-variables.scss，并在(main|app).js入口文件引入\n```bash\nimport Vue from 'vue'\n\nimport Element from 'element-ui'\nimport '@/styles/element-variables.scss'\n```\n\n### 在 element-variables.scss，修改你要的主题或组件预设的样式变量即可\n```bash\n/* 改变 主题/样式相关 变量 */\n$--color-primary: #1ABCB0;\n$--select-option-hover-background: #def1f2;\n$--select-option-selected-hover: #1abcb0;\n$--table-row-hover-background: #f2f2f2;\n$--table-header-color: #444;\n$--pagination-button-disabled-fill: transparent;\n$--pagination-fill: transparent;\n\n/* 改变 icon 字体路径变量，必需 */\n$--font-path: '~element-ui/lib/theme-chalk/fonts';\n\n/* 改变 路径变量，必需 */\n@import \"~element-ui/packages/theme-chalk/src/index\";\n```\n### 默认 element-variables.scss 全部变量内容\n```bash\n/* Element Chalk Variables */\n\n/* Transition\n-------------------------- */\n$--all-transition: all .3s cubic-bezier(.645,.045,.355,1) !default;\n$--fade-transition: opacity 300ms cubic-bezier(0.23, 1, 0.32, 1) !default;\n$--fade-linear-transition: opacity 200ms linear !default;\n$--md-fade-transition: transform 300ms cubic-bezier(0.23, 1, 0.32, 1), opacity 300ms cubic-bezier(0.23, 1, 0.32, 1) !default;\n$--border-transition-base: border-color .2s cubic-bezier(.645,.045,.355,1) !default;\n$--color-transition-base: color .2s cubic-bezier(.645,.045,.355,1) !default;\n\n/* Colors\n-------------------------- */\n$--color-white: #fff !default;\n$--color-black: #000 !default;\n\n$--color-primary: #1ABCB0 !default;\n$--color-primary-light-1: mix($--color-white, $--color-primary, 10%) !default; /* 53a8ff */\n$--color-primary-light-2: mix($--color-white, $--color-primary, 20%) !default; /* 66b1ff */\n$--color-primary-light-3: mix($--color-white, $--color-primary, 30%) !default; /* 79bbff */\n$--color-primary-light-4: mix($--color-white, $--color-primary, 40%) !default; /* 8cc5ff */\n$--color-primary-light-5: mix($--color-white, $--color-primary, 50%) !default; /* a0cfff */\n$--color-primary-light-6: mix($--color-white, $--color-primary, 60%) !default; /* b3d8ff */\n$--color-primary-light-7: mix($--color-white, $--color-primary, 70%) !default; /* c6e2ff */\n$--color-primary-light-8: mix($--color-white, $--color-primary, 80%) !default; /* d9ecff */\n$--color-primary-light-9: mix($--color-white, $--color-primary, 90%) !default; /* ecf5ff */\n\n$--color-success: #67c23a !default;\n$--color-warning: #e6a23c !default;\n$--color-danger: #f56c6c !default;\n$--color-info: #909399 !default;\n\n$--color-success-light: mix($--color-white, $--color-success, 80%) !default;\n$--color-warning-light: mix($--color-white, $--color-warning, 80%) !default;\n$--color-danger-light: mix($--color-white, $--color-danger, 80%) !default;\n$--color-info-light: mix($--color-white, $--color-info, 80%) !default;\n\n$--color-success-lighter: mix($--color-white, $--color-success, 90%) !default;\n$--color-warning-lighter: mix($--color-white, $--color-warning, 90%) !default;\n$--color-danger-lighter: mix($--color-white, $--color-danger, 90%) !default;\n$--color-info-lighter: mix($--color-white, $--color-info, 90%) !default;\n\n$--color-text-primary: #303133 !default;\n$--color-text-regular: #606266 !default;\n$--color-text-secondary: #909399 !default;\n$--color-text-placeholder: #c0c4cc !default;\n\n/* Link\n-------------------------- */\n$--link-color: $--color-primary-light-2 !default;\n$--link-hover-color: $--color-primary !default;\n\n/* Background\n-------------------------- */\n$--background-color-base: #f5f7fa !default;\n\n/* Border\n-------------------------- */\n$--border-width-base: 1px !default;\n$--border-style-base: solid !default;\n$--border-color-base: #dcdfe6 !default;\n$--border-color-light: #e4e7ed !default;\n$--border-color-lighter: #ebeef5 !default;\n$--border-color-extra-light: #f2f6fc !default;\n$--border-color-hover: $--color-text-placeholder !default;\n$--border-base: $--border-width-base $--border-style-base $--border-color-base !default;\n$--border-radius-base: 4px !default;\n$--border-radius-small: 2px !default;\n$--border-radius-circle: 100% !default;\n\n/* Box-shadow\n-------------------------- */\n$--box-shadow-base: 0 2px 4px rgba(0, 0, 0, .12), 0 0 6px rgba(0, 0, 0, .04) !default;\n$--box-shadow-dark: 0 2px 4px rgba(0, 0, 0, .12), 0 0 6px rgba(0, 0, 0, .12) !default;\n$--box-shadow-light: 0 2px 12px 0 rgba(0, 0, 0, 0.1) !default;\n\n/* Fill\n-------------------------- */\n$--fill-base: $--color-white !default;\n\n/* Font\n-------------------------- */\n$--font-path: 'fonts' !default;\n$--font-size-base: 14px !default;\n$--font-size-small: 13px !default;\n$--font-size-large: 18px !default;\n$--font-color-disabled-base: #bbb !default;\n$--font-weight-primary: 500 !default;\n$--font-line-height-primary: 24px !default;\n\n/* Size\n-------------------------- */\n$--size-base: 14px !default;\n\n/* z-index\n-------------------------- */\n$--index-normal: 1 !default;\n$--index-top: 1000 !default;\n$--index-popper: 2000 !default;\n\n/* Disable base\n-------------------------- */\n$--disabled-fill-base: $--background-color-base !default;\n$--disabled-color-base: $--color-text-placeholder !default;\n$--disabled-border-base: $--border-color-light !default;\n\n/* Icon\n-------------------------- */\n$--icon-color: #666 !default;\n$--icon-color-base: $--color-info !default;\n\n/* Checkbox\n-------------------------- */\n$--checkbox-font-size: 14px !default;\n$--checkbox-font-weight: $--font-weight-primary !default;\n$--checkbox-color: $--color-text-regular !default;\n$--checkbox-input-height: 14px !default;\n$--checkbox-input-width: 14px !default;\n$--checkbox-input-border-radius: $--border-radius-small !default;\n$--checkbox-input-fill: $--color-white !default;\n$--checkbox-input-border: $--border-base !default;\n$--checkbox-input-border-color: $--border-color-base !default;\n$--checkbox-icon-color: $--color-white !default;\n\n$--checkbox-disabled-input-border-color: $--border-color-base !default;\n$--checkbox-disabled-input-fill: #edf2fc !default;\n$--checkbox-disabled-icon-color: $--color-text-placeholder !default;\n\n$--checkbox-disabled-checked-input-fill: $--border-color-extra-light !default;\n$--checkbox-disabled-checked-input-border-color: $--border-color-base !default;\n$--checkbox-disabled-checked-icon-color: $--color-text-placeholder !default;\n\n$--checkbox-checked-text-color: $--color-primary !default;\n$--checkbox-checked-input-border-color: $--color-primary !default;\n$--checkbox-checked-input-fill: $--color-primary !default;\n$--checkbox-checked-icon-color: $--fill-base !default;\n\n$--checkbox-input-border-color-hover: $--color-primary !default;\n\n$--checkbox-bordered-height: 40px !default;\n$--checkbox-bordered-padding: 9px 20px 9px 10px !default;\n$--checkbox-bordered-medium-padding: 7px 20px 7px 10px !default;\n$--checkbox-bordered-small-padding: 5px 15px 5px 10px !default;\n$--checkbox-bordered-mini-padding: 3px 15px 3px 10px !default;\n$--checkbox-bordered-medium-input-height: 14px !default;\n$--checkbox-bordered-medium-input-width: 14px !default;\n$--checkbox-bordered-medium-height: 36px !default;\n$--checkbox-bordered-small-input-height: 12px !default;\n$--checkbox-bordered-small-input-width: 12px !default;\n$--checkbox-bordered-small-height: 32px !default;\n$--checkbox-bordered-mini-input-height: 12px !default;\n$--checkbox-bordered-mini-input-width: 12px !default;\n$--checkbox-bordered-mini-height: 28px !default;\n\n$--checkbox-button-font-size: $--font-size-base !default;\n$--checkbox-button-checked-fill: $--color-primary !default;\n$--checkbox-button-checked-color: $--color-white !default;\n$--checkbox-button-checked-border-color: $--color-primary !default;\n\n\n\n/* Radio\n-------------------------- */\n$--radio-font-size: 14px !default;\n$--radio-font-weight: $--font-weight-primary !default;\n$--radio-color: $--color-text-regular !default;\n$--radio-input-height: 14px !default;\n$--radio-input-width: 14px !default;\n$--radio-input-border-radius: $--border-radius-circle !default;\n$--radio-input-fill: $--color-white !default;\n$--radio-input-border: $--border-base !default;\n$--radio-input-border-color: $--border-color-base !default;\n$--radio-icon-color: $--color-white !default;\n\n$--radio-disabled-input-border-color: $--disabled-border-base !default;\n$--radio-disabled-input-fill: $--disabled-fill-base !default;\n$--radio-disabled-icon-color: $--disabled-fill-base !default;\n\n$--radio-disabled-checked-input-border-color: $--disabled-border-base !default;\n$--radio-disabled-checked-input-fill: $--disabled-fill-base !default;\n$--radio-disabled-checked-icon-color: $--color-text-placeholder !default;\n\n$--radio-checked-text-color: $--color-primary !default;\n$--radio-checked-input-border-color: $--color-primary !default;\n$--radio-checked-input-fill: $--color-white !default;\n$--radio-checked-icon-color: $--color-primary !default;\n\n$--radio-input-border-color-hover: $--color-primary !default;\n\n$--radio-bordered-height: 40px !default;\n$--radio-bordered-padding: 12px 20px 0 10px !default;\n$--radio-bordered-medium-padding: 10px 20px 0 10px !default;\n$--radio-bordered-small-padding: 8px 15px 0 10px !default;\n$--radio-bordered-mini-padding: 6px 15px 0 10px !default;\n$--radio-bordered-medium-input-height: 14px !default;\n$--radio-bordered-medium-input-width: 14px !default;\n$--radio-bordered-medium-height: 36px !default;\n$--radio-bordered-small-input-height: 12px !default;\n$--radio-bordered-small-input-width: 12px !default;\n$--radio-bordered-small-height: 32px !default;\n$--radio-bordered-mini-input-height: 12px !default;\n$--radio-bordered-mini-input-width: 12px !default;\n$--radio-bordered-mini-height: 28px !default;\n\n$--radio-button-font-size: $--font-size-base !default;\n$--radio-button-checked-fill: $--color-primary !default;\n$--radio-button-checked-color: $--color-white !default;\n$--radio-button-checked-border-color: $--color-primary !default;\n$--radio-button-disabled-checked-fill: $--border-color-extra-light !default;\n\n/* Select\n-------------------------- */\n$--select-border-color-hover: $--border-color-hover !default;\n$--select-disabled-border: $--disabled-border-base !default;\n$--select-font-size: $--font-size-base !default;\n$--select-close-hover-color: $--color-text-secondary !default;\n\n$--select-input-color: $--color-text-placeholder !default;\n$--select-multiple-input-color: #666 !default;\n$--select-input-focus-background: $--color-primary !default;\n$--select-input-font-size: 14px !default;\n\n$--select-option-color: $--color-text-regular !default;\n$--select-option-disabled-color: $--color-text-placeholder !default;\n$--select-option-disabled-background: $--color-white !default;\n$--select-option-height: 34px !default;\n$--select-option-hover-background: $--border-color-base !default;\n$--select-option-selected: $--color-primary !default;\n$--select-option-selected-hover: red !default;\n\n$--select-group-color: $--color-info !default;\n$--select-group-height: 30px !default;\n$--select-group-font-size: 12px !default;\n\n$--select-dropdown-background: $--color-white !default;\n$--select-dropdown-shadow: $--box-shadow-light !default;\n$--select-dropdown-empty-color: #999 !default;\n$--select-dropdown-max-height: 274px !default;\n$--select-dropdown-padding: 6px 0 !default;\n$--select-dropdown-empty-padding: 10px 0 !default;\n$--select-dropdown-border: solid 1px $--border-color-light !default;\n\n/* Alert\n-------------------------- */\n$--alert-padding: 8px 16px !default;\n$--alert-border-radius: $--border-radius-base !default;\n$--alert-title-font-size: 13px !default;\n$--alert-description-font-size: 12px !default;\n$--alert-close-font-size: 12px !default;\n$--alert-close-customed-font-size: 13px !default;\n\n$--alert-success-color: $--color-success-lighter !default;\n$--alert-info-color: $--color-info-lighter !default;\n$--alert-warning-color: $--color-warning-lighter !default;\n$--alert-danger-color: $--color-danger-lighter !default;\n\n$--alert-icon-size: 16px !default;\n$--alert-icon-large-size: 28px !default;\n\n/* Message Box\n-------------------------- */\n$--msgbox-width: 420px !default;\n$--msgbox-border-radius: 4px !default;\n$--msgbox-font-size: $--font-size-large !default;\n$--msgbox-content-font-size: $--font-size-base !default;\n$--msgbox-content-color: $--color-text-regular !default;\n$--msgbox-error-font-size: 12px !default;\n$--msgbox-padding-primary: 15px !default;\n\n$--msgbox-success-color: $--color-success !default;\n$--msgbox-info-color: $--color-info !default;\n$--msgbox-warning-color: $--color-warning !default;\n$--msgbox-danger-color: $--color-danger !default;\n\n/* Message\n-------------------------- */\n$--message-shadow: $--box-shadow-base !default;\n$--message-min-width: 380px !default;\n$--message-background-color: #edf2fc !default;\n$--message-padding: 15px 15px 15px 20px !default;\n$--message-content-color: $--color-text-regular !default;\n$--message-close-color: $--color-text-placeholder !default;\n$--message-close-size: 16px !default;\n$--message-close-hover-color: $--color-text-secondary !default;\n\n$--message-success-color: $--color-success !default;\n$--message-info-color: $--color-info !default;\n$--message-warning-color: $--color-warning !default;\n$--message-danger-color: $--color-danger !default;\n\n/* Notification\n-------------------------- */\n$--notification-width: 330px !default;\n$--notification-padding: 14px 26px 14px 13px !default;\n$--notification-radius: 8px !default;\n$--notification-shadow: $--box-shadow-light !default;\n$--notification-border-color: $--border-color-lighter !default;\n$--notification-icon-size: 24px !default;\n$--notification-close-font-size: $--message-close-size !default;\n$--notification-group-margin: 13px !default;\n$--notification-font-size: $--font-size-base !default;\n$--notification-color: $--color-text-regular !default;\n$--notification-title-font-size: 16px !default;\n$--notification-title-color: $--color-text-primary !default;\n\n$--notification-close-color: $--color-text-secondary !default;\n$--notification-close-hover-color: $--color-text-regular !default;\n\n$--notification-success-color: $--color-success !default;\n$--notification-info-color: $--color-info !default;\n$--notification-warning-color: $--color-warning !default;\n$--notification-danger-color: $--color-danger !default;\n\n/* Input\n-------------------------- */\n$--input-font-size: $--font-size-base !default;\n$--input-color: $--color-text-regular !default;\n$--input-width: 140px !default;\n$--input-height: 40px !default;\n$--input-border: $--border-base !default;\n$--input-border-color: $--border-color-base !default;\n$--input-border-radius: $--border-radius-base !default;\n$--input-border-color-hover: $--border-color-hover !default;\n$--input-fill: $--color-white !default;\n$--input-fill-disabled: $--disabled-fill-base !default;\n$--input-color-disabled: $--font-color-disabled-base !default;\n$--input-icon-color: $--color-text-placeholder !default;\n$--input-placeholder-color: $--color-text-placeholder !default;\n$--input-max-width: 314px !default;\n\n$--input-hover-border: $--border-color-hover !default;\n$--input-clear-hover-color: $--color-text-secondary !default;\n\n$--input-focus-border: $--color-primary !default;\n$--input-focus-fill: $--color-white !default;\n\n$--input-disabled-fill: $--disabled-fill-base !default;\n$--input-disabled-border: $--disabled-border-base !default;\n$--input-disabled-color: $--disabled-color-base !default;\n$--input-disabled-placeholder-color: $--color-text-placeholder !default;\n\n$--input-medium-font-size: 14px !default;\n$--input-medium-height: 36px !default;\n\n$--input-small-font-size: 13px !default;\n$--input-small-height: 32px !default;\n\n$--input-mini-font-size: 12px !default;\n$--input-mini-height: 28px !default;\n\n/* Cascader\n-------------------------- */\n$--cascader-menu-fill: $--fill-base !default;\n$--cascader-menu-font-size: $--font-size-base !default;\n$--cascader-menu-radius: $--border-radius-base !default;\n$--cascader-menu-border: $--border-base !default;\n$--cascader-menu-border-color: $--border-color-base !default;\n$--cascader-menu-border-width: $--border-width-base !default;\n$--cascader-menu-color: $--color-text-regular !default;\n$--cascader-menu-option-color-active: $--color-text-secondary !default;\n$--cascader-menu-option-fill-active: rgba($--color-text-secondary, 0.12) !default;\n$--cascader-menu-option-color-hover: $--color-text-regular !default;\n$--cascader-menu-option-fill-hover: rgba($--color-text-primary, 0.06) !default;\n$--cascader-menu-option-color-disabled: #999 !default;\n$--cascader-menu-option-fill-disabled: rgba($--color-black, 0.06) !default;\n$--cascader-menu-option-empty-color: #666 !default;\n$--cascader-menu-group-color: #999 !default;\n$--cascader-menu-shadow: 0 1px 2px rgba($--color-black, 0.14), 0 0 3px rgba($--color-black, 0.14) !default;\n$--cascader-menu-option-pinyin-color: #999 !default;\n$--cascader-menu-submenu-shadow: 1px 1px 2px rgba($--color-black, 0.14), 1px 0 2px rgba($--color-black, 0.14) !default;\n\n/* Group\n-------------------------- */\n$--group-option-flex: 0 0 (1/5) * 100% !default;\n$--group-option-offset-bottom: 12px !default;\n$--group-option-fill-hover: rgba($--color-black, 0.06) !default;\n$--group-title-color: $--color-black !default;\n$--group-title-font-size: $--font-size-base !default;\n$--group-title-width: 66px !default;\n\n/* Tab\n-------------------------- */\n$--tab-font-size: $--font-size-base !default;\n$--tab-border-line: 1px solid #e4e4e4 !default;\n$--tab-header-color-active: $--color-text-secondary !default;\n$--tab-header-color-hover: $--color-text-regular !default;\n$--tab-header-color: $--color-text-regular !default;\n$--tab-header-fill-active: rgba($--color-black, 0.06) !default;\n$--tab-header-fill-hover: rgba($--color-black, 0.06) !default;\n$--tab-vertical-header-width: 90px !default;\n$--tab-vertical-header-count-color: $--color-white !default;\n$--tab-vertical-header-count-fill: $--color-text-secondary !default;\n\n/* Button\n-------------------------- */\n$--button-font-size: 14px !default;\n$--button-font-weight: $--font-weight-primary !default;\n$--button-border-radius: $--border-radius-base !default;\n$--button-padding-vertical: 12px !default;\n$--button-padding-horizontal: 20px !default;\n\n$--button-medium-font-size: 14px !default;\n$--button-medium-border-radius: $--border-radius-base !default;\n$--button-medium-padding-vertical: 10px !default;\n$--button-medium-padding-horizontal: 20px !default;\n\n$--button-small-font-size: 12px !default;\n$--button-small-border-radius: #{$--border-radius-base - 1} !default;\n$--button-small-padding-vertical: 9px !default;\n$--button-small-padding-horizontal: 15px !default;\n\n$--button-mini-font-size: 12px !default;\n$--button-mini-border-radius: #{$--border-radius-base - 1} !default;\n$--button-mini-padding-vertical: 7px !default;\n$--button-mini-padding-horizontal: 15px !default;\n\n$--button-default-color: $--color-text-regular !default;\n$--button-default-fill: $--color-white !default;\n$--button-default-border: $--border-color-base !default;\n\n$--button-disabled-color: $--color-text-placeholder !default;\n$--button-disabled-fill: $--color-white !default;\n$--button-disabled-border: $--border-color-lighter !default;\n\n$--button-primary-border: $--color-primary !default;\n$--button-primary-color: $--color-white !default;\n$--button-primary-fill: $--color-primary !default;\n\n$--button-success-border: $--color-success !default;\n$--button-success-color: $--color-white !default;\n$--button-success-fill: $--color-success !default;\n\n$--button-warning-border: $--color-warning !default;\n$--button-warning-color: $--color-white !default;\n$--button-warning-fill: $--color-warning !default;\n\n$--button-danger-border: $--color-danger !default;\n$--button-danger-color: $--color-white !default;\n$--button-danger-fill: $--color-danger !default;\n\n$--button-info-border: $--color-info !default;\n$--button-info-color: $--color-white !default;\n$--button-info-fill: $--color-info !default;\n\n$--button-hover-tint-percent: 20% !default;\n$--button-active-shade-percent: 10% !default;\n\n\n/* cascader\n-------------------------- */\n$--cascader-height: 200px !default;\n\n/* Switch\n-------------------------- */\n$--switch-on-color: $--color-primary !default;\n$--switch-off-color: $--border-color-base !default;\n$--switch-disabled-color: $--border-color-lighter !default;\n$--switch-disabled-text-color: $--color-text-placeholder !default;\n\n$--switch-font-size: $--font-size-base !default;\n$--switch-core-border-radius: 10px !default;\n$--switch-width: 40px !default;\n$--switch-height: 20px !default;\n$--switch-button-size: 16px !default;\n\n/* Dialog\n-------------------------- */\n$--dialog-background-color: $--color-primary-light-4 !default;\n$--dialog-box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3) !default;\n$--dialog-close-hover-color: $--color-primary !default;\n$--dialog-title-font-size: $--font-size-large !default;\n$--dialog-font-size: 14px !default;\n$--dialog-line-height: $--font-line-height-primary !default;\n$--dialog-padding-primary: 20px !default;\n\n/* Table\n-------------------------- */\n$--table-border-color: $--border-color-lighter !default;\n$--table-border: 1px solid $--table-border-color !default;\n$--table-text-color: $--color-text-regular !default;\n$--table-header-color: $--color-text-secondary !default;\n$--table-row-hover-background: $--background-color-base !default;\n$--table-current-row-background: $--color-primary-light-9 !default;\n$--table-header-background: $--color-white !default;\n$--table-footer-background: $--color-text-placeholder !default;\n$--table-fixed-box-shadow: 0 0 10px rgba(0, 0, 0, .12) !default;\n\n/* Pagination\n-------------------------- */\n$--pagination-font-size: 13px !default;\n$--pagination-fill: $--color-white !default;\n$--pagination-color: $--color-text-primary !default;\n$--pagination-border-radius: 3px !default;\n$--pagination-button-color: $--color-text-primary !default;\n$--pagination-button-width: 35.5px !default;\n$--pagination-button-height: 28px !default;\n$--pagination-button-disabled-color: $--color-text-placeholder !default;\n$--pagination-button-disabled-fill: $--color-white !default;\n$--pagination-hover-fill: $--color-primary !default;\n$--pagination-hover-color: $--color-white !default;\n\n/* Popover\n-------------------------- */\n$--popover-fill: $--color-white !default;\n$--popover-font-size: $--font-size-base !default;\n$--popover-border-color: $--border-color-lighter !default;\n$--popover-arrow-size: 6px !default;\n$--popover-padding: 12px !default;\n$--popover-padding-large: 18px 20px !default;\n$--popover-title-font-size: 16px !default;\n$--popover-title-color: $--color-text-primary !default;\n\n/* Tooltip\n-------------------------- */\n$--tooltip-fill: $--color-text-primary !default;\n$--tooltip-color: $--color-white !default;\n$--tooltip-font-size: 12px !default;\n$--tooltip-border-color: $--color-text-primary !default;\n$--tooltip-arrow-size: 6px !default;\n$--tooltip-padding: 10px !default;\n\n/* Tag\n-------------------------- */\n$--tag-padding: 0 10px !default;\n$--tag-fill: rgba($--color-primary, 0.10) !default;\n$--tag-color: $--color-primary !default;\n$--tag-border: rgba($--color-primary, 0.20) !default;\n$--tag-font-size: 12px !default;\n$--tag-border-radius: 4px !default;\n\n$--tag-info-fill: rgba($--color-info, 0.10) !default;\n$--tag-info-border: rgba($--color-info, 0.20) !default;\n$--tag-info-color: $--color-info !default;\n\n$--tag-primary-fill: rgba($--color-primary, 0.10) !default;\n$--tag-primary-border: rgba($--color-primary, 0.20) !default;\n$--tag-primary-color: $--color-primary !default;\n\n$--tag-success-fill: rgba($--color-success, 0.10) !default;\n$--tag-success-border: rgba($--color-success, 0.20) !default;\n$--tag-success-color: $--color-success !default;\n\n$--tag-warning-fill: rgba($--color-warning, 0.10) !default;\n$--tag-warning-border: rgba($--color-warning, 0.20) !default;\n$--tag-warning-color: $--color-warning !default;\n\n$--tag-danger-fill: rgba($--color-danger, 0.10) !default;\n$--tag-danger-border: rgba($--color-danger, 0.20) !default;\n$--tag-danger-color: $--color-danger !default;\n\n/* Tree\n-------------------------- */\n$--tree-node-hover-color: $--background-color-base !default;\n$--tree-text-color: $--color-text-regular !default;\n$--tree-expand-icon-color: $--color-text-placeholder !default;\n\n/* Dropdown\n-------------------------- */\n$--dropdown-menu-box-shadow: $--box-shadow-light !default;\n$--dropdown-menuItem-hover-fill: $--color-primary-light-9 !default;\n$--dropdown-menuItem-hover-color: $--link-color !default;\n\n/* Badge\n-------------------------- */\n$--badge-fill: $--color-danger !default;\n$--badge-radius: 10px !default;\n$--badge-font-size: 12px !default;\n$--badge-padding: 6px !default;\n$--badge-size: 18px !default;\n\n/* Card\n--------------------------*/\n$--card-border-color: $--border-color-lighter !default;\n$--card-border-radius: 4px !default;\n$--card-padding: 20px !default;\n\n/* Slider\n--------------------------*/\n$--slider-main-background-color: $--color-primary !default;\n$--slider-runway-background-color: $--border-color-light !default;\n$--slider-button-hover-color: mix($--color-primary, black, 97%) !default;\n$--slider-stop-background-color: $--color-white !default;\n$--slider-disable-color: $--color-text-placeholder !default;\n\n$--slider-margin: 16px 0 !default;\n$--slider-border-radius: 3px !default;\n$--slider-height: 6px !default;\n$--slider-button-size: 16px !default;\n$--slider-button-wrapper-size: 36px !default;\n$--slider-button-wrapper-offset: -15px !default;\n\n/* Steps\n--------------------------*/\n$--steps-border-color: $--disabled-border-base !default;\n$--steps-border-radius: 4px !default;\n$--steps-padding: 20px !default;\n\n/* Menu\n--------------------------*/\n$--menu-item-font-size: $--font-size-base !default;\n$--menu-item-color: $--color-text-primary !default;\n$--menu-item-fill: $--color-white !default;\n$--menu-item-hover-fill: $--color-primary-light-9 !default;\n\n/* Rate\n--------------------------*/\n$--rate-height: 20px !default;\n$--rate-font-size: $--font-size-base !default;\n$--rate-icon-size: 18px !default;\n$--rate-icon-margin: 6px !default;\n$--rate-icon-color: $--color-text-placeholder !default;\n\n/* DatePicker\n--------------------------*/\n$--datepicker-color: $--color-text-regular !default;\n$--datepicker-off-color: $--color-text-placeholder !default;\n$--datepicker-header-color: $--color-text-regular !default;\n$--datepicker-icon-color: $--color-text-primary !default;\n$--datepicker-border-color: $--disabled-border-base !default;\n$--datepicker-inner-border-color: #e4e4e4 !default;\n$--datepicker-inrange-color: $--border-color-extra-light !default;\n$--datepicker-inrange-hover-color: $--border-color-extra-light !default;\n$--datepicker-active-color: $--color-primary !default;\n$--datepicker-text-hover-color: $--color-primary !default;\n$--datepicker-cell-hover-color: #fff !default;\n\n/* Loading\n--------------------------*/\n$--loading-spinner-size: 42px !default;\n$--loading-fullscreen-spinner-size: 50px !default;\n\n/* Scrollbar\n--------------------------*/\n$--scrollbar-background-color: rgba($--color-text-secondary, .3) !default;\n$--scrollbar-hover-background-color: rgba($--color-text-secondary, .5) !default;\n\n/* Carousel\n--------------------------*/\n$--carousel-arrow-font-size: 12px !default;\n$--carousel-arrow-size: 36px !default;\n$--carousel-arrow-background: rgba(31, 45, 61, 0.11) !default;\n$--carousel-arrow-hover-background: rgba(31, 45, 61, 0.23) !default;\n$--carousel-indicator-width: 30px !default;\n$--carousel-indicator-height: 2px !default;\n$--carousel-indicator-padding-horizontal: 4px !default;\n$--carousel-indicator-padding-vertical: 12px !default;\n$--carousel-indicator-out-color: $--border-color-hover !default;\n\n/* Collapse\n--------------------------*/\n$--collapse-border-color: $--border-color-lighter !default;\n$--collapse-header-height: 48px !default;\n$--collapse-header-padding: 20px !default;\n$--collapse-header-fill: $--color-white !default;\n$--collapse-header-color: $--color-text-primary !default;\n$--collapse-header-size: 13px !default;\n$--collapse-content-fill: $--color-white !default;\n$--collapse-content-size: 13px !default;\n$--collapse-content-color: $--color-text-primary !default;\n\n/* Transfer\n--------------------------*/\n$--transfer-border-color: $--border-color-lighter !default;\n$--transfer-border-radius: $--border-radius-base !default;\n$--transfer-panel-width: 200px !default;\n$--transfer-panel-header-height: 40px !default;\n$--transfer-panel-header-background: $--background-color-base !default;\n$--transfer-panel-footer-height: 40px !default;\n$--transfer-panel-body-height: 246px !default;\n$--transfer-item-height: 30px !default;\n$--transfer-item-hover-background: $--color-text-secondary !default;\n$--transfer-filter-height: 32px !default;\n\n/* Header\n  --------------------------*/\n$--header-padding: 0 20px !default;\n\n/* Footer\n--------------------------*/\n$--footer-padding: 0 20px !default;\n\n/* Main\n--------------------------*/\n$--main-padding: 20px !default;\n\n/* Break-point\n--------------------------*/\n$--sm: 768px !default;\n$--md: 992px !default;\n$--lg: 1200px !default;\n$--xl: 1920px !default;\n\n$--breakpoints: (\n  'xs' : (max-width: $--sm - 1),\n  'sm' : (min-width: $--sm),\n  'md' : (min-width: $--md),\n  'lg' : (min-width: $--lg),\n  'xl' : (min-width: $--xl)\n);\n\n$--breakpoints-spec: (\n  'xs-only' : (max-width: $--sm - 1),\n  'sm-and-up' : (min-width: $--sm),\n  'sm-only': \"(min-width: #{$--sm}) and (max-width: #{$--md} - 1)\",\n  'sm-and-down': (max-width: $--md - 1),\n  'md-and-up' : (min-width: $--md),\n  'md-only': \"(min-width: #{$--md}) and (max-width: #{$--lg } - 1)\",\n  'md-and-down': (max-width: $--lg - 1),\n  'lg-and-up' : (min-width: $--lg),\n  'lg-only': \"(min-width: #{$--lg}) and (max-width: #{$--xl } - 1)\",\n  'lg-and-down': (max-width: $--xl - 1),\n  'xl-only' : (min-width: $--xl),\n);\n```","slug":"vue","published":1,"updated":"2019-09-29T07:14:35.957Z","_id":"ck14n5cwa003ut09zobj6h13n","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"IntellIJ-IDEA-配置支持Vue\"><a href=\"#IntellIJ-IDEA-配置支持Vue\" class=\"headerlink\" title=\"IntellIJ IDEA 配置支持Vue\"></a>IntellIJ IDEA 配置支持Vue</h1><p>参考：<a href=\"https://www.jianshu.com/p/01d832e028ea\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/01d832e028ea</a><br>第一步：先安装vue插件:<br>file –&gt; settings –&gt; plugins，然后什么都不用输入，直接点击Browse repositories… 紧接着左上方输入“vue”，点击搜索结果里的vue.js，右边会有绿色install按钮，安装成功后重启idea，这样idea就能识别.vue文件了。<br>第二步：设置vue新建文件模板。</p>\n<h1 id=\"安装Element-ui\"><a href=\"#安装Element-ui\" class=\"headerlink\" title=\"安装Element-ui\"></a>安装Element-ui</h1><h1 id=\"vue2-0-element-UI-中-el-table-数据导出Excel\"><a href=\"#vue2-0-element-UI-中-el-table-数据导出Excel\" class=\"headerlink\" title=\"vue2.0 + element UI 中 el-table 数据导出Excel\"></a>vue2.0 + element UI 中 el-table 数据导出Excel</h1><p>最近后台项目中有需要将游戏用户提交的返利数据信息导出为excel表的形式，所以对此功能进行了简单的总结：</p>\n<h2 id=\"安装相关依赖\"><a href=\"#安装相关依赖\" class=\"headerlink\" title=\"安装相关依赖\"></a>安装相关依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主要是两个依赖:(xlsx 和 file-saver)</span><br><span class=\"line\">npm install --save xlsx file-saver</span><br></pre></td></tr></table></figure>\n<p>对于这两个插件使用，github上边有更加详细的参考<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/SheetJS/js-xlsx](https://github.com/SheetJS/js-xlsx)</span><br><span class=\"line\">https://github.com/eligrey/FileSaver.js](https://github.com/eligrey/FileSaver.js</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在组件头里边引入插件\"><a href=\"#在组件头里边引入插件\" class=\"headerlink\" title=\"在组件头里边引入插件\"></a>在组件头里边引入插件</h2><p>(测试的时候，下边代码放到入口js文件main.js的时候没有效果，遗留问题，有待解决)（放到组件头里边能够实现效果）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import FileSaver from <span class=\"string\">'file-saver'</span></span><br><span class=\"line\">import XLSX from <span class=\"string\">'xlsx'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在对应组件里边methods里边写一个方法\"><a href=\"#在对应组件里边methods里边写一个方法\" class=\"headerlink\" title=\"在对应组件里边methods里边写一个方法\"></a>在对应组件里边methods里边写一个方法</h2><p>（到处的时候进行调用）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">exportExcel</span></span> () &#123;</span><br><span class=\"line\">    /* generate workbook object from table */</span><br><span class=\"line\">    <span class=\"built_in\">let</span> wb = XLSX.utils.table_to_book(document.querySelector(<span class=\"string\">'#rebateSetTable'</span>));</span><br><span class=\"line\">    /* get binary string as output */</span><br><span class=\"line\">    <span class=\"built_in\">let</span> wbout = XLSX.write(wb, &#123; bookType: <span class=\"string\">'xlsx'</span>, bookSST: <span class=\"literal\">true</span>, <span class=\"built_in\">type</span>: <span class=\"string\">'array'</span> &#125;);</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        FileSaver.saveAs(new Blob([wbout], &#123; <span class=\"built_in\">type</span>: <span class=\"string\">'application/octet-stream'</span> &#125;), <span class=\"string\">'用户提交返利表.xlsx'</span>);</span><br><span class=\"line\">    &#125; catch (e)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (typeof console !== <span class=\"string\">'undefined'</span>)</span><br><span class=\"line\">            console.log(e, wbout)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> wbout</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure></p>\n<p>提示：<br>上边方法中：XLSX.uitls.table_to_book( 放入的是table 的DOM 节点 ) ，sheetjs.xlsx 即为导出表格的名字，可修改！</p>\n<h2 id=\"点击导出按钮执行-exportExcel-的方法即可-。\"><a href=\"#点击导出按钮执行-exportExcel-的方法即可-。\" class=\"headerlink\" title=\"点击导出按钮执行 exportExcel 的方法即可 。\"></a>点击导出按钮执行 exportExcel 的方法即可 。</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=<span class=\"string\">\"export\"</span>&gt;</span><br><span class=\"line\">     &lt;el-button @click=<span class=\"string\">\"exportExcel\"</span> style=<span class=\"string\">\"margin-top: 2px;\"</span> size=<span class=\"string\">\"medium\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"success\"</span>&gt;导出&lt;/el-button&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"vue-element-ui自定义主题样式\"><a href=\"#vue-element-ui自定义主题样式\" class=\"headerlink\" title=\"vue element-ui自定义主题样式\"></a>vue element-ui自定义主题样式</h1><h3 id=\"新建一个element-variables-scss，并在-main-app-js入口文件引入\"><a href=\"#新建一个element-variables-scss，并在-main-app-js入口文件引入\" class=\"headerlink\" title=\"新建一个element-variables.scss，并在(main|app).js入口文件引入\"></a>新建一个element-variables.scss，并在(main|app).js入口文件引入</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from <span class=\"string\">'vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\">import Element from <span class=\"string\">'element-ui'</span></span><br><span class=\"line\">import <span class=\"string\">'@/styles/element-variables.scss'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"在-element-variables-scss，修改你要的主题或组件预设的样式变量即可\"><a href=\"#在-element-variables-scss，修改你要的主题或组件预设的样式变量即可\" class=\"headerlink\" title=\"在 element-variables.scss，修改你要的主题或组件预设的样式变量即可\"></a>在 element-variables.scss，修改你要的主题或组件预设的样式变量即可</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 改变 主题/样式相关 变量 */</span><br><span class=\"line\">$--color-primary: <span class=\"comment\">#1ABCB0;</span></span><br><span class=\"line\">$--select-option-hover-background: <span class=\"comment\">#def1f2;</span></span><br><span class=\"line\">$--select-option-selected-hover: <span class=\"comment\">#1abcb0;</span></span><br><span class=\"line\">$--table-row-hover-background: <span class=\"comment\">#f2f2f2;</span></span><br><span class=\"line\">$--table-header-color: <span class=\"comment\">#444;</span></span><br><span class=\"line\">$--pagination-button-disabled-fill: transparent;</span><br><span class=\"line\">$--pagination-fill: transparent;</span><br><span class=\"line\"></span><br><span class=\"line\">/* 改变 icon 字体路径变量，必需 */</span><br><span class=\"line\">$--font-path: <span class=\"string\">'~element-ui/lib/theme-chalk/fonts'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">/* 改变 路径变量，必需 */</span><br><span class=\"line\">@import <span class=\"string\">\"~element-ui/packages/theme-chalk/src/index\"</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"默认-element-variables-scss-全部变量内容\"><a href=\"#默认-element-variables-scss-全部变量内容\" class=\"headerlink\" title=\"默认 element-variables.scss 全部变量内容\"></a>默认 element-variables.scss 全部变量内容</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Element Chalk Variables */</span><br><span class=\"line\"></span><br><span class=\"line\">/* Transition</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--all-transition: all .3s cubic-bezier(.645,.045,.355,1) !default;</span><br><span class=\"line\">$--fade-transition: opacity 300ms cubic-bezier(0.23, 1, 0.32, 1) !default;</span><br><span class=\"line\">$--fade-linear-transition: opacity 200ms linear !default;</span><br><span class=\"line\">$--md-fade-transition: transform 300ms cubic-bezier(0.23, 1, 0.32, 1), opacity 300ms cubic-bezier(0.23, 1, 0.32, 1) !default;</span><br><span class=\"line\">$--border-transition-base: border-color .2s cubic-bezier(.645,.045,.355,1) !default;</span><br><span class=\"line\">$--color-transition-base: color .2s cubic-bezier(.645,.045,.355,1) !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Colors</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--color-white: <span class=\"comment\">#fff !default;</span></span><br><span class=\"line\">$--color-black: <span class=\"comment\">#000 !default;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$--color-primary: <span class=\"comment\">#1ABCB0 !default;</span></span><br><span class=\"line\">$--color-primary-light-1: mix($--color-white, $--color-primary, 10%) !default; /* 53a8ff */</span><br><span class=\"line\">$--color-primary-light-2: mix($--color-white, $--color-primary, 20%) !default; /* 66b1ff */</span><br><span class=\"line\">$--color-primary-light-3: mix($--color-white, $--color-primary, 30%) !default; /* 79bbff */</span><br><span class=\"line\">$--color-primary-light-4: mix($--color-white, $--color-primary, 40%) !default; /* 8cc5ff */</span><br><span class=\"line\">$--color-primary-light-5: mix($--color-white, $--color-primary, 50%) !default; /* a0cfff */</span><br><span class=\"line\">$--color-primary-light-6: mix($--color-white, $--color-primary, 60%) !default; /* b3d8ff */</span><br><span class=\"line\">$--color-primary-light-7: mix($--color-white, $--color-primary, 70%) !default; /* c6e2ff */</span><br><span class=\"line\">$--color-primary-light-8: mix($--color-white, $--color-primary, 80%) !default; /* d9ecff */</span><br><span class=\"line\">$--color-primary-light-9: mix($--color-white, $--color-primary, 90%) !default; /* ecf5ff */</span><br><span class=\"line\"></span><br><span class=\"line\">$--color-success: <span class=\"comment\">#67c23a !default;</span></span><br><span class=\"line\">$--color-warning: <span class=\"comment\">#e6a23c !default;</span></span><br><span class=\"line\">$--color-danger: <span class=\"comment\">#f56c6c !default;</span></span><br><span class=\"line\">$--color-info: <span class=\"comment\">#909399 !default;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$--color-success-light: mix($--color-white, $--color-success, 80%) !default;</span><br><span class=\"line\">$--color-warning-light: mix($--color-white, $--color-warning, 80%) !default;</span><br><span class=\"line\">$--color-danger-light: mix($--color-white, $--color-danger, 80%) !default;</span><br><span class=\"line\">$--color-info-light: mix($--color-white, $--color-info, 80%) !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--color-success-lighter: mix($--color-white, $--color-success, 90%) !default;</span><br><span class=\"line\">$--color-warning-lighter: mix($--color-white, $--color-warning, 90%) !default;</span><br><span class=\"line\">$--color-danger-lighter: mix($--color-white, $--color-danger, 90%) !default;</span><br><span class=\"line\">$--color-info-lighter: mix($--color-white, $--color-info, 90%) !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--color-text-primary: <span class=\"comment\">#303133 !default;</span></span><br><span class=\"line\">$--color-text-regular: <span class=\"comment\">#606266 !default;</span></span><br><span class=\"line\">$--color-text-secondary: <span class=\"comment\">#909399 !default;</span></span><br><span class=\"line\">$--color-text-placeholder: <span class=\"comment\">#c0c4cc !default;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* Link</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--link-color: $--color-primary-light-2 !default;</span><br><span class=\"line\">$--link-hover-color: $--color-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Background</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--background-color-base: <span class=\"comment\">#f5f7fa !default;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* Border</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--border-width-base: 1px !default;</span><br><span class=\"line\">$--border-style-base: solid !default;</span><br><span class=\"line\">$--border-color-base: <span class=\"comment\">#dcdfe6 !default;</span></span><br><span class=\"line\">$--border-color-light: <span class=\"comment\">#e4e7ed !default;</span></span><br><span class=\"line\">$--border-color-lighter: <span class=\"comment\">#ebeef5 !default;</span></span><br><span class=\"line\">$--border-color-extra-light: <span class=\"comment\">#f2f6fc !default;</span></span><br><span class=\"line\">$--border-color-hover: $--color-text-placeholder !default;</span><br><span class=\"line\">$--border-base: $--border-width-base $--border-style-base $--border-color-base !default;</span><br><span class=\"line\">$--border-radius-base: 4px !default;</span><br><span class=\"line\">$--border-radius-small: 2px !default;</span><br><span class=\"line\">$--border-radius-circle: 100% !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Box-shadow</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--box-shadow-base: 0 2px 4px rgba(0, 0, 0, .12), 0 0 6px rgba(0, 0, 0, .04) !default;</span><br><span class=\"line\">$--box-shadow-dark: 0 2px 4px rgba(0, 0, 0, .12), 0 0 6px rgba(0, 0, 0, .12) !default;</span><br><span class=\"line\">$--box-shadow-light: 0 2px 12px 0 rgba(0, 0, 0, 0.1) !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Fill</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--fill-base: $--color-white !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Font</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--font-path: <span class=\"string\">'fonts'</span> !default;</span><br><span class=\"line\">$--font-size-base: 14px !default;</span><br><span class=\"line\">$--font-size-small: 13px !default;</span><br><span class=\"line\">$--font-size-large: 18px !default;</span><br><span class=\"line\">$--font-color-disabled-base: <span class=\"comment\">#bbb !default;</span></span><br><span class=\"line\">$--font-weight-primary: 500 !default;</span><br><span class=\"line\">$--font-line-height-primary: 24px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Size</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--size-base: 14px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* z-index</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--index-normal: 1 !default;</span><br><span class=\"line\">$--index-top: 1000 !default;</span><br><span class=\"line\">$--index-popper: 2000 !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Disable base</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--disabled-fill-base: $--background-color-base !default;</span><br><span class=\"line\">$--disabled-color-base: $--color-text-placeholder !default;</span><br><span class=\"line\">$--disabled-border-base: $--border-color-light !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Icon</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--icon-color: <span class=\"comment\">#666 !default;</span></span><br><span class=\"line\">$--icon-color-base: $--color-info !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Checkbox</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--checkbox-font-size: 14px !default;</span><br><span class=\"line\">$--checkbox-font-weight: $--font-weight-primary !default;</span><br><span class=\"line\">$--checkbox-color: $--color-text-regular !default;</span><br><span class=\"line\">$--checkbox-input-height: 14px !default;</span><br><span class=\"line\">$--checkbox-input-width: 14px !default;</span><br><span class=\"line\">$--checkbox-input-border-radius: $--border-radius-small !default;</span><br><span class=\"line\">$--checkbox-input-fill: $--color-white !default;</span><br><span class=\"line\">$--checkbox-input-border: $--border-base !default;</span><br><span class=\"line\">$--checkbox-input-border-color: $--border-color-base !default;</span><br><span class=\"line\">$--checkbox-icon-color: $--color-white !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--checkbox-disabled-input-border-color: $--border-color-base !default;</span><br><span class=\"line\">$--checkbox-disabled-input-fill: <span class=\"comment\">#edf2fc !default;</span></span><br><span class=\"line\">$--checkbox-disabled-icon-color: $--color-text-placeholder !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--checkbox-disabled-checked-input-fill: $--border-color-extra-light !default;</span><br><span class=\"line\">$--checkbox-disabled-checked-input-border-color: $--border-color-base !default;</span><br><span class=\"line\">$--checkbox-disabled-checked-icon-color: $--color-text-placeholder !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--checkbox-checked-text-color: $--color-primary !default;</span><br><span class=\"line\">$--checkbox-checked-input-border-color: $--color-primary !default;</span><br><span class=\"line\">$--checkbox-checked-input-fill: $--color-primary !default;</span><br><span class=\"line\">$--checkbox-checked-icon-color: $--fill-base !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--checkbox-input-border-color-hover: $--color-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--checkbox-bordered-height: 40px !default;</span><br><span class=\"line\">$--checkbox-bordered-padding: 9px 20px 9px 10px !default;</span><br><span class=\"line\">$--checkbox-bordered-medium-padding: 7px 20px 7px 10px !default;</span><br><span class=\"line\">$--checkbox-bordered-small-padding: 5px 15px 5px 10px !default;</span><br><span class=\"line\">$--checkbox-bordered-mini-padding: 3px 15px 3px 10px !default;</span><br><span class=\"line\">$--checkbox-bordered-medium-input-height: 14px !default;</span><br><span class=\"line\">$--checkbox-bordered-medium-input-width: 14px !default;</span><br><span class=\"line\">$--checkbox-bordered-medium-height: 36px !default;</span><br><span class=\"line\">$--checkbox-bordered-small-input-height: 12px !default;</span><br><span class=\"line\">$--checkbox-bordered-small-input-width: 12px !default;</span><br><span class=\"line\">$--checkbox-bordered-small-height: 32px !default;</span><br><span class=\"line\">$--checkbox-bordered-mini-input-height: 12px !default;</span><br><span class=\"line\">$--checkbox-bordered-mini-input-width: 12px !default;</span><br><span class=\"line\">$--checkbox-bordered-mini-height: 28px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--checkbox-button-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--checkbox-button-checked-fill: $--color-primary !default;</span><br><span class=\"line\">$--checkbox-button-checked-color: $--color-white !default;</span><br><span class=\"line\">$--checkbox-button-checked-border-color: $--color-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/* Radio</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--radio-font-size: 14px !default;</span><br><span class=\"line\">$--radio-font-weight: $--font-weight-primary !default;</span><br><span class=\"line\">$--radio-color: $--color-text-regular !default;</span><br><span class=\"line\">$--radio-input-height: 14px !default;</span><br><span class=\"line\">$--radio-input-width: 14px !default;</span><br><span class=\"line\">$--radio-input-border-radius: $--border-radius-circle !default;</span><br><span class=\"line\">$--radio-input-fill: $--color-white !default;</span><br><span class=\"line\">$--radio-input-border: $--border-base !default;</span><br><span class=\"line\">$--radio-input-border-color: $--border-color-base !default;</span><br><span class=\"line\">$--radio-icon-color: $--color-white !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--radio-disabled-input-border-color: $--disabled-border-base !default;</span><br><span class=\"line\">$--radio-disabled-input-fill: $--disabled-fill-base !default;</span><br><span class=\"line\">$--radio-disabled-icon-color: $--disabled-fill-base !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--radio-disabled-checked-input-border-color: $--disabled-border-base !default;</span><br><span class=\"line\">$--radio-disabled-checked-input-fill: $--disabled-fill-base !default;</span><br><span class=\"line\">$--radio-disabled-checked-icon-color: $--color-text-placeholder !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--radio-checked-text-color: $--color-primary !default;</span><br><span class=\"line\">$--radio-checked-input-border-color: $--color-primary !default;</span><br><span class=\"line\">$--radio-checked-input-fill: $--color-white !default;</span><br><span class=\"line\">$--radio-checked-icon-color: $--color-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--radio-input-border-color-hover: $--color-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--radio-bordered-height: 40px !default;</span><br><span class=\"line\">$--radio-bordered-padding: 12px 20px 0 10px !default;</span><br><span class=\"line\">$--radio-bordered-medium-padding: 10px 20px 0 10px !default;</span><br><span class=\"line\">$--radio-bordered-small-padding: 8px 15px 0 10px !default;</span><br><span class=\"line\">$--radio-bordered-mini-padding: 6px 15px 0 10px !default;</span><br><span class=\"line\">$--radio-bordered-medium-input-height: 14px !default;</span><br><span class=\"line\">$--radio-bordered-medium-input-width: 14px !default;</span><br><span class=\"line\">$--radio-bordered-medium-height: 36px !default;</span><br><span class=\"line\">$--radio-bordered-small-input-height: 12px !default;</span><br><span class=\"line\">$--radio-bordered-small-input-width: 12px !default;</span><br><span class=\"line\">$--radio-bordered-small-height: 32px !default;</span><br><span class=\"line\">$--radio-bordered-mini-input-height: 12px !default;</span><br><span class=\"line\">$--radio-bordered-mini-input-width: 12px !default;</span><br><span class=\"line\">$--radio-bordered-mini-height: 28px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--radio-button-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--radio-button-checked-fill: $--color-primary !default;</span><br><span class=\"line\">$--radio-button-checked-color: $--color-white !default;</span><br><span class=\"line\">$--radio-button-checked-border-color: $--color-primary !default;</span><br><span class=\"line\">$--radio-button-disabled-checked-fill: $--border-color-extra-light !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Select</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--select-border-color-hover: $--border-color-hover !default;</span><br><span class=\"line\">$--select-disabled-border: $--disabled-border-base !default;</span><br><span class=\"line\">$--select-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--select-close-hover-color: $--color-text-secondary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--select-input-color: $--color-text-placeholder !default;</span><br><span class=\"line\">$--select-multiple-input-color: <span class=\"comment\">#666 !default;</span></span><br><span class=\"line\">$--select-input-focus-background: $--color-primary !default;</span><br><span class=\"line\">$--select-input-font-size: 14px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--select-option-color: $--color-text-regular !default;</span><br><span class=\"line\">$--select-option-disabled-color: $--color-text-placeholder !default;</span><br><span class=\"line\">$--select-option-disabled-background: $--color-white !default;</span><br><span class=\"line\">$--select-option-height: 34px !default;</span><br><span class=\"line\">$--select-option-hover-background: $--border-color-base !default;</span><br><span class=\"line\">$--select-option-selected: $--color-primary !default;</span><br><span class=\"line\">$--select-option-selected-hover: red !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--select-group-color: $--color-info !default;</span><br><span class=\"line\">$--select-group-height: 30px !default;</span><br><span class=\"line\">$--select-group-font-size: 12px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--select-dropdown-background: $--color-white !default;</span><br><span class=\"line\">$--select-dropdown-shadow: $--box-shadow-light !default;</span><br><span class=\"line\">$--select-dropdown-empty-color: <span class=\"comment\">#999 !default;</span></span><br><span class=\"line\">$--select-dropdown-max-height: 274px !default;</span><br><span class=\"line\">$--select-dropdown-padding: 6px 0 !default;</span><br><span class=\"line\">$--select-dropdown-empty-padding: 10px 0 !default;</span><br><span class=\"line\">$--select-dropdown-border: solid 1px $--border-color-light !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Alert</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--alert-padding: 8px 16px !default;</span><br><span class=\"line\">$--alert-border-radius: $--border-radius-base !default;</span><br><span class=\"line\">$--alert-title-font-size: 13px !default;</span><br><span class=\"line\">$--alert-description-font-size: 12px !default;</span><br><span class=\"line\">$--alert-close-font-size: 12px !default;</span><br><span class=\"line\">$--alert-close-customed-font-size: 13px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--alert-success-color: $--color-success-lighter !default;</span><br><span class=\"line\">$--alert-info-color: $--color-info-lighter !default;</span><br><span class=\"line\">$--alert-warning-color: $--color-warning-lighter !default;</span><br><span class=\"line\">$--alert-danger-color: $--color-danger-lighter !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--alert-icon-size: 16px !default;</span><br><span class=\"line\">$--alert-icon-large-size: 28px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Message Box</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--msgbox-width: 420px !default;</span><br><span class=\"line\">$--msgbox-border-radius: 4px !default;</span><br><span class=\"line\">$--msgbox-font-size: $--font-size-large !default;</span><br><span class=\"line\">$--msgbox-content-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--msgbox-content-color: $--color-text-regular !default;</span><br><span class=\"line\">$--msgbox-error-font-size: 12px !default;</span><br><span class=\"line\">$--msgbox-padding-primary: 15px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--msgbox-success-color: $--color-success !default;</span><br><span class=\"line\">$--msgbox-info-color: $--color-info !default;</span><br><span class=\"line\">$--msgbox-warning-color: $--color-warning !default;</span><br><span class=\"line\">$--msgbox-danger-color: $--color-danger !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Message</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--message-shadow: $--box-shadow-base !default;</span><br><span class=\"line\">$--message-min-width: 380px !default;</span><br><span class=\"line\">$--message-background-color: <span class=\"comment\">#edf2fc !default;</span></span><br><span class=\"line\">$--message-padding: 15px 15px 15px 20px !default;</span><br><span class=\"line\">$--message-content-color: $--color-text-regular !default;</span><br><span class=\"line\">$--message-close-color: $--color-text-placeholder !default;</span><br><span class=\"line\">$--message-close-size: 16px !default;</span><br><span class=\"line\">$--message-close-hover-color: $--color-text-secondary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--message-success-color: $--color-success !default;</span><br><span class=\"line\">$--message-info-color: $--color-info !default;</span><br><span class=\"line\">$--message-warning-color: $--color-warning !default;</span><br><span class=\"line\">$--message-danger-color: $--color-danger !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Notification</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--notification-width: 330px !default;</span><br><span class=\"line\">$--notification-padding: 14px 26px 14px 13px !default;</span><br><span class=\"line\">$--notification-radius: 8px !default;</span><br><span class=\"line\">$--notification-shadow: $--box-shadow-light !default;</span><br><span class=\"line\">$--notification-border-color: $--border-color-lighter !default;</span><br><span class=\"line\">$--notification-icon-size: 24px !default;</span><br><span class=\"line\">$--notification-close-font-size: $--message-close-size !default;</span><br><span class=\"line\">$--notification-group-margin: 13px !default;</span><br><span class=\"line\">$--notification-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--notification-color: $--color-text-regular !default;</span><br><span class=\"line\">$--notification-title-font-size: 16px !default;</span><br><span class=\"line\">$--notification-title-color: $--color-text-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--notification-close-color: $--color-text-secondary !default;</span><br><span class=\"line\">$--notification-close-hover-color: $--color-text-regular !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--notification-success-color: $--color-success !default;</span><br><span class=\"line\">$--notification-info-color: $--color-info !default;</span><br><span class=\"line\">$--notification-warning-color: $--color-warning !default;</span><br><span class=\"line\">$--notification-danger-color: $--color-danger !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Input</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--input-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--input-color: $--color-text-regular !default;</span><br><span class=\"line\">$--input-width: 140px !default;</span><br><span class=\"line\">$--input-height: 40px !default;</span><br><span class=\"line\">$--input-border: $--border-base !default;</span><br><span class=\"line\">$--input-border-color: $--border-color-base !default;</span><br><span class=\"line\">$--input-border-radius: $--border-radius-base !default;</span><br><span class=\"line\">$--input-border-color-hover: $--border-color-hover !default;</span><br><span class=\"line\">$--input-fill: $--color-white !default;</span><br><span class=\"line\">$--input-fill-disabled: $--disabled-fill-base !default;</span><br><span class=\"line\">$--input-color-disabled: $--font-color-disabled-base !default;</span><br><span class=\"line\">$--input-icon-color: $--color-text-placeholder !default;</span><br><span class=\"line\">$--input-placeholder-color: $--color-text-placeholder !default;</span><br><span class=\"line\">$--input-max-width: 314px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--input-hover-border: $--border-color-hover !default;</span><br><span class=\"line\">$--input-clear-hover-color: $--color-text-secondary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--input-focus-border: $--color-primary !default;</span><br><span class=\"line\">$--input-focus-fill: $--color-white !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--input-disabled-fill: $--disabled-fill-base !default;</span><br><span class=\"line\">$--input-disabled-border: $--disabled-border-base !default;</span><br><span class=\"line\">$--input-disabled-color: $--disabled-color-base !default;</span><br><span class=\"line\">$--input-disabled-placeholder-color: $--color-text-placeholder !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--input-medium-font-size: 14px !default;</span><br><span class=\"line\">$--input-medium-height: 36px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--input-small-font-size: 13px !default;</span><br><span class=\"line\">$--input-small-height: 32px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--input-mini-font-size: 12px !default;</span><br><span class=\"line\">$--input-mini-height: 28px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Cascader</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--cascader-menu-fill: $--fill-base !default;</span><br><span class=\"line\">$--cascader-menu-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--cascader-menu-radius: $--border-radius-base !default;</span><br><span class=\"line\">$--cascader-menu-border: $--border-base !default;</span><br><span class=\"line\">$--cascader-menu-border-color: $--border-color-base !default;</span><br><span class=\"line\">$--cascader-menu-border-width: $--border-width-base !default;</span><br><span class=\"line\">$--cascader-menu-color: $--color-text-regular !default;</span><br><span class=\"line\">$--cascader-menu-option-color-active: $--color-text-secondary !default;</span><br><span class=\"line\">$--cascader-menu-option-fill-active: rgba($--color-text-secondary, 0.12) !default;</span><br><span class=\"line\">$--cascader-menu-option-color-hover: $--color-text-regular !default;</span><br><span class=\"line\">$--cascader-menu-option-fill-hover: rgba($--color-text-primary, 0.06) !default;</span><br><span class=\"line\">$--cascader-menu-option-color-disabled: <span class=\"comment\">#999 !default;</span></span><br><span class=\"line\">$--cascader-menu-option-fill-disabled: rgba($--color-black, 0.06) !default;</span><br><span class=\"line\">$--cascader-menu-option-empty-color: <span class=\"comment\">#666 !default;</span></span><br><span class=\"line\">$--cascader-menu-group-color: <span class=\"comment\">#999 !default;</span></span><br><span class=\"line\">$--cascader-menu-shadow: 0 1px 2px rgba($--color-black, 0.14), 0 0 3px rgba($--color-black, 0.14) !default;</span><br><span class=\"line\">$--cascader-menu-option-pinyin-color: <span class=\"comment\">#999 !default;</span></span><br><span class=\"line\">$--cascader-menu-submenu-shadow: 1px 1px 2px rgba($--color-black, 0.14), 1px 0 2px rgba($--color-black, 0.14) !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Group</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--group-option-flex: 0 0 (1/5) * 100% !default;</span><br><span class=\"line\">$--group-option-offset-bottom: 12px !default;</span><br><span class=\"line\">$--group-option-fill-hover: rgba($--color-black, 0.06) !default;</span><br><span class=\"line\">$--group-title-color: $--color-black !default;</span><br><span class=\"line\">$--group-title-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--group-title-width: 66px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Tab</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--tab-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--tab-border-line: 1px solid <span class=\"comment\">#e4e4e4 !default;</span></span><br><span class=\"line\">$--tab-header-color-active: $--color-text-secondary !default;</span><br><span class=\"line\">$--tab-header-color-hover: $--color-text-regular !default;</span><br><span class=\"line\">$--tab-header-color: $--color-text-regular !default;</span><br><span class=\"line\">$--tab-header-fill-active: rgba($--color-black, 0.06) !default;</span><br><span class=\"line\">$--tab-header-fill-hover: rgba($--color-black, 0.06) !default;</span><br><span class=\"line\">$--tab-vertical-header-width: 90px !default;</span><br><span class=\"line\">$--tab-vertical-header-count-color: $--color-white !default;</span><br><span class=\"line\">$--tab-vertical-header-count-fill: $--color-text-secondary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Button</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--button-font-size: 14px !default;</span><br><span class=\"line\">$--button-font-weight: $--font-weight-primary !default;</span><br><span class=\"line\">$--button-border-radius: $--border-radius-base !default;</span><br><span class=\"line\">$--button-padding-vertical: 12px !default;</span><br><span class=\"line\">$--button-padding-horizontal: 20px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-medium-font-size: 14px !default;</span><br><span class=\"line\">$--button-medium-border-radius: $--border-radius-base !default;</span><br><span class=\"line\">$--button-medium-padding-vertical: 10px !default;</span><br><span class=\"line\">$--button-medium-padding-horizontal: 20px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-small-font-size: 12px !default;</span><br><span class=\"line\">$--button-small-border-radius: <span class=\"comment\">#&#123;$--border-radius-base - 1&#125; !default;</span></span><br><span class=\"line\">$--button-small-padding-vertical: 9px !default;</span><br><span class=\"line\">$--button-small-padding-horizontal: 15px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-mini-font-size: 12px !default;</span><br><span class=\"line\">$--button-mini-border-radius: <span class=\"comment\">#&#123;$--border-radius-base - 1&#125; !default;</span></span><br><span class=\"line\">$--button-mini-padding-vertical: 7px !default;</span><br><span class=\"line\">$--button-mini-padding-horizontal: 15px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-default-color: $--color-text-regular !default;</span><br><span class=\"line\">$--button-default-fill: $--color-white !default;</span><br><span class=\"line\">$--button-default-border: $--border-color-base !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-disabled-color: $--color-text-placeholder !default;</span><br><span class=\"line\">$--button-disabled-fill: $--color-white !default;</span><br><span class=\"line\">$--button-disabled-border: $--border-color-lighter !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-primary-border: $--color-primary !default;</span><br><span class=\"line\">$--button-primary-color: $--color-white !default;</span><br><span class=\"line\">$--button-primary-fill: $--color-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-success-border: $--color-success !default;</span><br><span class=\"line\">$--button-success-color: $--color-white !default;</span><br><span class=\"line\">$--button-success-fill: $--color-success !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-warning-border: $--color-warning !default;</span><br><span class=\"line\">$--button-warning-color: $--color-white !default;</span><br><span class=\"line\">$--button-warning-fill: $--color-warning !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-danger-border: $--color-danger !default;</span><br><span class=\"line\">$--button-danger-color: $--color-white !default;</span><br><span class=\"line\">$--button-danger-fill: $--color-danger !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-info-border: $--color-info !default;</span><br><span class=\"line\">$--button-info-color: $--color-white !default;</span><br><span class=\"line\">$--button-info-fill: $--color-info !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-hover-tint-percent: 20% !default;</span><br><span class=\"line\">$--button-active-shade-percent: 10% !default;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/* cascader</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--cascader-height: 200px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Switch</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--switch-on-color: $--color-primary !default;</span><br><span class=\"line\">$--switch-off-color: $--border-color-base !default;</span><br><span class=\"line\">$--switch-disabled-color: $--border-color-lighter !default;</span><br><span class=\"line\">$--switch-disabled-text-color: $--color-text-placeholder !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--switch-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--switch-core-border-radius: 10px !default;</span><br><span class=\"line\">$--switch-width: 40px !default;</span><br><span class=\"line\">$--switch-height: 20px !default;</span><br><span class=\"line\">$--switch-button-size: 16px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Dialog</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--dialog-background-color: $--color-primary-light-4 !default;</span><br><span class=\"line\">$--dialog-box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3) !default;</span><br><span class=\"line\">$--dialog-close-hover-color: $--color-primary !default;</span><br><span class=\"line\">$--dialog-title-font-size: $--font-size-large !default;</span><br><span class=\"line\">$--dialog-font-size: 14px !default;</span><br><span class=\"line\">$--dialog-line-height: $--font-line-height-primary !default;</span><br><span class=\"line\">$--dialog-padding-primary: 20px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Table</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--table-border-color: $--border-color-lighter !default;</span><br><span class=\"line\">$--table-border: 1px solid $--table-border-color !default;</span><br><span class=\"line\">$--table-text-color: $--color-text-regular !default;</span><br><span class=\"line\">$--table-header-color: $--color-text-secondary !default;</span><br><span class=\"line\">$--table-row-hover-background: $--background-color-base !default;</span><br><span class=\"line\">$--table-current-row-background: $--color-primary-light-9 !default;</span><br><span class=\"line\">$--table-header-background: $--color-white !default;</span><br><span class=\"line\">$--table-footer-background: $--color-text-placeholder !default;</span><br><span class=\"line\">$--table-fixed-box-shadow: 0 0 10px rgba(0, 0, 0, .12) !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Pagination</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--pagination-font-size: 13px !default;</span><br><span class=\"line\">$--pagination-fill: $--color-white !default;</span><br><span class=\"line\">$--pagination-color: $--color-text-primary !default;</span><br><span class=\"line\">$--pagination-border-radius: 3px !default;</span><br><span class=\"line\">$--pagination-button-color: $--color-text-primary !default;</span><br><span class=\"line\">$--pagination-button-width: 35.5px !default;</span><br><span class=\"line\">$--pagination-button-height: 28px !default;</span><br><span class=\"line\">$--pagination-button-disabled-color: $--color-text-placeholder !default;</span><br><span class=\"line\">$--pagination-button-disabled-fill: $--color-white !default;</span><br><span class=\"line\">$--pagination-hover-fill: $--color-primary !default;</span><br><span class=\"line\">$--pagination-hover-color: $--color-white !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Popover</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--popover-fill: $--color-white !default;</span><br><span class=\"line\">$--popover-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--popover-border-color: $--border-color-lighter !default;</span><br><span class=\"line\">$--popover-arrow-size: 6px !default;</span><br><span class=\"line\">$--popover-padding: 12px !default;</span><br><span class=\"line\">$--popover-padding-large: 18px 20px !default;</span><br><span class=\"line\">$--popover-title-font-size: 16px !default;</span><br><span class=\"line\">$--popover-title-color: $--color-text-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Tooltip</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--tooltip-fill: $--color-text-primary !default;</span><br><span class=\"line\">$--tooltip-color: $--color-white !default;</span><br><span class=\"line\">$--tooltip-font-size: 12px !default;</span><br><span class=\"line\">$--tooltip-border-color: $--color-text-primary !default;</span><br><span class=\"line\">$--tooltip-arrow-size: 6px !default;</span><br><span class=\"line\">$--tooltip-padding: 10px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Tag</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--tag-padding: 0 10px !default;</span><br><span class=\"line\">$--tag-fill: rgba($--color-primary, 0.10) !default;</span><br><span class=\"line\">$--tag-color: $--color-primary !default;</span><br><span class=\"line\">$--tag-border: rgba($--color-primary, 0.20) !default;</span><br><span class=\"line\">$--tag-font-size: 12px !default;</span><br><span class=\"line\">$--tag-border-radius: 4px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--tag-info-fill: rgba($--color-info, 0.10) !default;</span><br><span class=\"line\">$--tag-info-border: rgba($--color-info, 0.20) !default;</span><br><span class=\"line\">$--tag-info-color: $--color-info !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--tag-primary-fill: rgba($--color-primary, 0.10) !default;</span><br><span class=\"line\">$--tag-primary-border: rgba($--color-primary, 0.20) !default;</span><br><span class=\"line\">$--tag-primary-color: $--color-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--tag-success-fill: rgba($--color-success, 0.10) !default;</span><br><span class=\"line\">$--tag-success-border: rgba($--color-success, 0.20) !default;</span><br><span class=\"line\">$--tag-success-color: $--color-success !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--tag-warning-fill: rgba($--color-warning, 0.10) !default;</span><br><span class=\"line\">$--tag-warning-border: rgba($--color-warning, 0.20) !default;</span><br><span class=\"line\">$--tag-warning-color: $--color-warning !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--tag-danger-fill: rgba($--color-danger, 0.10) !default;</span><br><span class=\"line\">$--tag-danger-border: rgba($--color-danger, 0.20) !default;</span><br><span class=\"line\">$--tag-danger-color: $--color-danger !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Tree</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--tree-node-hover-color: $--background-color-base !default;</span><br><span class=\"line\">$--tree-text-color: $--color-text-regular !default;</span><br><span class=\"line\">$--tree-expand-icon-color: $--color-text-placeholder !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Dropdown</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--dropdown-menu-box-shadow: $--box-shadow-light !default;</span><br><span class=\"line\">$--dropdown-menuItem-hover-fill: $--color-primary-light-9 !default;</span><br><span class=\"line\">$--dropdown-menuItem-hover-color: $--link-color !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Badge</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--badge-fill: $--color-danger !default;</span><br><span class=\"line\">$--badge-radius: 10px !default;</span><br><span class=\"line\">$--badge-font-size: 12px !default;</span><br><span class=\"line\">$--badge-padding: 6px !default;</span><br><span class=\"line\">$--badge-size: 18px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Card</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--card-border-color: $--border-color-lighter !default;</span><br><span class=\"line\">$--card-border-radius: 4px !default;</span><br><span class=\"line\">$--card-padding: 20px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Slider</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--slider-main-background-color: $--color-primary !default;</span><br><span class=\"line\">$--slider-runway-background-color: $--border-color-light !default;</span><br><span class=\"line\">$--slider-button-hover-color: mix($--color-primary, black, 97%) !default;</span><br><span class=\"line\">$--slider-stop-background-color: $--color-white !default;</span><br><span class=\"line\">$--slider-disable-color: $--color-text-placeholder !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--slider-margin: 16px 0 !default;</span><br><span class=\"line\">$--slider-border-radius: 3px !default;</span><br><span class=\"line\">$--slider-height: 6px !default;</span><br><span class=\"line\">$--slider-button-size: 16px !default;</span><br><span class=\"line\">$--slider-button-wrapper-size: 36px !default;</span><br><span class=\"line\">$--slider-button-wrapper-offset: -15px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Steps</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--steps-border-color: $--disabled-border-base !default;</span><br><span class=\"line\">$--steps-border-radius: 4px !default;</span><br><span class=\"line\">$--steps-padding: 20px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Menu</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--menu-item-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--menu-item-color: $--color-text-primary !default;</span><br><span class=\"line\">$--menu-item-fill: $--color-white !default;</span><br><span class=\"line\">$--menu-item-hover-fill: $--color-primary-light-9 !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Rate</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--rate-height: 20px !default;</span><br><span class=\"line\">$--rate-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--rate-icon-size: 18px !default;</span><br><span class=\"line\">$--rate-icon-margin: 6px !default;</span><br><span class=\"line\">$--rate-icon-color: $--color-text-placeholder !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* DatePicker</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--datepicker-color: $--color-text-regular !default;</span><br><span class=\"line\">$--datepicker-off-color: $--color-text-placeholder !default;</span><br><span class=\"line\">$--datepicker-header-color: $--color-text-regular !default;</span><br><span class=\"line\">$--datepicker-icon-color: $--color-text-primary !default;</span><br><span class=\"line\">$--datepicker-border-color: $--disabled-border-base !default;</span><br><span class=\"line\">$--datepicker-inner-border-color: <span class=\"comment\">#e4e4e4 !default;</span></span><br><span class=\"line\">$--datepicker-inrange-color: $--border-color-extra-light !default;</span><br><span class=\"line\">$--datepicker-inrange-hover-color: $--border-color-extra-light !default;</span><br><span class=\"line\">$--datepicker-active-color: $--color-primary !default;</span><br><span class=\"line\">$--datepicker-text-hover-color: $--color-primary !default;</span><br><span class=\"line\">$--datepicker-cell-hover-color: <span class=\"comment\">#fff !default;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* Loading</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--loading-spinner-size: 42px !default;</span><br><span class=\"line\">$--loading-fullscreen-spinner-size: 50px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Scrollbar</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--scrollbar-background-color: rgba($--color-text-secondary, .3) !default;</span><br><span class=\"line\">$--scrollbar-hover-background-color: rgba($--color-text-secondary, .5) !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Carousel</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--carousel-arrow-font-size: 12px !default;</span><br><span class=\"line\">$--carousel-arrow-size: 36px !default;</span><br><span class=\"line\">$--carousel-arrow-background: rgba(31, 45, 61, 0.11) !default;</span><br><span class=\"line\">$--carousel-arrow-hover-background: rgba(31, 45, 61, 0.23) !default;</span><br><span class=\"line\">$--carousel-indicator-width: 30px !default;</span><br><span class=\"line\">$--carousel-indicator-height: 2px !default;</span><br><span class=\"line\">$--carousel-indicator-padding-horizontal: 4px !default;</span><br><span class=\"line\">$--carousel-indicator-padding-vertical: 12px !default;</span><br><span class=\"line\">$--carousel-indicator-out-color: $--border-color-hover !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Collapse</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--collapse-border-color: $--border-color-lighter !default;</span><br><span class=\"line\">$--collapse-header-height: 48px !default;</span><br><span class=\"line\">$--collapse-header-padding: 20px !default;</span><br><span class=\"line\">$--collapse-header-fill: $--color-white !default;</span><br><span class=\"line\">$--collapse-header-color: $--color-text-primary !default;</span><br><span class=\"line\">$--collapse-header-size: 13px !default;</span><br><span class=\"line\">$--collapse-content-fill: $--color-white !default;</span><br><span class=\"line\">$--collapse-content-size: 13px !default;</span><br><span class=\"line\">$--collapse-content-color: $--color-text-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Transfer</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--transfer-border-color: $--border-color-lighter !default;</span><br><span class=\"line\">$--transfer-border-radius: $--border-radius-base !default;</span><br><span class=\"line\">$--transfer-panel-width: 200px !default;</span><br><span class=\"line\">$--transfer-panel-header-height: 40px !default;</span><br><span class=\"line\">$--transfer-panel-header-background: $--background-color-base !default;</span><br><span class=\"line\">$--transfer-panel-footer-height: 40px !default;</span><br><span class=\"line\">$--transfer-panel-body-height: 246px !default;</span><br><span class=\"line\">$--transfer-item-height: 30px !default;</span><br><span class=\"line\">$--transfer-item-hover-background: $--color-text-secondary !default;</span><br><span class=\"line\">$--transfer-filter-height: 32px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Header</span><br><span class=\"line\">  --------------------------*/</span><br><span class=\"line\">$--header-padding: 0 20px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Footer</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--footer-padding: 0 20px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Main</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--main-padding: 20px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Break-point</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--sm: 768px !default;</span><br><span class=\"line\">$--md: 992px !default;</span><br><span class=\"line\">$--lg: 1200px !default;</span><br><span class=\"line\">$--xl: 1920px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--breakpoints: (</span><br><span class=\"line\">  <span class=\"string\">'xs'</span> : (max-width: $--sm - 1),</span><br><span class=\"line\">  <span class=\"string\">'sm'</span> : (min-width: $--sm),</span><br><span class=\"line\">  <span class=\"string\">'md'</span> : (min-width: $--md),</span><br><span class=\"line\">  <span class=\"string\">'lg'</span> : (min-width: $--lg),</span><br><span class=\"line\">  <span class=\"string\">'xl'</span> : (min-width: $--xl)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">$--breakpoints-spec: (</span><br><span class=\"line\">  <span class=\"string\">'xs-only'</span> : (max-width: $--sm - 1),</span><br><span class=\"line\">  <span class=\"string\">'sm-and-up'</span> : (min-width: $--sm),</span><br><span class=\"line\">  <span class=\"string\">'sm-only'</span>: <span class=\"string\">\"(min-width: #&#123;$--sm&#125;) and (max-width: #&#123;$--md&#125; - 1)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">'sm-and-down'</span>: (max-width: $--md - 1),</span><br><span class=\"line\">  <span class=\"string\">'md-and-up'</span> : (min-width: $--md),</span><br><span class=\"line\">  <span class=\"string\">'md-only'</span>: <span class=\"string\">\"(min-width: #&#123;$--md&#125;) and (max-width: #&#123;$--lg &#125; - 1)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">'md-and-down'</span>: (max-width: $--lg - 1),</span><br><span class=\"line\">  <span class=\"string\">'lg-and-up'</span> : (min-width: $--lg),</span><br><span class=\"line\">  <span class=\"string\">'lg-only'</span>: <span class=\"string\">\"(min-width: #&#123;$--lg&#125;) and (max-width: #&#123;$--xl &#125; - 1)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">'lg-and-down'</span>: (max-width: $--xl - 1),</span><br><span class=\"line\">  <span class=\"string\">'xl-only'</span> : (min-width: $--xl),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"IntellIJ-IDEA-配置支持Vue\"><a href=\"#IntellIJ-IDEA-配置支持Vue\" class=\"headerlink\" title=\"IntellIJ IDEA 配置支持Vue\"></a>IntellIJ IDEA 配置支持Vue</h1><p>参考：<a href=\"https://www.jianshu.com/p/01d832e028ea\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/01d832e028ea</a><br>第一步：先安装vue插件:<br>file –&gt; settings –&gt; plugins，然后什么都不用输入，直接点击Browse repositories… 紧接着左上方输入“vue”，点击搜索结果里的vue.js，右边会有绿色install按钮，安装成功后重启idea，这样idea就能识别.vue文件了。<br>第二步：设置vue新建文件模板。</p>\n<h1 id=\"安装Element-ui\"><a href=\"#安装Element-ui\" class=\"headerlink\" title=\"安装Element-ui\"></a>安装Element-ui</h1><h1 id=\"vue2-0-element-UI-中-el-table-数据导出Excel\"><a href=\"#vue2-0-element-UI-中-el-table-数据导出Excel\" class=\"headerlink\" title=\"vue2.0 + element UI 中 el-table 数据导出Excel\"></a>vue2.0 + element UI 中 el-table 数据导出Excel</h1><p>最近后台项目中有需要将游戏用户提交的返利数据信息导出为excel表的形式，所以对此功能进行了简单的总结：</p>\n<h2 id=\"安装相关依赖\"><a href=\"#安装相关依赖\" class=\"headerlink\" title=\"安装相关依赖\"></a>安装相关依赖</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主要是两个依赖:(xlsx 和 file-saver)</span><br><span class=\"line\">npm install --save xlsx file-saver</span><br></pre></td></tr></table></figure>\n<p>对于这两个插件使用，github上边有更加详细的参考<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/SheetJS/js-xlsx](https://github.com/SheetJS/js-xlsx)</span><br><span class=\"line\">https://github.com/eligrey/FileSaver.js](https://github.com/eligrey/FileSaver.js</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在组件头里边引入插件\"><a href=\"#在组件头里边引入插件\" class=\"headerlink\" title=\"在组件头里边引入插件\"></a>在组件头里边引入插件</h2><p>(测试的时候，下边代码放到入口js文件main.js的时候没有效果，遗留问题，有待解决)（放到组件头里边能够实现效果）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import FileSaver from <span class=\"string\">'file-saver'</span></span><br><span class=\"line\">import XLSX from <span class=\"string\">'xlsx'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在对应组件里边methods里边写一个方法\"><a href=\"#在对应组件里边methods里边写一个方法\" class=\"headerlink\" title=\"在对应组件里边methods里边写一个方法\"></a>在对应组件里边methods里边写一个方法</h2><p>（到处的时候进行调用）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">exportExcel</span></span> () &#123;</span><br><span class=\"line\">    /* generate workbook object from table */</span><br><span class=\"line\">    <span class=\"built_in\">let</span> wb = XLSX.utils.table_to_book(document.querySelector(<span class=\"string\">'#rebateSetTable'</span>));</span><br><span class=\"line\">    /* get binary string as output */</span><br><span class=\"line\">    <span class=\"built_in\">let</span> wbout = XLSX.write(wb, &#123; bookType: <span class=\"string\">'xlsx'</span>, bookSST: <span class=\"literal\">true</span>, <span class=\"built_in\">type</span>: <span class=\"string\">'array'</span> &#125;);</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        FileSaver.saveAs(new Blob([wbout], &#123; <span class=\"built_in\">type</span>: <span class=\"string\">'application/octet-stream'</span> &#125;), <span class=\"string\">'用户提交返利表.xlsx'</span>);</span><br><span class=\"line\">    &#125; catch (e)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (typeof console !== <span class=\"string\">'undefined'</span>)</span><br><span class=\"line\">            console.log(e, wbout)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> wbout</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure></p>\n<p>提示：<br>上边方法中：XLSX.uitls.table_to_book( 放入的是table 的DOM 节点 ) ，sheetjs.xlsx 即为导出表格的名字，可修改！</p>\n<h2 id=\"点击导出按钮执行-exportExcel-的方法即可-。\"><a href=\"#点击导出按钮执行-exportExcel-的方法即可-。\" class=\"headerlink\" title=\"点击导出按钮执行 exportExcel 的方法即可 。\"></a>点击导出按钮执行 exportExcel 的方法即可 。</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=<span class=\"string\">\"export\"</span>&gt;</span><br><span class=\"line\">     &lt;el-button @click=<span class=\"string\">\"exportExcel\"</span> style=<span class=\"string\">\"margin-top: 2px;\"</span> size=<span class=\"string\">\"medium\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"success\"</span>&gt;导出&lt;/el-button&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"vue-element-ui自定义主题样式\"><a href=\"#vue-element-ui自定义主题样式\" class=\"headerlink\" title=\"vue element-ui自定义主题样式\"></a>vue element-ui自定义主题样式</h1><h3 id=\"新建一个element-variables-scss，并在-main-app-js入口文件引入\"><a href=\"#新建一个element-variables-scss，并在-main-app-js入口文件引入\" class=\"headerlink\" title=\"新建一个element-variables.scss，并在(main|app).js入口文件引入\"></a>新建一个element-variables.scss，并在(main|app).js入口文件引入</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from <span class=\"string\">'vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\">import Element from <span class=\"string\">'element-ui'</span></span><br><span class=\"line\">import <span class=\"string\">'@/styles/element-variables.scss'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"在-element-variables-scss，修改你要的主题或组件预设的样式变量即可\"><a href=\"#在-element-variables-scss，修改你要的主题或组件预设的样式变量即可\" class=\"headerlink\" title=\"在 element-variables.scss，修改你要的主题或组件预设的样式变量即可\"></a>在 element-variables.scss，修改你要的主题或组件预设的样式变量即可</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 改变 主题/样式相关 变量 */</span><br><span class=\"line\">$--color-primary: <span class=\"comment\">#1ABCB0;</span></span><br><span class=\"line\">$--select-option-hover-background: <span class=\"comment\">#def1f2;</span></span><br><span class=\"line\">$--select-option-selected-hover: <span class=\"comment\">#1abcb0;</span></span><br><span class=\"line\">$--table-row-hover-background: <span class=\"comment\">#f2f2f2;</span></span><br><span class=\"line\">$--table-header-color: <span class=\"comment\">#444;</span></span><br><span class=\"line\">$--pagination-button-disabled-fill: transparent;</span><br><span class=\"line\">$--pagination-fill: transparent;</span><br><span class=\"line\"></span><br><span class=\"line\">/* 改变 icon 字体路径变量，必需 */</span><br><span class=\"line\">$--font-path: <span class=\"string\">'~element-ui/lib/theme-chalk/fonts'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">/* 改变 路径变量，必需 */</span><br><span class=\"line\">@import <span class=\"string\">\"~element-ui/packages/theme-chalk/src/index\"</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"默认-element-variables-scss-全部变量内容\"><a href=\"#默认-element-variables-scss-全部变量内容\" class=\"headerlink\" title=\"默认 element-variables.scss 全部变量内容\"></a>默认 element-variables.scss 全部变量内容</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* Element Chalk Variables */</span><br><span class=\"line\"></span><br><span class=\"line\">/* Transition</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--all-transition: all .3s cubic-bezier(.645,.045,.355,1) !default;</span><br><span class=\"line\">$--fade-transition: opacity 300ms cubic-bezier(0.23, 1, 0.32, 1) !default;</span><br><span class=\"line\">$--fade-linear-transition: opacity 200ms linear !default;</span><br><span class=\"line\">$--md-fade-transition: transform 300ms cubic-bezier(0.23, 1, 0.32, 1), opacity 300ms cubic-bezier(0.23, 1, 0.32, 1) !default;</span><br><span class=\"line\">$--border-transition-base: border-color .2s cubic-bezier(.645,.045,.355,1) !default;</span><br><span class=\"line\">$--color-transition-base: color .2s cubic-bezier(.645,.045,.355,1) !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Colors</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--color-white: <span class=\"comment\">#fff !default;</span></span><br><span class=\"line\">$--color-black: <span class=\"comment\">#000 !default;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$--color-primary: <span class=\"comment\">#1ABCB0 !default;</span></span><br><span class=\"line\">$--color-primary-light-1: mix($--color-white, $--color-primary, 10%) !default; /* 53a8ff */</span><br><span class=\"line\">$--color-primary-light-2: mix($--color-white, $--color-primary, 20%) !default; /* 66b1ff */</span><br><span class=\"line\">$--color-primary-light-3: mix($--color-white, $--color-primary, 30%) !default; /* 79bbff */</span><br><span class=\"line\">$--color-primary-light-4: mix($--color-white, $--color-primary, 40%) !default; /* 8cc5ff */</span><br><span class=\"line\">$--color-primary-light-5: mix($--color-white, $--color-primary, 50%) !default; /* a0cfff */</span><br><span class=\"line\">$--color-primary-light-6: mix($--color-white, $--color-primary, 60%) !default; /* b3d8ff */</span><br><span class=\"line\">$--color-primary-light-7: mix($--color-white, $--color-primary, 70%) !default; /* c6e2ff */</span><br><span class=\"line\">$--color-primary-light-8: mix($--color-white, $--color-primary, 80%) !default; /* d9ecff */</span><br><span class=\"line\">$--color-primary-light-9: mix($--color-white, $--color-primary, 90%) !default; /* ecf5ff */</span><br><span class=\"line\"></span><br><span class=\"line\">$--color-success: <span class=\"comment\">#67c23a !default;</span></span><br><span class=\"line\">$--color-warning: <span class=\"comment\">#e6a23c !default;</span></span><br><span class=\"line\">$--color-danger: <span class=\"comment\">#f56c6c !default;</span></span><br><span class=\"line\">$--color-info: <span class=\"comment\">#909399 !default;</span></span><br><span class=\"line\"></span><br><span class=\"line\">$--color-success-light: mix($--color-white, $--color-success, 80%) !default;</span><br><span class=\"line\">$--color-warning-light: mix($--color-white, $--color-warning, 80%) !default;</span><br><span class=\"line\">$--color-danger-light: mix($--color-white, $--color-danger, 80%) !default;</span><br><span class=\"line\">$--color-info-light: mix($--color-white, $--color-info, 80%) !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--color-success-lighter: mix($--color-white, $--color-success, 90%) !default;</span><br><span class=\"line\">$--color-warning-lighter: mix($--color-white, $--color-warning, 90%) !default;</span><br><span class=\"line\">$--color-danger-lighter: mix($--color-white, $--color-danger, 90%) !default;</span><br><span class=\"line\">$--color-info-lighter: mix($--color-white, $--color-info, 90%) !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--color-text-primary: <span class=\"comment\">#303133 !default;</span></span><br><span class=\"line\">$--color-text-regular: <span class=\"comment\">#606266 !default;</span></span><br><span class=\"line\">$--color-text-secondary: <span class=\"comment\">#909399 !default;</span></span><br><span class=\"line\">$--color-text-placeholder: <span class=\"comment\">#c0c4cc !default;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* Link</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--link-color: $--color-primary-light-2 !default;</span><br><span class=\"line\">$--link-hover-color: $--color-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Background</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--background-color-base: <span class=\"comment\">#f5f7fa !default;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* Border</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--border-width-base: 1px !default;</span><br><span class=\"line\">$--border-style-base: solid !default;</span><br><span class=\"line\">$--border-color-base: <span class=\"comment\">#dcdfe6 !default;</span></span><br><span class=\"line\">$--border-color-light: <span class=\"comment\">#e4e7ed !default;</span></span><br><span class=\"line\">$--border-color-lighter: <span class=\"comment\">#ebeef5 !default;</span></span><br><span class=\"line\">$--border-color-extra-light: <span class=\"comment\">#f2f6fc !default;</span></span><br><span class=\"line\">$--border-color-hover: $--color-text-placeholder !default;</span><br><span class=\"line\">$--border-base: $--border-width-base $--border-style-base $--border-color-base !default;</span><br><span class=\"line\">$--border-radius-base: 4px !default;</span><br><span class=\"line\">$--border-radius-small: 2px !default;</span><br><span class=\"line\">$--border-radius-circle: 100% !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Box-shadow</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--box-shadow-base: 0 2px 4px rgba(0, 0, 0, .12), 0 0 6px rgba(0, 0, 0, .04) !default;</span><br><span class=\"line\">$--box-shadow-dark: 0 2px 4px rgba(0, 0, 0, .12), 0 0 6px rgba(0, 0, 0, .12) !default;</span><br><span class=\"line\">$--box-shadow-light: 0 2px 12px 0 rgba(0, 0, 0, 0.1) !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Fill</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--fill-base: $--color-white !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Font</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--font-path: <span class=\"string\">'fonts'</span> !default;</span><br><span class=\"line\">$--font-size-base: 14px !default;</span><br><span class=\"line\">$--font-size-small: 13px !default;</span><br><span class=\"line\">$--font-size-large: 18px !default;</span><br><span class=\"line\">$--font-color-disabled-base: <span class=\"comment\">#bbb !default;</span></span><br><span class=\"line\">$--font-weight-primary: 500 !default;</span><br><span class=\"line\">$--font-line-height-primary: 24px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Size</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--size-base: 14px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* z-index</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--index-normal: 1 !default;</span><br><span class=\"line\">$--index-top: 1000 !default;</span><br><span class=\"line\">$--index-popper: 2000 !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Disable base</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--disabled-fill-base: $--background-color-base !default;</span><br><span class=\"line\">$--disabled-color-base: $--color-text-placeholder !default;</span><br><span class=\"line\">$--disabled-border-base: $--border-color-light !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Icon</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--icon-color: <span class=\"comment\">#666 !default;</span></span><br><span class=\"line\">$--icon-color-base: $--color-info !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Checkbox</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--checkbox-font-size: 14px !default;</span><br><span class=\"line\">$--checkbox-font-weight: $--font-weight-primary !default;</span><br><span class=\"line\">$--checkbox-color: $--color-text-regular !default;</span><br><span class=\"line\">$--checkbox-input-height: 14px !default;</span><br><span class=\"line\">$--checkbox-input-width: 14px !default;</span><br><span class=\"line\">$--checkbox-input-border-radius: $--border-radius-small !default;</span><br><span class=\"line\">$--checkbox-input-fill: $--color-white !default;</span><br><span class=\"line\">$--checkbox-input-border: $--border-base !default;</span><br><span class=\"line\">$--checkbox-input-border-color: $--border-color-base !default;</span><br><span class=\"line\">$--checkbox-icon-color: $--color-white !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--checkbox-disabled-input-border-color: $--border-color-base !default;</span><br><span class=\"line\">$--checkbox-disabled-input-fill: <span class=\"comment\">#edf2fc !default;</span></span><br><span class=\"line\">$--checkbox-disabled-icon-color: $--color-text-placeholder !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--checkbox-disabled-checked-input-fill: $--border-color-extra-light !default;</span><br><span class=\"line\">$--checkbox-disabled-checked-input-border-color: $--border-color-base !default;</span><br><span class=\"line\">$--checkbox-disabled-checked-icon-color: $--color-text-placeholder !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--checkbox-checked-text-color: $--color-primary !default;</span><br><span class=\"line\">$--checkbox-checked-input-border-color: $--color-primary !default;</span><br><span class=\"line\">$--checkbox-checked-input-fill: $--color-primary !default;</span><br><span class=\"line\">$--checkbox-checked-icon-color: $--fill-base !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--checkbox-input-border-color-hover: $--color-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--checkbox-bordered-height: 40px !default;</span><br><span class=\"line\">$--checkbox-bordered-padding: 9px 20px 9px 10px !default;</span><br><span class=\"line\">$--checkbox-bordered-medium-padding: 7px 20px 7px 10px !default;</span><br><span class=\"line\">$--checkbox-bordered-small-padding: 5px 15px 5px 10px !default;</span><br><span class=\"line\">$--checkbox-bordered-mini-padding: 3px 15px 3px 10px !default;</span><br><span class=\"line\">$--checkbox-bordered-medium-input-height: 14px !default;</span><br><span class=\"line\">$--checkbox-bordered-medium-input-width: 14px !default;</span><br><span class=\"line\">$--checkbox-bordered-medium-height: 36px !default;</span><br><span class=\"line\">$--checkbox-bordered-small-input-height: 12px !default;</span><br><span class=\"line\">$--checkbox-bordered-small-input-width: 12px !default;</span><br><span class=\"line\">$--checkbox-bordered-small-height: 32px !default;</span><br><span class=\"line\">$--checkbox-bordered-mini-input-height: 12px !default;</span><br><span class=\"line\">$--checkbox-bordered-mini-input-width: 12px !default;</span><br><span class=\"line\">$--checkbox-bordered-mini-height: 28px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--checkbox-button-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--checkbox-button-checked-fill: $--color-primary !default;</span><br><span class=\"line\">$--checkbox-button-checked-color: $--color-white !default;</span><br><span class=\"line\">$--checkbox-button-checked-border-color: $--color-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/* Radio</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--radio-font-size: 14px !default;</span><br><span class=\"line\">$--radio-font-weight: $--font-weight-primary !default;</span><br><span class=\"line\">$--radio-color: $--color-text-regular !default;</span><br><span class=\"line\">$--radio-input-height: 14px !default;</span><br><span class=\"line\">$--radio-input-width: 14px !default;</span><br><span class=\"line\">$--radio-input-border-radius: $--border-radius-circle !default;</span><br><span class=\"line\">$--radio-input-fill: $--color-white !default;</span><br><span class=\"line\">$--radio-input-border: $--border-base !default;</span><br><span class=\"line\">$--radio-input-border-color: $--border-color-base !default;</span><br><span class=\"line\">$--radio-icon-color: $--color-white !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--radio-disabled-input-border-color: $--disabled-border-base !default;</span><br><span class=\"line\">$--radio-disabled-input-fill: $--disabled-fill-base !default;</span><br><span class=\"line\">$--radio-disabled-icon-color: $--disabled-fill-base !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--radio-disabled-checked-input-border-color: $--disabled-border-base !default;</span><br><span class=\"line\">$--radio-disabled-checked-input-fill: $--disabled-fill-base !default;</span><br><span class=\"line\">$--radio-disabled-checked-icon-color: $--color-text-placeholder !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--radio-checked-text-color: $--color-primary !default;</span><br><span class=\"line\">$--radio-checked-input-border-color: $--color-primary !default;</span><br><span class=\"line\">$--radio-checked-input-fill: $--color-white !default;</span><br><span class=\"line\">$--radio-checked-icon-color: $--color-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--radio-input-border-color-hover: $--color-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--radio-bordered-height: 40px !default;</span><br><span class=\"line\">$--radio-bordered-padding: 12px 20px 0 10px !default;</span><br><span class=\"line\">$--radio-bordered-medium-padding: 10px 20px 0 10px !default;</span><br><span class=\"line\">$--radio-bordered-small-padding: 8px 15px 0 10px !default;</span><br><span class=\"line\">$--radio-bordered-mini-padding: 6px 15px 0 10px !default;</span><br><span class=\"line\">$--radio-bordered-medium-input-height: 14px !default;</span><br><span class=\"line\">$--radio-bordered-medium-input-width: 14px !default;</span><br><span class=\"line\">$--radio-bordered-medium-height: 36px !default;</span><br><span class=\"line\">$--radio-bordered-small-input-height: 12px !default;</span><br><span class=\"line\">$--radio-bordered-small-input-width: 12px !default;</span><br><span class=\"line\">$--radio-bordered-small-height: 32px !default;</span><br><span class=\"line\">$--radio-bordered-mini-input-height: 12px !default;</span><br><span class=\"line\">$--radio-bordered-mini-input-width: 12px !default;</span><br><span class=\"line\">$--radio-bordered-mini-height: 28px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--radio-button-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--radio-button-checked-fill: $--color-primary !default;</span><br><span class=\"line\">$--radio-button-checked-color: $--color-white !default;</span><br><span class=\"line\">$--radio-button-checked-border-color: $--color-primary !default;</span><br><span class=\"line\">$--radio-button-disabled-checked-fill: $--border-color-extra-light !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Select</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--select-border-color-hover: $--border-color-hover !default;</span><br><span class=\"line\">$--select-disabled-border: $--disabled-border-base !default;</span><br><span class=\"line\">$--select-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--select-close-hover-color: $--color-text-secondary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--select-input-color: $--color-text-placeholder !default;</span><br><span class=\"line\">$--select-multiple-input-color: <span class=\"comment\">#666 !default;</span></span><br><span class=\"line\">$--select-input-focus-background: $--color-primary !default;</span><br><span class=\"line\">$--select-input-font-size: 14px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--select-option-color: $--color-text-regular !default;</span><br><span class=\"line\">$--select-option-disabled-color: $--color-text-placeholder !default;</span><br><span class=\"line\">$--select-option-disabled-background: $--color-white !default;</span><br><span class=\"line\">$--select-option-height: 34px !default;</span><br><span class=\"line\">$--select-option-hover-background: $--border-color-base !default;</span><br><span class=\"line\">$--select-option-selected: $--color-primary !default;</span><br><span class=\"line\">$--select-option-selected-hover: red !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--select-group-color: $--color-info !default;</span><br><span class=\"line\">$--select-group-height: 30px !default;</span><br><span class=\"line\">$--select-group-font-size: 12px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--select-dropdown-background: $--color-white !default;</span><br><span class=\"line\">$--select-dropdown-shadow: $--box-shadow-light !default;</span><br><span class=\"line\">$--select-dropdown-empty-color: <span class=\"comment\">#999 !default;</span></span><br><span class=\"line\">$--select-dropdown-max-height: 274px !default;</span><br><span class=\"line\">$--select-dropdown-padding: 6px 0 !default;</span><br><span class=\"line\">$--select-dropdown-empty-padding: 10px 0 !default;</span><br><span class=\"line\">$--select-dropdown-border: solid 1px $--border-color-light !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Alert</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--alert-padding: 8px 16px !default;</span><br><span class=\"line\">$--alert-border-radius: $--border-radius-base !default;</span><br><span class=\"line\">$--alert-title-font-size: 13px !default;</span><br><span class=\"line\">$--alert-description-font-size: 12px !default;</span><br><span class=\"line\">$--alert-close-font-size: 12px !default;</span><br><span class=\"line\">$--alert-close-customed-font-size: 13px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--alert-success-color: $--color-success-lighter !default;</span><br><span class=\"line\">$--alert-info-color: $--color-info-lighter !default;</span><br><span class=\"line\">$--alert-warning-color: $--color-warning-lighter !default;</span><br><span class=\"line\">$--alert-danger-color: $--color-danger-lighter !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--alert-icon-size: 16px !default;</span><br><span class=\"line\">$--alert-icon-large-size: 28px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Message Box</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--msgbox-width: 420px !default;</span><br><span class=\"line\">$--msgbox-border-radius: 4px !default;</span><br><span class=\"line\">$--msgbox-font-size: $--font-size-large !default;</span><br><span class=\"line\">$--msgbox-content-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--msgbox-content-color: $--color-text-regular !default;</span><br><span class=\"line\">$--msgbox-error-font-size: 12px !default;</span><br><span class=\"line\">$--msgbox-padding-primary: 15px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--msgbox-success-color: $--color-success !default;</span><br><span class=\"line\">$--msgbox-info-color: $--color-info !default;</span><br><span class=\"line\">$--msgbox-warning-color: $--color-warning !default;</span><br><span class=\"line\">$--msgbox-danger-color: $--color-danger !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Message</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--message-shadow: $--box-shadow-base !default;</span><br><span class=\"line\">$--message-min-width: 380px !default;</span><br><span class=\"line\">$--message-background-color: <span class=\"comment\">#edf2fc !default;</span></span><br><span class=\"line\">$--message-padding: 15px 15px 15px 20px !default;</span><br><span class=\"line\">$--message-content-color: $--color-text-regular !default;</span><br><span class=\"line\">$--message-close-color: $--color-text-placeholder !default;</span><br><span class=\"line\">$--message-close-size: 16px !default;</span><br><span class=\"line\">$--message-close-hover-color: $--color-text-secondary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--message-success-color: $--color-success !default;</span><br><span class=\"line\">$--message-info-color: $--color-info !default;</span><br><span class=\"line\">$--message-warning-color: $--color-warning !default;</span><br><span class=\"line\">$--message-danger-color: $--color-danger !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Notification</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--notification-width: 330px !default;</span><br><span class=\"line\">$--notification-padding: 14px 26px 14px 13px !default;</span><br><span class=\"line\">$--notification-radius: 8px !default;</span><br><span class=\"line\">$--notification-shadow: $--box-shadow-light !default;</span><br><span class=\"line\">$--notification-border-color: $--border-color-lighter !default;</span><br><span class=\"line\">$--notification-icon-size: 24px !default;</span><br><span class=\"line\">$--notification-close-font-size: $--message-close-size !default;</span><br><span class=\"line\">$--notification-group-margin: 13px !default;</span><br><span class=\"line\">$--notification-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--notification-color: $--color-text-regular !default;</span><br><span class=\"line\">$--notification-title-font-size: 16px !default;</span><br><span class=\"line\">$--notification-title-color: $--color-text-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--notification-close-color: $--color-text-secondary !default;</span><br><span class=\"line\">$--notification-close-hover-color: $--color-text-regular !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--notification-success-color: $--color-success !default;</span><br><span class=\"line\">$--notification-info-color: $--color-info !default;</span><br><span class=\"line\">$--notification-warning-color: $--color-warning !default;</span><br><span class=\"line\">$--notification-danger-color: $--color-danger !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Input</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--input-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--input-color: $--color-text-regular !default;</span><br><span class=\"line\">$--input-width: 140px !default;</span><br><span class=\"line\">$--input-height: 40px !default;</span><br><span class=\"line\">$--input-border: $--border-base !default;</span><br><span class=\"line\">$--input-border-color: $--border-color-base !default;</span><br><span class=\"line\">$--input-border-radius: $--border-radius-base !default;</span><br><span class=\"line\">$--input-border-color-hover: $--border-color-hover !default;</span><br><span class=\"line\">$--input-fill: $--color-white !default;</span><br><span class=\"line\">$--input-fill-disabled: $--disabled-fill-base !default;</span><br><span class=\"line\">$--input-color-disabled: $--font-color-disabled-base !default;</span><br><span class=\"line\">$--input-icon-color: $--color-text-placeholder !default;</span><br><span class=\"line\">$--input-placeholder-color: $--color-text-placeholder !default;</span><br><span class=\"line\">$--input-max-width: 314px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--input-hover-border: $--border-color-hover !default;</span><br><span class=\"line\">$--input-clear-hover-color: $--color-text-secondary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--input-focus-border: $--color-primary !default;</span><br><span class=\"line\">$--input-focus-fill: $--color-white !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--input-disabled-fill: $--disabled-fill-base !default;</span><br><span class=\"line\">$--input-disabled-border: $--disabled-border-base !default;</span><br><span class=\"line\">$--input-disabled-color: $--disabled-color-base !default;</span><br><span class=\"line\">$--input-disabled-placeholder-color: $--color-text-placeholder !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--input-medium-font-size: 14px !default;</span><br><span class=\"line\">$--input-medium-height: 36px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--input-small-font-size: 13px !default;</span><br><span class=\"line\">$--input-small-height: 32px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--input-mini-font-size: 12px !default;</span><br><span class=\"line\">$--input-mini-height: 28px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Cascader</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--cascader-menu-fill: $--fill-base !default;</span><br><span class=\"line\">$--cascader-menu-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--cascader-menu-radius: $--border-radius-base !default;</span><br><span class=\"line\">$--cascader-menu-border: $--border-base !default;</span><br><span class=\"line\">$--cascader-menu-border-color: $--border-color-base !default;</span><br><span class=\"line\">$--cascader-menu-border-width: $--border-width-base !default;</span><br><span class=\"line\">$--cascader-menu-color: $--color-text-regular !default;</span><br><span class=\"line\">$--cascader-menu-option-color-active: $--color-text-secondary !default;</span><br><span class=\"line\">$--cascader-menu-option-fill-active: rgba($--color-text-secondary, 0.12) !default;</span><br><span class=\"line\">$--cascader-menu-option-color-hover: $--color-text-regular !default;</span><br><span class=\"line\">$--cascader-menu-option-fill-hover: rgba($--color-text-primary, 0.06) !default;</span><br><span class=\"line\">$--cascader-menu-option-color-disabled: <span class=\"comment\">#999 !default;</span></span><br><span class=\"line\">$--cascader-menu-option-fill-disabled: rgba($--color-black, 0.06) !default;</span><br><span class=\"line\">$--cascader-menu-option-empty-color: <span class=\"comment\">#666 !default;</span></span><br><span class=\"line\">$--cascader-menu-group-color: <span class=\"comment\">#999 !default;</span></span><br><span class=\"line\">$--cascader-menu-shadow: 0 1px 2px rgba($--color-black, 0.14), 0 0 3px rgba($--color-black, 0.14) !default;</span><br><span class=\"line\">$--cascader-menu-option-pinyin-color: <span class=\"comment\">#999 !default;</span></span><br><span class=\"line\">$--cascader-menu-submenu-shadow: 1px 1px 2px rgba($--color-black, 0.14), 1px 0 2px rgba($--color-black, 0.14) !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Group</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--group-option-flex: 0 0 (1/5) * 100% !default;</span><br><span class=\"line\">$--group-option-offset-bottom: 12px !default;</span><br><span class=\"line\">$--group-option-fill-hover: rgba($--color-black, 0.06) !default;</span><br><span class=\"line\">$--group-title-color: $--color-black !default;</span><br><span class=\"line\">$--group-title-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--group-title-width: 66px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Tab</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--tab-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--tab-border-line: 1px solid <span class=\"comment\">#e4e4e4 !default;</span></span><br><span class=\"line\">$--tab-header-color-active: $--color-text-secondary !default;</span><br><span class=\"line\">$--tab-header-color-hover: $--color-text-regular !default;</span><br><span class=\"line\">$--tab-header-color: $--color-text-regular !default;</span><br><span class=\"line\">$--tab-header-fill-active: rgba($--color-black, 0.06) !default;</span><br><span class=\"line\">$--tab-header-fill-hover: rgba($--color-black, 0.06) !default;</span><br><span class=\"line\">$--tab-vertical-header-width: 90px !default;</span><br><span class=\"line\">$--tab-vertical-header-count-color: $--color-white !default;</span><br><span class=\"line\">$--tab-vertical-header-count-fill: $--color-text-secondary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Button</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--button-font-size: 14px !default;</span><br><span class=\"line\">$--button-font-weight: $--font-weight-primary !default;</span><br><span class=\"line\">$--button-border-radius: $--border-radius-base !default;</span><br><span class=\"line\">$--button-padding-vertical: 12px !default;</span><br><span class=\"line\">$--button-padding-horizontal: 20px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-medium-font-size: 14px !default;</span><br><span class=\"line\">$--button-medium-border-radius: $--border-radius-base !default;</span><br><span class=\"line\">$--button-medium-padding-vertical: 10px !default;</span><br><span class=\"line\">$--button-medium-padding-horizontal: 20px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-small-font-size: 12px !default;</span><br><span class=\"line\">$--button-small-border-radius: <span class=\"comment\">#&#123;$--border-radius-base - 1&#125; !default;</span></span><br><span class=\"line\">$--button-small-padding-vertical: 9px !default;</span><br><span class=\"line\">$--button-small-padding-horizontal: 15px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-mini-font-size: 12px !default;</span><br><span class=\"line\">$--button-mini-border-radius: <span class=\"comment\">#&#123;$--border-radius-base - 1&#125; !default;</span></span><br><span class=\"line\">$--button-mini-padding-vertical: 7px !default;</span><br><span class=\"line\">$--button-mini-padding-horizontal: 15px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-default-color: $--color-text-regular !default;</span><br><span class=\"line\">$--button-default-fill: $--color-white !default;</span><br><span class=\"line\">$--button-default-border: $--border-color-base !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-disabled-color: $--color-text-placeholder !default;</span><br><span class=\"line\">$--button-disabled-fill: $--color-white !default;</span><br><span class=\"line\">$--button-disabled-border: $--border-color-lighter !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-primary-border: $--color-primary !default;</span><br><span class=\"line\">$--button-primary-color: $--color-white !default;</span><br><span class=\"line\">$--button-primary-fill: $--color-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-success-border: $--color-success !default;</span><br><span class=\"line\">$--button-success-color: $--color-white !default;</span><br><span class=\"line\">$--button-success-fill: $--color-success !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-warning-border: $--color-warning !default;</span><br><span class=\"line\">$--button-warning-color: $--color-white !default;</span><br><span class=\"line\">$--button-warning-fill: $--color-warning !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-danger-border: $--color-danger !default;</span><br><span class=\"line\">$--button-danger-color: $--color-white !default;</span><br><span class=\"line\">$--button-danger-fill: $--color-danger !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-info-border: $--color-info !default;</span><br><span class=\"line\">$--button-info-color: $--color-white !default;</span><br><span class=\"line\">$--button-info-fill: $--color-info !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--button-hover-tint-percent: 20% !default;</span><br><span class=\"line\">$--button-active-shade-percent: 10% !default;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/* cascader</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--cascader-height: 200px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Switch</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--switch-on-color: $--color-primary !default;</span><br><span class=\"line\">$--switch-off-color: $--border-color-base !default;</span><br><span class=\"line\">$--switch-disabled-color: $--border-color-lighter !default;</span><br><span class=\"line\">$--switch-disabled-text-color: $--color-text-placeholder !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--switch-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--switch-core-border-radius: 10px !default;</span><br><span class=\"line\">$--switch-width: 40px !default;</span><br><span class=\"line\">$--switch-height: 20px !default;</span><br><span class=\"line\">$--switch-button-size: 16px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Dialog</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--dialog-background-color: $--color-primary-light-4 !default;</span><br><span class=\"line\">$--dialog-box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3) !default;</span><br><span class=\"line\">$--dialog-close-hover-color: $--color-primary !default;</span><br><span class=\"line\">$--dialog-title-font-size: $--font-size-large !default;</span><br><span class=\"line\">$--dialog-font-size: 14px !default;</span><br><span class=\"line\">$--dialog-line-height: $--font-line-height-primary !default;</span><br><span class=\"line\">$--dialog-padding-primary: 20px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Table</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--table-border-color: $--border-color-lighter !default;</span><br><span class=\"line\">$--table-border: 1px solid $--table-border-color !default;</span><br><span class=\"line\">$--table-text-color: $--color-text-regular !default;</span><br><span class=\"line\">$--table-header-color: $--color-text-secondary !default;</span><br><span class=\"line\">$--table-row-hover-background: $--background-color-base !default;</span><br><span class=\"line\">$--table-current-row-background: $--color-primary-light-9 !default;</span><br><span class=\"line\">$--table-header-background: $--color-white !default;</span><br><span class=\"line\">$--table-footer-background: $--color-text-placeholder !default;</span><br><span class=\"line\">$--table-fixed-box-shadow: 0 0 10px rgba(0, 0, 0, .12) !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Pagination</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--pagination-font-size: 13px !default;</span><br><span class=\"line\">$--pagination-fill: $--color-white !default;</span><br><span class=\"line\">$--pagination-color: $--color-text-primary !default;</span><br><span class=\"line\">$--pagination-border-radius: 3px !default;</span><br><span class=\"line\">$--pagination-button-color: $--color-text-primary !default;</span><br><span class=\"line\">$--pagination-button-width: 35.5px !default;</span><br><span class=\"line\">$--pagination-button-height: 28px !default;</span><br><span class=\"line\">$--pagination-button-disabled-color: $--color-text-placeholder !default;</span><br><span class=\"line\">$--pagination-button-disabled-fill: $--color-white !default;</span><br><span class=\"line\">$--pagination-hover-fill: $--color-primary !default;</span><br><span class=\"line\">$--pagination-hover-color: $--color-white !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Popover</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--popover-fill: $--color-white !default;</span><br><span class=\"line\">$--popover-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--popover-border-color: $--border-color-lighter !default;</span><br><span class=\"line\">$--popover-arrow-size: 6px !default;</span><br><span class=\"line\">$--popover-padding: 12px !default;</span><br><span class=\"line\">$--popover-padding-large: 18px 20px !default;</span><br><span class=\"line\">$--popover-title-font-size: 16px !default;</span><br><span class=\"line\">$--popover-title-color: $--color-text-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Tooltip</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--tooltip-fill: $--color-text-primary !default;</span><br><span class=\"line\">$--tooltip-color: $--color-white !default;</span><br><span class=\"line\">$--tooltip-font-size: 12px !default;</span><br><span class=\"line\">$--tooltip-border-color: $--color-text-primary !default;</span><br><span class=\"line\">$--tooltip-arrow-size: 6px !default;</span><br><span class=\"line\">$--tooltip-padding: 10px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Tag</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--tag-padding: 0 10px !default;</span><br><span class=\"line\">$--tag-fill: rgba($--color-primary, 0.10) !default;</span><br><span class=\"line\">$--tag-color: $--color-primary !default;</span><br><span class=\"line\">$--tag-border: rgba($--color-primary, 0.20) !default;</span><br><span class=\"line\">$--tag-font-size: 12px !default;</span><br><span class=\"line\">$--tag-border-radius: 4px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--tag-info-fill: rgba($--color-info, 0.10) !default;</span><br><span class=\"line\">$--tag-info-border: rgba($--color-info, 0.20) !default;</span><br><span class=\"line\">$--tag-info-color: $--color-info !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--tag-primary-fill: rgba($--color-primary, 0.10) !default;</span><br><span class=\"line\">$--tag-primary-border: rgba($--color-primary, 0.20) !default;</span><br><span class=\"line\">$--tag-primary-color: $--color-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--tag-success-fill: rgba($--color-success, 0.10) !default;</span><br><span class=\"line\">$--tag-success-border: rgba($--color-success, 0.20) !default;</span><br><span class=\"line\">$--tag-success-color: $--color-success !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--tag-warning-fill: rgba($--color-warning, 0.10) !default;</span><br><span class=\"line\">$--tag-warning-border: rgba($--color-warning, 0.20) !default;</span><br><span class=\"line\">$--tag-warning-color: $--color-warning !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--tag-danger-fill: rgba($--color-danger, 0.10) !default;</span><br><span class=\"line\">$--tag-danger-border: rgba($--color-danger, 0.20) !default;</span><br><span class=\"line\">$--tag-danger-color: $--color-danger !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Tree</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--tree-node-hover-color: $--background-color-base !default;</span><br><span class=\"line\">$--tree-text-color: $--color-text-regular !default;</span><br><span class=\"line\">$--tree-expand-icon-color: $--color-text-placeholder !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Dropdown</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--dropdown-menu-box-shadow: $--box-shadow-light !default;</span><br><span class=\"line\">$--dropdown-menuItem-hover-fill: $--color-primary-light-9 !default;</span><br><span class=\"line\">$--dropdown-menuItem-hover-color: $--link-color !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Badge</span><br><span class=\"line\">-------------------------- */</span><br><span class=\"line\">$--badge-fill: $--color-danger !default;</span><br><span class=\"line\">$--badge-radius: 10px !default;</span><br><span class=\"line\">$--badge-font-size: 12px !default;</span><br><span class=\"line\">$--badge-padding: 6px !default;</span><br><span class=\"line\">$--badge-size: 18px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Card</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--card-border-color: $--border-color-lighter !default;</span><br><span class=\"line\">$--card-border-radius: 4px !default;</span><br><span class=\"line\">$--card-padding: 20px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Slider</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--slider-main-background-color: $--color-primary !default;</span><br><span class=\"line\">$--slider-runway-background-color: $--border-color-light !default;</span><br><span class=\"line\">$--slider-button-hover-color: mix($--color-primary, black, 97%) !default;</span><br><span class=\"line\">$--slider-stop-background-color: $--color-white !default;</span><br><span class=\"line\">$--slider-disable-color: $--color-text-placeholder !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--slider-margin: 16px 0 !default;</span><br><span class=\"line\">$--slider-border-radius: 3px !default;</span><br><span class=\"line\">$--slider-height: 6px !default;</span><br><span class=\"line\">$--slider-button-size: 16px !default;</span><br><span class=\"line\">$--slider-button-wrapper-size: 36px !default;</span><br><span class=\"line\">$--slider-button-wrapper-offset: -15px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Steps</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--steps-border-color: $--disabled-border-base !default;</span><br><span class=\"line\">$--steps-border-radius: 4px !default;</span><br><span class=\"line\">$--steps-padding: 20px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Menu</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--menu-item-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--menu-item-color: $--color-text-primary !default;</span><br><span class=\"line\">$--menu-item-fill: $--color-white !default;</span><br><span class=\"line\">$--menu-item-hover-fill: $--color-primary-light-9 !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Rate</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--rate-height: 20px !default;</span><br><span class=\"line\">$--rate-font-size: $--font-size-base !default;</span><br><span class=\"line\">$--rate-icon-size: 18px !default;</span><br><span class=\"line\">$--rate-icon-margin: 6px !default;</span><br><span class=\"line\">$--rate-icon-color: $--color-text-placeholder !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* DatePicker</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--datepicker-color: $--color-text-regular !default;</span><br><span class=\"line\">$--datepicker-off-color: $--color-text-placeholder !default;</span><br><span class=\"line\">$--datepicker-header-color: $--color-text-regular !default;</span><br><span class=\"line\">$--datepicker-icon-color: $--color-text-primary !default;</span><br><span class=\"line\">$--datepicker-border-color: $--disabled-border-base !default;</span><br><span class=\"line\">$--datepicker-inner-border-color: <span class=\"comment\">#e4e4e4 !default;</span></span><br><span class=\"line\">$--datepicker-inrange-color: $--border-color-extra-light !default;</span><br><span class=\"line\">$--datepicker-inrange-hover-color: $--border-color-extra-light !default;</span><br><span class=\"line\">$--datepicker-active-color: $--color-primary !default;</span><br><span class=\"line\">$--datepicker-text-hover-color: $--color-primary !default;</span><br><span class=\"line\">$--datepicker-cell-hover-color: <span class=\"comment\">#fff !default;</span></span><br><span class=\"line\"></span><br><span class=\"line\">/* Loading</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--loading-spinner-size: 42px !default;</span><br><span class=\"line\">$--loading-fullscreen-spinner-size: 50px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Scrollbar</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--scrollbar-background-color: rgba($--color-text-secondary, .3) !default;</span><br><span class=\"line\">$--scrollbar-hover-background-color: rgba($--color-text-secondary, .5) !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Carousel</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--carousel-arrow-font-size: 12px !default;</span><br><span class=\"line\">$--carousel-arrow-size: 36px !default;</span><br><span class=\"line\">$--carousel-arrow-background: rgba(31, 45, 61, 0.11) !default;</span><br><span class=\"line\">$--carousel-arrow-hover-background: rgba(31, 45, 61, 0.23) !default;</span><br><span class=\"line\">$--carousel-indicator-width: 30px !default;</span><br><span class=\"line\">$--carousel-indicator-height: 2px !default;</span><br><span class=\"line\">$--carousel-indicator-padding-horizontal: 4px !default;</span><br><span class=\"line\">$--carousel-indicator-padding-vertical: 12px !default;</span><br><span class=\"line\">$--carousel-indicator-out-color: $--border-color-hover !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Collapse</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--collapse-border-color: $--border-color-lighter !default;</span><br><span class=\"line\">$--collapse-header-height: 48px !default;</span><br><span class=\"line\">$--collapse-header-padding: 20px !default;</span><br><span class=\"line\">$--collapse-header-fill: $--color-white !default;</span><br><span class=\"line\">$--collapse-header-color: $--color-text-primary !default;</span><br><span class=\"line\">$--collapse-header-size: 13px !default;</span><br><span class=\"line\">$--collapse-content-fill: $--color-white !default;</span><br><span class=\"line\">$--collapse-content-size: 13px !default;</span><br><span class=\"line\">$--collapse-content-color: $--color-text-primary !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Transfer</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--transfer-border-color: $--border-color-lighter !default;</span><br><span class=\"line\">$--transfer-border-radius: $--border-radius-base !default;</span><br><span class=\"line\">$--transfer-panel-width: 200px !default;</span><br><span class=\"line\">$--transfer-panel-header-height: 40px !default;</span><br><span class=\"line\">$--transfer-panel-header-background: $--background-color-base !default;</span><br><span class=\"line\">$--transfer-panel-footer-height: 40px !default;</span><br><span class=\"line\">$--transfer-panel-body-height: 246px !default;</span><br><span class=\"line\">$--transfer-item-height: 30px !default;</span><br><span class=\"line\">$--transfer-item-hover-background: $--color-text-secondary !default;</span><br><span class=\"line\">$--transfer-filter-height: 32px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Header</span><br><span class=\"line\">  --------------------------*/</span><br><span class=\"line\">$--header-padding: 0 20px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Footer</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--footer-padding: 0 20px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Main</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--main-padding: 20px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">/* Break-point</span><br><span class=\"line\">--------------------------*/</span><br><span class=\"line\">$--sm: 768px !default;</span><br><span class=\"line\">$--md: 992px !default;</span><br><span class=\"line\">$--lg: 1200px !default;</span><br><span class=\"line\">$--xl: 1920px !default;</span><br><span class=\"line\"></span><br><span class=\"line\">$--breakpoints: (</span><br><span class=\"line\">  <span class=\"string\">'xs'</span> : (max-width: $--sm - 1),</span><br><span class=\"line\">  <span class=\"string\">'sm'</span> : (min-width: $--sm),</span><br><span class=\"line\">  <span class=\"string\">'md'</span> : (min-width: $--md),</span><br><span class=\"line\">  <span class=\"string\">'lg'</span> : (min-width: $--lg),</span><br><span class=\"line\">  <span class=\"string\">'xl'</span> : (min-width: $--xl)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">$--breakpoints-spec: (</span><br><span class=\"line\">  <span class=\"string\">'xs-only'</span> : (max-width: $--sm - 1),</span><br><span class=\"line\">  <span class=\"string\">'sm-and-up'</span> : (min-width: $--sm),</span><br><span class=\"line\">  <span class=\"string\">'sm-only'</span>: <span class=\"string\">\"(min-width: #&#123;$--sm&#125;) and (max-width: #&#123;$--md&#125; - 1)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">'sm-and-down'</span>: (max-width: $--md - 1),</span><br><span class=\"line\">  <span class=\"string\">'md-and-up'</span> : (min-width: $--md),</span><br><span class=\"line\">  <span class=\"string\">'md-only'</span>: <span class=\"string\">\"(min-width: #&#123;$--md&#125;) and (max-width: #&#123;$--lg &#125; - 1)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">'md-and-down'</span>: (max-width: $--lg - 1),</span><br><span class=\"line\">  <span class=\"string\">'lg-and-up'</span> : (min-width: $--lg),</span><br><span class=\"line\">  <span class=\"string\">'lg-only'</span>: <span class=\"string\">\"(min-width: #&#123;$--lg&#125;) and (max-width: #&#123;$--xl &#125; - 1)\"</span>,</span><br><span class=\"line\">  <span class=\"string\">'lg-and-down'</span>: (max-width: $--xl - 1),</span><br><span class=\"line\">  <span class=\"string\">'xl-only'</span> : (min-width: $--xl),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>"},{"title":"vuex","date":"2019-08-15T03:20:43.000Z","_content":"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式\n大型项目，涉及复杂的交互时，用vuex","source":"_posts/vuex.md","raw":"---\ntitle: vuex\ndate: 2019-08-15 11:20:43\ncategories:\n- VUE\ntags: \n    - VUE\n---\nVuex 是一个专为 Vue.js 应用程序开发的状态管理模式\n大型项目，涉及复杂的交互时，用vuex","slug":"vuex","published":1,"updated":"2019-08-16T02:22:15.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cwb003xt09z4vmnk0bz","content":"<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式<br>大型项目，涉及复杂的交互时，用vuex</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式<br>大型项目，涉及复杂的交互时，用vuex</p>\n"},{"title":"前端工作流搭建","date":"2019-07-03T14:24:57.000Z","_content":"\n# 1. 工作流创建\n## github申请注册\n## 建立ZJHBT仓库\n 若仓库类型为Private,可以在setting —> Collaborator给其他人开启自己版本库的权限。（最多3个，否则需包月）\n## Jenkins\n### 安装\n 安装java 环境，下载对应版本，这里下载jdk-8u211-windows-x64.exe，须有Orale账户\n 本项目Jenkins账户，访问网址http:xx.xx.xx（默认端口8080，可修改）\n### Jenkins与git配置\n参考：https://juejin.im/post/5ad1980e6fb9a028c42ea1be\n","source":"_posts/前端工作流.md","raw":"---\ntitle: 前端工作流搭建\ndate: 2019-7-3 22:24:57\ncategories:\n- 其他前端技术\ntags: [前端工作流]\n---\n\n# 1. 工作流创建\n## github申请注册\n## 建立ZJHBT仓库\n 若仓库类型为Private,可以在setting —> Collaborator给其他人开启自己版本库的权限。（最多3个，否则需包月）\n## Jenkins\n### 安装\n 安装java 环境，下载对应版本，这里下载jdk-8u211-windows-x64.exe，须有Orale账户\n 本项目Jenkins账户，访问网址http:xx.xx.xx（默认端口8080，可修改）\n### Jenkins与git配置\n参考：https://juejin.im/post/5ad1980e6fb9a028c42ea1be\n","slug":"前端工作流","published":1,"updated":"2019-07-17T11:39:42.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cwg0041t09zlqpy7yw3","content":"<h1 id=\"1-工作流创建\"><a href=\"#1-工作流创建\" class=\"headerlink\" title=\"1. 工作流创建\"></a>1. 工作流创建</h1><h2 id=\"github申请注册\"><a href=\"#github申请注册\" class=\"headerlink\" title=\"github申请注册\"></a>github申请注册</h2><h2 id=\"建立ZJHBT仓库\"><a href=\"#建立ZJHBT仓库\" class=\"headerlink\" title=\"建立ZJHBT仓库\"></a>建立ZJHBT仓库</h2><p> 若仓库类型为Private,可以在setting —&gt; Collaborator给其他人开启自己版本库的权限。（最多3个，否则需包月）</p>\n<h2 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p> 安装java 环境，下载对应版本，这里下载jdk-8u211-windows-x64.exe，须有Orale账户<br> 本项目Jenkins账户，访问网址http:xx.xx.xx（默认端口8080，可修改）</p>\n<h3 id=\"Jenkins与git配置\"><a href=\"#Jenkins与git配置\" class=\"headerlink\" title=\"Jenkins与git配置\"></a>Jenkins与git配置</h3><p>参考：<a href=\"https://juejin.im/post/5ad1980e6fb9a028c42ea1be\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ad1980e6fb9a028c42ea1be</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-工作流创建\"><a href=\"#1-工作流创建\" class=\"headerlink\" title=\"1. 工作流创建\"></a>1. 工作流创建</h1><h2 id=\"github申请注册\"><a href=\"#github申请注册\" class=\"headerlink\" title=\"github申请注册\"></a>github申请注册</h2><h2 id=\"建立ZJHBT仓库\"><a href=\"#建立ZJHBT仓库\" class=\"headerlink\" title=\"建立ZJHBT仓库\"></a>建立ZJHBT仓库</h2><p> 若仓库类型为Private,可以在setting —&gt; Collaborator给其他人开启自己版本库的权限。（最多3个，否则需包月）</p>\n<h2 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p> 安装java 环境，下载对应版本，这里下载jdk-8u211-windows-x64.exe，须有Orale账户<br> 本项目Jenkins账户，访问网址http:xx.xx.xx（默认端口8080，可修改）</p>\n<h3 id=\"Jenkins与git配置\"><a href=\"#Jenkins与git配置\" class=\"headerlink\" title=\"Jenkins与git配置\"></a>Jenkins与git配置</h3><p>参考：<a href=\"https://juejin.im/post/5ad1980e6fb9a028c42ea1be\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ad1980e6fb9a028c42ea1be</a></p>\n"},{"title":"垂直居中","date":"2019-01-05T01:25:40.000Z","_content":"# 16种方法实现水平居中垂直居中\n熟悉水平居中和垂直居中的方法, 不为别的, 就为用的时候能够信手拈来. 下面直接步入正题.\n原文：16种方法实现水平居中垂直居中\n\n## 水平居中\n1) 若是行内元素, 给其父元素设置 text-align:center,即可实现行内元素水平居中.\n\n2) 若是块级元素, 该元素设置 margin:0 auto即可.\n\n3) 若子元素包含 float:left 属性, 为了让子元素水平居中, 则可让父元素宽度设置为fit-content,并且配合margin, 作如下设置:\n```bash\n.parent{\n    width: -moz-fit-content;\n    width: -webkit-fit-content;\n    width:fit-content;\n    margin:0 auto;\n}\n```\nfit-content是CSS3中给width属性新加的一个属性值,它配合margin可以轻松实现水平居中, 目前只支持Chrome 和 Firefox浏览器.\n\n4) 使用flex 2012年版本布局, 可以轻松的实现水平居中, 子元素设置如下:\n\n.son{\n    display: flex;\n    justify-content: center;\n}复制代码\n5) 使用flex 2009年版本, 父元素display: box;box-pack: center;如下设置:\n\n.parent {\n    display: -webkit-box;\n    -webkit-box-orient: horizontal;\n    -webkit-box-pack: center;\n    display: -moz-box;\n    -moz-box-orient: horizontal;\n    -moz-box-pack: center;\n    display: -o-box;\n      -o-box-orient: horizontal;\n      -o-box-pack: center;\n      display: -ms-box;\n      -ms-box-orient: horizontal;\n      -ms-box-pack: center;\n      display: box;\n      box-orient: horizontal;\n      box-pack: center;\n}复制代码\n6) 使用CSS3中新增的transform属性, 子元素设置如下:\n\n.son{\n    position:absolute;\n      left:50%;\n      transform:translate(-50%,0);\n}复制代码\n7) 使用绝对定位方式, 以及负值的margin-left, 子元素设置如下:\n\n.son{\n    position:absolute;\n    width:固定;\n    left:50%;\n    margin-left:-0.5宽度;\n}复制代码\n8) 使用绝对定位方式, 以及left:0;right:0;margin:0 auto; 子元素设置如下:\n\n.son{\n    position:absolute;\n    width:固定;\n    left:0;\n    right:0;\n    margin:0 auto;\n}复制代码\n## 垂直居中\n### 单行文本\n1) 若元素是单行文本, 则可设置 line-height 等于父元素高度\n\n### 行内块级元素\n2) 若元素是行内块级元素, 基本思想是使用display: inline-block, vertical-align: middle和一个伪元素让内容块处于容器中央.\n\n.parent::after, .son{\n    display:inline-block;\n    vertical-align:middle;\n}\n.parent::after{\n    content:'';\n    height:100%;\n}复制代码\n这是一种很流行的方法, 也适应IE7.\n\n### 元素高度不定\n3) 可用 vertical-align 属性, 而vertical-align只有在父层为 td 或者 th 时, 才会生效, 对于其他块级元素, 例如 div、p 等, 默认情况是不支持的. 为了使用vertical-align, 我们需要设置父元素display:table, 子元素 display:table-cell;vertical-align:middle;\n\n优点\n\n元素高度可以动态改变, 不需再CSS中定义, 如果父元素没有足够空间时, 该元素内容也不会被截断.\n\n缺点\n\nIE6~7, 甚至IE8 beta中无效.\n\n4) 可用 Flex 2012版, 这是CSS布局未来的趋势. Flexbox是CSS3新增属性, 设计初衷是为了解决像垂直居中这样的常见布局问题. 相关的文章如《弹性盒模型Flex指南》\n\n父元素做如下设置即可保证子元素垂直居中:\n\n.parent {\n  display: flex;\n  align-items: center;\n}复制代码\n优点\n\n内容块的宽高任意, 优雅的溢出.\n可用于更复杂高级的布局技术中.\n缺点\n\nIE8/IE9不支持\n需要浏览器厂商前缀\n渲染上可能会有一些问题\n5) 使用flex 2009版.\n\n.parent {\n      display: box;\n      box-orient: vertical;\n      box-pack: center;\n}复制代码\n优点\n\n实现简单, 扩展性强\n\n缺点\n\n兼容性差, 不支持IE\n\n6) 可用 transform , 设置父元素相对定位(position:relative), 子元素如下css样式:\n\n.son{\n    position:absolute;\n    top:50%;\n    -webkit-transform: translate(-50%,-50%);  \n    -ms-transform: translate(-50%,-50%);\n    transform: translate(-50%,-50%);\n}复制代码\n优点\n\n代码量少\n\n缺点\n\nIE8不支持, 属性需要追加浏览器厂商前缀, 可能干扰其他 transform 效果, 某些情形下会出现文本或元素边界渲染模糊的现象.\n\n元素高度固定\n7) 设置父元素相对定位(position:relative), 子元素如下css样式:\n\n.son{\n    position:absolute;\n    top:50%;\n    height:固定;\n    margin-top:-0.5高度;\n}复制代码\n优点\n\n适用于所有浏览器.\n\n缺点\n\n父元素空间不够时, 子元素可能不可见(当浏览器窗口缩小时,滚动条不出现时).如果子元素设置了overflow:auto, 则高度不够时, 会出现滚动条.\n\n8) 设置父元素相对定位(position:relative), 子元素如下css样式:\n\n.son{\n    position:absolute;\n    height:固定;\n    top:0;\n    bottom:0;\n    margin:auto 0;\n}复制代码\n优点\n\n简单\n\n缺点\n\n没有足够空间时, 子元素会被截断, 但不会有滚动条.\n\n## 总结\n水平居中较为简单, 共提供了8种方法, 一般情况下 text-align:center,marin:0 auto; 足矣\n\n① text-align:center;\n② margin:0 auto;\n③ width:fit-content;\n④ flex\n⑤ 盒模型\n⑥ transform\n⑦ ⑧ 两种不同的绝对定位方法\n垂直居中, 共提供了8种方法.\n\n① 单行文本, line-height\n② 行内块级元素, 使用 display: inline-block, vertical-align: middle; 加上伪元素辅助实现\n③ vertical-align\n④ flex\n⑤ 盒模型\n⑥ transform\n⑦ ⑧ 两种不同的绝对定位方法\n我们发现, flex, 盒模型, transform, 绝对定位, 这几种方法同时适用于水平居中和垂直居中.\n\n# 水平垂直居中实现\n\n## 仅居中元素定宽高适用：\n- [absolute + 负margin](http://yanhaijing.com/vertical-center/absolute1.html)\n- [absolute + margin auto](http://yanhaijing.com/vertical-center/absolute2.html)\n- [absolute + calc](http://yanhaijing.com/vertical-center/absolute3.html)\n\n## 居中元素不定宽高适用：\n- [absolute + transform](http://yanhaijing.com/vertical-center/absolute4.html)\n- [writing-mode](http://yanhaijing.com/vertical-center/writing-mode.html)\n- [lineheight](http://yanhaijing.com/vertical-center/lineheight.html)\n- [table](http://yanhaijing.com/vertical-center/table.html)\n- [css-table](http://yanhaijing.com/vertical-center/css-table.html)\n- [flex](http://yanhaijing.com/vertical-center/flex.html)\n- [grid](http://yanhaijing.com/vertical-center/grid.html)\n\n## absolute + 负margin\n为了实现上面的效果先来做些准备工作，假设HTML代码如下，总共两个元素，父元素和子元素\n```\n<div class=\"wp\">\n    <div class=\"box size\">123123</div>\n</div>\n```\nwp是父元素的类名，box是子元素的类名，因为有定宽和不定宽的区别，size用来表示指定宽度，下面是所有效果都要用到的公共代码，主要是设置颜色和宽高\n注意：后面不在重复这段公共代码，只会给出相应提示\n```\n/* 公共代码 */\n.wp {\n    border: 1px solid red;\n    width: 300px;\n    height: 300px;\n}\n\n.box {\n    background: green;    \n}\n\n.box.size{\n    width: 100px;\n    height: 100px;\n}\n/* 公共代码 */\n```\n绝对定位的百分比是相对于父元素的宽高，通过这个特性可以让子元素的居中显示，但绝对定位是基于子元素的左上角，期望的效果是子元素的中心居中显示为了修正这个问题，可以借助外边距的负值，负的外边距可以让元素向相反方向定位，通过指定子元素的外边距为子元素宽度一半的负值，就可以让子元素居中了，css代码如下\n```\n/* 此处引用上面的公共代码 */\n/* 此处引用上面的公共代码 */\n\n/* 定位代码 */\n.wp {\n    position: relative;\n}\n.box {\n    position: absolute;;\n    top: 50%;\n    left: 50%;\n    margin-left: -50px;\n    margin-top: -50px;\n}\n```\n这是我比较常用的方式，这种方式比较好理解，兼容性也很好，缺点是<font color=\"red\">需要知道子元素的宽高</font>\n\n## absolute + margin auto\n这种方式也要求居中元素的宽高必须固定，HTML代码如下\n```\n<div class=\"wp\">\n    <div class=\"box size\">123123</div>\n</div>\n```\n这种方式通过设置各个方向的距离都是0，此时再讲margin设为auto，就可以在各个方向上居中了\n```\n/* 此处引用上面的公共代码 */\n/* 此处引用上面的公共代码 */\n\n/* 定位代码 */\n.wp {\n    position: relative;\n}\n.box {\n    position: absolute;;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n}\n```\n这种方法兼容性也很好，缺点是需要知道子元素的宽高\n\n## absolute + calc\n这种方式也要求居中元素的宽高必须固定，所以我们为box增加size类，HTML代码如下\n```\n<div class=\"wp\">\n    <div class=\"box size\">123123</div>\n</div>\n```\n感谢css3带来了计算属性，既然top的百分比是基于元素的左上角，那么在减去宽度的一半就好了，代码如下\n```\n/* 此处引用上面的公共代码 */\n/* 此处引用上面的公共代码 */\n\n/* 定位代码 */\n.wp {\n    position: relative;\n}\n.box {\n    position: absolute;;\n    top: calc(50% - 50px);\n    left: calc(50% - 50px);\n}\n```\n这种方法兼容性依赖calc的兼容性，缺点是需要知道子元素的宽高\n\n## absolute + transform\n还是绝对定位，但这个方法不需要子元素固定宽高，所以不再需要size类了，HTML代码如下\n```\n<div class=\"wp\">\n    <div class=\"box\">123123</div>\n</div>\n```\n修复绝对定位的问题，还可以使用css3新增的transform，transform的translate属性也可以设置百分比，其是相对于自身的宽和高，所以可以讲translate设置为-50%，就可以做到居中了，代码如下\n```\n/* 此处引用上面的公共代码 */\n/* 此处引用上面的公共代码 */\n\n/* 定位代码 */\n.wp {\n    position: relative;\n}\n.box {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n}\n```\n这种方法兼容性依赖translate2d的兼容性\n\n## line-height\n利用行内元素居中属性也可以做到水平垂直居中，HTML代码如下\n```\n<div class=\"wp\">\n    <div class=\"box\">123123</div>\n</div>\n```\n把box设置为行内元素，通过text-align就可以做到水平居中，但很多同学可能不知道通过通过vertical-align也可以在垂直方向做到居中，代码如下\n```\n/* 此处引用上面的公共代码 */\n/* 此处引用上面的公共代码 */\n\n/* 定位代码 */\n.wp {\n    line-height: 300px;\n    text-align: center;\n    font-size: 0px;\n}\n.box {\n    font-size: 16px;\n    display: inline-block;\n    vertical-align: middle;\n    line-height: initial;\n    text-align: left; /* 修正文字 */\n}\n```\n这种方法需要在子元素中将文字显示重置为想要的效果\n\n## writing-mode\nwriting-mode可以改变文字的显示方向，比如可以通过writing-mode让文字的显示变为垂直方向\n```\n<div class=\"div1\">水平方向</div>\n<div class=\"div2\">垂直方向</div>\n.div2 {\n    writing-mode: vertical-lr;\n}\n\n水平方向\n垂\n直\n方\n向\n```\n更神奇的是所有水平方向上的css属性，都会变为垂直方向上的属性，比如text-align，通过writing-mode和text-align就可以做到水平和垂直方向的居中了，只不过要稍微麻烦一点\n```\n<div class=\"wp\">\n    <div class=\"wp-inner\">\n        <div class=\"box\">123123</div>\n    </div>\n</div>\n复制代码/* 此处引用上面的公共代码 */\n/* 此处引用上面的公共代码 */\n\n/* 定位代码 */\n.wp {\n    writing-mode: vertical-lr;\n    text-align: center;\n}\n.wp-inner {\n    writing-mode: horizontal-tb;\n    display: inline-block;\n    text-align: center;\n    width: 100%;\n}\n.box {\n    display: inline-block;\n    margin: auto;\n    text-align: left;\n}\n```\n这种方法实现起来和理解起来都稍微有些复杂\n\n## table\n曾经table被用来做页面布局，现在没人这么做了，但table也能够实现水平垂直居中，但是会增加很多冗余代码\n```\n<table>\n    <tbody>\n        <tr>\n            <td class=\"wp\">\n                <div class=\"box\">123123</div>\n            </td>\n        </tr>\n    </tbody>\n</table>\n```\ntabel单元格中的内容天然就是垂直居中的，只要添加一个水平居中属性就好了\n```\n.wp {\n    text-align: center;\n}\n.box {\n    display: inline-block;\n}\n```\n这种方法就是代码太冗余，而且也不是table的正确用法\n\n## css-table\ncss新增的table属性，可以让我们把普通元素，变为table元素的现实效果，通过这个特性也可以实现水平垂直居中\n```\n<div class=\"wp\">\n    <div class=\"box\">123123</div>\n</div>\n```\n下面通过css属性，可以让div显示的和table一样\n```\n.wp {\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n}\n.box {\n    display: inline-block;\n}\n```\n复制代码这种方法和table一样的原理，但却没有那么多冗余代码，兼容性也还不错\n\n## flex\nflex作为现代的布局方案，颠覆了过去的经验，只需几行代码就可以优雅的做到水平垂直居中\n```\n<div class=\"wp\">\n    <div class=\"box\">123123</div>\n</div>\n.wp {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n```\n目前在移动端已经完全可以使用flex了，PC端需要看自己业务的兼容性情况\n\n## grid\ncss新出的网格布局，由于兼容性不太好，一直没太关注，通过grid也可以实现水平垂直居中\n```\n<div class=\"wp\">\n    <div class=\"box\">123123</div>\n</div>\n.wp {\n    display: grid;\n}\n.box {\n    align-self: center;\n    justify-self: center;\n}\n```\n代码量也很少，但兼容性不如flex，不推荐使用\n\n## 总结\n\n下面对比下各个方式的优缺点，肯定又双叒叕该有同学说回字的写法了，简单总结下\n\n- PC端有兼容性要求，宽高固定，推荐absolute + 负margin\n- PC端有兼容要求，宽高不固定，推荐css-table\n- PC端无兼容性要求，推荐flex\n- 移动端推荐使用flex\n\n**小贴士：**关于flex的兼容性决方案，请看这里《[移动端flex布局实战](//yanhaijing.com/css/2016/08/21/flex-practice-on-mobile/)》\n\n| 方法                     | 居中元素定宽高固定 | PC兼容性                        | 移动端兼容性          |\n| ---------------------- | --------- | ---------------------------- | --------------- |\n| absolute + 负margin     | 是         | ie6+, chrome4+, firefox2+    | 安卓2.3+, iOS6+   |\n| absolute + margin auto | 是         | ie6+, chrome4+, firefox2+    | 安卓2.3+, iOS6+   |\n| absolute + calc        | 是         | ie9+, chrome19+, firefox4+   | 安卓4.4+, iOS6+   |\n| absolute + transform   | 否         | ie9+, chrome4+, firefox3.5+  | 安卓3+, iOS6+     |\n| writing-mode           | 否         | ie6+, chrome4+, firefox3.5+  | 安卓2.3+, iOS5.1+ |\n| lineheight             | 否         | ie6+, chrome4+, firefox2+    | 安卓2.3+, iOS6+   |\n| table                  | 否         | ie6+, chrome4+, firefox2+    | 安卓2.3+, iOS6+   |\n| css-table              | 否         | ie8+, chrome4+, firefox2+    | 安卓2.3+, iOS6+   |\n| flex                   | 否         | ie10+, chrome4+, firefox2+   | 安卓2.3+, iOS6+   |\n| grid                   | 否         | ie10+, chrome57+, firefox52+ | 安卓6+, iOS10.3+  | \n","source":"_posts/垂直居中.md","raw":"---\ntitle: 垂直居中\ndate: 2019-01-05 09:25:40\ncategories: \n- 基础前端技术\ntags: [CSS,居中]\n---\n# 16种方法实现水平居中垂直居中\n熟悉水平居中和垂直居中的方法, 不为别的, 就为用的时候能够信手拈来. 下面直接步入正题.\n原文：16种方法实现水平居中垂直居中\n\n## 水平居中\n1) 若是行内元素, 给其父元素设置 text-align:center,即可实现行内元素水平居中.\n\n2) 若是块级元素, 该元素设置 margin:0 auto即可.\n\n3) 若子元素包含 float:left 属性, 为了让子元素水平居中, 则可让父元素宽度设置为fit-content,并且配合margin, 作如下设置:\n```bash\n.parent{\n    width: -moz-fit-content;\n    width: -webkit-fit-content;\n    width:fit-content;\n    margin:0 auto;\n}\n```\nfit-content是CSS3中给width属性新加的一个属性值,它配合margin可以轻松实现水平居中, 目前只支持Chrome 和 Firefox浏览器.\n\n4) 使用flex 2012年版本布局, 可以轻松的实现水平居中, 子元素设置如下:\n\n.son{\n    display: flex;\n    justify-content: center;\n}复制代码\n5) 使用flex 2009年版本, 父元素display: box;box-pack: center;如下设置:\n\n.parent {\n    display: -webkit-box;\n    -webkit-box-orient: horizontal;\n    -webkit-box-pack: center;\n    display: -moz-box;\n    -moz-box-orient: horizontal;\n    -moz-box-pack: center;\n    display: -o-box;\n      -o-box-orient: horizontal;\n      -o-box-pack: center;\n      display: -ms-box;\n      -ms-box-orient: horizontal;\n      -ms-box-pack: center;\n      display: box;\n      box-orient: horizontal;\n      box-pack: center;\n}复制代码\n6) 使用CSS3中新增的transform属性, 子元素设置如下:\n\n.son{\n    position:absolute;\n      left:50%;\n      transform:translate(-50%,0);\n}复制代码\n7) 使用绝对定位方式, 以及负值的margin-left, 子元素设置如下:\n\n.son{\n    position:absolute;\n    width:固定;\n    left:50%;\n    margin-left:-0.5宽度;\n}复制代码\n8) 使用绝对定位方式, 以及left:0;right:0;margin:0 auto; 子元素设置如下:\n\n.son{\n    position:absolute;\n    width:固定;\n    left:0;\n    right:0;\n    margin:0 auto;\n}复制代码\n## 垂直居中\n### 单行文本\n1) 若元素是单行文本, 则可设置 line-height 等于父元素高度\n\n### 行内块级元素\n2) 若元素是行内块级元素, 基本思想是使用display: inline-block, vertical-align: middle和一个伪元素让内容块处于容器中央.\n\n.parent::after, .son{\n    display:inline-block;\n    vertical-align:middle;\n}\n.parent::after{\n    content:'';\n    height:100%;\n}复制代码\n这是一种很流行的方法, 也适应IE7.\n\n### 元素高度不定\n3) 可用 vertical-align 属性, 而vertical-align只有在父层为 td 或者 th 时, 才会生效, 对于其他块级元素, 例如 div、p 等, 默认情况是不支持的. 为了使用vertical-align, 我们需要设置父元素display:table, 子元素 display:table-cell;vertical-align:middle;\n\n优点\n\n元素高度可以动态改变, 不需再CSS中定义, 如果父元素没有足够空间时, 该元素内容也不会被截断.\n\n缺点\n\nIE6~7, 甚至IE8 beta中无效.\n\n4) 可用 Flex 2012版, 这是CSS布局未来的趋势. Flexbox是CSS3新增属性, 设计初衷是为了解决像垂直居中这样的常见布局问题. 相关的文章如《弹性盒模型Flex指南》\n\n父元素做如下设置即可保证子元素垂直居中:\n\n.parent {\n  display: flex;\n  align-items: center;\n}复制代码\n优点\n\n内容块的宽高任意, 优雅的溢出.\n可用于更复杂高级的布局技术中.\n缺点\n\nIE8/IE9不支持\n需要浏览器厂商前缀\n渲染上可能会有一些问题\n5) 使用flex 2009版.\n\n.parent {\n      display: box;\n      box-orient: vertical;\n      box-pack: center;\n}复制代码\n优点\n\n实现简单, 扩展性强\n\n缺点\n\n兼容性差, 不支持IE\n\n6) 可用 transform , 设置父元素相对定位(position:relative), 子元素如下css样式:\n\n.son{\n    position:absolute;\n    top:50%;\n    -webkit-transform: translate(-50%,-50%);  \n    -ms-transform: translate(-50%,-50%);\n    transform: translate(-50%,-50%);\n}复制代码\n优点\n\n代码量少\n\n缺点\n\nIE8不支持, 属性需要追加浏览器厂商前缀, 可能干扰其他 transform 效果, 某些情形下会出现文本或元素边界渲染模糊的现象.\n\n元素高度固定\n7) 设置父元素相对定位(position:relative), 子元素如下css样式:\n\n.son{\n    position:absolute;\n    top:50%;\n    height:固定;\n    margin-top:-0.5高度;\n}复制代码\n优点\n\n适用于所有浏览器.\n\n缺点\n\n父元素空间不够时, 子元素可能不可见(当浏览器窗口缩小时,滚动条不出现时).如果子元素设置了overflow:auto, 则高度不够时, 会出现滚动条.\n\n8) 设置父元素相对定位(position:relative), 子元素如下css样式:\n\n.son{\n    position:absolute;\n    height:固定;\n    top:0;\n    bottom:0;\n    margin:auto 0;\n}复制代码\n优点\n\n简单\n\n缺点\n\n没有足够空间时, 子元素会被截断, 但不会有滚动条.\n\n## 总结\n水平居中较为简单, 共提供了8种方法, 一般情况下 text-align:center,marin:0 auto; 足矣\n\n① text-align:center;\n② margin:0 auto;\n③ width:fit-content;\n④ flex\n⑤ 盒模型\n⑥ transform\n⑦ ⑧ 两种不同的绝对定位方法\n垂直居中, 共提供了8种方法.\n\n① 单行文本, line-height\n② 行内块级元素, 使用 display: inline-block, vertical-align: middle; 加上伪元素辅助实现\n③ vertical-align\n④ flex\n⑤ 盒模型\n⑥ transform\n⑦ ⑧ 两种不同的绝对定位方法\n我们发现, flex, 盒模型, transform, 绝对定位, 这几种方法同时适用于水平居中和垂直居中.\n\n# 水平垂直居中实现\n\n## 仅居中元素定宽高适用：\n- [absolute + 负margin](http://yanhaijing.com/vertical-center/absolute1.html)\n- [absolute + margin auto](http://yanhaijing.com/vertical-center/absolute2.html)\n- [absolute + calc](http://yanhaijing.com/vertical-center/absolute3.html)\n\n## 居中元素不定宽高适用：\n- [absolute + transform](http://yanhaijing.com/vertical-center/absolute4.html)\n- [writing-mode](http://yanhaijing.com/vertical-center/writing-mode.html)\n- [lineheight](http://yanhaijing.com/vertical-center/lineheight.html)\n- [table](http://yanhaijing.com/vertical-center/table.html)\n- [css-table](http://yanhaijing.com/vertical-center/css-table.html)\n- [flex](http://yanhaijing.com/vertical-center/flex.html)\n- [grid](http://yanhaijing.com/vertical-center/grid.html)\n\n## absolute + 负margin\n为了实现上面的效果先来做些准备工作，假设HTML代码如下，总共两个元素，父元素和子元素\n```\n<div class=\"wp\">\n    <div class=\"box size\">123123</div>\n</div>\n```\nwp是父元素的类名，box是子元素的类名，因为有定宽和不定宽的区别，size用来表示指定宽度，下面是所有效果都要用到的公共代码，主要是设置颜色和宽高\n注意：后面不在重复这段公共代码，只会给出相应提示\n```\n/* 公共代码 */\n.wp {\n    border: 1px solid red;\n    width: 300px;\n    height: 300px;\n}\n\n.box {\n    background: green;    \n}\n\n.box.size{\n    width: 100px;\n    height: 100px;\n}\n/* 公共代码 */\n```\n绝对定位的百分比是相对于父元素的宽高，通过这个特性可以让子元素的居中显示，但绝对定位是基于子元素的左上角，期望的效果是子元素的中心居中显示为了修正这个问题，可以借助外边距的负值，负的外边距可以让元素向相反方向定位，通过指定子元素的外边距为子元素宽度一半的负值，就可以让子元素居中了，css代码如下\n```\n/* 此处引用上面的公共代码 */\n/* 此处引用上面的公共代码 */\n\n/* 定位代码 */\n.wp {\n    position: relative;\n}\n.box {\n    position: absolute;;\n    top: 50%;\n    left: 50%;\n    margin-left: -50px;\n    margin-top: -50px;\n}\n```\n这是我比较常用的方式，这种方式比较好理解，兼容性也很好，缺点是<font color=\"red\">需要知道子元素的宽高</font>\n\n## absolute + margin auto\n这种方式也要求居中元素的宽高必须固定，HTML代码如下\n```\n<div class=\"wp\">\n    <div class=\"box size\">123123</div>\n</div>\n```\n这种方式通过设置各个方向的距离都是0，此时再讲margin设为auto，就可以在各个方向上居中了\n```\n/* 此处引用上面的公共代码 */\n/* 此处引用上面的公共代码 */\n\n/* 定位代码 */\n.wp {\n    position: relative;\n}\n.box {\n    position: absolute;;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    margin: auto;\n}\n```\n这种方法兼容性也很好，缺点是需要知道子元素的宽高\n\n## absolute + calc\n这种方式也要求居中元素的宽高必须固定，所以我们为box增加size类，HTML代码如下\n```\n<div class=\"wp\">\n    <div class=\"box size\">123123</div>\n</div>\n```\n感谢css3带来了计算属性，既然top的百分比是基于元素的左上角，那么在减去宽度的一半就好了，代码如下\n```\n/* 此处引用上面的公共代码 */\n/* 此处引用上面的公共代码 */\n\n/* 定位代码 */\n.wp {\n    position: relative;\n}\n.box {\n    position: absolute;;\n    top: calc(50% - 50px);\n    left: calc(50% - 50px);\n}\n```\n这种方法兼容性依赖calc的兼容性，缺点是需要知道子元素的宽高\n\n## absolute + transform\n还是绝对定位，但这个方法不需要子元素固定宽高，所以不再需要size类了，HTML代码如下\n```\n<div class=\"wp\">\n    <div class=\"box\">123123</div>\n</div>\n```\n修复绝对定位的问题，还可以使用css3新增的transform，transform的translate属性也可以设置百分比，其是相对于自身的宽和高，所以可以讲translate设置为-50%，就可以做到居中了，代码如下\n```\n/* 此处引用上面的公共代码 */\n/* 此处引用上面的公共代码 */\n\n/* 定位代码 */\n.wp {\n    position: relative;\n}\n.box {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n}\n```\n这种方法兼容性依赖translate2d的兼容性\n\n## line-height\n利用行内元素居中属性也可以做到水平垂直居中，HTML代码如下\n```\n<div class=\"wp\">\n    <div class=\"box\">123123</div>\n</div>\n```\n把box设置为行内元素，通过text-align就可以做到水平居中，但很多同学可能不知道通过通过vertical-align也可以在垂直方向做到居中，代码如下\n```\n/* 此处引用上面的公共代码 */\n/* 此处引用上面的公共代码 */\n\n/* 定位代码 */\n.wp {\n    line-height: 300px;\n    text-align: center;\n    font-size: 0px;\n}\n.box {\n    font-size: 16px;\n    display: inline-block;\n    vertical-align: middle;\n    line-height: initial;\n    text-align: left; /* 修正文字 */\n}\n```\n这种方法需要在子元素中将文字显示重置为想要的效果\n\n## writing-mode\nwriting-mode可以改变文字的显示方向，比如可以通过writing-mode让文字的显示变为垂直方向\n```\n<div class=\"div1\">水平方向</div>\n<div class=\"div2\">垂直方向</div>\n.div2 {\n    writing-mode: vertical-lr;\n}\n\n水平方向\n垂\n直\n方\n向\n```\n更神奇的是所有水平方向上的css属性，都会变为垂直方向上的属性，比如text-align，通过writing-mode和text-align就可以做到水平和垂直方向的居中了，只不过要稍微麻烦一点\n```\n<div class=\"wp\">\n    <div class=\"wp-inner\">\n        <div class=\"box\">123123</div>\n    </div>\n</div>\n复制代码/* 此处引用上面的公共代码 */\n/* 此处引用上面的公共代码 */\n\n/* 定位代码 */\n.wp {\n    writing-mode: vertical-lr;\n    text-align: center;\n}\n.wp-inner {\n    writing-mode: horizontal-tb;\n    display: inline-block;\n    text-align: center;\n    width: 100%;\n}\n.box {\n    display: inline-block;\n    margin: auto;\n    text-align: left;\n}\n```\n这种方法实现起来和理解起来都稍微有些复杂\n\n## table\n曾经table被用来做页面布局，现在没人这么做了，但table也能够实现水平垂直居中，但是会增加很多冗余代码\n```\n<table>\n    <tbody>\n        <tr>\n            <td class=\"wp\">\n                <div class=\"box\">123123</div>\n            </td>\n        </tr>\n    </tbody>\n</table>\n```\ntabel单元格中的内容天然就是垂直居中的，只要添加一个水平居中属性就好了\n```\n.wp {\n    text-align: center;\n}\n.box {\n    display: inline-block;\n}\n```\n这种方法就是代码太冗余，而且也不是table的正确用法\n\n## css-table\ncss新增的table属性，可以让我们把普通元素，变为table元素的现实效果，通过这个特性也可以实现水平垂直居中\n```\n<div class=\"wp\">\n    <div class=\"box\">123123</div>\n</div>\n```\n下面通过css属性，可以让div显示的和table一样\n```\n.wp {\n    display: table-cell;\n    text-align: center;\n    vertical-align: middle;\n}\n.box {\n    display: inline-block;\n}\n```\n复制代码这种方法和table一样的原理，但却没有那么多冗余代码，兼容性也还不错\n\n## flex\nflex作为现代的布局方案，颠覆了过去的经验，只需几行代码就可以优雅的做到水平垂直居中\n```\n<div class=\"wp\">\n    <div class=\"box\">123123</div>\n</div>\n.wp {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n```\n目前在移动端已经完全可以使用flex了，PC端需要看自己业务的兼容性情况\n\n## grid\ncss新出的网格布局，由于兼容性不太好，一直没太关注，通过grid也可以实现水平垂直居中\n```\n<div class=\"wp\">\n    <div class=\"box\">123123</div>\n</div>\n.wp {\n    display: grid;\n}\n.box {\n    align-self: center;\n    justify-self: center;\n}\n```\n代码量也很少，但兼容性不如flex，不推荐使用\n\n## 总结\n\n下面对比下各个方式的优缺点，肯定又双叒叕该有同学说回字的写法了，简单总结下\n\n- PC端有兼容性要求，宽高固定，推荐absolute + 负margin\n- PC端有兼容要求，宽高不固定，推荐css-table\n- PC端无兼容性要求，推荐flex\n- 移动端推荐使用flex\n\n**小贴士：**关于flex的兼容性决方案，请看这里《[移动端flex布局实战](//yanhaijing.com/css/2016/08/21/flex-practice-on-mobile/)》\n\n| 方法                     | 居中元素定宽高固定 | PC兼容性                        | 移动端兼容性          |\n| ---------------------- | --------- | ---------------------------- | --------------- |\n| absolute + 负margin     | 是         | ie6+, chrome4+, firefox2+    | 安卓2.3+, iOS6+   |\n| absolute + margin auto | 是         | ie6+, chrome4+, firefox2+    | 安卓2.3+, iOS6+   |\n| absolute + calc        | 是         | ie9+, chrome19+, firefox4+   | 安卓4.4+, iOS6+   |\n| absolute + transform   | 否         | ie9+, chrome4+, firefox3.5+  | 安卓3+, iOS6+     |\n| writing-mode           | 否         | ie6+, chrome4+, firefox3.5+  | 安卓2.3+, iOS5.1+ |\n| lineheight             | 否         | ie6+, chrome4+, firefox2+    | 安卓2.3+, iOS6+   |\n| table                  | 否         | ie6+, chrome4+, firefox2+    | 安卓2.3+, iOS6+   |\n| css-table              | 否         | ie8+, chrome4+, firefox2+    | 安卓2.3+, iOS6+   |\n| flex                   | 否         | ie10+, chrome4+, firefox2+   | 安卓2.3+, iOS6+   |\n| grid                   | 否         | ie10+, chrome57+, firefox52+ | 安卓6+, iOS10.3+  | \n","slug":"垂直居中","published":1,"updated":"2019-07-17T11:39:22.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cwj0044t09zyo7ecip9","content":"<h1 id=\"16种方法实现水平居中垂直居中\"><a href=\"#16种方法实现水平居中垂直居中\" class=\"headerlink\" title=\"16种方法实现水平居中垂直居中\"></a>16种方法实现水平居中垂直居中</h1><p>熟悉水平居中和垂直居中的方法, 不为别的, 就为用的时候能够信手拈来. 下面直接步入正题.<br>原文：16种方法实现水平居中垂直居中</p>\n<h2 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h2><p>1) 若是行内元素, 给其父元素设置 text-align:center,即可实现行内元素水平居中.</p>\n<p>2) 若是块级元素, 该元素设置 margin:0 auto即可.</p>\n<p>3) 若子元素包含 float:left 属性, 为了让子元素水平居中, 则可让父元素宽度设置为fit-content,并且配合margin, 作如下设置:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent&#123;</span><br><span class=\"line\">    width: -moz-fit-content;</span><br><span class=\"line\">    width: -webkit-fit-content;</span><br><span class=\"line\">    width:fit-content;</span><br><span class=\"line\">    margin:0 auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>fit-content是CSS3中给width属性新加的一个属性值,它配合margin可以轻松实现水平居中, 目前只支持Chrome 和 Firefox浏览器.</p>\n<p>4) 使用flex 2012年版本布局, 可以轻松的实现水平居中, 子元素设置如下:</p>\n<p>.son{<br>    display: flex;<br>    justify-content: center;<br>}复制代码<br>5) 使用flex 2009年版本, 父元素display: box;box-pack: center;如下设置:</p>\n<p>.parent {<br>    display: -webkit-box;<br>    -webkit-box-orient: horizontal;<br>    -webkit-box-pack: center;<br>    display: -moz-box;<br>    -moz-box-orient: horizontal;<br>    -moz-box-pack: center;<br>    display: -o-box;<br>      -o-box-orient: horizontal;<br>      -o-box-pack: center;<br>      display: -ms-box;<br>      -ms-box-orient: horizontal;<br>      -ms-box-pack: center;<br>      display: box;<br>      box-orient: horizontal;<br>      box-pack: center;<br>}复制代码<br>6) 使用CSS3中新增的transform属性, 子元素设置如下:</p>\n<p>.son{<br>    position:absolute;<br>      left:50%;<br>      transform:translate(-50%,0);<br>}复制代码<br>7) 使用绝对定位方式, 以及负值的margin-left, 子元素设置如下:</p>\n<p>.son{<br>    position:absolute;<br>    width:固定;<br>    left:50%;<br>    margin-left:-0.5宽度;<br>}复制代码<br>8) 使用绝对定位方式, 以及left:0;right:0;margin:0 auto; 子元素设置如下:</p>\n<p>.son{<br>    position:absolute;<br>    width:固定;<br>    left:0;<br>    right:0;<br>    margin:0 auto;<br>}复制代码</p>\n<h2 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h2><h3 id=\"单行文本\"><a href=\"#单行文本\" class=\"headerlink\" title=\"单行文本\"></a>单行文本</h3><p>1) 若元素是单行文本, 则可设置 line-height 等于父元素高度</p>\n<h3 id=\"行内块级元素\"><a href=\"#行内块级元素\" class=\"headerlink\" title=\"行内块级元素\"></a>行内块级元素</h3><p>2) 若元素是行内块级元素, 基本思想是使用display: inline-block, vertical-align: middle和一个伪元素让内容块处于容器中央.</p>\n<p>.parent::after, .son{<br>    display:inline-block;<br>    vertical-align:middle;<br>}<br>.parent::after{<br>    content:’’;<br>    height:100%;<br>}复制代码<br>这是一种很流行的方法, 也适应IE7.</p>\n<h3 id=\"元素高度不定\"><a href=\"#元素高度不定\" class=\"headerlink\" title=\"元素高度不定\"></a>元素高度不定</h3><p>3) 可用 vertical-align 属性, 而vertical-align只有在父层为 td 或者 th 时, 才会生效, 对于其他块级元素, 例如 div、p 等, 默认情况是不支持的. 为了使用vertical-align, 我们需要设置父元素display:table, 子元素 display:table-cell;vertical-align:middle;</p>\n<p>优点</p>\n<p>元素高度可以动态改变, 不需再CSS中定义, 如果父元素没有足够空间时, 该元素内容也不会被截断.</p>\n<p>缺点</p>\n<p>IE6~7, 甚至IE8 beta中无效.</p>\n<p>4) 可用 Flex 2012版, 这是CSS布局未来的趋势. Flexbox是CSS3新增属性, 设计初衷是为了解决像垂直居中这样的常见布局问题. 相关的文章如《弹性盒模型Flex指南》</p>\n<p>父元素做如下设置即可保证子元素垂直居中:</p>\n<p>.parent {<br>  display: flex;<br>  align-items: center;<br>}复制代码<br>优点</p>\n<p>内容块的宽高任意, 优雅的溢出.<br>可用于更复杂高级的布局技术中.<br>缺点</p>\n<p>IE8/IE9不支持<br>需要浏览器厂商前缀<br>渲染上可能会有一些问题<br>5) 使用flex 2009版.</p>\n<p>.parent {<br>      display: box;<br>      box-orient: vertical;<br>      box-pack: center;<br>}复制代码<br>优点</p>\n<p>实现简单, 扩展性强</p>\n<p>缺点</p>\n<p>兼容性差, 不支持IE</p>\n<p>6) 可用 transform , 设置父元素相对定位(position:relative), 子元素如下css样式:</p>\n<p>.son{<br>    position:absolute;<br>    top:50%;<br>    -webkit-transform: translate(-50%,-50%);<br>    -ms-transform: translate(-50%,-50%);<br>    transform: translate(-50%,-50%);<br>}复制代码<br>优点</p>\n<p>代码量少</p>\n<p>缺点</p>\n<p>IE8不支持, 属性需要追加浏览器厂商前缀, 可能干扰其他 transform 效果, 某些情形下会出现文本或元素边界渲染模糊的现象.</p>\n<p>元素高度固定<br>7) 设置父元素相对定位(position:relative), 子元素如下css样式:</p>\n<p>.son{<br>    position:absolute;<br>    top:50%;<br>    height:固定;<br>    margin-top:-0.5高度;<br>}复制代码<br>优点</p>\n<p>适用于所有浏览器.</p>\n<p>缺点</p>\n<p>父元素空间不够时, 子元素可能不可见(当浏览器窗口缩小时,滚动条不出现时).如果子元素设置了overflow:auto, 则高度不够时, 会出现滚动条.</p>\n<p>8) 设置父元素相对定位(position:relative), 子元素如下css样式:</p>\n<p>.son{<br>    position:absolute;<br>    height:固定;<br>    top:0;<br>    bottom:0;<br>    margin:auto 0;<br>}复制代码<br>优点</p>\n<p>简单</p>\n<p>缺点</p>\n<p>没有足够空间时, 子元素会被截断, 但不会有滚动条.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>水平居中较为简单, 共提供了8种方法, 一般情况下 text-align:center,marin:0 auto; 足矣</p>\n<p>① text-align:center;<br>② margin:0 auto;<br>③ width:fit-content;<br>④ flex<br>⑤ 盒模型<br>⑥ transform<br>⑦ ⑧ 两种不同的绝对定位方法<br>垂直居中, 共提供了8种方法.</p>\n<p>① 单行文本, line-height<br>② 行内块级元素, 使用 display: inline-block, vertical-align: middle; 加上伪元素辅助实现<br>③ vertical-align<br>④ flex<br>⑤ 盒模型<br>⑥ transform<br>⑦ ⑧ 两种不同的绝对定位方法<br>我们发现, flex, 盒模型, transform, 绝对定位, 这几种方法同时适用于水平居中和垂直居中.</p>\n<h1 id=\"水平垂直居中实现\"><a href=\"#水平垂直居中实现\" class=\"headerlink\" title=\"水平垂直居中实现\"></a>水平垂直居中实现</h1><h2 id=\"仅居中元素定宽高适用：\"><a href=\"#仅居中元素定宽高适用：\" class=\"headerlink\" title=\"仅居中元素定宽高适用：\"></a>仅居中元素定宽高适用：</h2><ul>\n<li><a href=\"http://yanhaijing.com/vertical-center/absolute1.html\" target=\"_blank\" rel=\"noopener\">absolute + 负margin</a></li>\n<li><a href=\"http://yanhaijing.com/vertical-center/absolute2.html\" target=\"_blank\" rel=\"noopener\">absolute + margin auto</a></li>\n<li><a href=\"http://yanhaijing.com/vertical-center/absolute3.html\" target=\"_blank\" rel=\"noopener\">absolute + calc</a></li>\n</ul>\n<h2 id=\"居中元素不定宽高适用：\"><a href=\"#居中元素不定宽高适用：\" class=\"headerlink\" title=\"居中元素不定宽高适用：\"></a>居中元素不定宽高适用：</h2><ul>\n<li><a href=\"http://yanhaijing.com/vertical-center/absolute4.html\" target=\"_blank\" rel=\"noopener\">absolute + transform</a></li>\n<li><a href=\"http://yanhaijing.com/vertical-center/writing-mode.html\" target=\"_blank\" rel=\"noopener\">writing-mode</a></li>\n<li><a href=\"http://yanhaijing.com/vertical-center/lineheight.html\" target=\"_blank\" rel=\"noopener\">lineheight</a></li>\n<li><a href=\"http://yanhaijing.com/vertical-center/table.html\" target=\"_blank\" rel=\"noopener\">table</a></li>\n<li><a href=\"http://yanhaijing.com/vertical-center/css-table.html\" target=\"_blank\" rel=\"noopener\">css-table</a></li>\n<li><a href=\"http://yanhaijing.com/vertical-center/flex.html\" target=\"_blank\" rel=\"noopener\">flex</a></li>\n<li><a href=\"http://yanhaijing.com/vertical-center/grid.html\" target=\"_blank\" rel=\"noopener\">grid</a></li>\n</ul>\n<h2 id=\"absolute-负margin\"><a href=\"#absolute-负margin\" class=\"headerlink\" title=\"absolute + 负margin\"></a>absolute + 负margin</h2><p>为了实现上面的效果先来做些准备工作，假设HTML代码如下，总共两个元素，父元素和子元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wp&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box size&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>wp是父元素的类名，box是子元素的类名，因为有定宽和不定宽的区别，size用来表示指定宽度，下面是所有效果都要用到的公共代码，主要是设置颜色和宽高<br>注意：后面不在重复这段公共代码，只会给出相应提示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 公共代码 */</span><br><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">    width: 300px;</span><br><span class=\"line\">    height: 300px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    background: green;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.box.size&#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* 公共代码 */</span><br></pre></td></tr></table></figure></p>\n<p>绝对定位的百分比是相对于父元素的宽高，通过这个特性可以让子元素的居中显示，但绝对定位是基于子元素的左上角，期望的效果是子元素的中心居中显示为了修正这个问题，可以借助外边距的负值，负的外边距可以让元素向相反方向定位，通过指定子元素的外边距为子元素宽度一半的负值，就可以让子元素居中了，css代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\"></span><br><span class=\"line\">/* 定位代码 */</span><br><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    position: absolute;;</span><br><span class=\"line\">    top: 50%;</span><br><span class=\"line\">    left: 50%;</span><br><span class=\"line\">    margin-left: -50px;</span><br><span class=\"line\">    margin-top: -50px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这是我比较常用的方式，这种方式比较好理解，兼容性也很好，缺点是<font color=\"red\">需要知道子元素的宽高</font></p>\n<h2 id=\"absolute-margin-auto\"><a href=\"#absolute-margin-auto\" class=\"headerlink\" title=\"absolute + margin auto\"></a>absolute + margin auto</h2><p>这种方式也要求居中元素的宽高必须固定，HTML代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wp&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box size&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这种方式通过设置各个方向的距离都是0，此时再讲margin设为auto，就可以在各个方向上居中了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\"></span><br><span class=\"line\">/* 定位代码 */</span><br><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    position: absolute;;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    margin: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方法兼容性也很好，缺点是需要知道子元素的宽高</p>\n<h2 id=\"absolute-calc\"><a href=\"#absolute-calc\" class=\"headerlink\" title=\"absolute + calc\"></a>absolute + calc</h2><p>这种方式也要求居中元素的宽高必须固定，所以我们为box增加size类，HTML代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wp&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box size&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>感谢css3带来了计算属性，既然top的百分比是基于元素的左上角，那么在减去宽度的一半就好了，代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\"></span><br><span class=\"line\">/* 定位代码 */</span><br><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    position: absolute;;</span><br><span class=\"line\">    top: calc(50% - 50px);</span><br><span class=\"line\">    left: calc(50% - 50px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方法兼容性依赖calc的兼容性，缺点是需要知道子元素的宽高</p>\n<h2 id=\"absolute-transform\"><a href=\"#absolute-transform\" class=\"headerlink\" title=\"absolute + transform\"></a>absolute + transform</h2><p>还是绝对定位，但这个方法不需要子元素固定宽高，所以不再需要size类了，HTML代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wp&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>修复绝对定位的问题，还可以使用css3新增的transform，transform的translate属性也可以设置百分比，其是相对于自身的宽和高，所以可以讲translate设置为-50%，就可以做到居中了，代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\"></span><br><span class=\"line\">/* 定位代码 */</span><br><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 50%;</span><br><span class=\"line\">    left: 50%;</span><br><span class=\"line\">    transform: translate(-50%, -50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方法兼容性依赖translate2d的兼容性</p>\n<h2 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h2><p>利用行内元素居中属性也可以做到水平垂直居中，HTML代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wp&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>把box设置为行内元素，通过text-align就可以做到水平居中，但很多同学可能不知道通过通过vertical-align也可以在垂直方向做到居中，代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\"></span><br><span class=\"line\">/* 定位代码 */</span><br><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    line-height: 300px;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    font-size: 0px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    font-size: 16px;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">    line-height: initial;</span><br><span class=\"line\">    text-align: left; /* 修正文字 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方法需要在子元素中将文字显示重置为想要的效果</p>\n<h2 id=\"writing-mode\"><a href=\"#writing-mode\" class=\"headerlink\" title=\"writing-mode\"></a>writing-mode</h2><p>writing-mode可以改变文字的显示方向，比如可以通过writing-mode让文字的显示变为垂直方向<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;div1&quot;&gt;水平方向&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;div2&quot;&gt;垂直方向&lt;/div&gt;</span><br><span class=\"line\">.div2 &#123;</span><br><span class=\"line\">    writing-mode: vertical-lr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">水平方向</span><br><span class=\"line\">垂</span><br><span class=\"line\">直</span><br><span class=\"line\">方</span><br><span class=\"line\">向</span><br></pre></td></tr></table></figure></p>\n<p>更神奇的是所有水平方向上的css属性，都会变为垂直方向上的属性，比如text-align，通过writing-mode和text-align就可以做到水平和垂直方向的居中了，只不过要稍微麻烦一点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wp&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;wp-inner&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;box&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">复制代码/* 此处引用上面的公共代码 */</span><br><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\"></span><br><span class=\"line\">/* 定位代码 */</span><br><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    writing-mode: vertical-lr;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wp-inner &#123;</span><br><span class=\"line\">    writing-mode: horizontal-tb;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    margin: auto;</span><br><span class=\"line\">    text-align: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方法实现起来和理解起来都稍微有些复杂</p>\n<h2 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h2><p>曾经table被用来做页面布局，现在没人这么做了，但table也能够实现水平垂直居中，但是会增加很多冗余代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;table&gt;</span><br><span class=\"line\">    &lt;tbody&gt;</span><br><span class=\"line\">        &lt;tr&gt;</span><br><span class=\"line\">            &lt;td class=&quot;wp&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;box&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">            &lt;/td&gt;</span><br><span class=\"line\">        &lt;/tr&gt;</span><br><span class=\"line\">    &lt;/tbody&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br></pre></td></tr></table></figure></p>\n<p>tabel单元格中的内容天然就是垂直居中的，只要添加一个水平居中属性就好了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方法就是代码太冗余，而且也不是table的正确用法</p>\n<h2 id=\"css-table\"><a href=\"#css-table\" class=\"headerlink\" title=\"css-table\"></a>css-table</h2><p>css新增的table属性，可以让我们把普通元素，变为table元素的现实效果，通过这个特性也可以实现水平垂直居中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wp&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>下面通过css属性，可以让div显示的和table一样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>复制代码这种方法和table一样的原理，但却没有那么多冗余代码，兼容性也还不错</p>\n<h2 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h2><p>flex作为现代的布局方案，颠覆了过去的经验，只需几行代码就可以优雅的做到水平垂直居中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wp&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    justify-content: center;</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>目前在移动端已经完全可以使用flex了，PC端需要看自己业务的兼容性情况</p>\n<h2 id=\"grid\"><a href=\"#grid\" class=\"headerlink\" title=\"grid\"></a>grid</h2><p>css新出的网格布局，由于兼容性不太好，一直没太关注，通过grid也可以实现水平垂直居中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wp&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    align-self: center;</span><br><span class=\"line\">    justify-self: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码量也很少，但兼容性不如flex，不推荐使用</p>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>下面对比下各个方式的优缺点，肯定又双叒叕该有同学说回字的写法了，简单总结下</p>\n<ul>\n<li>PC端有兼容性要求，宽高固定，推荐absolute + 负margin</li>\n<li>PC端有兼容要求，宽高不固定，推荐css-table</li>\n<li>PC端无兼容性要求，推荐flex</li>\n<li>移动端推荐使用flex</li>\n</ul>\n<p><strong>小贴士：</strong>关于flex的兼容性决方案，请看这里《<a href=\"//yanhaijing.com/css/2016/08/21/flex-practice-on-mobile/\">移动端flex布局实战</a>》</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>居中元素定宽高固定</th>\n<th>PC兼容性</th>\n<th>移动端兼容性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>absolute + 负margin</td>\n<td>是</td>\n<td>ie6+, chrome4+, firefox2+</td>\n<td>安卓2.3+, iOS6+</td>\n</tr>\n<tr>\n<td>absolute + margin auto</td>\n<td>是</td>\n<td>ie6+, chrome4+, firefox2+</td>\n<td>安卓2.3+, iOS6+</td>\n</tr>\n<tr>\n<td>absolute + calc</td>\n<td>是</td>\n<td>ie9+, chrome19+, firefox4+</td>\n<td>安卓4.4+, iOS6+</td>\n</tr>\n<tr>\n<td>absolute + transform</td>\n<td>否</td>\n<td>ie9+, chrome4+, firefox3.5+</td>\n<td>安卓3+, iOS6+</td>\n</tr>\n<tr>\n<td>writing-mode</td>\n<td>否</td>\n<td>ie6+, chrome4+, firefox3.5+</td>\n<td>安卓2.3+, iOS5.1+</td>\n</tr>\n<tr>\n<td>lineheight</td>\n<td>否</td>\n<td>ie6+, chrome4+, firefox2+</td>\n<td>安卓2.3+, iOS6+</td>\n</tr>\n<tr>\n<td>table</td>\n<td>否</td>\n<td>ie6+, chrome4+, firefox2+</td>\n<td>安卓2.3+, iOS6+</td>\n</tr>\n<tr>\n<td>css-table</td>\n<td>否</td>\n<td>ie8+, chrome4+, firefox2+</td>\n<td>安卓2.3+, iOS6+</td>\n</tr>\n<tr>\n<td>flex</td>\n<td>否</td>\n<td>ie10+, chrome4+, firefox2+</td>\n<td>安卓2.3+, iOS6+</td>\n</tr>\n<tr>\n<td>grid</td>\n<td>否</td>\n<td>ie10+, chrome57+, firefox52+</td>\n<td>安卓6+, iOS10.3+</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"16种方法实现水平居中垂直居中\"><a href=\"#16种方法实现水平居中垂直居中\" class=\"headerlink\" title=\"16种方法实现水平居中垂直居中\"></a>16种方法实现水平居中垂直居中</h1><p>熟悉水平居中和垂直居中的方法, 不为别的, 就为用的时候能够信手拈来. 下面直接步入正题.<br>原文：16种方法实现水平居中垂直居中</p>\n<h2 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h2><p>1) 若是行内元素, 给其父元素设置 text-align:center,即可实现行内元素水平居中.</p>\n<p>2) 若是块级元素, 该元素设置 margin:0 auto即可.</p>\n<p>3) 若子元素包含 float:left 属性, 为了让子元素水平居中, 则可让父元素宽度设置为fit-content,并且配合margin, 作如下设置:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent&#123;</span><br><span class=\"line\">    width: -moz-fit-content;</span><br><span class=\"line\">    width: -webkit-fit-content;</span><br><span class=\"line\">    width:fit-content;</span><br><span class=\"line\">    margin:0 auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>fit-content是CSS3中给width属性新加的一个属性值,它配合margin可以轻松实现水平居中, 目前只支持Chrome 和 Firefox浏览器.</p>\n<p>4) 使用flex 2012年版本布局, 可以轻松的实现水平居中, 子元素设置如下:</p>\n<p>.son{<br>    display: flex;<br>    justify-content: center;<br>}复制代码<br>5) 使用flex 2009年版本, 父元素display: box;box-pack: center;如下设置:</p>\n<p>.parent {<br>    display: -webkit-box;<br>    -webkit-box-orient: horizontal;<br>    -webkit-box-pack: center;<br>    display: -moz-box;<br>    -moz-box-orient: horizontal;<br>    -moz-box-pack: center;<br>    display: -o-box;<br>      -o-box-orient: horizontal;<br>      -o-box-pack: center;<br>      display: -ms-box;<br>      -ms-box-orient: horizontal;<br>      -ms-box-pack: center;<br>      display: box;<br>      box-orient: horizontal;<br>      box-pack: center;<br>}复制代码<br>6) 使用CSS3中新增的transform属性, 子元素设置如下:</p>\n<p>.son{<br>    position:absolute;<br>      left:50%;<br>      transform:translate(-50%,0);<br>}复制代码<br>7) 使用绝对定位方式, 以及负值的margin-left, 子元素设置如下:</p>\n<p>.son{<br>    position:absolute;<br>    width:固定;<br>    left:50%;<br>    margin-left:-0.5宽度;<br>}复制代码<br>8) 使用绝对定位方式, 以及left:0;right:0;margin:0 auto; 子元素设置如下:</p>\n<p>.son{<br>    position:absolute;<br>    width:固定;<br>    left:0;<br>    right:0;<br>    margin:0 auto;<br>}复制代码</p>\n<h2 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h2><h3 id=\"单行文本\"><a href=\"#单行文本\" class=\"headerlink\" title=\"单行文本\"></a>单行文本</h3><p>1) 若元素是单行文本, 则可设置 line-height 等于父元素高度</p>\n<h3 id=\"行内块级元素\"><a href=\"#行内块级元素\" class=\"headerlink\" title=\"行内块级元素\"></a>行内块级元素</h3><p>2) 若元素是行内块级元素, 基本思想是使用display: inline-block, vertical-align: middle和一个伪元素让内容块处于容器中央.</p>\n<p>.parent::after, .son{<br>    display:inline-block;<br>    vertical-align:middle;<br>}<br>.parent::after{<br>    content:’’;<br>    height:100%;<br>}复制代码<br>这是一种很流行的方法, 也适应IE7.</p>\n<h3 id=\"元素高度不定\"><a href=\"#元素高度不定\" class=\"headerlink\" title=\"元素高度不定\"></a>元素高度不定</h3><p>3) 可用 vertical-align 属性, 而vertical-align只有在父层为 td 或者 th 时, 才会生效, 对于其他块级元素, 例如 div、p 等, 默认情况是不支持的. 为了使用vertical-align, 我们需要设置父元素display:table, 子元素 display:table-cell;vertical-align:middle;</p>\n<p>优点</p>\n<p>元素高度可以动态改变, 不需再CSS中定义, 如果父元素没有足够空间时, 该元素内容也不会被截断.</p>\n<p>缺点</p>\n<p>IE6~7, 甚至IE8 beta中无效.</p>\n<p>4) 可用 Flex 2012版, 这是CSS布局未来的趋势. Flexbox是CSS3新增属性, 设计初衷是为了解决像垂直居中这样的常见布局问题. 相关的文章如《弹性盒模型Flex指南》</p>\n<p>父元素做如下设置即可保证子元素垂直居中:</p>\n<p>.parent {<br>  display: flex;<br>  align-items: center;<br>}复制代码<br>优点</p>\n<p>内容块的宽高任意, 优雅的溢出.<br>可用于更复杂高级的布局技术中.<br>缺点</p>\n<p>IE8/IE9不支持<br>需要浏览器厂商前缀<br>渲染上可能会有一些问题<br>5) 使用flex 2009版.</p>\n<p>.parent {<br>      display: box;<br>      box-orient: vertical;<br>      box-pack: center;<br>}复制代码<br>优点</p>\n<p>实现简单, 扩展性强</p>\n<p>缺点</p>\n<p>兼容性差, 不支持IE</p>\n<p>6) 可用 transform , 设置父元素相对定位(position:relative), 子元素如下css样式:</p>\n<p>.son{<br>    position:absolute;<br>    top:50%;<br>    -webkit-transform: translate(-50%,-50%);<br>    -ms-transform: translate(-50%,-50%);<br>    transform: translate(-50%,-50%);<br>}复制代码<br>优点</p>\n<p>代码量少</p>\n<p>缺点</p>\n<p>IE8不支持, 属性需要追加浏览器厂商前缀, 可能干扰其他 transform 效果, 某些情形下会出现文本或元素边界渲染模糊的现象.</p>\n<p>元素高度固定<br>7) 设置父元素相对定位(position:relative), 子元素如下css样式:</p>\n<p>.son{<br>    position:absolute;<br>    top:50%;<br>    height:固定;<br>    margin-top:-0.5高度;<br>}复制代码<br>优点</p>\n<p>适用于所有浏览器.</p>\n<p>缺点</p>\n<p>父元素空间不够时, 子元素可能不可见(当浏览器窗口缩小时,滚动条不出现时).如果子元素设置了overflow:auto, 则高度不够时, 会出现滚动条.</p>\n<p>8) 设置父元素相对定位(position:relative), 子元素如下css样式:</p>\n<p>.son{<br>    position:absolute;<br>    height:固定;<br>    top:0;<br>    bottom:0;<br>    margin:auto 0;<br>}复制代码<br>优点</p>\n<p>简单</p>\n<p>缺点</p>\n<p>没有足够空间时, 子元素会被截断, 但不会有滚动条.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>水平居中较为简单, 共提供了8种方法, 一般情况下 text-align:center,marin:0 auto; 足矣</p>\n<p>① text-align:center;<br>② margin:0 auto;<br>③ width:fit-content;<br>④ flex<br>⑤ 盒模型<br>⑥ transform<br>⑦ ⑧ 两种不同的绝对定位方法<br>垂直居中, 共提供了8种方法.</p>\n<p>① 单行文本, line-height<br>② 行内块级元素, 使用 display: inline-block, vertical-align: middle; 加上伪元素辅助实现<br>③ vertical-align<br>④ flex<br>⑤ 盒模型<br>⑥ transform<br>⑦ ⑧ 两种不同的绝对定位方法<br>我们发现, flex, 盒模型, transform, 绝对定位, 这几种方法同时适用于水平居中和垂直居中.</p>\n<h1 id=\"水平垂直居中实现\"><a href=\"#水平垂直居中实现\" class=\"headerlink\" title=\"水平垂直居中实现\"></a>水平垂直居中实现</h1><h2 id=\"仅居中元素定宽高适用：\"><a href=\"#仅居中元素定宽高适用：\" class=\"headerlink\" title=\"仅居中元素定宽高适用：\"></a>仅居中元素定宽高适用：</h2><ul>\n<li><a href=\"http://yanhaijing.com/vertical-center/absolute1.html\" target=\"_blank\" rel=\"noopener\">absolute + 负margin</a></li>\n<li><a href=\"http://yanhaijing.com/vertical-center/absolute2.html\" target=\"_blank\" rel=\"noopener\">absolute + margin auto</a></li>\n<li><a href=\"http://yanhaijing.com/vertical-center/absolute3.html\" target=\"_blank\" rel=\"noopener\">absolute + calc</a></li>\n</ul>\n<h2 id=\"居中元素不定宽高适用：\"><a href=\"#居中元素不定宽高适用：\" class=\"headerlink\" title=\"居中元素不定宽高适用：\"></a>居中元素不定宽高适用：</h2><ul>\n<li><a href=\"http://yanhaijing.com/vertical-center/absolute4.html\" target=\"_blank\" rel=\"noopener\">absolute + transform</a></li>\n<li><a href=\"http://yanhaijing.com/vertical-center/writing-mode.html\" target=\"_blank\" rel=\"noopener\">writing-mode</a></li>\n<li><a href=\"http://yanhaijing.com/vertical-center/lineheight.html\" target=\"_blank\" rel=\"noopener\">lineheight</a></li>\n<li><a href=\"http://yanhaijing.com/vertical-center/table.html\" target=\"_blank\" rel=\"noopener\">table</a></li>\n<li><a href=\"http://yanhaijing.com/vertical-center/css-table.html\" target=\"_blank\" rel=\"noopener\">css-table</a></li>\n<li><a href=\"http://yanhaijing.com/vertical-center/flex.html\" target=\"_blank\" rel=\"noopener\">flex</a></li>\n<li><a href=\"http://yanhaijing.com/vertical-center/grid.html\" target=\"_blank\" rel=\"noopener\">grid</a></li>\n</ul>\n<h2 id=\"absolute-负margin\"><a href=\"#absolute-负margin\" class=\"headerlink\" title=\"absolute + 负margin\"></a>absolute + 负margin</h2><p>为了实现上面的效果先来做些准备工作，假设HTML代码如下，总共两个元素，父元素和子元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wp&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box size&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>wp是父元素的类名，box是子元素的类名，因为有定宽和不定宽的区别，size用来表示指定宽度，下面是所有效果都要用到的公共代码，主要是设置颜色和宽高<br>注意：后面不在重复这段公共代码，只会给出相应提示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 公共代码 */</span><br><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    border: 1px solid red;</span><br><span class=\"line\">    width: 300px;</span><br><span class=\"line\">    height: 300px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    background: green;    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.box.size&#123;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/* 公共代码 */</span><br></pre></td></tr></table></figure></p>\n<p>绝对定位的百分比是相对于父元素的宽高，通过这个特性可以让子元素的居中显示，但绝对定位是基于子元素的左上角，期望的效果是子元素的中心居中显示为了修正这个问题，可以借助外边距的负值，负的外边距可以让元素向相反方向定位，通过指定子元素的外边距为子元素宽度一半的负值，就可以让子元素居中了，css代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\"></span><br><span class=\"line\">/* 定位代码 */</span><br><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    position: absolute;;</span><br><span class=\"line\">    top: 50%;</span><br><span class=\"line\">    left: 50%;</span><br><span class=\"line\">    margin-left: -50px;</span><br><span class=\"line\">    margin-top: -50px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这是我比较常用的方式，这种方式比较好理解，兼容性也很好，缺点是<font color=\"red\">需要知道子元素的宽高</font></p>\n<h2 id=\"absolute-margin-auto\"><a href=\"#absolute-margin-auto\" class=\"headerlink\" title=\"absolute + margin auto\"></a>absolute + margin auto</h2><p>这种方式也要求居中元素的宽高必须固定，HTML代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wp&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box size&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>这种方式通过设置各个方向的距离都是0，此时再讲margin设为auto，就可以在各个方向上居中了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\"></span><br><span class=\"line\">/* 定位代码 */</span><br><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    position: absolute;;</span><br><span class=\"line\">    top: 0;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    right: 0;</span><br><span class=\"line\">    bottom: 0;</span><br><span class=\"line\">    margin: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方法兼容性也很好，缺点是需要知道子元素的宽高</p>\n<h2 id=\"absolute-calc\"><a href=\"#absolute-calc\" class=\"headerlink\" title=\"absolute + calc\"></a>absolute + calc</h2><p>这种方式也要求居中元素的宽高必须固定，所以我们为box增加size类，HTML代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wp&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box size&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>感谢css3带来了计算属性，既然top的百分比是基于元素的左上角，那么在减去宽度的一半就好了，代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\"></span><br><span class=\"line\">/* 定位代码 */</span><br><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    position: absolute;;</span><br><span class=\"line\">    top: calc(50% - 50px);</span><br><span class=\"line\">    left: calc(50% - 50px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方法兼容性依赖calc的兼容性，缺点是需要知道子元素的宽高</p>\n<h2 id=\"absolute-transform\"><a href=\"#absolute-transform\" class=\"headerlink\" title=\"absolute + transform\"></a>absolute + transform</h2><p>还是绝对定位，但这个方法不需要子元素固定宽高，所以不再需要size类了，HTML代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wp&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>修复绝对定位的问题，还可以使用css3新增的transform，transform的translate属性也可以设置百分比，其是相对于自身的宽和高，所以可以讲translate设置为-50%，就可以做到居中了，代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\"></span><br><span class=\"line\">/* 定位代码 */</span><br><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 50%;</span><br><span class=\"line\">    left: 50%;</span><br><span class=\"line\">    transform: translate(-50%, -50%);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方法兼容性依赖translate2d的兼容性</p>\n<h2 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h2><p>利用行内元素居中属性也可以做到水平垂直居中，HTML代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wp&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>把box设置为行内元素，通过text-align就可以做到水平居中，但很多同学可能不知道通过通过vertical-align也可以在垂直方向做到居中，代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\"></span><br><span class=\"line\">/* 定位代码 */</span><br><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    line-height: 300px;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    font-size: 0px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    font-size: 16px;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">    line-height: initial;</span><br><span class=\"line\">    text-align: left; /* 修正文字 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方法需要在子元素中将文字显示重置为想要的效果</p>\n<h2 id=\"writing-mode\"><a href=\"#writing-mode\" class=\"headerlink\" title=\"writing-mode\"></a>writing-mode</h2><p>writing-mode可以改变文字的显示方向，比如可以通过writing-mode让文字的显示变为垂直方向<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;div1&quot;&gt;水平方向&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=&quot;div2&quot;&gt;垂直方向&lt;/div&gt;</span><br><span class=\"line\">.div2 &#123;</span><br><span class=\"line\">    writing-mode: vertical-lr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">水平方向</span><br><span class=\"line\">垂</span><br><span class=\"line\">直</span><br><span class=\"line\">方</span><br><span class=\"line\">向</span><br></pre></td></tr></table></figure></p>\n<p>更神奇的是所有水平方向上的css属性，都会变为垂直方向上的属性，比如text-align，通过writing-mode和text-align就可以做到水平和垂直方向的居中了，只不过要稍微麻烦一点<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wp&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;wp-inner&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;box&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">复制代码/* 此处引用上面的公共代码 */</span><br><span class=\"line\">/* 此处引用上面的公共代码 */</span><br><span class=\"line\"></span><br><span class=\"line\">/* 定位代码 */</span><br><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    writing-mode: vertical-lr;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wp-inner &#123;</span><br><span class=\"line\">    writing-mode: horizontal-tb;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    margin: auto;</span><br><span class=\"line\">    text-align: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方法实现起来和理解起来都稍微有些复杂</p>\n<h2 id=\"table\"><a href=\"#table\" class=\"headerlink\" title=\"table\"></a>table</h2><p>曾经table被用来做页面布局，现在没人这么做了，但table也能够实现水平垂直居中，但是会增加很多冗余代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;table&gt;</span><br><span class=\"line\">    &lt;tbody&gt;</span><br><span class=\"line\">        &lt;tr&gt;</span><br><span class=\"line\">            &lt;td class=&quot;wp&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;box&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">            &lt;/td&gt;</span><br><span class=\"line\">        &lt;/tr&gt;</span><br><span class=\"line\">    &lt;/tbody&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br></pre></td></tr></table></figure></p>\n<p>tabel单元格中的内容天然就是垂直居中的，只要添加一个水平居中属性就好了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方法就是代码太冗余，而且也不是table的正确用法</p>\n<h2 id=\"css-table\"><a href=\"#css-table\" class=\"headerlink\" title=\"css-table\"></a>css-table</h2><p>css新增的table属性，可以让我们把普通元素，变为table元素的现实效果，通过这个特性也可以实现水平垂直居中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wp&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>下面通过css属性，可以让div显示的和table一样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    display: table-cell;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>复制代码这种方法和table一样的原理，但却没有那么多冗余代码，兼容性也还不错</p>\n<h2 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h2><p>flex作为现代的布局方案，颠覆了过去的经验，只需几行代码就可以优雅的做到水平垂直居中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wp&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    justify-content: center;</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>目前在移动端已经完全可以使用flex了，PC端需要看自己业务的兼容性情况</p>\n<h2 id=\"grid\"><a href=\"#grid\" class=\"headerlink\" title=\"grid\"></a>grid</h2><p>css新出的网格布局，由于兼容性不太好，一直没太关注，通过grid也可以实现水平垂直居中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wp&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;box&quot;&gt;123123&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">.wp &#123;</span><br><span class=\"line\">    display: grid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.box &#123;</span><br><span class=\"line\">    align-self: center;</span><br><span class=\"line\">    justify-self: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码量也很少，但兼容性不如flex，不推荐使用</p>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>下面对比下各个方式的优缺点，肯定又双叒叕该有同学说回字的写法了，简单总结下</p>\n<ul>\n<li>PC端有兼容性要求，宽高固定，推荐absolute + 负margin</li>\n<li>PC端有兼容要求，宽高不固定，推荐css-table</li>\n<li>PC端无兼容性要求，推荐flex</li>\n<li>移动端推荐使用flex</li>\n</ul>\n<p><strong>小贴士：</strong>关于flex的兼容性决方案，请看这里《<a href=\"//yanhaijing.com/css/2016/08/21/flex-practice-on-mobile/\">移动端flex布局实战</a>》</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>居中元素定宽高固定</th>\n<th>PC兼容性</th>\n<th>移动端兼容性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>absolute + 负margin</td>\n<td>是</td>\n<td>ie6+, chrome4+, firefox2+</td>\n<td>安卓2.3+, iOS6+</td>\n</tr>\n<tr>\n<td>absolute + margin auto</td>\n<td>是</td>\n<td>ie6+, chrome4+, firefox2+</td>\n<td>安卓2.3+, iOS6+</td>\n</tr>\n<tr>\n<td>absolute + calc</td>\n<td>是</td>\n<td>ie9+, chrome19+, firefox4+</td>\n<td>安卓4.4+, iOS6+</td>\n</tr>\n<tr>\n<td>absolute + transform</td>\n<td>否</td>\n<td>ie9+, chrome4+, firefox3.5+</td>\n<td>安卓3+, iOS6+</td>\n</tr>\n<tr>\n<td>writing-mode</td>\n<td>否</td>\n<td>ie6+, chrome4+, firefox3.5+</td>\n<td>安卓2.3+, iOS5.1+</td>\n</tr>\n<tr>\n<td>lineheight</td>\n<td>否</td>\n<td>ie6+, chrome4+, firefox2+</td>\n<td>安卓2.3+, iOS6+</td>\n</tr>\n<tr>\n<td>table</td>\n<td>否</td>\n<td>ie6+, chrome4+, firefox2+</td>\n<td>安卓2.3+, iOS6+</td>\n</tr>\n<tr>\n<td>css-table</td>\n<td>否</td>\n<td>ie8+, chrome4+, firefox2+</td>\n<td>安卓2.3+, iOS6+</td>\n</tr>\n<tr>\n<td>flex</td>\n<td>否</td>\n<td>ie10+, chrome4+, firefox2+</td>\n<td>安卓2.3+, iOS6+</td>\n</tr>\n<tr>\n<td>grid</td>\n<td>否</td>\n<td>ie10+, chrome57+, firefox52+</td>\n<td>安卓6+, iOS10.3+</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"python基础(四)","date":"2019-08-07T12:04:14.000Z","_content":"Python 模块\nPython 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。\n\n模块让你能够有逻辑地组织你的 Python 代码段。\n\n把相关的代码分配到一个模块里能让你的代码更好用，更易懂。\n\n模块能定义函数，类和变量，模块里也能包含可执行的代码。\n下例是个简单的模块 support.py：\n```\ndef print_func( par ):\n   print \"Hello : \", par\n   return\n```\nimport 语句\n```\nimport module1[, module2[,... moduleN]]\n```\n比如要引用模块 math，就可以在文件最开始的地方用 import math 来引入。在调用 math 模块中的函数时，必须这样引用：\n```\n模块名.函数名\n```\n当解释器遇到 import 语句，如果模块在当前的搜索路径就会被导入。\n\n搜索路径是一个解释器会先进行搜索的所有目录的列表。如想要导入模块 support.py，需要把命令放在脚本的顶端：\n\ntest.py 文件代码：\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \n# 导入模块\nimport support\n \n# 现在可以调用模块里包含的函数了\nsupport.print_func(\"Runoob\")\n```\nfrom…import 语句\nPython 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中。语法如下：\n```\nfrom modname import name1[, name2[, ... nameN]]\n```\n例如，要导入模块 fib 的 fibonacci 函数，使用如下语句：\n```\nfrom fib import fibonacci\n```\nfrom…import* 语句\n把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：\n```\nfrom modname import *\n```\ndir()函数\ndir() 函数一个排好序的字符串列表，内容是一个模块里定义过的名字。\n\n返回的列表容纳了在一个模块里定义的所有模块，变量和函数。如下一个简单的实例：\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \n# 导入内置math模块\nimport math\n \ncontent = dir(math)\n \nprint content;\n```\n### Python 文件I/O\n#### 打印到屏幕\n最简单的输出方法是用print语句，你可以给它传递零个或多个用逗号隔开的表达式。此函数把你传递的表达式转换成一个字符串表达式，并将结果写到标准输出如下：\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*- \n\nprint \"Python 是一个非常棒的语言，不是吗？\"\n```\n读取键盘输入\nPython提供了两个内置函数从标准输入读入一行文本，默认的标准输入是键盘。如下：\n\n* raw_input\n* input\n\n打开和关闭文件\nopen 函数\n你必须先用Python内置的open()函数打开一个文件，创建一个file对象，相关的方法才可以调用它进行读写。\n```\nfile object = open(file_name [, access_mode][, buffering])\n```\n* file_name：file_name变量是一个包含了你要访问的文件名称的字符串值。\n* access_mode：access_mode决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。\n* buffering:如果buffering的值被设为0，就不会有寄存。如果buffering的值取1，访问文件时会寄存行。如果将buffering的值设为大于1的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。\n\n![01.png](01.png)\n![02.png](02.png)\n\nwrite()方法\nwrite()方法可将任何字符串写入一个打开的文件。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。\n\nwrite()方法不会在字符串的结尾添加换行符('\\n')\n\nread()方法\nread（）方法从一个打开的文件中读取一个字符串。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。\n\nremove()方法\n你可以用remove()方法删除文件，需要提供要删除的文件名作为参数","source":"_posts/python基础4.md","raw":"---\ntitle: python基础(四)\ndate: 2019-08-07 20:04:14\ncategories:\n- python\ntags: [python基础]\n---\nPython 模块\nPython 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。\n\n模块让你能够有逻辑地组织你的 Python 代码段。\n\n把相关的代码分配到一个模块里能让你的代码更好用，更易懂。\n\n模块能定义函数，类和变量，模块里也能包含可执行的代码。\n下例是个简单的模块 support.py：\n```\ndef print_func( par ):\n   print \"Hello : \", par\n   return\n```\nimport 语句\n```\nimport module1[, module2[,... moduleN]]\n```\n比如要引用模块 math，就可以在文件最开始的地方用 import math 来引入。在调用 math 模块中的函数时，必须这样引用：\n```\n模块名.函数名\n```\n当解释器遇到 import 语句，如果模块在当前的搜索路径就会被导入。\n\n搜索路径是一个解释器会先进行搜索的所有目录的列表。如想要导入模块 support.py，需要把命令放在脚本的顶端：\n\ntest.py 文件代码：\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \n# 导入模块\nimport support\n \n# 现在可以调用模块里包含的函数了\nsupport.print_func(\"Runoob\")\n```\nfrom…import 语句\nPython 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中。语法如下：\n```\nfrom modname import name1[, name2[, ... nameN]]\n```\n例如，要导入模块 fib 的 fibonacci 函数，使用如下语句：\n```\nfrom fib import fibonacci\n```\nfrom…import* 语句\n把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：\n```\nfrom modname import *\n```\ndir()函数\ndir() 函数一个排好序的字符串列表，内容是一个模块里定义过的名字。\n\n返回的列表容纳了在一个模块里定义的所有模块，变量和函数。如下一个简单的实例：\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \n# 导入内置math模块\nimport math\n \ncontent = dir(math)\n \nprint content;\n```\n### Python 文件I/O\n#### 打印到屏幕\n最简单的输出方法是用print语句，你可以给它传递零个或多个用逗号隔开的表达式。此函数把你传递的表达式转换成一个字符串表达式，并将结果写到标准输出如下：\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*- \n\nprint \"Python 是一个非常棒的语言，不是吗？\"\n```\n读取键盘输入\nPython提供了两个内置函数从标准输入读入一行文本，默认的标准输入是键盘。如下：\n\n* raw_input\n* input\n\n打开和关闭文件\nopen 函数\n你必须先用Python内置的open()函数打开一个文件，创建一个file对象，相关的方法才可以调用它进行读写。\n```\nfile object = open(file_name [, access_mode][, buffering])\n```\n* file_name：file_name变量是一个包含了你要访问的文件名称的字符串值。\n* access_mode：access_mode决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。\n* buffering:如果buffering的值被设为0，就不会有寄存。如果buffering的值取1，访问文件时会寄存行。如果将buffering的值设为大于1的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。\n\n![01.png](01.png)\n![02.png](02.png)\n\nwrite()方法\nwrite()方法可将任何字符串写入一个打开的文件。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。\n\nwrite()方法不会在字符串的结尾添加换行符('\\n')\n\nread()方法\nread（）方法从一个打开的文件中读取一个字符串。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。\n\nremove()方法\n你可以用remove()方法删除文件，需要提供要删除的文件名作为参数","slug":"python基础4","published":1,"updated":"2019-08-07T12:42:51.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cwn0048t09zudc61cjc","content":"<p>Python 模块<br>Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。</p>\n<p>模块让你能够有逻辑地组织你的 Python 代码段。</p>\n<p>把相关的代码分配到一个模块里能让你的代码更好用，更易懂。</p>\n<p>模块能定义函数，类和变量，模块里也能包含可执行的代码。<br>下例是个简单的模块 support.py：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def print_func( par ):</span><br><span class=\"line\">   print &quot;Hello : &quot;, par</span><br><span class=\"line\">   return</span><br></pre></td></tr></table></figure></p>\n<p>import 语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import module1[, module2[,... moduleN]]</span><br></pre></td></tr></table></figure></p>\n<p>比如要引用模块 math，就可以在文件最开始的地方用 import math 来引入。在调用 math 模块中的函数时，必须这样引用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">模块名.函数名</span><br></pre></td></tr></table></figure></p>\n<p>当解释器遇到 import 语句，如果模块在当前的搜索路径就会被导入。</p>\n<p>搜索路径是一个解释器会先进行搜索的所有目录的列表。如想要导入模块 support.py，需要把命令放在脚本的顶端：</p>\n<p>test.py 文件代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\"># 导入模块</span><br><span class=\"line\">import support</span><br><span class=\"line\"> </span><br><span class=\"line\"># 现在可以调用模块里包含的函数了</span><br><span class=\"line\">support.print_func(&quot;Runoob&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>from…import 语句<br>Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中。语法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from modname import name1[, name2[, ... nameN]]</span><br></pre></td></tr></table></figure></p>\n<p>例如，要导入模块 fib 的 fibonacci 函数，使用如下语句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from fib import fibonacci</span><br></pre></td></tr></table></figure></p>\n<p>from…import* 语句<br>把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from modname import *</span><br></pre></td></tr></table></figure></p>\n<p>dir()函数<br>dir() 函数一个排好序的字符串列表，内容是一个模块里定义过的名字。</p>\n<p>返回的列表容纳了在一个模块里定义的所有模块，变量和函数。如下一个简单的实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\"># 导入内置math模块</span><br><span class=\"line\">import math</span><br><span class=\"line\"> </span><br><span class=\"line\">content = dir(math)</span><br><span class=\"line\"> </span><br><span class=\"line\">print content;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Python-文件I-O\"><a href=\"#Python-文件I-O\" class=\"headerlink\" title=\"Python 文件I/O\"></a>Python 文件I/O</h3><h4 id=\"打印到屏幕\"><a href=\"#打印到屏幕\" class=\"headerlink\" title=\"打印到屏幕\"></a>打印到屏幕</h4><p>最简单的输出方法是用print语句，你可以给它传递零个或多个用逗号隔开的表达式。此函数把你传递的表达式转换成一个字符串表达式，并将结果写到标准输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*- </span><br><span class=\"line\"></span><br><span class=\"line\">print &quot;Python 是一个非常棒的语言，不是吗？&quot;</span><br></pre></td></tr></table></figure></p>\n<p>读取键盘输入<br>Python提供了两个内置函数从标准输入读入一行文本，默认的标准输入是键盘。如下：</p>\n<ul>\n<li>raw_input</li>\n<li>input</li>\n</ul>\n<p>打开和关闭文件<br>open 函数<br>你必须先用Python内置的open()函数打开一个文件，创建一个file对象，相关的方法才可以调用它进行读写。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file object = open(file_name [, access_mode][, buffering])</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>file_name：file_name变量是一个包含了你要访问的文件名称的字符串值。</li>\n<li>access_mode：access_mode决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</li>\n<li>buffering:如果buffering的值被设为0，就不会有寄存。如果buffering的值取1，访问文件时会寄存行。如果将buffering的值设为大于1的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。</li>\n</ul>\n<p><img src=\"/2019/08/07/python基础4/01.png\" alt=\"01.png\"><br><img src=\"/2019/08/07/python基础4/02.png\" alt=\"02.png\"></p>\n<p>write()方法<br>write()方法可将任何字符串写入一个打开的文件。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。</p>\n<p>write()方法不会在字符串的结尾添加换行符(‘\\n’)</p>\n<p>read()方法<br>read（）方法从一个打开的文件中读取一个字符串。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。</p>\n<p>remove()方法<br>你可以用remove()方法删除文件，需要提供要删除的文件名作为参数</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Python 模块<br>Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。</p>\n<p>模块让你能够有逻辑地组织你的 Python 代码段。</p>\n<p>把相关的代码分配到一个模块里能让你的代码更好用，更易懂。</p>\n<p>模块能定义函数，类和变量，模块里也能包含可执行的代码。<br>下例是个简单的模块 support.py：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def print_func( par ):</span><br><span class=\"line\">   print &quot;Hello : &quot;, par</span><br><span class=\"line\">   return</span><br></pre></td></tr></table></figure></p>\n<p>import 语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import module1[, module2[,... moduleN]]</span><br></pre></td></tr></table></figure></p>\n<p>比如要引用模块 math，就可以在文件最开始的地方用 import math 来引入。在调用 math 模块中的函数时，必须这样引用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">模块名.函数名</span><br></pre></td></tr></table></figure></p>\n<p>当解释器遇到 import 语句，如果模块在当前的搜索路径就会被导入。</p>\n<p>搜索路径是一个解释器会先进行搜索的所有目录的列表。如想要导入模块 support.py，需要把命令放在脚本的顶端：</p>\n<p>test.py 文件代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\"># 导入模块</span><br><span class=\"line\">import support</span><br><span class=\"line\"> </span><br><span class=\"line\"># 现在可以调用模块里包含的函数了</span><br><span class=\"line\">support.print_func(&quot;Runoob&quot;)</span><br></pre></td></tr></table></figure></p>\n<p>from…import 语句<br>Python 的 from 语句让你从模块中导入一个指定的部分到当前命名空间中。语法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from modname import name1[, name2[, ... nameN]]</span><br></pre></td></tr></table></figure></p>\n<p>例如，要导入模块 fib 的 fibonacci 函数，使用如下语句：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from fib import fibonacci</span><br></pre></td></tr></table></figure></p>\n<p>from…import* 语句<br>把一个模块的所有内容全都导入到当前的命名空间也是可行的，只需使用如下声明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from modname import *</span><br></pre></td></tr></table></figure></p>\n<p>dir()函数<br>dir() 函数一个排好序的字符串列表，内容是一个模块里定义过的名字。</p>\n<p>返回的列表容纳了在一个模块里定义的所有模块，变量和函数。如下一个简单的实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\"># 导入内置math模块</span><br><span class=\"line\">import math</span><br><span class=\"line\"> </span><br><span class=\"line\">content = dir(math)</span><br><span class=\"line\"> </span><br><span class=\"line\">print content;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Python-文件I-O\"><a href=\"#Python-文件I-O\" class=\"headerlink\" title=\"Python 文件I/O\"></a>Python 文件I/O</h3><h4 id=\"打印到屏幕\"><a href=\"#打印到屏幕\" class=\"headerlink\" title=\"打印到屏幕\"></a>打印到屏幕</h4><p>最简单的输出方法是用print语句，你可以给它传递零个或多个用逗号隔开的表达式。此函数把你传递的表达式转换成一个字符串表达式，并将结果写到标准输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*- </span><br><span class=\"line\"></span><br><span class=\"line\">print &quot;Python 是一个非常棒的语言，不是吗？&quot;</span><br></pre></td></tr></table></figure></p>\n<p>读取键盘输入<br>Python提供了两个内置函数从标准输入读入一行文本，默认的标准输入是键盘。如下：</p>\n<ul>\n<li>raw_input</li>\n<li>input</li>\n</ul>\n<p>打开和关闭文件<br>open 函数<br>你必须先用Python内置的open()函数打开一个文件，创建一个file对象，相关的方法才可以调用它进行读写。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file object = open(file_name [, access_mode][, buffering])</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>file_name：file_name变量是一个包含了你要访问的文件名称的字符串值。</li>\n<li>access_mode：access_mode决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</li>\n<li>buffering:如果buffering的值被设为0，就不会有寄存。如果buffering的值取1，访问文件时会寄存行。如果将buffering的值设为大于1的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。</li>\n</ul>\n<p><img src=\"/2019/08/07/python基础4/01.png\" alt=\"01.png\"><br><img src=\"/2019/08/07/python基础4/02.png\" alt=\"02.png\"></p>\n<p>write()方法<br>write()方法可将任何字符串写入一个打开的文件。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。</p>\n<p>write()方法不会在字符串的结尾添加换行符(‘\\n’)</p>\n<p>read()方法<br>read（）方法从一个打开的文件中读取一个字符串。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。</p>\n<p>remove()方法<br>你可以用remove()方法删除文件，需要提供要删除的文件名作为参数</p>\n"},{"title":"浏览器缓存","date":"2018-12-27T13:35:13.000Z","_content":"# HTTP强缓存和协商缓存\n> 浏览器缓存有下面的优点：\n- 减少冗余的数据传输\n- 减少服务器负担\n- 加快客户端加载网页的速度\n\n在浏览器第一次发起请求时，本地无缓存，向web服务器发送请求，服务器起端响应请求，浏览器端缓存。过程如下：\n<center>![](http01.png)</center>\n在第一次请求时，服务器会将页面最后修改时间通过Last-Modified标识由服务器发送给客户端，客户端记录修改时间；服务器还会生成一个Etag，并发送给客户端。\n浏览器后续再次进行请求时：\n<center>![](http02.png)</center>\n浏览器缓存主要分为强强缓存（也称本地缓存）和协商缓存（也称弱缓存）。根据上图，浏览器在第一次请求发生后，再次发送请求时：\n\n- 浏览器请求某一资源时，会先获取该资源缓存的header信息，然后根据header中的Cache-Control和Expires来判断是否过期。若没过期则直接从缓存中获取资源信息，包括缓存的header的信息，所以此次请求不会与服务器进行通信。这里判断是否过期，则是强缓存相关。后面会讲Cache-Control和Expires相关。\n\n- 如果显示已过期，浏览器会向服务器端发送请求，这个请求会携带第一次请求返回的有关缓存的header字段信息，比如客户端会通过If-None-Match头将先前服务器端发送过来的Etag发送给服务器，服务会对比这个客户端发过来的Etag是否与服务器的相同，若相同，就将If-None-Match的值设为false，返回状态304，客户端继续使用本地缓存，不解析服务器端发回来的数据，若不相同就将If-None-Match的值设为true，返回状态为200，客户端重新机械服务器端返回的数据；客户端还会通过If-Modified-Since头将先前服务器端发过来的最后修改时间戳发送给服务器，服务器端通过这个时间戳判断客户端的页面是否是最新的，如果不是最新的，则返回最新的内容，如果是最新的，则返回304，客户端继续使用本地缓存。\n\n## 强缓存\n强缓存是利用http头中的Expires和Cache-Control两个字段来控制的，用来表示资源的缓存时间。强缓存中，普通刷新会忽略它，但不会清除它，需要强制刷新。浏览器强制刷新，请求会带上Cache-Control:no-cache和Pragma:no-cache\n\n### Expires\nExpires是http1.0的规范，它的值是一个绝对时间的GMT格式的时间字符串。如我现在这个网页的Expires值是：expires:Fri, 14 Apr 2017 10:47:02 GMT。这个时间代表这这个资源的失效时间，只要发送请求时间是在Expires之前，那么本地缓存始终有效，则在缓存中读取数据。所以这种方式有一个明显的缺点，由于失效的时间是一个绝对时间，所以当服务器与客户端时间偏差较大时，就会导致缓存混乱。如果同时出现Cache-Control:max-age和Expires，那么max-age优先级更高。如我主页的response headers部分如下：\n\ncache-control:max-age=691200\nexpires:Fri, 14 Apr 2017 10:47:02 GMT\n那么表示资源可以被缓存的最长时间为691200秒，会优先考虑max-age。\n\n### Cache-Control\nCache-Control是在http1.1中出现的，主要是利用该字段的max-age值来进行判断，它是一个相对时间，例如Cache-Control:max-age=3600，代表着资源的有效期是3600秒。cache-control除了该字段外，还有下面几个比较常用的设置值：\n\nno-cache：不使用本地缓存。需要使用缓存协商，先与服务器确认返回的响应是否被更改，如果之前的响应中存在ETag，那么请求的时候会与服务端验证，如果资源未被更改，则可以避免重新下载。\n\nno-store：直接禁止游览器缓存数据，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。\n\npublic：可以被所有的用户缓存，包括终端用户和CDN等中间代理服务器。\n\nprivate：只能被终端用户的浏览器缓存，不允许CDN等中继缓存服务器对其缓存。\nCache-Control与Expires可以在服务端配置同时启用，同时启用的时候Cache-Control优先级高。\n\n## 协商缓存\n协商缓存就是由服务器来确定缓存资源是否可用，所以客户端与服务器端要通过某种标识来进行通信，从而让服务器判断请求资源是否可以缓存访问。\n\n普通刷新会启用弱缓存，忽略强缓存。只有在地址栏或收藏夹输入网址、通过链接引用资源等情况下，浏览器才会启用强缓存，这也是为什么有时候我们更新一张图片、一个js文件，页面内容依然是旧的，但是直接浏览器访问那个图片或文件，看到的内容却是新的。\n\n这个主要涉及到两组header字段：Etag和If-None-Match、Last-Modified和If-Modified-Since。上面以及说得很清楚这两组怎么使用啦~复习一下：\n\n### Etag和If-None-Match\nEtag/If-None-Match返回的是一个校验码。ETag可以保证每一个资源是唯一的，资源变化都会导致ETag变化。服务器根据浏览器上送的If-None-Match值来判断是否命中缓存。\n\n与Last-Modified不一样的是，当服务器返回304 Not Modified的响应时，由于ETag重新生成过，response header中还会把这个ETag返回，即使这个ETag跟之前的没有变化。\n\n### Last-Modify/If-Modify-Since\n浏览器第一次请求一个资源的时候，服务器返回的header中会加上Last-Modify，Last-modify是一个时间标识该资源的最后修改时间，例如Last-Modify: Thu,31 Dec 2037 23:59:59 GMT。\n\n当浏览器再次请求该资源时，request的请求头中会包含If-Modify-Since，该值为缓存之前返回的Last-Modify。服务器收到If-Modify-Since后，根据资源的最后修改时间判断是否命中缓存。\n\n如果命中缓存，则返回304，并且不会返回资源内容，并且不会返回Last-Modify。\n\n为什么要有Etag\n你可能会觉得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag呢？HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：\n\n一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET；\n\n某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)；\n\n某些服务器不能精确的得到文件的最后修改时间。\n\nLast-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。\n\n# HTTP基于缓存策略三要素分解法\n## 两道题\n\n以下为 page.html 内容：\n```\n<!DOCTYPE html><html xmlns=\"http://www.w3.org/1999/xhtml\"><head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<title>page页</title></head><body>\n<img src=\"images/head.png\" />\n<a href=\"page.html\">重新访问page页</a></body></html>\n```\n\n首次访问该页面，页面中 head.png 响应头信息如下：\n```\nHTTP/1.1 200 OK\nCache-Control: no-cache\nContent-Type: image/png\nLast-Modified: Tue, 08 Nov 2016 06:59:00 GMT\nAccept-Ranges: bytes\nDate: Thu, 10 Nov 2016 02:48:50 GMT\nContent-Length: 3534\n```\n问题1：请问当点击“重新访问 page 页”链接重新加载该页面后， head.png 如何二次加载？\n问题2：如果将上述信息中的 Cache-Control 设置为 private，那么结果又会如何呢？\n## HTTP缓存体系\n首先我将 Http 缓存体系分为以下三个部分：\n![](http03.png)\n### 缓存存储策略\n>用来确定 Http响应内容是否可以被客户端缓存，以及可以被哪些客户端缓存这个策略的作用只有一个，用于决定 Http 响应内容是否可缓存到客户端\n- 对于 Cache-Control 头里的 Public、Private、no-cache、max-age 、no-store 他们都是用来指明响应内容是否可以被客户端存储的，其中前4个都会缓存文件数据（关于 no-cache 应理解为“不建议使用本地缓存”，其仍然会缓存数据到本地），后者 no-store 则不会在客户端缓存任何响应数据。另关于 no-cache 和 max-age 有点特别，我认为它是一种混合体，下面我会讲到。\n\n- 通过 Cache-Control：Public 设置我们可以将 Http 响应数据存储到本地，但此时并不意味着后续浏览器会直接从缓存中读取数据并使用，为啥？因为它无法确定本地缓存的数据是否可用（可能已经失效），还必须借助一套鉴别机制来确认才行， 这就是我们下面要讲到的“缓存过期策略”。\n\n### 缓存过期策略\n>客户端用来确认存储在本地的缓存数据是否已过期，进而决定是否要发请求到服务端获取数据\n刚上面我们已经阐述了数据缓存到了本地后还需要经过判断才能使用，那么浏览器通过什么条件来判断呢？ 答案是：Expires，Expires 指名了缓存数据有效的绝对时间，告诉客户端到了这个时间点（比照客户端时间点）后本地缓存就作废了，在这个时间点内客户端可以认为缓存数据有效，可直接从缓存中加载展示。\n\n不过 Http 缓存头设计并没有想象的那么规矩，像上面提到的 Cache-Control（这个头是在Http1.1里加进来的）头里的 no-cache 和 max-age 就是特例，它们既包含缓存存储策略也包含缓存过期策略，以 max-age 为例，他实际上相当于：\n\nCache-Control：public/private（这里不太确定具体哪个）\nExpires：当前客户端时间 + maxAge 。\n而 Cache-Control：no-cache 和 Cache-Control：max-age=0 （单位是秒）相当\n\n这里需要注意的是：\n\nCache-Control 中指定的缓存过期策略优先级高于Expires，当它们同时存在的时候，后者会被覆盖掉。\n\n缓存数据标记为已过期只是告诉客户端不能再直接从本地读取缓存了，需要再发一次请求到服务器去确认，并不等同于本地缓存数据从此就没用了，有些情况下即使过期了还是会被再次用到，具体下面会讲到。\n\n### 缓存对比策略\n将缓存在客户端的数据标识发往服务端，服务端通过标识来判断客户端 缓存数据是否仍有效，进而决定是否要重发数据。\n\n客户端检测到数据过期或浏览器刷新后，往往会重新发起一个 http 请求到服务器，服务器此时并不急于返回数据，而是看请求头有没有带标识（ If-Modified-Since、If-None-Match）过来，如果判断标识仍然有效，则返回304告诉客户端取本地缓存数据来用即可（这里要注意的是你必须要在首次响应时输出相应的头信息（Last-Modified、ETags）到客户端）。至此我们就明白了上面所说的本地缓存数据即使被认为过期，并不等于数据从此就没用了的道理了。\n\n关于 Last-Modified，这个响应头使用要注意，可能会影响到缓存过期策略，具体原因，后面我会通过解答开篇提到的2道题来作说明。\n\n以上就是我所认识的缓存策略，下面我将缓存策略三要素和常用的几个缓存头（项）结合一起，让大家更清晰的认识到它们之间的关系：\n![](http04.png)\n通过上图我可以清晰的看到各缓存项分别属于哪个缓存策略范畴，这其中有部分重叠，它表明这些缓存项具有多重缓存策略，所以实际在分析缓存头的时候，除了常规的头外，我们还需要将这些具有双重缓存策略的项分解开来。\n\n最后我们回到最开始提到的2道题目，我们来一起分解下：\n\n第一道题：\n```\nHTTP/1.1 200 OK\nCache-Control: no-cache\nContent-Type: image/png\nLast-Modified: Tue, 08 Nov 2016 06:59:00 GMT\nAccept-Ranges: bytes\nDate: Thu, 10 Nov 2016 02:48:50 GMT\nContent-Length: 3534\n```\n分析上述 Http 响应头发现有以下两项与缓存相关：\n```\nCache-Control: no-cache \nLast-Modified: Tue, 08 Nov 2016 06:59:00 GMT\n```\n我们上面讲到了 Cache-Control: no-cache 相当于 Cache-Control: max-age=0，且他们都是多重策略头，我们需将其分解：\n\nCache-Control: no-cache 等于 Cache-Control: max-age=0，\n接着 Cache-Control: max-age=0 又可分解成：\n\nCache-Control: public/private （不确定是二者中的哪一个）\nExpires: 当前时间\n最终我们得到了以下完整的缓存策略三要素：\n![](http05.png)\n所以最终结果是：浏览器会再次请求服务端，并携带上 Last-Modified 指定的时间去服务器对比：\n\na）对比失败：服务器返回200并重发数据，客户端接收到数据后展示，并刷新本地缓存。\n\nb）对比成功：服务器返回304且不重发数据，客户端收到304状态码后从本地读取缓存数据。以下为模拟此种情况下请求后的抓包情况：\n![](http06.png)\n这道题本身不难，但若认为 no-cache 不会缓存数据到本地，那么你理解起来就会很矛盾，因为如果文件数据没有被本地缓存，服务器返回304后将会无法展示出图片内容，但实际上它是能正常展示的。这道题很好的证明了 no-cache 也会缓存数据到本地这一说法。\n第二道题：\n```\nHTTP/1.1 200 OK\nCache-Control: private\nContent-Type: image/png\nLast-Modified: Tue, 08 Nov 2016 06:59:00 GMT\nAccept-Ranges: bytes\nDate: Thu, 10 Nov 2016 02:48:50 GMT\nContent-Length: 3534\n```\n解题思路和上题一样，首先先找到缓存相关项：\n```\nCache-Control: private     \nLast-Modified: Tue, 08 Nov 2016 06:59:00 GMT\n这时我们会发现根本找不到缓存过期策略项，那答案会不会和上面一样？ 一时半会也分析不出答案，那只能实际测试下了：\n```\n![](http07.png)\n再看看 Chrome 浏览器下抓包：\n![](http08.png)\n可以看到，浏览器后续请求都直接取的本地缓存，看来的确存在某种缓存过期策略（根据我上面的缓存过期策略理论，浏览器如果直接从本地加载缓存数据，说明它相信本地缓存数据有效，那一定存在某种缓存过期判断条件）。这个问题百思不得其解，困扰了我好久，直到一次偶然的机会我在 Fiddler 响应信息面板里的 Caching 选项卡中找到了答案：\n原来，在没有提供任何浏览器缓存过期策略的情况下，浏览器遵循一个启发式缓存过期策略：\n\n根据响应头中2个时间字段 Date 和 Last-Modified 之间的时间差值，取其值的10%作为缓存时间周期。\n\n贴一下Caching面板里的描述，英语好的同学可以精准翻译下：\n最终我们得到了以下完整的缓存策略三要素：\n![](http10.png)\n最终结果\n浏览器会根据 Date 和 Last-Modified 之间的时间差值缓存一段时间，这段时间内会直接使用本地缓存数据而不会再去请求服务器（强制请求除外），缓存过期后，会再次请求服务端，并携带上 Last-Modified 指定的时间去服务器对比并根据服务端的响应状态决定是否要从本地加载缓存数据。\n\n总结\nHttp 缓存设置起来并不复杂，但却容易被轻视， 今天这篇文章结合2道题目，通过分析、解剖相关缓存头，从系统化角度对 Http 缓存机制做了一个较完整的剖析：Http 缓存机制实际上是 Http 缓存策略三个要素（纬度）相互作用的集合，所以在分析和设置 Http 报文缓存头时，只要能从中精准的分解出缓存三要素，我们就能非常准确的预判到缓存设置最终能达到的效果。\n# 浏览器缓存详解:expires,cache-control,last-modified,etag详细说明\n![](http11.png)\n## Last-Modified\n\n在浏览器第一次请求某一个URL时，服务器端的返回状态会是200，内容是你请求的资源，同时有一个Last-Modified的属性标记(HttpReponse Header)此文件在服务期端最后被修改的时间，格式类似这样：\n\nLast-Modified:Tue, 24 Feb 2009 08:01:04 GMT\n\n客户端第二次请求此URL时，根据HTTP协议的规定，浏览器会向服务器传送If-Modified-Since报头(HttpRequest Header)，询问该时间之后文件是否有被修改过：\n\nIf-Modified-Since:Tue, 24 Feb 2009 08:01:04 GMT\n\n如果服务器端的资源没有变化，则自动返回HTTP304（NotChanged.）状态码，内容为空，这样就节省了传输数据量。当服务器端代码发生改变或者重启服务器时，则重新发出资源，返回和第一次请求时类似。从而保证不向客户端重复发出资源，也保证当服务器有变化时，客户端能够得到最新的资源。\n\n注：如果If-Modified-Since的时间比服务器当前时间(当前的请求时间request_time)还晚，会认为是个非法请求\n\n\n\n## Etag工作原理\n\nHTTP协议规格说明定义ETag为“被请求变量的实体标记”（参见14.19）。简单点即服务器响应时给请求URL标记，并在HTTP响应头中将其传送到客户端，类似服务器端返回的格式：\n\nEtag:“5d8c72a5edda8d6a:3239″\n\n客户端的查询更新格式是这样的：\n\nIf-None-Match:“5d8c72a5edda8d6a:3239″\n\n如果ETag没改变，则返回状态304。\n\n即:在客户端发出请求后，HttpReponse Header中包含Etag:“5d8c72a5edda8d6a:3239″\n\n标识，等于告诉Client端，你拿到的这个的资源有表示ID：5d8c72a5edda8d6a:3239。当下次需要发Request索要同一个URI的时候，浏览器同时发出一个If-None-Match报头(Http RequestHeader)此时包头中信息包含上次访问得到的Etag:“5d8c72a5edda8d6a:3239″标识。\n\nIf-None-Match:“5d8c72a5edda8d6a:3239“\n\n,这样，Client端等于Cache了两份，服务器端就会比对2者的etag。如果If-None-Match为False，不返回200，返回304(Not Modified) Response。\n\n\n\n## Expires\n\n给出的日期/时间后，被响应认为是过时。如Expires:Thu, 02 Apr 2009 05:14:08 GMT\n\n需和Last-Modified结合使用。用于控制请求文件的有效时间，当请求数据在有效期内时客户端浏览器从缓存请求数据而不是服务器端.当缓存中数据失效或过期，才决定从服务器更新数据。\n\n\n\n## Last-Modified和Expires\n\nLast-Modified标识能够节省一点带宽，但是还是逃不掉发一个HTTP请求出去，而且要和Expires一起用。而Expires标识却使得浏览器干脆连HTTP请求都不用发，比如当用户F5或者点击Refresh按钮的时候就算对于有Expires的URI，一样也会发一个HTTP请求出去，所以，Last-Modified还是要用的，而且要和Expires一起用。\n\n\n\n\n## Etag和Expires\n\n如果服务器端同时设置了Etag和Expires时，Etag原理同样，即与Last-Modified/Etag对应的HttpRequestHeader:If-Modified-Since和If-None-Match。我们可以看到这两个Header的值和WebServer发出的Last-Modified,Etag值完全一样；在完全匹配If-Modified-Since和If-None-Match即检查完修改时间和Etag之后，服务器才能返回304.\n\n\n\n\n## Last-Modified和Etag\n\n分布式系统里多台机器间文件的last-modified必须保持一致，以免负载均衡到不同机器导致比对失败\n\n分布式系统尽量关闭掉Etag(每台机器生成的etag都会不一样)\n\nLast-Modified和ETags请求的http报头一起使用，服务器首先产生Last-Modified/Etag标记，服务器可在稍后使用它来判断页面是否已经被修改，来决定文件是否继续缓存\n\n过程如下:\n\n1.客户端请求一个页面（A）。\n\n2.服务器返回页面A，并在给A加上一个Last-Modified/ETag。\n\n3.客户端展现该页面，并将页面连同Last-Modified/ETag一起缓存。\n\n4.客户再次请求页面A，并将上次请求时服务器返回的Last-Modified/ETag一起传递给服务器。\n\n5.服务器检查该Last-Modified或ETag，并判断出该页面自上次客户端请求之后还未被修改，直接返回响应304和一个空的响应体。\n\n注：\n\n1、Last-Modified和Etag头都是由WebServer发出的HttpReponse Header，WebServer应该同时支持这两种头。\n\n2、WebServer发送完Last-Modified/Etag头给客户端后，客户端会缓存这些头；\n\n3、客户端再次发起相同页面的请求时，将分别发送与Last-Modified/Etag对应的HttpRequestHeader:If-Modified-Since和If-None-Match。我们可以看到这两个Header的值和WebServer发出的Last-Modified,Etag值完全一样；\n\n4、通过上述值到服务器端检查，判断文件是否继续缓存；\n\n\n\n7、关于 Cache-Control: max-age=秒 和 Expires\n\nExpires = 时间，HTTP 1.0 版本，缓存的载止时间，允许客户端在这个时间之前不去检查（发请求）\nmax-age = 秒，HTTP 1.1版本，资源在本地缓存多少秒。\n如果max-age和Expires同时存在，则被Cache-Control的max-age覆盖。\n\nExpires 的一个缺点就是，返回的到期时间是服务器端的时间，这样存在一个问题，如果客户端的时间与服务器的时间相差很大，那么误差就很大，所以在HTTP 1.1版开始，使用Cache-Control: max-age=秒替代。\n\nExpires =max-age +   “每次下载时的当前的request时间”\n\n所以一旦重新下载的页面后，expires就重新计算一次，但last-modified不会变化 \n\n# 浏览器缓存总结\n\n浏览器缓存分为强缓存和协商缓存。当客户端请求某个资源时，获取缓存的流程如下：\n\n- 先根据这个资源的一些 http header 判断它是否命中强缓存，如果命中，则直接从本地获取缓存资源，不会发请求到服务器；\n- 当强缓存没有命中时，客户端会发送请求到服务器，服务器通过另一些request header验证这个资源是否命中协商缓存，称为http再验证，如果命中，服务器将请求返回，但不返回资源，而是告诉客户端直接从缓存中获取，客户端收到返回后就会从缓存中获取资源；\n- 强缓存和协商缓存共同之处在于，如果命中缓存，服务器都不会返回资源；\n- 区别是，强缓存不对发送请求到服务器，但协商缓存会。\n- 当协商缓存也没命中时，服务器就会将资源发送回客户端。\n- 当 ctrl+f5 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；\n- 当 f5 刷新网页时，跳过强缓存，但是会检查协商缓存；\n>强缓存\n\n- Expires（该字段是 http1.0 时的规范，值为一个绝对时间的 GMT 格式的时间字符串，代表缓存资源的过期时间）\n- Cache-Control:max-age（该字段是 http1.1 的规范，强缓存利用其 max-age 值来判断缓存资源的最大生命周期，它的值单位为秒）\n>协商缓存\n\n- Last-Modified（值为资源最后更新时间，随服务器response返回）\n- If-Modified-Since（通过比较两个时间来判断资源在两次请求期间是否有过修改，如果没有修改，则命中协商缓存）\n- ETag（表示资源内容的唯一标识，随服务器response返回）\n- If-None-Match（服务器通过比较请求头部的If-None-Match与当前资源的ETag是否一致来判断资源是否在两次请求之间有过修改，如果没有修改，则命中协商缓存）\n\n\n\n","source":"_posts/浏览器缓存.md","raw":"---\ntitle: 浏览器缓存\ndate: 2018-12-27 21:35:13\ncategories:\n- 基础前端技术\ntags: \n    - http\n    - 缓存\n---\n# HTTP强缓存和协商缓存\n> 浏览器缓存有下面的优点：\n- 减少冗余的数据传输\n- 减少服务器负担\n- 加快客户端加载网页的速度\n\n在浏览器第一次发起请求时，本地无缓存，向web服务器发送请求，服务器起端响应请求，浏览器端缓存。过程如下：\n<center>![](http01.png)</center>\n在第一次请求时，服务器会将页面最后修改时间通过Last-Modified标识由服务器发送给客户端，客户端记录修改时间；服务器还会生成一个Etag，并发送给客户端。\n浏览器后续再次进行请求时：\n<center>![](http02.png)</center>\n浏览器缓存主要分为强强缓存（也称本地缓存）和协商缓存（也称弱缓存）。根据上图，浏览器在第一次请求发生后，再次发送请求时：\n\n- 浏览器请求某一资源时，会先获取该资源缓存的header信息，然后根据header中的Cache-Control和Expires来判断是否过期。若没过期则直接从缓存中获取资源信息，包括缓存的header的信息，所以此次请求不会与服务器进行通信。这里判断是否过期，则是强缓存相关。后面会讲Cache-Control和Expires相关。\n\n- 如果显示已过期，浏览器会向服务器端发送请求，这个请求会携带第一次请求返回的有关缓存的header字段信息，比如客户端会通过If-None-Match头将先前服务器端发送过来的Etag发送给服务器，服务会对比这个客户端发过来的Etag是否与服务器的相同，若相同，就将If-None-Match的值设为false，返回状态304，客户端继续使用本地缓存，不解析服务器端发回来的数据，若不相同就将If-None-Match的值设为true，返回状态为200，客户端重新机械服务器端返回的数据；客户端还会通过If-Modified-Since头将先前服务器端发过来的最后修改时间戳发送给服务器，服务器端通过这个时间戳判断客户端的页面是否是最新的，如果不是最新的，则返回最新的内容，如果是最新的，则返回304，客户端继续使用本地缓存。\n\n## 强缓存\n强缓存是利用http头中的Expires和Cache-Control两个字段来控制的，用来表示资源的缓存时间。强缓存中，普通刷新会忽略它，但不会清除它，需要强制刷新。浏览器强制刷新，请求会带上Cache-Control:no-cache和Pragma:no-cache\n\n### Expires\nExpires是http1.0的规范，它的值是一个绝对时间的GMT格式的时间字符串。如我现在这个网页的Expires值是：expires:Fri, 14 Apr 2017 10:47:02 GMT。这个时间代表这这个资源的失效时间，只要发送请求时间是在Expires之前，那么本地缓存始终有效，则在缓存中读取数据。所以这种方式有一个明显的缺点，由于失效的时间是一个绝对时间，所以当服务器与客户端时间偏差较大时，就会导致缓存混乱。如果同时出现Cache-Control:max-age和Expires，那么max-age优先级更高。如我主页的response headers部分如下：\n\ncache-control:max-age=691200\nexpires:Fri, 14 Apr 2017 10:47:02 GMT\n那么表示资源可以被缓存的最长时间为691200秒，会优先考虑max-age。\n\n### Cache-Control\nCache-Control是在http1.1中出现的，主要是利用该字段的max-age值来进行判断，它是一个相对时间，例如Cache-Control:max-age=3600，代表着资源的有效期是3600秒。cache-control除了该字段外，还有下面几个比较常用的设置值：\n\nno-cache：不使用本地缓存。需要使用缓存协商，先与服务器确认返回的响应是否被更改，如果之前的响应中存在ETag，那么请求的时候会与服务端验证，如果资源未被更改，则可以避免重新下载。\n\nno-store：直接禁止游览器缓存数据，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。\n\npublic：可以被所有的用户缓存，包括终端用户和CDN等中间代理服务器。\n\nprivate：只能被终端用户的浏览器缓存，不允许CDN等中继缓存服务器对其缓存。\nCache-Control与Expires可以在服务端配置同时启用，同时启用的时候Cache-Control优先级高。\n\n## 协商缓存\n协商缓存就是由服务器来确定缓存资源是否可用，所以客户端与服务器端要通过某种标识来进行通信，从而让服务器判断请求资源是否可以缓存访问。\n\n普通刷新会启用弱缓存，忽略强缓存。只有在地址栏或收藏夹输入网址、通过链接引用资源等情况下，浏览器才会启用强缓存，这也是为什么有时候我们更新一张图片、一个js文件，页面内容依然是旧的，但是直接浏览器访问那个图片或文件，看到的内容却是新的。\n\n这个主要涉及到两组header字段：Etag和If-None-Match、Last-Modified和If-Modified-Since。上面以及说得很清楚这两组怎么使用啦~复习一下：\n\n### Etag和If-None-Match\nEtag/If-None-Match返回的是一个校验码。ETag可以保证每一个资源是唯一的，资源变化都会导致ETag变化。服务器根据浏览器上送的If-None-Match值来判断是否命中缓存。\n\n与Last-Modified不一样的是，当服务器返回304 Not Modified的响应时，由于ETag重新生成过，response header中还会把这个ETag返回，即使这个ETag跟之前的没有变化。\n\n### Last-Modify/If-Modify-Since\n浏览器第一次请求一个资源的时候，服务器返回的header中会加上Last-Modify，Last-modify是一个时间标识该资源的最后修改时间，例如Last-Modify: Thu,31 Dec 2037 23:59:59 GMT。\n\n当浏览器再次请求该资源时，request的请求头中会包含If-Modify-Since，该值为缓存之前返回的Last-Modify。服务器收到If-Modify-Since后，根据资源的最后修改时间判断是否命中缓存。\n\n如果命中缓存，则返回304，并且不会返回资源内容，并且不会返回Last-Modify。\n\n为什么要有Etag\n你可能会觉得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag呢？HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：\n\n一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET；\n\n某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)；\n\n某些服务器不能精确的得到文件的最后修改时间。\n\nLast-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。\n\n# HTTP基于缓存策略三要素分解法\n## 两道题\n\n以下为 page.html 内容：\n```\n<!DOCTYPE html><html xmlns=\"http://www.w3.org/1999/xhtml\"><head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n<title>page页</title></head><body>\n<img src=\"images/head.png\" />\n<a href=\"page.html\">重新访问page页</a></body></html>\n```\n\n首次访问该页面，页面中 head.png 响应头信息如下：\n```\nHTTP/1.1 200 OK\nCache-Control: no-cache\nContent-Type: image/png\nLast-Modified: Tue, 08 Nov 2016 06:59:00 GMT\nAccept-Ranges: bytes\nDate: Thu, 10 Nov 2016 02:48:50 GMT\nContent-Length: 3534\n```\n问题1：请问当点击“重新访问 page 页”链接重新加载该页面后， head.png 如何二次加载？\n问题2：如果将上述信息中的 Cache-Control 设置为 private，那么结果又会如何呢？\n## HTTP缓存体系\n首先我将 Http 缓存体系分为以下三个部分：\n![](http03.png)\n### 缓存存储策略\n>用来确定 Http响应内容是否可以被客户端缓存，以及可以被哪些客户端缓存这个策略的作用只有一个，用于决定 Http 响应内容是否可缓存到客户端\n- 对于 Cache-Control 头里的 Public、Private、no-cache、max-age 、no-store 他们都是用来指明响应内容是否可以被客户端存储的，其中前4个都会缓存文件数据（关于 no-cache 应理解为“不建议使用本地缓存”，其仍然会缓存数据到本地），后者 no-store 则不会在客户端缓存任何响应数据。另关于 no-cache 和 max-age 有点特别，我认为它是一种混合体，下面我会讲到。\n\n- 通过 Cache-Control：Public 设置我们可以将 Http 响应数据存储到本地，但此时并不意味着后续浏览器会直接从缓存中读取数据并使用，为啥？因为它无法确定本地缓存的数据是否可用（可能已经失效），还必须借助一套鉴别机制来确认才行， 这就是我们下面要讲到的“缓存过期策略”。\n\n### 缓存过期策略\n>客户端用来确认存储在本地的缓存数据是否已过期，进而决定是否要发请求到服务端获取数据\n刚上面我们已经阐述了数据缓存到了本地后还需要经过判断才能使用，那么浏览器通过什么条件来判断呢？ 答案是：Expires，Expires 指名了缓存数据有效的绝对时间，告诉客户端到了这个时间点（比照客户端时间点）后本地缓存就作废了，在这个时间点内客户端可以认为缓存数据有效，可直接从缓存中加载展示。\n\n不过 Http 缓存头设计并没有想象的那么规矩，像上面提到的 Cache-Control（这个头是在Http1.1里加进来的）头里的 no-cache 和 max-age 就是特例，它们既包含缓存存储策略也包含缓存过期策略，以 max-age 为例，他实际上相当于：\n\nCache-Control：public/private（这里不太确定具体哪个）\nExpires：当前客户端时间 + maxAge 。\n而 Cache-Control：no-cache 和 Cache-Control：max-age=0 （单位是秒）相当\n\n这里需要注意的是：\n\nCache-Control 中指定的缓存过期策略优先级高于Expires，当它们同时存在的时候，后者会被覆盖掉。\n\n缓存数据标记为已过期只是告诉客户端不能再直接从本地读取缓存了，需要再发一次请求到服务器去确认，并不等同于本地缓存数据从此就没用了，有些情况下即使过期了还是会被再次用到，具体下面会讲到。\n\n### 缓存对比策略\n将缓存在客户端的数据标识发往服务端，服务端通过标识来判断客户端 缓存数据是否仍有效，进而决定是否要重发数据。\n\n客户端检测到数据过期或浏览器刷新后，往往会重新发起一个 http 请求到服务器，服务器此时并不急于返回数据，而是看请求头有没有带标识（ If-Modified-Since、If-None-Match）过来，如果判断标识仍然有效，则返回304告诉客户端取本地缓存数据来用即可（这里要注意的是你必须要在首次响应时输出相应的头信息（Last-Modified、ETags）到客户端）。至此我们就明白了上面所说的本地缓存数据即使被认为过期，并不等于数据从此就没用了的道理了。\n\n关于 Last-Modified，这个响应头使用要注意，可能会影响到缓存过期策略，具体原因，后面我会通过解答开篇提到的2道题来作说明。\n\n以上就是我所认识的缓存策略，下面我将缓存策略三要素和常用的几个缓存头（项）结合一起，让大家更清晰的认识到它们之间的关系：\n![](http04.png)\n通过上图我可以清晰的看到各缓存项分别属于哪个缓存策略范畴，这其中有部分重叠，它表明这些缓存项具有多重缓存策略，所以实际在分析缓存头的时候，除了常规的头外，我们还需要将这些具有双重缓存策略的项分解开来。\n\n最后我们回到最开始提到的2道题目，我们来一起分解下：\n\n第一道题：\n```\nHTTP/1.1 200 OK\nCache-Control: no-cache\nContent-Type: image/png\nLast-Modified: Tue, 08 Nov 2016 06:59:00 GMT\nAccept-Ranges: bytes\nDate: Thu, 10 Nov 2016 02:48:50 GMT\nContent-Length: 3534\n```\n分析上述 Http 响应头发现有以下两项与缓存相关：\n```\nCache-Control: no-cache \nLast-Modified: Tue, 08 Nov 2016 06:59:00 GMT\n```\n我们上面讲到了 Cache-Control: no-cache 相当于 Cache-Control: max-age=0，且他们都是多重策略头，我们需将其分解：\n\nCache-Control: no-cache 等于 Cache-Control: max-age=0，\n接着 Cache-Control: max-age=0 又可分解成：\n\nCache-Control: public/private （不确定是二者中的哪一个）\nExpires: 当前时间\n最终我们得到了以下完整的缓存策略三要素：\n![](http05.png)\n所以最终结果是：浏览器会再次请求服务端，并携带上 Last-Modified 指定的时间去服务器对比：\n\na）对比失败：服务器返回200并重发数据，客户端接收到数据后展示，并刷新本地缓存。\n\nb）对比成功：服务器返回304且不重发数据，客户端收到304状态码后从本地读取缓存数据。以下为模拟此种情况下请求后的抓包情况：\n![](http06.png)\n这道题本身不难，但若认为 no-cache 不会缓存数据到本地，那么你理解起来就会很矛盾，因为如果文件数据没有被本地缓存，服务器返回304后将会无法展示出图片内容，但实际上它是能正常展示的。这道题很好的证明了 no-cache 也会缓存数据到本地这一说法。\n第二道题：\n```\nHTTP/1.1 200 OK\nCache-Control: private\nContent-Type: image/png\nLast-Modified: Tue, 08 Nov 2016 06:59:00 GMT\nAccept-Ranges: bytes\nDate: Thu, 10 Nov 2016 02:48:50 GMT\nContent-Length: 3534\n```\n解题思路和上题一样，首先先找到缓存相关项：\n```\nCache-Control: private     \nLast-Modified: Tue, 08 Nov 2016 06:59:00 GMT\n这时我们会发现根本找不到缓存过期策略项，那答案会不会和上面一样？ 一时半会也分析不出答案，那只能实际测试下了：\n```\n![](http07.png)\n再看看 Chrome 浏览器下抓包：\n![](http08.png)\n可以看到，浏览器后续请求都直接取的本地缓存，看来的确存在某种缓存过期策略（根据我上面的缓存过期策略理论，浏览器如果直接从本地加载缓存数据，说明它相信本地缓存数据有效，那一定存在某种缓存过期判断条件）。这个问题百思不得其解，困扰了我好久，直到一次偶然的机会我在 Fiddler 响应信息面板里的 Caching 选项卡中找到了答案：\n原来，在没有提供任何浏览器缓存过期策略的情况下，浏览器遵循一个启发式缓存过期策略：\n\n根据响应头中2个时间字段 Date 和 Last-Modified 之间的时间差值，取其值的10%作为缓存时间周期。\n\n贴一下Caching面板里的描述，英语好的同学可以精准翻译下：\n最终我们得到了以下完整的缓存策略三要素：\n![](http10.png)\n最终结果\n浏览器会根据 Date 和 Last-Modified 之间的时间差值缓存一段时间，这段时间内会直接使用本地缓存数据而不会再去请求服务器（强制请求除外），缓存过期后，会再次请求服务端，并携带上 Last-Modified 指定的时间去服务器对比并根据服务端的响应状态决定是否要从本地加载缓存数据。\n\n总结\nHttp 缓存设置起来并不复杂，但却容易被轻视， 今天这篇文章结合2道题目，通过分析、解剖相关缓存头，从系统化角度对 Http 缓存机制做了一个较完整的剖析：Http 缓存机制实际上是 Http 缓存策略三个要素（纬度）相互作用的集合，所以在分析和设置 Http 报文缓存头时，只要能从中精准的分解出缓存三要素，我们就能非常准确的预判到缓存设置最终能达到的效果。\n# 浏览器缓存详解:expires,cache-control,last-modified,etag详细说明\n![](http11.png)\n## Last-Modified\n\n在浏览器第一次请求某一个URL时，服务器端的返回状态会是200，内容是你请求的资源，同时有一个Last-Modified的属性标记(HttpReponse Header)此文件在服务期端最后被修改的时间，格式类似这样：\n\nLast-Modified:Tue, 24 Feb 2009 08:01:04 GMT\n\n客户端第二次请求此URL时，根据HTTP协议的规定，浏览器会向服务器传送If-Modified-Since报头(HttpRequest Header)，询问该时间之后文件是否有被修改过：\n\nIf-Modified-Since:Tue, 24 Feb 2009 08:01:04 GMT\n\n如果服务器端的资源没有变化，则自动返回HTTP304（NotChanged.）状态码，内容为空，这样就节省了传输数据量。当服务器端代码发生改变或者重启服务器时，则重新发出资源，返回和第一次请求时类似。从而保证不向客户端重复发出资源，也保证当服务器有变化时，客户端能够得到最新的资源。\n\n注：如果If-Modified-Since的时间比服务器当前时间(当前的请求时间request_time)还晚，会认为是个非法请求\n\n\n\n## Etag工作原理\n\nHTTP协议规格说明定义ETag为“被请求变量的实体标记”（参见14.19）。简单点即服务器响应时给请求URL标记，并在HTTP响应头中将其传送到客户端，类似服务器端返回的格式：\n\nEtag:“5d8c72a5edda8d6a:3239″\n\n客户端的查询更新格式是这样的：\n\nIf-None-Match:“5d8c72a5edda8d6a:3239″\n\n如果ETag没改变，则返回状态304。\n\n即:在客户端发出请求后，HttpReponse Header中包含Etag:“5d8c72a5edda8d6a:3239″\n\n标识，等于告诉Client端，你拿到的这个的资源有表示ID：5d8c72a5edda8d6a:3239。当下次需要发Request索要同一个URI的时候，浏览器同时发出一个If-None-Match报头(Http RequestHeader)此时包头中信息包含上次访问得到的Etag:“5d8c72a5edda8d6a:3239″标识。\n\nIf-None-Match:“5d8c72a5edda8d6a:3239“\n\n,这样，Client端等于Cache了两份，服务器端就会比对2者的etag。如果If-None-Match为False，不返回200，返回304(Not Modified) Response。\n\n\n\n## Expires\n\n给出的日期/时间后，被响应认为是过时。如Expires:Thu, 02 Apr 2009 05:14:08 GMT\n\n需和Last-Modified结合使用。用于控制请求文件的有效时间，当请求数据在有效期内时客户端浏览器从缓存请求数据而不是服务器端.当缓存中数据失效或过期，才决定从服务器更新数据。\n\n\n\n## Last-Modified和Expires\n\nLast-Modified标识能够节省一点带宽，但是还是逃不掉发一个HTTP请求出去，而且要和Expires一起用。而Expires标识却使得浏览器干脆连HTTP请求都不用发，比如当用户F5或者点击Refresh按钮的时候就算对于有Expires的URI，一样也会发一个HTTP请求出去，所以，Last-Modified还是要用的，而且要和Expires一起用。\n\n\n\n\n## Etag和Expires\n\n如果服务器端同时设置了Etag和Expires时，Etag原理同样，即与Last-Modified/Etag对应的HttpRequestHeader:If-Modified-Since和If-None-Match。我们可以看到这两个Header的值和WebServer发出的Last-Modified,Etag值完全一样；在完全匹配If-Modified-Since和If-None-Match即检查完修改时间和Etag之后，服务器才能返回304.\n\n\n\n\n## Last-Modified和Etag\n\n分布式系统里多台机器间文件的last-modified必须保持一致，以免负载均衡到不同机器导致比对失败\n\n分布式系统尽量关闭掉Etag(每台机器生成的etag都会不一样)\n\nLast-Modified和ETags请求的http报头一起使用，服务器首先产生Last-Modified/Etag标记，服务器可在稍后使用它来判断页面是否已经被修改，来决定文件是否继续缓存\n\n过程如下:\n\n1.客户端请求一个页面（A）。\n\n2.服务器返回页面A，并在给A加上一个Last-Modified/ETag。\n\n3.客户端展现该页面，并将页面连同Last-Modified/ETag一起缓存。\n\n4.客户再次请求页面A，并将上次请求时服务器返回的Last-Modified/ETag一起传递给服务器。\n\n5.服务器检查该Last-Modified或ETag，并判断出该页面自上次客户端请求之后还未被修改，直接返回响应304和一个空的响应体。\n\n注：\n\n1、Last-Modified和Etag头都是由WebServer发出的HttpReponse Header，WebServer应该同时支持这两种头。\n\n2、WebServer发送完Last-Modified/Etag头给客户端后，客户端会缓存这些头；\n\n3、客户端再次发起相同页面的请求时，将分别发送与Last-Modified/Etag对应的HttpRequestHeader:If-Modified-Since和If-None-Match。我们可以看到这两个Header的值和WebServer发出的Last-Modified,Etag值完全一样；\n\n4、通过上述值到服务器端检查，判断文件是否继续缓存；\n\n\n\n7、关于 Cache-Control: max-age=秒 和 Expires\n\nExpires = 时间，HTTP 1.0 版本，缓存的载止时间，允许客户端在这个时间之前不去检查（发请求）\nmax-age = 秒，HTTP 1.1版本，资源在本地缓存多少秒。\n如果max-age和Expires同时存在，则被Cache-Control的max-age覆盖。\n\nExpires 的一个缺点就是，返回的到期时间是服务器端的时间，这样存在一个问题，如果客户端的时间与服务器的时间相差很大，那么误差就很大，所以在HTTP 1.1版开始，使用Cache-Control: max-age=秒替代。\n\nExpires =max-age +   “每次下载时的当前的request时间”\n\n所以一旦重新下载的页面后，expires就重新计算一次，但last-modified不会变化 \n\n# 浏览器缓存总结\n\n浏览器缓存分为强缓存和协商缓存。当客户端请求某个资源时，获取缓存的流程如下：\n\n- 先根据这个资源的一些 http header 判断它是否命中强缓存，如果命中，则直接从本地获取缓存资源，不会发请求到服务器；\n- 当强缓存没有命中时，客户端会发送请求到服务器，服务器通过另一些request header验证这个资源是否命中协商缓存，称为http再验证，如果命中，服务器将请求返回，但不返回资源，而是告诉客户端直接从缓存中获取，客户端收到返回后就会从缓存中获取资源；\n- 强缓存和协商缓存共同之处在于，如果命中缓存，服务器都不会返回资源；\n- 区别是，强缓存不对发送请求到服务器，但协商缓存会。\n- 当协商缓存也没命中时，服务器就会将资源发送回客户端。\n- 当 ctrl+f5 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；\n- 当 f5 刷新网页时，跳过强缓存，但是会检查协商缓存；\n>强缓存\n\n- Expires（该字段是 http1.0 时的规范，值为一个绝对时间的 GMT 格式的时间字符串，代表缓存资源的过期时间）\n- Cache-Control:max-age（该字段是 http1.1 的规范，强缓存利用其 max-age 值来判断缓存资源的最大生命周期，它的值单位为秒）\n>协商缓存\n\n- Last-Modified（值为资源最后更新时间，随服务器response返回）\n- If-Modified-Since（通过比较两个时间来判断资源在两次请求期间是否有过修改，如果没有修改，则命中协商缓存）\n- ETag（表示资源内容的唯一标识，随服务器response返回）\n- If-None-Match（服务器通过比较请求头部的If-None-Match与当前资源的ETag是否一致来判断资源是否在两次请求之间有过修改，如果没有修改，则命中协商缓存）\n\n\n\n","slug":"浏览器缓存","published":1,"updated":"2019-07-17T11:39:22.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cwq004bt09zcltf4wyu","content":"<h1 id=\"HTTP强缓存和协商缓存\"><a href=\"#HTTP强缓存和协商缓存\" class=\"headerlink\" title=\"HTTP强缓存和协商缓存\"></a>HTTP强缓存和协商缓存</h1><blockquote>\n<p>浏览器缓存有下面的优点：</p>\n<ul>\n<li>减少冗余的数据传输</li>\n<li>减少服务器负担</li>\n<li>加快客户端加载网页的速度</li>\n</ul>\n</blockquote>\n<p>在浏览器第一次发起请求时，本地无缓存，向web服务器发送请求，服务器起端响应请求，浏览器端缓存。过程如下：</p>\n<p><center><img src=\"http01.png\" alt=\"\"></center><br>在第一次请求时，服务器会将页面最后修改时间通过Last-Modified标识由服务器发送给客户端，客户端记录修改时间；服务器还会生成一个Etag，并发送给客户端。<br>浏览器后续再次进行请求时：</p>\n<p><center><img src=\"http02.png\" alt=\"\"></center><br>浏览器缓存主要分为强强缓存（也称本地缓存）和协商缓存（也称弱缓存）。根据上图，浏览器在第一次请求发生后，再次发送请求时：</p>\n<ul>\n<li><p>浏览器请求某一资源时，会先获取该资源缓存的header信息，然后根据header中的Cache-Control和Expires来判断是否过期。若没过期则直接从缓存中获取资源信息，包括缓存的header的信息，所以此次请求不会与服务器进行通信。这里判断是否过期，则是强缓存相关。后面会讲Cache-Control和Expires相关。</p>\n</li>\n<li><p>如果显示已过期，浏览器会向服务器端发送请求，这个请求会携带第一次请求返回的有关缓存的header字段信息，比如客户端会通过If-None-Match头将先前服务器端发送过来的Etag发送给服务器，服务会对比这个客户端发过来的Etag是否与服务器的相同，若相同，就将If-None-Match的值设为false，返回状态304，客户端继续使用本地缓存，不解析服务器端发回来的数据，若不相同就将If-None-Match的值设为true，返回状态为200，客户端重新机械服务器端返回的数据；客户端还会通过If-Modified-Since头将先前服务器端发过来的最后修改时间戳发送给服务器，服务器端通过这个时间戳判断客户端的页面是否是最新的，如果不是最新的，则返回最新的内容，如果是最新的，则返回304，客户端继续使用本地缓存。</p>\n</li>\n</ul>\n<h2 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h2><p>强缓存是利用http头中的Expires和Cache-Control两个字段来控制的，用来表示资源的缓存时间。强缓存中，普通刷新会忽略它，但不会清除它，需要强制刷新。浏览器强制刷新，请求会带上Cache-Control:no-cache和Pragma:no-cache</p>\n<h3 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h3><p>Expires是http1.0的规范，它的值是一个绝对时间的GMT格式的时间字符串。如我现在这个网页的Expires值是：expires:Fri, 14 Apr 2017 10:47:02 GMT。这个时间代表这这个资源的失效时间，只要发送请求时间是在Expires之前，那么本地缓存始终有效，则在缓存中读取数据。所以这种方式有一个明显的缺点，由于失效的时间是一个绝对时间，所以当服务器与客户端时间偏差较大时，就会导致缓存混乱。如果同时出现Cache-Control:max-age和Expires，那么max-age优先级更高。如我主页的response headers部分如下：</p>\n<p>cache-control:max-age=691200<br>expires:Fri, 14 Apr 2017 10:47:02 GMT<br>那么表示资源可以被缓存的最长时间为691200秒，会优先考虑max-age。</p>\n<h3 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h3><p>Cache-Control是在http1.1中出现的，主要是利用该字段的max-age值来进行判断，它是一个相对时间，例如Cache-Control:max-age=3600，代表着资源的有效期是3600秒。cache-control除了该字段外，还有下面几个比较常用的设置值：</p>\n<p>no-cache：不使用本地缓存。需要使用缓存协商，先与服务器确认返回的响应是否被更改，如果之前的响应中存在ETag，那么请求的时候会与服务端验证，如果资源未被更改，则可以避免重新下载。</p>\n<p>no-store：直接禁止游览器缓存数据，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。</p>\n<p>public：可以被所有的用户缓存，包括终端用户和CDN等中间代理服务器。</p>\n<p>private：只能被终端用户的浏览器缓存，不允许CDN等中继缓存服务器对其缓存。<br>Cache-Control与Expires可以在服务端配置同时启用，同时启用的时候Cache-Control优先级高。</p>\n<h2 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h2><p>协商缓存就是由服务器来确定缓存资源是否可用，所以客户端与服务器端要通过某种标识来进行通信，从而让服务器判断请求资源是否可以缓存访问。</p>\n<p>普通刷新会启用弱缓存，忽略强缓存。只有在地址栏或收藏夹输入网址、通过链接引用资源等情况下，浏览器才会启用强缓存，这也是为什么有时候我们更新一张图片、一个js文件，页面内容依然是旧的，但是直接浏览器访问那个图片或文件，看到的内容却是新的。</p>\n<p>这个主要涉及到两组header字段：Etag和If-None-Match、Last-Modified和If-Modified-Since。上面以及说得很清楚这两组怎么使用啦~复习一下：</p>\n<h3 id=\"Etag和If-None-Match\"><a href=\"#Etag和If-None-Match\" class=\"headerlink\" title=\"Etag和If-None-Match\"></a>Etag和If-None-Match</h3><p>Etag/If-None-Match返回的是一个校验码。ETag可以保证每一个资源是唯一的，资源变化都会导致ETag变化。服务器根据浏览器上送的If-None-Match值来判断是否命中缓存。</p>\n<p>与Last-Modified不一样的是，当服务器返回304 Not Modified的响应时，由于ETag重新生成过，response header中还会把这个ETag返回，即使这个ETag跟之前的没有变化。</p>\n<h3 id=\"Last-Modify-If-Modify-Since\"><a href=\"#Last-Modify-If-Modify-Since\" class=\"headerlink\" title=\"Last-Modify/If-Modify-Since\"></a>Last-Modify/If-Modify-Since</h3><p>浏览器第一次请求一个资源的时候，服务器返回的header中会加上Last-Modify，Last-modify是一个时间标识该资源的最后修改时间，例如Last-Modify: Thu,31 Dec 2037 23:59:59 GMT。</p>\n<p>当浏览器再次请求该资源时，request的请求头中会包含If-Modify-Since，该值为缓存之前返回的Last-Modify。服务器收到If-Modify-Since后，根据资源的最后修改时间判断是否命中缓存。</p>\n<p>如果命中缓存，则返回304，并且不会返回资源内容，并且不会返回Last-Modify。</p>\n<p>为什么要有Etag<br>你可能会觉得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag呢？HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：</p>\n<p>一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET；</p>\n<p>某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)；</p>\n<p>某些服务器不能精确的得到文件的最后修改时间。</p>\n<p>Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。</p>\n<h1 id=\"HTTP基于缓存策略三要素分解法\"><a href=\"#HTTP基于缓存策略三要素分解法\" class=\"headerlink\" title=\"HTTP基于缓存策略三要素分解法\"></a>HTTP基于缓存策略三要素分解法</h1><h2 id=\"两道题\"><a href=\"#两道题\" class=\"headerlink\" title=\"两道题\"></a>两道题</h2><p>以下为 page.html 内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class=\"line\">&lt;title&gt;page页&lt;/title&gt;&lt;/head&gt;&lt;body&gt;</span><br><span class=\"line\">&lt;img src=&quot;images/head.png&quot; /&gt;</span><br><span class=\"line\">&lt;a href=&quot;page.html&quot;&gt;重新访问page页&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>首次访问该页面，页面中 head.png 响应头信息如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\">Content-Type: image/png</span><br><span class=\"line\">Last-Modified: Tue, 08 Nov 2016 06:59:00 GMT</span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Date: Thu, 10 Nov 2016 02:48:50 GMT</span><br><span class=\"line\">Content-Length: 3534</span><br></pre></td></tr></table></figure></p>\n<p>问题1：请问当点击“重新访问 page 页”链接重新加载该页面后， head.png 如何二次加载？<br>问题2：如果将上述信息中的 Cache-Control 设置为 private，那么结果又会如何呢？</p>\n<h2 id=\"HTTP缓存体系\"><a href=\"#HTTP缓存体系\" class=\"headerlink\" title=\"HTTP缓存体系\"></a>HTTP缓存体系</h2><p>首先我将 Http 缓存体系分为以下三个部分：<br><img src=\"http03.png\" alt=\"\"></p>\n<h3 id=\"缓存存储策略\"><a href=\"#缓存存储策略\" class=\"headerlink\" title=\"缓存存储策略\"></a>缓存存储策略</h3><blockquote>\n<p>用来确定 Http响应内容是否可以被客户端缓存，以及可以被哪些客户端缓存这个策略的作用只有一个，用于决定 Http 响应内容是否可缓存到客户端</p>\n<ul>\n<li>对于 Cache-Control 头里的 Public、Private、no-cache、max-age 、no-store 他们都是用来指明响应内容是否可以被客户端存储的，其中前4个都会缓存文件数据（关于 no-cache 应理解为“不建议使用本地缓存”，其仍然会缓存数据到本地），后者 no-store 则不会在客户端缓存任何响应数据。另关于 no-cache 和 max-age 有点特别，我认为它是一种混合体，下面我会讲到。</li>\n</ul>\n</blockquote>\n<ul>\n<li>通过 Cache-Control：Public 设置我们可以将 Http 响应数据存储到本地，但此时并不意味着后续浏览器会直接从缓存中读取数据并使用，为啥？因为它无法确定本地缓存的数据是否可用（可能已经失效），还必须借助一套鉴别机制来确认才行， 这就是我们下面要讲到的“缓存过期策略”。</li>\n</ul>\n<h3 id=\"缓存过期策略\"><a href=\"#缓存过期策略\" class=\"headerlink\" title=\"缓存过期策略\"></a>缓存过期策略</h3><blockquote>\n<p>客户端用来确认存储在本地的缓存数据是否已过期，进而决定是否要发请求到服务端获取数据<br>刚上面我们已经阐述了数据缓存到了本地后还需要经过判断才能使用，那么浏览器通过什么条件来判断呢？ 答案是：Expires，Expires 指名了缓存数据有效的绝对时间，告诉客户端到了这个时间点（比照客户端时间点）后本地缓存就作废了，在这个时间点内客户端可以认为缓存数据有效，可直接从缓存中加载展示。</p>\n</blockquote>\n<p>不过 Http 缓存头设计并没有想象的那么规矩，像上面提到的 Cache-Control（这个头是在Http1.1里加进来的）头里的 no-cache 和 max-age 就是特例，它们既包含缓存存储策略也包含缓存过期策略，以 max-age 为例，他实际上相当于：</p>\n<p>Cache-Control：public/private（这里不太确定具体哪个）<br>Expires：当前客户端时间 + maxAge 。<br>而 Cache-Control：no-cache 和 Cache-Control：max-age=0 （单位是秒）相当</p>\n<p>这里需要注意的是：</p>\n<p>Cache-Control 中指定的缓存过期策略优先级高于Expires，当它们同时存在的时候，后者会被覆盖掉。</p>\n<p>缓存数据标记为已过期只是告诉客户端不能再直接从本地读取缓存了，需要再发一次请求到服务器去确认，并不等同于本地缓存数据从此就没用了，有些情况下即使过期了还是会被再次用到，具体下面会讲到。</p>\n<h3 id=\"缓存对比策略\"><a href=\"#缓存对比策略\" class=\"headerlink\" title=\"缓存对比策略\"></a>缓存对比策略</h3><p>将缓存在客户端的数据标识发往服务端，服务端通过标识来判断客户端 缓存数据是否仍有效，进而决定是否要重发数据。</p>\n<p>客户端检测到数据过期或浏览器刷新后，往往会重新发起一个 http 请求到服务器，服务器此时并不急于返回数据，而是看请求头有没有带标识（ If-Modified-Since、If-None-Match）过来，如果判断标识仍然有效，则返回304告诉客户端取本地缓存数据来用即可（这里要注意的是你必须要在首次响应时输出相应的头信息（Last-Modified、ETags）到客户端）。至此我们就明白了上面所说的本地缓存数据即使被认为过期，并不等于数据从此就没用了的道理了。</p>\n<p>关于 Last-Modified，这个响应头使用要注意，可能会影响到缓存过期策略，具体原因，后面我会通过解答开篇提到的2道题来作说明。</p>\n<p>以上就是我所认识的缓存策略，下面我将缓存策略三要素和常用的几个缓存头（项）结合一起，让大家更清晰的认识到它们之间的关系：<br><img src=\"http04.png\" alt=\"\"><br>通过上图我可以清晰的看到各缓存项分别属于哪个缓存策略范畴，这其中有部分重叠，它表明这些缓存项具有多重缓存策略，所以实际在分析缓存头的时候，除了常规的头外，我们还需要将这些具有双重缓存策略的项分解开来。</p>\n<p>最后我们回到最开始提到的2道题目，我们来一起分解下：</p>\n<p>第一道题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\">Content-Type: image/png</span><br><span class=\"line\">Last-Modified: Tue, 08 Nov 2016 06:59:00 GMT</span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Date: Thu, 10 Nov 2016 02:48:50 GMT</span><br><span class=\"line\">Content-Length: 3534</span><br></pre></td></tr></table></figure></p>\n<p>分析上述 Http 响应头发现有以下两项与缓存相关：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache-Control: no-cache </span><br><span class=\"line\">Last-Modified: Tue, 08 Nov 2016 06:59:00 GMT</span><br></pre></td></tr></table></figure></p>\n<p>我们上面讲到了 Cache-Control: no-cache 相当于 Cache-Control: max-age=0，且他们都是多重策略头，我们需将其分解：</p>\n<p>Cache-Control: no-cache 等于 Cache-Control: max-age=0，<br>接着 Cache-Control: max-age=0 又可分解成：</p>\n<p>Cache-Control: public/private （不确定是二者中的哪一个）<br>Expires: 当前时间<br>最终我们得到了以下完整的缓存策略三要素：<br><img src=\"http05.png\" alt=\"\"><br>所以最终结果是：浏览器会再次请求服务端，并携带上 Last-Modified 指定的时间去服务器对比：</p>\n<p>a）对比失败：服务器返回200并重发数据，客户端接收到数据后展示，并刷新本地缓存。</p>\n<p>b）对比成功：服务器返回304且不重发数据，客户端收到304状态码后从本地读取缓存数据。以下为模拟此种情况下请求后的抓包情况：<br><img src=\"http06.png\" alt=\"\"><br>这道题本身不难，但若认为 no-cache 不会缓存数据到本地，那么你理解起来就会很矛盾，因为如果文件数据没有被本地缓存，服务器返回304后将会无法展示出图片内容，但实际上它是能正常展示的。这道题很好的证明了 no-cache 也会缓存数据到本地这一说法。<br>第二道题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Cache-Control: private</span><br><span class=\"line\">Content-Type: image/png</span><br><span class=\"line\">Last-Modified: Tue, 08 Nov 2016 06:59:00 GMT</span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Date: Thu, 10 Nov 2016 02:48:50 GMT</span><br><span class=\"line\">Content-Length: 3534</span><br></pre></td></tr></table></figure></p>\n<p>解题思路和上题一样，首先先找到缓存相关项：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache-Control: private     </span><br><span class=\"line\">Last-Modified: Tue, 08 Nov 2016 06:59:00 GMT</span><br><span class=\"line\">这时我们会发现根本找不到缓存过期策略项，那答案会不会和上面一样？ 一时半会也分析不出答案，那只能实际测试下了：</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http07.png\" alt=\"\"><br>再看看 Chrome 浏览器下抓包：<br><img src=\"http08.png\" alt=\"\"><br>可以看到，浏览器后续请求都直接取的本地缓存，看来的确存在某种缓存过期策略（根据我上面的缓存过期策略理论，浏览器如果直接从本地加载缓存数据，说明它相信本地缓存数据有效，那一定存在某种缓存过期判断条件）。这个问题百思不得其解，困扰了我好久，直到一次偶然的机会我在 Fiddler 响应信息面板里的 Caching 选项卡中找到了答案：<br>原来，在没有提供任何浏览器缓存过期策略的情况下，浏览器遵循一个启发式缓存过期策略：</p>\n<p>根据响应头中2个时间字段 Date 和 Last-Modified 之间的时间差值，取其值的10%作为缓存时间周期。</p>\n<p>贴一下Caching面板里的描述，英语好的同学可以精准翻译下：<br>最终我们得到了以下完整的缓存策略三要素：<br><img src=\"http10.png\" alt=\"\"><br>最终结果<br>浏览器会根据 Date 和 Last-Modified 之间的时间差值缓存一段时间，这段时间内会直接使用本地缓存数据而不会再去请求服务器（强制请求除外），缓存过期后，会再次请求服务端，并携带上 Last-Modified 指定的时间去服务器对比并根据服务端的响应状态决定是否要从本地加载缓存数据。</p>\n<p>总结<br>Http 缓存设置起来并不复杂，但却容易被轻视， 今天这篇文章结合2道题目，通过分析、解剖相关缓存头，从系统化角度对 Http 缓存机制做了一个较完整的剖析：Http 缓存机制实际上是 Http 缓存策略三个要素（纬度）相互作用的集合，所以在分析和设置 Http 报文缓存头时，只要能从中精准的分解出缓存三要素，我们就能非常准确的预判到缓存设置最终能达到的效果。</p>\n<h1 id=\"浏览器缓存详解-expires-cache-control-last-modified-etag详细说明\"><a href=\"#浏览器缓存详解-expires-cache-control-last-modified-etag详细说明\" class=\"headerlink\" title=\"浏览器缓存详解:expires,cache-control,last-modified,etag详细说明\"></a>浏览器缓存详解:expires,cache-control,last-modified,etag详细说明</h1><p><img src=\"http11.png\" alt=\"\"></p>\n<h2 id=\"Last-Modified\"><a href=\"#Last-Modified\" class=\"headerlink\" title=\"Last-Modified\"></a>Last-Modified</h2><p>在浏览器第一次请求某一个URL时，服务器端的返回状态会是200，内容是你请求的资源，同时有一个Last-Modified的属性标记(HttpReponse Header)此文件在服务期端最后被修改的时间，格式类似这样：</p>\n<p>Last-Modified:Tue, 24 Feb 2009 08:01:04 GMT</p>\n<p>客户端第二次请求此URL时，根据HTTP协议的规定，浏览器会向服务器传送If-Modified-Since报头(HttpRequest Header)，询问该时间之后文件是否有被修改过：</p>\n<p>If-Modified-Since:Tue, 24 Feb 2009 08:01:04 GMT</p>\n<p>如果服务器端的资源没有变化，则自动返回HTTP304（NotChanged.）状态码，内容为空，这样就节省了传输数据量。当服务器端代码发生改变或者重启服务器时，则重新发出资源，返回和第一次请求时类似。从而保证不向客户端重复发出资源，也保证当服务器有变化时，客户端能够得到最新的资源。</p>\n<p>注：如果If-Modified-Since的时间比服务器当前时间(当前的请求时间request_time)还晚，会认为是个非法请求</p>\n<h2 id=\"Etag工作原理\"><a href=\"#Etag工作原理\" class=\"headerlink\" title=\"Etag工作原理\"></a>Etag工作原理</h2><p>HTTP协议规格说明定义ETag为“被请求变量的实体标记”（参见14.19）。简单点即服务器响应时给请求URL标记，并在HTTP响应头中将其传送到客户端，类似服务器端返回的格式：</p>\n<p>Etag:“5d8c72a5edda8d6a:3239″</p>\n<p>客户端的查询更新格式是这样的：</p>\n<p>If-None-Match:“5d8c72a5edda8d6a:3239″</p>\n<p>如果ETag没改变，则返回状态304。</p>\n<p>即:在客户端发出请求后，HttpReponse Header中包含Etag:“5d8c72a5edda8d6a:3239″</p>\n<p>标识，等于告诉Client端，你拿到的这个的资源有表示ID：5d8c72a5edda8d6a:3239。当下次需要发Request索要同一个URI的时候，浏览器同时发出一个If-None-Match报头(Http RequestHeader)此时包头中信息包含上次访问得到的Etag:“5d8c72a5edda8d6a:3239″标识。</p>\n<p>If-None-Match:“5d8c72a5edda8d6a:3239“</p>\n<p>,这样，Client端等于Cache了两份，服务器端就会比对2者的etag。如果If-None-Match为False，不返回200，返回304(Not Modified) Response。</p>\n<h2 id=\"Expires-1\"><a href=\"#Expires-1\" class=\"headerlink\" title=\"Expires\"></a>Expires</h2><p>给出的日期/时间后，被响应认为是过时。如Expires:Thu, 02 Apr 2009 05:14:08 GMT</p>\n<p>需和Last-Modified结合使用。用于控制请求文件的有效时间，当请求数据在有效期内时客户端浏览器从缓存请求数据而不是服务器端.当缓存中数据失效或过期，才决定从服务器更新数据。</p>\n<h2 id=\"Last-Modified和Expires\"><a href=\"#Last-Modified和Expires\" class=\"headerlink\" title=\"Last-Modified和Expires\"></a>Last-Modified和Expires</h2><p>Last-Modified标识能够节省一点带宽，但是还是逃不掉发一个HTTP请求出去，而且要和Expires一起用。而Expires标识却使得浏览器干脆连HTTP请求都不用发，比如当用户F5或者点击Refresh按钮的时候就算对于有Expires的URI，一样也会发一个HTTP请求出去，所以，Last-Modified还是要用的，而且要和Expires一起用。</p>\n<h2 id=\"Etag和Expires\"><a href=\"#Etag和Expires\" class=\"headerlink\" title=\"Etag和Expires\"></a>Etag和Expires</h2><p>如果服务器端同时设置了Etag和Expires时，Etag原理同样，即与Last-Modified/Etag对应的HttpRequestHeader:If-Modified-Since和If-None-Match。我们可以看到这两个Header的值和WebServer发出的Last-Modified,Etag值完全一样；在完全匹配If-Modified-Since和If-None-Match即检查完修改时间和Etag之后，服务器才能返回304.</p>\n<h2 id=\"Last-Modified和Etag\"><a href=\"#Last-Modified和Etag\" class=\"headerlink\" title=\"Last-Modified和Etag\"></a>Last-Modified和Etag</h2><p>分布式系统里多台机器间文件的last-modified必须保持一致，以免负载均衡到不同机器导致比对失败</p>\n<p>分布式系统尽量关闭掉Etag(每台机器生成的etag都会不一样)</p>\n<p>Last-Modified和ETags请求的http报头一起使用，服务器首先产生Last-Modified/Etag标记，服务器可在稍后使用它来判断页面是否已经被修改，来决定文件是否继续缓存</p>\n<p>过程如下:</p>\n<p>1.客户端请求一个页面（A）。</p>\n<p>2.服务器返回页面A，并在给A加上一个Last-Modified/ETag。</p>\n<p>3.客户端展现该页面，并将页面连同Last-Modified/ETag一起缓存。</p>\n<p>4.客户再次请求页面A，并将上次请求时服务器返回的Last-Modified/ETag一起传递给服务器。</p>\n<p>5.服务器检查该Last-Modified或ETag，并判断出该页面自上次客户端请求之后还未被修改，直接返回响应304和一个空的响应体。</p>\n<p>注：</p>\n<p>1、Last-Modified和Etag头都是由WebServer发出的HttpReponse Header，WebServer应该同时支持这两种头。</p>\n<p>2、WebServer发送完Last-Modified/Etag头给客户端后，客户端会缓存这些头；</p>\n<p>3、客户端再次发起相同页面的请求时，将分别发送与Last-Modified/Etag对应的HttpRequestHeader:If-Modified-Since和If-None-Match。我们可以看到这两个Header的值和WebServer发出的Last-Modified,Etag值完全一样；</p>\n<p>4、通过上述值到服务器端检查，判断文件是否继续缓存；</p>\n<p>7、关于 Cache-Control: max-age=秒 和 Expires</p>\n<p>Expires = 时间，HTTP 1.0 版本，缓存的载止时间，允许客户端在这个时间之前不去检查（发请求）<br>max-age = 秒，HTTP 1.1版本，资源在本地缓存多少秒。<br>如果max-age和Expires同时存在，则被Cache-Control的max-age覆盖。</p>\n<p>Expires 的一个缺点就是，返回的到期时间是服务器端的时间，这样存在一个问题，如果客户端的时间与服务器的时间相差很大，那么误差就很大，所以在HTTP 1.1版开始，使用Cache-Control: max-age=秒替代。</p>\n<p>Expires =max-age +   “每次下载时的当前的request时间”</p>\n<p>所以一旦重新下载的页面后，expires就重新计算一次，但last-modified不会变化 </p>\n<h1 id=\"浏览器缓存总结\"><a href=\"#浏览器缓存总结\" class=\"headerlink\" title=\"浏览器缓存总结\"></a>浏览器缓存总结</h1><p>浏览器缓存分为强缓存和协商缓存。当客户端请求某个资源时，获取缓存的流程如下：</p>\n<ul>\n<li>先根据这个资源的一些 http header 判断它是否命中强缓存，如果命中，则直接从本地获取缓存资源，不会发请求到服务器；</li>\n<li>当强缓存没有命中时，客户端会发送请求到服务器，服务器通过另一些request header验证这个资源是否命中协商缓存，称为http再验证，如果命中，服务器将请求返回，但不返回资源，而是告诉客户端直接从缓存中获取，客户端收到返回后就会从缓存中获取资源；</li>\n<li>强缓存和协商缓存共同之处在于，如果命中缓存，服务器都不会返回资源；</li>\n<li>区别是，强缓存不对发送请求到服务器，但协商缓存会。</li>\n<li>当协商缓存也没命中时，服务器就会将资源发送回客户端。</li>\n<li>当 ctrl+f5 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；</li>\n<li><p>当 f5 刷新网页时，跳过强缓存，但是会检查协商缓存；</p>\n<blockquote>\n<p>强缓存</p>\n</blockquote>\n</li>\n<li><p>Expires（该字段是 http1.0 时的规范，值为一个绝对时间的 GMT 格式的时间字符串，代表缓存资源的过期时间）</p>\n</li>\n<li><p>Cache-Control:max-age（该字段是 http1.1 的规范，强缓存利用其 max-age 值来判断缓存资源的最大生命周期，它的值单位为秒）</p>\n<blockquote>\n<p>协商缓存</p>\n</blockquote>\n</li>\n<li><p>Last-Modified（值为资源最后更新时间，随服务器response返回）</p>\n</li>\n<li>If-Modified-Since（通过比较两个时间来判断资源在两次请求期间是否有过修改，如果没有修改，则命中协商缓存）</li>\n<li>ETag（表示资源内容的唯一标识，随服务器response返回）</li>\n<li>If-None-Match（服务器通过比较请求头部的If-None-Match与当前资源的ETag是否一致来判断资源是否在两次请求之间有过修改，如果没有修改，则命中协商缓存）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"HTTP强缓存和协商缓存\"><a href=\"#HTTP强缓存和协商缓存\" class=\"headerlink\" title=\"HTTP强缓存和协商缓存\"></a>HTTP强缓存和协商缓存</h1><blockquote>\n<p>浏览器缓存有下面的优点：</p>\n<ul>\n<li>减少冗余的数据传输</li>\n<li>减少服务器负担</li>\n<li>加快客户端加载网页的速度</li>\n</ul>\n</blockquote>\n<p>在浏览器第一次发起请求时，本地无缓存，向web服务器发送请求，服务器起端响应请求，浏览器端缓存。过程如下：</p>\n<p><center><img src=\"http01.png\" alt=\"\"></center><br>在第一次请求时，服务器会将页面最后修改时间通过Last-Modified标识由服务器发送给客户端，客户端记录修改时间；服务器还会生成一个Etag，并发送给客户端。<br>浏览器后续再次进行请求时：</p>\n<p><center><img src=\"http02.png\" alt=\"\"></center><br>浏览器缓存主要分为强强缓存（也称本地缓存）和协商缓存（也称弱缓存）。根据上图，浏览器在第一次请求发生后，再次发送请求时：</p>\n<ul>\n<li><p>浏览器请求某一资源时，会先获取该资源缓存的header信息，然后根据header中的Cache-Control和Expires来判断是否过期。若没过期则直接从缓存中获取资源信息，包括缓存的header的信息，所以此次请求不会与服务器进行通信。这里判断是否过期，则是强缓存相关。后面会讲Cache-Control和Expires相关。</p>\n</li>\n<li><p>如果显示已过期，浏览器会向服务器端发送请求，这个请求会携带第一次请求返回的有关缓存的header字段信息，比如客户端会通过If-None-Match头将先前服务器端发送过来的Etag发送给服务器，服务会对比这个客户端发过来的Etag是否与服务器的相同，若相同，就将If-None-Match的值设为false，返回状态304，客户端继续使用本地缓存，不解析服务器端发回来的数据，若不相同就将If-None-Match的值设为true，返回状态为200，客户端重新机械服务器端返回的数据；客户端还会通过If-Modified-Since头将先前服务器端发过来的最后修改时间戳发送给服务器，服务器端通过这个时间戳判断客户端的页面是否是最新的，如果不是最新的，则返回最新的内容，如果是最新的，则返回304，客户端继续使用本地缓存。</p>\n</li>\n</ul>\n<h2 id=\"强缓存\"><a href=\"#强缓存\" class=\"headerlink\" title=\"强缓存\"></a>强缓存</h2><p>强缓存是利用http头中的Expires和Cache-Control两个字段来控制的，用来表示资源的缓存时间。强缓存中，普通刷新会忽略它，但不会清除它，需要强制刷新。浏览器强制刷新，请求会带上Cache-Control:no-cache和Pragma:no-cache</p>\n<h3 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h3><p>Expires是http1.0的规范，它的值是一个绝对时间的GMT格式的时间字符串。如我现在这个网页的Expires值是：expires:Fri, 14 Apr 2017 10:47:02 GMT。这个时间代表这这个资源的失效时间，只要发送请求时间是在Expires之前，那么本地缓存始终有效，则在缓存中读取数据。所以这种方式有一个明显的缺点，由于失效的时间是一个绝对时间，所以当服务器与客户端时间偏差较大时，就会导致缓存混乱。如果同时出现Cache-Control:max-age和Expires，那么max-age优先级更高。如我主页的response headers部分如下：</p>\n<p>cache-control:max-age=691200<br>expires:Fri, 14 Apr 2017 10:47:02 GMT<br>那么表示资源可以被缓存的最长时间为691200秒，会优先考虑max-age。</p>\n<h3 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h3><p>Cache-Control是在http1.1中出现的，主要是利用该字段的max-age值来进行判断，它是一个相对时间，例如Cache-Control:max-age=3600，代表着资源的有效期是3600秒。cache-control除了该字段外，还有下面几个比较常用的设置值：</p>\n<p>no-cache：不使用本地缓存。需要使用缓存协商，先与服务器确认返回的响应是否被更改，如果之前的响应中存在ETag，那么请求的时候会与服务端验证，如果资源未被更改，则可以避免重新下载。</p>\n<p>no-store：直接禁止游览器缓存数据，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。</p>\n<p>public：可以被所有的用户缓存，包括终端用户和CDN等中间代理服务器。</p>\n<p>private：只能被终端用户的浏览器缓存，不允许CDN等中继缓存服务器对其缓存。<br>Cache-Control与Expires可以在服务端配置同时启用，同时启用的时候Cache-Control优先级高。</p>\n<h2 id=\"协商缓存\"><a href=\"#协商缓存\" class=\"headerlink\" title=\"协商缓存\"></a>协商缓存</h2><p>协商缓存就是由服务器来确定缓存资源是否可用，所以客户端与服务器端要通过某种标识来进行通信，从而让服务器判断请求资源是否可以缓存访问。</p>\n<p>普通刷新会启用弱缓存，忽略强缓存。只有在地址栏或收藏夹输入网址、通过链接引用资源等情况下，浏览器才会启用强缓存，这也是为什么有时候我们更新一张图片、一个js文件，页面内容依然是旧的，但是直接浏览器访问那个图片或文件，看到的内容却是新的。</p>\n<p>这个主要涉及到两组header字段：Etag和If-None-Match、Last-Modified和If-Modified-Since。上面以及说得很清楚这两组怎么使用啦~复习一下：</p>\n<h3 id=\"Etag和If-None-Match\"><a href=\"#Etag和If-None-Match\" class=\"headerlink\" title=\"Etag和If-None-Match\"></a>Etag和If-None-Match</h3><p>Etag/If-None-Match返回的是一个校验码。ETag可以保证每一个资源是唯一的，资源变化都会导致ETag变化。服务器根据浏览器上送的If-None-Match值来判断是否命中缓存。</p>\n<p>与Last-Modified不一样的是，当服务器返回304 Not Modified的响应时，由于ETag重新生成过，response header中还会把这个ETag返回，即使这个ETag跟之前的没有变化。</p>\n<h3 id=\"Last-Modify-If-Modify-Since\"><a href=\"#Last-Modify-If-Modify-Since\" class=\"headerlink\" title=\"Last-Modify/If-Modify-Since\"></a>Last-Modify/If-Modify-Since</h3><p>浏览器第一次请求一个资源的时候，服务器返回的header中会加上Last-Modify，Last-modify是一个时间标识该资源的最后修改时间，例如Last-Modify: Thu,31 Dec 2037 23:59:59 GMT。</p>\n<p>当浏览器再次请求该资源时，request的请求头中会包含If-Modify-Since，该值为缓存之前返回的Last-Modify。服务器收到If-Modify-Since后，根据资源的最后修改时间判断是否命中缓存。</p>\n<p>如果命中缓存，则返回304，并且不会返回资源内容，并且不会返回Last-Modify。</p>\n<p>为什么要有Etag<br>你可能会觉得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag呢？HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：</p>\n<p>一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET；</p>\n<p>某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)；</p>\n<p>某些服务器不能精确的得到文件的最后修改时间。</p>\n<p>Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。</p>\n<h1 id=\"HTTP基于缓存策略三要素分解法\"><a href=\"#HTTP基于缓存策略三要素分解法\" class=\"headerlink\" title=\"HTTP基于缓存策略三要素分解法\"></a>HTTP基于缓存策略三要素分解法</h1><h2 id=\"两道题\"><a href=\"#两道题\" class=\"headerlink\" title=\"两道题\"></a>两道题</h2><p>以下为 page.html 内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;</span><br><span class=\"line\">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class=\"line\">&lt;title&gt;page页&lt;/title&gt;&lt;/head&gt;&lt;body&gt;</span><br><span class=\"line\">&lt;img src=&quot;images/head.png&quot; /&gt;</span><br><span class=\"line\">&lt;a href=&quot;page.html&quot;&gt;重新访问page页&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n<p>首次访问该页面，页面中 head.png 响应头信息如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\">Content-Type: image/png</span><br><span class=\"line\">Last-Modified: Tue, 08 Nov 2016 06:59:00 GMT</span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Date: Thu, 10 Nov 2016 02:48:50 GMT</span><br><span class=\"line\">Content-Length: 3534</span><br></pre></td></tr></table></figure></p>\n<p>问题1：请问当点击“重新访问 page 页”链接重新加载该页面后， head.png 如何二次加载？<br>问题2：如果将上述信息中的 Cache-Control 设置为 private，那么结果又会如何呢？</p>\n<h2 id=\"HTTP缓存体系\"><a href=\"#HTTP缓存体系\" class=\"headerlink\" title=\"HTTP缓存体系\"></a>HTTP缓存体系</h2><p>首先我将 Http 缓存体系分为以下三个部分：<br><img src=\"http03.png\" alt=\"\"></p>\n<h3 id=\"缓存存储策略\"><a href=\"#缓存存储策略\" class=\"headerlink\" title=\"缓存存储策略\"></a>缓存存储策略</h3><blockquote>\n<p>用来确定 Http响应内容是否可以被客户端缓存，以及可以被哪些客户端缓存这个策略的作用只有一个，用于决定 Http 响应内容是否可缓存到客户端</p>\n<ul>\n<li>对于 Cache-Control 头里的 Public、Private、no-cache、max-age 、no-store 他们都是用来指明响应内容是否可以被客户端存储的，其中前4个都会缓存文件数据（关于 no-cache 应理解为“不建议使用本地缓存”，其仍然会缓存数据到本地），后者 no-store 则不会在客户端缓存任何响应数据。另关于 no-cache 和 max-age 有点特别，我认为它是一种混合体，下面我会讲到。</li>\n</ul>\n</blockquote>\n<ul>\n<li>通过 Cache-Control：Public 设置我们可以将 Http 响应数据存储到本地，但此时并不意味着后续浏览器会直接从缓存中读取数据并使用，为啥？因为它无法确定本地缓存的数据是否可用（可能已经失效），还必须借助一套鉴别机制来确认才行， 这就是我们下面要讲到的“缓存过期策略”。</li>\n</ul>\n<h3 id=\"缓存过期策略\"><a href=\"#缓存过期策略\" class=\"headerlink\" title=\"缓存过期策略\"></a>缓存过期策略</h3><blockquote>\n<p>客户端用来确认存储在本地的缓存数据是否已过期，进而决定是否要发请求到服务端获取数据<br>刚上面我们已经阐述了数据缓存到了本地后还需要经过判断才能使用，那么浏览器通过什么条件来判断呢？ 答案是：Expires，Expires 指名了缓存数据有效的绝对时间，告诉客户端到了这个时间点（比照客户端时间点）后本地缓存就作废了，在这个时间点内客户端可以认为缓存数据有效，可直接从缓存中加载展示。</p>\n</blockquote>\n<p>不过 Http 缓存头设计并没有想象的那么规矩，像上面提到的 Cache-Control（这个头是在Http1.1里加进来的）头里的 no-cache 和 max-age 就是特例，它们既包含缓存存储策略也包含缓存过期策略，以 max-age 为例，他实际上相当于：</p>\n<p>Cache-Control：public/private（这里不太确定具体哪个）<br>Expires：当前客户端时间 + maxAge 。<br>而 Cache-Control：no-cache 和 Cache-Control：max-age=0 （单位是秒）相当</p>\n<p>这里需要注意的是：</p>\n<p>Cache-Control 中指定的缓存过期策略优先级高于Expires，当它们同时存在的时候，后者会被覆盖掉。</p>\n<p>缓存数据标记为已过期只是告诉客户端不能再直接从本地读取缓存了，需要再发一次请求到服务器去确认，并不等同于本地缓存数据从此就没用了，有些情况下即使过期了还是会被再次用到，具体下面会讲到。</p>\n<h3 id=\"缓存对比策略\"><a href=\"#缓存对比策略\" class=\"headerlink\" title=\"缓存对比策略\"></a>缓存对比策略</h3><p>将缓存在客户端的数据标识发往服务端，服务端通过标识来判断客户端 缓存数据是否仍有效，进而决定是否要重发数据。</p>\n<p>客户端检测到数据过期或浏览器刷新后，往往会重新发起一个 http 请求到服务器，服务器此时并不急于返回数据，而是看请求头有没有带标识（ If-Modified-Since、If-None-Match）过来，如果判断标识仍然有效，则返回304告诉客户端取本地缓存数据来用即可（这里要注意的是你必须要在首次响应时输出相应的头信息（Last-Modified、ETags）到客户端）。至此我们就明白了上面所说的本地缓存数据即使被认为过期，并不等于数据从此就没用了的道理了。</p>\n<p>关于 Last-Modified，这个响应头使用要注意，可能会影响到缓存过期策略，具体原因，后面我会通过解答开篇提到的2道题来作说明。</p>\n<p>以上就是我所认识的缓存策略，下面我将缓存策略三要素和常用的几个缓存头（项）结合一起，让大家更清晰的认识到它们之间的关系：<br><img src=\"http04.png\" alt=\"\"><br>通过上图我可以清晰的看到各缓存项分别属于哪个缓存策略范畴，这其中有部分重叠，它表明这些缓存项具有多重缓存策略，所以实际在分析缓存头的时候，除了常规的头外，我们还需要将这些具有双重缓存策略的项分解开来。</p>\n<p>最后我们回到最开始提到的2道题目，我们来一起分解下：</p>\n<p>第一道题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Cache-Control: no-cache</span><br><span class=\"line\">Content-Type: image/png</span><br><span class=\"line\">Last-Modified: Tue, 08 Nov 2016 06:59:00 GMT</span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Date: Thu, 10 Nov 2016 02:48:50 GMT</span><br><span class=\"line\">Content-Length: 3534</span><br></pre></td></tr></table></figure></p>\n<p>分析上述 Http 响应头发现有以下两项与缓存相关：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache-Control: no-cache </span><br><span class=\"line\">Last-Modified: Tue, 08 Nov 2016 06:59:00 GMT</span><br></pre></td></tr></table></figure></p>\n<p>我们上面讲到了 Cache-Control: no-cache 相当于 Cache-Control: max-age=0，且他们都是多重策略头，我们需将其分解：</p>\n<p>Cache-Control: no-cache 等于 Cache-Control: max-age=0，<br>接着 Cache-Control: max-age=0 又可分解成：</p>\n<p>Cache-Control: public/private （不确定是二者中的哪一个）<br>Expires: 当前时间<br>最终我们得到了以下完整的缓存策略三要素：<br><img src=\"http05.png\" alt=\"\"><br>所以最终结果是：浏览器会再次请求服务端，并携带上 Last-Modified 指定的时间去服务器对比：</p>\n<p>a）对比失败：服务器返回200并重发数据，客户端接收到数据后展示，并刷新本地缓存。</p>\n<p>b）对比成功：服务器返回304且不重发数据，客户端收到304状态码后从本地读取缓存数据。以下为模拟此种情况下请求后的抓包情况：<br><img src=\"http06.png\" alt=\"\"><br>这道题本身不难，但若认为 no-cache 不会缓存数据到本地，那么你理解起来就会很矛盾，因为如果文件数据没有被本地缓存，服务器返回304后将会无法展示出图片内容，但实际上它是能正常展示的。这道题很好的证明了 no-cache 也会缓存数据到本地这一说法。<br>第二道题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Cache-Control: private</span><br><span class=\"line\">Content-Type: image/png</span><br><span class=\"line\">Last-Modified: Tue, 08 Nov 2016 06:59:00 GMT</span><br><span class=\"line\">Accept-Ranges: bytes</span><br><span class=\"line\">Date: Thu, 10 Nov 2016 02:48:50 GMT</span><br><span class=\"line\">Content-Length: 3534</span><br></pre></td></tr></table></figure></p>\n<p>解题思路和上题一样，首先先找到缓存相关项：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cache-Control: private     </span><br><span class=\"line\">Last-Modified: Tue, 08 Nov 2016 06:59:00 GMT</span><br><span class=\"line\">这时我们会发现根本找不到缓存过期策略项，那答案会不会和上面一样？ 一时半会也分析不出答案，那只能实际测试下了：</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http07.png\" alt=\"\"><br>再看看 Chrome 浏览器下抓包：<br><img src=\"http08.png\" alt=\"\"><br>可以看到，浏览器后续请求都直接取的本地缓存，看来的确存在某种缓存过期策略（根据我上面的缓存过期策略理论，浏览器如果直接从本地加载缓存数据，说明它相信本地缓存数据有效，那一定存在某种缓存过期判断条件）。这个问题百思不得其解，困扰了我好久，直到一次偶然的机会我在 Fiddler 响应信息面板里的 Caching 选项卡中找到了答案：<br>原来，在没有提供任何浏览器缓存过期策略的情况下，浏览器遵循一个启发式缓存过期策略：</p>\n<p>根据响应头中2个时间字段 Date 和 Last-Modified 之间的时间差值，取其值的10%作为缓存时间周期。</p>\n<p>贴一下Caching面板里的描述，英语好的同学可以精准翻译下：<br>最终我们得到了以下完整的缓存策略三要素：<br><img src=\"http10.png\" alt=\"\"><br>最终结果<br>浏览器会根据 Date 和 Last-Modified 之间的时间差值缓存一段时间，这段时间内会直接使用本地缓存数据而不会再去请求服务器（强制请求除外），缓存过期后，会再次请求服务端，并携带上 Last-Modified 指定的时间去服务器对比并根据服务端的响应状态决定是否要从本地加载缓存数据。</p>\n<p>总结<br>Http 缓存设置起来并不复杂，但却容易被轻视， 今天这篇文章结合2道题目，通过分析、解剖相关缓存头，从系统化角度对 Http 缓存机制做了一个较完整的剖析：Http 缓存机制实际上是 Http 缓存策略三个要素（纬度）相互作用的集合，所以在分析和设置 Http 报文缓存头时，只要能从中精准的分解出缓存三要素，我们就能非常准确的预判到缓存设置最终能达到的效果。</p>\n<h1 id=\"浏览器缓存详解-expires-cache-control-last-modified-etag详细说明\"><a href=\"#浏览器缓存详解-expires-cache-control-last-modified-etag详细说明\" class=\"headerlink\" title=\"浏览器缓存详解:expires,cache-control,last-modified,etag详细说明\"></a>浏览器缓存详解:expires,cache-control,last-modified,etag详细说明</h1><p><img src=\"http11.png\" alt=\"\"></p>\n<h2 id=\"Last-Modified\"><a href=\"#Last-Modified\" class=\"headerlink\" title=\"Last-Modified\"></a>Last-Modified</h2><p>在浏览器第一次请求某一个URL时，服务器端的返回状态会是200，内容是你请求的资源，同时有一个Last-Modified的属性标记(HttpReponse Header)此文件在服务期端最后被修改的时间，格式类似这样：</p>\n<p>Last-Modified:Tue, 24 Feb 2009 08:01:04 GMT</p>\n<p>客户端第二次请求此URL时，根据HTTP协议的规定，浏览器会向服务器传送If-Modified-Since报头(HttpRequest Header)，询问该时间之后文件是否有被修改过：</p>\n<p>If-Modified-Since:Tue, 24 Feb 2009 08:01:04 GMT</p>\n<p>如果服务器端的资源没有变化，则自动返回HTTP304（NotChanged.）状态码，内容为空，这样就节省了传输数据量。当服务器端代码发生改变或者重启服务器时，则重新发出资源，返回和第一次请求时类似。从而保证不向客户端重复发出资源，也保证当服务器有变化时，客户端能够得到最新的资源。</p>\n<p>注：如果If-Modified-Since的时间比服务器当前时间(当前的请求时间request_time)还晚，会认为是个非法请求</p>\n<h2 id=\"Etag工作原理\"><a href=\"#Etag工作原理\" class=\"headerlink\" title=\"Etag工作原理\"></a>Etag工作原理</h2><p>HTTP协议规格说明定义ETag为“被请求变量的实体标记”（参见14.19）。简单点即服务器响应时给请求URL标记，并在HTTP响应头中将其传送到客户端，类似服务器端返回的格式：</p>\n<p>Etag:“5d8c72a5edda8d6a:3239″</p>\n<p>客户端的查询更新格式是这样的：</p>\n<p>If-None-Match:“5d8c72a5edda8d6a:3239″</p>\n<p>如果ETag没改变，则返回状态304。</p>\n<p>即:在客户端发出请求后，HttpReponse Header中包含Etag:“5d8c72a5edda8d6a:3239″</p>\n<p>标识，等于告诉Client端，你拿到的这个的资源有表示ID：5d8c72a5edda8d6a:3239。当下次需要发Request索要同一个URI的时候，浏览器同时发出一个If-None-Match报头(Http RequestHeader)此时包头中信息包含上次访问得到的Etag:“5d8c72a5edda8d6a:3239″标识。</p>\n<p>If-None-Match:“5d8c72a5edda8d6a:3239“</p>\n<p>,这样，Client端等于Cache了两份，服务器端就会比对2者的etag。如果If-None-Match为False，不返回200，返回304(Not Modified) Response。</p>\n<h2 id=\"Expires-1\"><a href=\"#Expires-1\" class=\"headerlink\" title=\"Expires\"></a>Expires</h2><p>给出的日期/时间后，被响应认为是过时。如Expires:Thu, 02 Apr 2009 05:14:08 GMT</p>\n<p>需和Last-Modified结合使用。用于控制请求文件的有效时间，当请求数据在有效期内时客户端浏览器从缓存请求数据而不是服务器端.当缓存中数据失效或过期，才决定从服务器更新数据。</p>\n<h2 id=\"Last-Modified和Expires\"><a href=\"#Last-Modified和Expires\" class=\"headerlink\" title=\"Last-Modified和Expires\"></a>Last-Modified和Expires</h2><p>Last-Modified标识能够节省一点带宽，但是还是逃不掉发一个HTTP请求出去，而且要和Expires一起用。而Expires标识却使得浏览器干脆连HTTP请求都不用发，比如当用户F5或者点击Refresh按钮的时候就算对于有Expires的URI，一样也会发一个HTTP请求出去，所以，Last-Modified还是要用的，而且要和Expires一起用。</p>\n<h2 id=\"Etag和Expires\"><a href=\"#Etag和Expires\" class=\"headerlink\" title=\"Etag和Expires\"></a>Etag和Expires</h2><p>如果服务器端同时设置了Etag和Expires时，Etag原理同样，即与Last-Modified/Etag对应的HttpRequestHeader:If-Modified-Since和If-None-Match。我们可以看到这两个Header的值和WebServer发出的Last-Modified,Etag值完全一样；在完全匹配If-Modified-Since和If-None-Match即检查完修改时间和Etag之后，服务器才能返回304.</p>\n<h2 id=\"Last-Modified和Etag\"><a href=\"#Last-Modified和Etag\" class=\"headerlink\" title=\"Last-Modified和Etag\"></a>Last-Modified和Etag</h2><p>分布式系统里多台机器间文件的last-modified必须保持一致，以免负载均衡到不同机器导致比对失败</p>\n<p>分布式系统尽量关闭掉Etag(每台机器生成的etag都会不一样)</p>\n<p>Last-Modified和ETags请求的http报头一起使用，服务器首先产生Last-Modified/Etag标记，服务器可在稍后使用它来判断页面是否已经被修改，来决定文件是否继续缓存</p>\n<p>过程如下:</p>\n<p>1.客户端请求一个页面（A）。</p>\n<p>2.服务器返回页面A，并在给A加上一个Last-Modified/ETag。</p>\n<p>3.客户端展现该页面，并将页面连同Last-Modified/ETag一起缓存。</p>\n<p>4.客户再次请求页面A，并将上次请求时服务器返回的Last-Modified/ETag一起传递给服务器。</p>\n<p>5.服务器检查该Last-Modified或ETag，并判断出该页面自上次客户端请求之后还未被修改，直接返回响应304和一个空的响应体。</p>\n<p>注：</p>\n<p>1、Last-Modified和Etag头都是由WebServer发出的HttpReponse Header，WebServer应该同时支持这两种头。</p>\n<p>2、WebServer发送完Last-Modified/Etag头给客户端后，客户端会缓存这些头；</p>\n<p>3、客户端再次发起相同页面的请求时，将分别发送与Last-Modified/Etag对应的HttpRequestHeader:If-Modified-Since和If-None-Match。我们可以看到这两个Header的值和WebServer发出的Last-Modified,Etag值完全一样；</p>\n<p>4、通过上述值到服务器端检查，判断文件是否继续缓存；</p>\n<p>7、关于 Cache-Control: max-age=秒 和 Expires</p>\n<p>Expires = 时间，HTTP 1.0 版本，缓存的载止时间，允许客户端在这个时间之前不去检查（发请求）<br>max-age = 秒，HTTP 1.1版本，资源在本地缓存多少秒。<br>如果max-age和Expires同时存在，则被Cache-Control的max-age覆盖。</p>\n<p>Expires 的一个缺点就是，返回的到期时间是服务器端的时间，这样存在一个问题，如果客户端的时间与服务器的时间相差很大，那么误差就很大，所以在HTTP 1.1版开始，使用Cache-Control: max-age=秒替代。</p>\n<p>Expires =max-age +   “每次下载时的当前的request时间”</p>\n<p>所以一旦重新下载的页面后，expires就重新计算一次，但last-modified不会变化 </p>\n<h1 id=\"浏览器缓存总结\"><a href=\"#浏览器缓存总结\" class=\"headerlink\" title=\"浏览器缓存总结\"></a>浏览器缓存总结</h1><p>浏览器缓存分为强缓存和协商缓存。当客户端请求某个资源时，获取缓存的流程如下：</p>\n<ul>\n<li>先根据这个资源的一些 http header 判断它是否命中强缓存，如果命中，则直接从本地获取缓存资源，不会发请求到服务器；</li>\n<li>当强缓存没有命中时，客户端会发送请求到服务器，服务器通过另一些request header验证这个资源是否命中协商缓存，称为http再验证，如果命中，服务器将请求返回，但不返回资源，而是告诉客户端直接从缓存中获取，客户端收到返回后就会从缓存中获取资源；</li>\n<li>强缓存和协商缓存共同之处在于，如果命中缓存，服务器都不会返回资源；</li>\n<li>区别是，强缓存不对发送请求到服务器，但协商缓存会。</li>\n<li>当协商缓存也没命中时，服务器就会将资源发送回客户端。</li>\n<li>当 ctrl+f5 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；</li>\n<li><p>当 f5 刷新网页时，跳过强缓存，但是会检查协商缓存；</p>\n<blockquote>\n<p>强缓存</p>\n</blockquote>\n</li>\n<li><p>Expires（该字段是 http1.0 时的规范，值为一个绝对时间的 GMT 格式的时间字符串，代表缓存资源的过期时间）</p>\n</li>\n<li><p>Cache-Control:max-age（该字段是 http1.1 的规范，强缓存利用其 max-age 值来判断缓存资源的最大生命周期，它的值单位为秒）</p>\n<blockquote>\n<p>协商缓存</p>\n</blockquote>\n</li>\n<li><p>Last-Modified（值为资源最后更新时间，随服务器response返回）</p>\n</li>\n<li>If-Modified-Since（通过比较两个时间来判断资源在两次请求期间是否有过修改，如果没有修改，则命中协商缓存）</li>\n<li>ETag（表示资源内容的唯一标识，随服务器response返回）</li>\n<li>If-None-Match（服务器通过比较请求头部的If-None-Match与当前资源的ETag是否一致来判断资源是否在两次请求之间有过修改，如果没有修改，则命中协商缓存）</li>\n</ul>\n"},{"title":"时序动画","date":"2019-08-23T08:39:42.000Z","_content":"\n#### 补充1:2019-08-29\n>发布服务前，设置时区\n\n![02.png](02.png)\n\n效果图：\n![01.png](01.png)\n#### 步骤一：数据准备\n\n拖拉机数据：时间2019/6/7 7:59:00-2019/6/713:52:00 \n目标数据：时间2019/6/7 8:00:00-2019/6/713:52:00 \n\n注意：所有的数据需放在地理数据库里，否则日期后的时分秒被自动截去删除。\n#### 步骤二：制图表达\n将拖拉机数据转为制图表达，重新为RULEID赋值，这里我全赋值为6，不能赋值为0哦。\n目标数据线分为五个等级，再转为制图表达，RULEID是否重新赋值视情况而定。(能够满足步骤四的分级)\n#### 步骤三：合并merge\n将两个制图表达数据合并。\n#### 步骤四：分级\n将步骤三合并的文件进行分级，这里分为六级（包括整个图层），其中第六级用来渲染拖拉机符号。\n#### 步骤五：再次制图表达\n将分级后的文件再次制作制图表达，对第六级进行符号渲染。\n#### 步骤六：将文件导入到数据库\n#### 步骤七：从数据库拉去数据设置timeslider属性，发布服务\n#### 步骤八：调用服务\n使用动态图层，要素服务调用，符号不渲染。\n\n#### 完整代码\n```bash\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n    \n    <meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=1,user-scalable=no\">\n    <title>Recent Earthquakes</title>\n\n    <link rel=\"stylesheet\" href=\"https://js.arcgis.com/3.29/dijit/themes/claro/claro.css\">\n    <link rel=\"stylesheet\" href=\"https://js.arcgis.com/3.29/esri/css/esri.css\">\n    \n    <style>\n      html, body {\n        height: 100%;\n        width: 100%;\n        margin: 0;\n        padding: 0;\n      }\n      .dijitBorders{\n        margin:5px 5px 5px 5px; \n        border:solid thin #9CAA9C;\n       -moz-border-radius: 4px;\n      }\n      .labelText{\n        color:#9CAA9C;\n        font-size:12pt;  \n        font-family:\"Tahoma\";\n        margin:5px;\n      }\n      .headerText{\n        color:#9CAA9C;\n        font-size:16pt;\n        font-weight:bold;\n        font-family: \"Tahoma\";\n      }\n    </style>\n\n    <script src=\"https://js.arcgis.com/3.29/\"></script>\n    <script>\n      var map,timeExtent;\n      require([\n        \"esri/map\",\"esri/layers/ArcGISDynamicMapServiceLayer\", \"esri/layers/FeatureLayer\", \"esri/TimeExtent\", \"esri/layers/TimeInfo\",\n        \"esri/renderers/ClassBreaksRenderer\",\n        \"esri/symbols/SimpleMarkerSymbol\", \"esri/symbols/SimpleLineSymbol\",\n        \"esri/dijit/editing/TemplatePicker\", \"esri/dijit/TimeSlider\",\n        \"esri/renderers/TimeClassBreaksAger\", \"esri/renderers/TemporalRenderer\",\n        \"dojo/parser\", \"dojo/_base/array\", \"esri/Color\", \"dojo/dom\", \"dojo/date\",\n        \n        \"dijit/layout/BorderContainer\", \"dijit/layout/ContentPane\", \"dojo/domReady!\"\n      ], function(\n        Map, ArcGISDynamicMapServiceLayer,FeatureLayer, TimeExtent, TimeInfo,\n        ClassBreaksRenderer,\n        SimpleMarkerSymbol, SimpleLineSymbol,\n        TemplatePicker, TimeSlider,\n        TimeClassBreaksAger, TemporalRenderer,\n        parser, arrayUtils, Color, dom, date\n      ) {\n        parser.parse();\n\n        map = new Map(\"map\", {\n          basemap: \"satellite\",\n          center: [114.0143, 34.11075],\n          slider: false,\n          zoom:15\n        });\n        //边界\n          var research_scope = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Henan_S/research_scope1/MapServer\",{\"id\":\"100000\"});\n        map.on(\"load\", mapLoaded);   \n\n        function mapLoaded() {\n            var SOMtlj = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Henan_S/PH1_TLJ/MapServer\",{\"id\":\"3\"});\n            SOMtlj.on(\"load\", featureLayerLoaded);\n            map.addLayer(SOMtlj);\n            map.addLayer(research_scope);\n        }\n\n        function featureLayerLoaded() {\n          // create time slider\n          var timeSlider = new TimeSlider({ style: \"width: 100%;\"}, dom.byId(\"timeSliderDiv\"));\n          map.setTimeSlider(timeSlider);\n\n          timeExtent = new TimeExtent();\n          \n          // 设置时区后，开始时间和结束时间\n          //timeExtent.startTime = new Date(\"2019/06/06 23:59:00 UTC\");\n          //timeExtent.endTime = new Date(\"2019/06/07 05:52:00 UTC\");\n\n          timeSlider.setThumbCount(1);\n          timeSlider.createTimeStopsByTimeInterval(timeExtent, 1, \"esriTimeUnitsMinutes\"); \n        \n          timeSlider.setThumbIndexes([0]);\n          timeSlider.on(\"time-extent-change\", displayTimeInfo);\n          timeSlider.startup();\n           // timeSlider.play();\n        }\n\n        function displayTimeInfo(timeExtent) {\n          var info = timeExtent.endTime;\n          dom.byId(\"timeInfo\").innerHTML = info;\n        }\n\n      });\n    </script>\n  </head>\n\n  <body class=\"claro\">\n    <div id=\"mainWindow\" \n         data-dojo-type=\"dijit/layout/BorderContainer\" \n         data-dojo-propx=\"design:'sidebar', gutters:true\" \n         style=\"width:100%; height:100%;\">\n     <div id=\"header\" \n          data-dojo-type=\"dijit/layout/ContentPane\" \n          data-dojo-props=\"region:'top'\" \n          class=\"dijitBorders\" style=\"height:100px;\">\n      <center>\n        <span class=\"headerText\">采样时序</span>\n        <div id=\"timeInfo\" class=\"labelText\"></div>\n        <div id=\"timeSliderDiv\" ></div>\n      </center>\n     </div>\n      \n      <div id=\"map\" data-dojo-type=\"dijit/layout/ContentPane\" \n           data-dojo-props=\"region:'center'\" class=\"dijitBorders\" \n           style=\"background-color:inherit;\">\n      </div>\n      \n      <div id=\"right\" data-dojo-type=\"dijit/layout/ContentPane\" \n           data-dojo-props=\"region:'left'\" \n           style=\"width:100px;font-size:small;\">\n\n          <center><span class=\"labelText\">Age</span></center>\n          <div id=\"ageDiv\" class=\"dijitBorders\"></div>\n          <center><span class=\"labelText\">Magnitude</span></center>\n          <div id=\"magnitudeDiv\" class=\"dijitBorders\" ></div>\n      </div>\n      \n     </div>\n  </body>\n</html>\n```\n","source":"_posts/时序动画.md","raw":"---\ntitle: 时序动画\ndate: 2019-08-23 16:39:42\ncategories:\n- ArcGIS\ntags: \n    - ArcGIS\n---\n\n#### 补充1:2019-08-29\n>发布服务前，设置时区\n\n![02.png](02.png)\n\n效果图：\n![01.png](01.png)\n#### 步骤一：数据准备\n\n拖拉机数据：时间2019/6/7 7:59:00-2019/6/713:52:00 \n目标数据：时间2019/6/7 8:00:00-2019/6/713:52:00 \n\n注意：所有的数据需放在地理数据库里，否则日期后的时分秒被自动截去删除。\n#### 步骤二：制图表达\n将拖拉机数据转为制图表达，重新为RULEID赋值，这里我全赋值为6，不能赋值为0哦。\n目标数据线分为五个等级，再转为制图表达，RULEID是否重新赋值视情况而定。(能够满足步骤四的分级)\n#### 步骤三：合并merge\n将两个制图表达数据合并。\n#### 步骤四：分级\n将步骤三合并的文件进行分级，这里分为六级（包括整个图层），其中第六级用来渲染拖拉机符号。\n#### 步骤五：再次制图表达\n将分级后的文件再次制作制图表达，对第六级进行符号渲染。\n#### 步骤六：将文件导入到数据库\n#### 步骤七：从数据库拉去数据设置timeslider属性，发布服务\n#### 步骤八：调用服务\n使用动态图层，要素服务调用，符号不渲染。\n\n#### 完整代码\n```bash\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n    \n    <meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=1,user-scalable=no\">\n    <title>Recent Earthquakes</title>\n\n    <link rel=\"stylesheet\" href=\"https://js.arcgis.com/3.29/dijit/themes/claro/claro.css\">\n    <link rel=\"stylesheet\" href=\"https://js.arcgis.com/3.29/esri/css/esri.css\">\n    \n    <style>\n      html, body {\n        height: 100%;\n        width: 100%;\n        margin: 0;\n        padding: 0;\n      }\n      .dijitBorders{\n        margin:5px 5px 5px 5px; \n        border:solid thin #9CAA9C;\n       -moz-border-radius: 4px;\n      }\n      .labelText{\n        color:#9CAA9C;\n        font-size:12pt;  \n        font-family:\"Tahoma\";\n        margin:5px;\n      }\n      .headerText{\n        color:#9CAA9C;\n        font-size:16pt;\n        font-weight:bold;\n        font-family: \"Tahoma\";\n      }\n    </style>\n\n    <script src=\"https://js.arcgis.com/3.29/\"></script>\n    <script>\n      var map,timeExtent;\n      require([\n        \"esri/map\",\"esri/layers/ArcGISDynamicMapServiceLayer\", \"esri/layers/FeatureLayer\", \"esri/TimeExtent\", \"esri/layers/TimeInfo\",\n        \"esri/renderers/ClassBreaksRenderer\",\n        \"esri/symbols/SimpleMarkerSymbol\", \"esri/symbols/SimpleLineSymbol\",\n        \"esri/dijit/editing/TemplatePicker\", \"esri/dijit/TimeSlider\",\n        \"esri/renderers/TimeClassBreaksAger\", \"esri/renderers/TemporalRenderer\",\n        \"dojo/parser\", \"dojo/_base/array\", \"esri/Color\", \"dojo/dom\", \"dojo/date\",\n        \n        \"dijit/layout/BorderContainer\", \"dijit/layout/ContentPane\", \"dojo/domReady!\"\n      ], function(\n        Map, ArcGISDynamicMapServiceLayer,FeatureLayer, TimeExtent, TimeInfo,\n        ClassBreaksRenderer,\n        SimpleMarkerSymbol, SimpleLineSymbol,\n        TemplatePicker, TimeSlider,\n        TimeClassBreaksAger, TemporalRenderer,\n        parser, arrayUtils, Color, dom, date\n      ) {\n        parser.parse();\n\n        map = new Map(\"map\", {\n          basemap: \"satellite\",\n          center: [114.0143, 34.11075],\n          slider: false,\n          zoom:15\n        });\n        //边界\n          var research_scope = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Henan_S/research_scope1/MapServer\",{\"id\":\"100000\"});\n        map.on(\"load\", mapLoaded);   \n\n        function mapLoaded() {\n            var SOMtlj = new ArcGISDynamicMapServiceLayer(\"http://localhost:6080/arcgis/rest/services/Henan_S/PH1_TLJ/MapServer\",{\"id\":\"3\"});\n            SOMtlj.on(\"load\", featureLayerLoaded);\n            map.addLayer(SOMtlj);\n            map.addLayer(research_scope);\n        }\n\n        function featureLayerLoaded() {\n          // create time slider\n          var timeSlider = new TimeSlider({ style: \"width: 100%;\"}, dom.byId(\"timeSliderDiv\"));\n          map.setTimeSlider(timeSlider);\n\n          timeExtent = new TimeExtent();\n          \n          // 设置时区后，开始时间和结束时间\n          //timeExtent.startTime = new Date(\"2019/06/06 23:59:00 UTC\");\n          //timeExtent.endTime = new Date(\"2019/06/07 05:52:00 UTC\");\n\n          timeSlider.setThumbCount(1);\n          timeSlider.createTimeStopsByTimeInterval(timeExtent, 1, \"esriTimeUnitsMinutes\"); \n        \n          timeSlider.setThumbIndexes([0]);\n          timeSlider.on(\"time-extent-change\", displayTimeInfo);\n          timeSlider.startup();\n           // timeSlider.play();\n        }\n\n        function displayTimeInfo(timeExtent) {\n          var info = timeExtent.endTime;\n          dom.byId(\"timeInfo\").innerHTML = info;\n        }\n\n      });\n    </script>\n  </head>\n\n  <body class=\"claro\">\n    <div id=\"mainWindow\" \n         data-dojo-type=\"dijit/layout/BorderContainer\" \n         data-dojo-propx=\"design:'sidebar', gutters:true\" \n         style=\"width:100%; height:100%;\">\n     <div id=\"header\" \n          data-dojo-type=\"dijit/layout/ContentPane\" \n          data-dojo-props=\"region:'top'\" \n          class=\"dijitBorders\" style=\"height:100px;\">\n      <center>\n        <span class=\"headerText\">采样时序</span>\n        <div id=\"timeInfo\" class=\"labelText\"></div>\n        <div id=\"timeSliderDiv\" ></div>\n      </center>\n     </div>\n      \n      <div id=\"map\" data-dojo-type=\"dijit/layout/ContentPane\" \n           data-dojo-props=\"region:'center'\" class=\"dijitBorders\" \n           style=\"background-color:inherit;\">\n      </div>\n      \n      <div id=\"right\" data-dojo-type=\"dijit/layout/ContentPane\" \n           data-dojo-props=\"region:'left'\" \n           style=\"width:100px;font-size:small;\">\n\n          <center><span class=\"labelText\">Age</span></center>\n          <div id=\"ageDiv\" class=\"dijitBorders\"></div>\n          <center><span class=\"labelText\">Magnitude</span></center>\n          <div id=\"magnitudeDiv\" class=\"dijitBorders\" ></div>\n      </div>\n      \n     </div>\n  </body>\n</html>\n```\n","slug":"时序动画","published":1,"updated":"2019-08-29T12:00:02.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cws004ft09zbtkcbzfx","content":"<h4 id=\"补充1-2019-08-29\"><a href=\"#补充1-2019-08-29\" class=\"headerlink\" title=\"补充1:2019-08-29\"></a>补充1:2019-08-29</h4><blockquote>\n<p>发布服务前，设置时区</p>\n</blockquote>\n<p><img src=\"/2019/08/23/时序动画/02.png\" alt=\"02.png\"></p>\n<p>效果图：<br><img src=\"/2019/08/23/时序动画/01.png\" alt=\"01.png\"></p>\n<h4 id=\"步骤一：数据准备\"><a href=\"#步骤一：数据准备\" class=\"headerlink\" title=\"步骤一：数据准备\"></a>步骤一：数据准备</h4><p>拖拉机数据：时间2019/6/7 7:59:00-2019/6/713:52:00<br>目标数据：时间2019/6/7 8:00:00-2019/6/713:52:00 </p>\n<p>注意：所有的数据需放在地理数据库里，否则日期后的时分秒被自动截去删除。</p>\n<h4 id=\"步骤二：制图表达\"><a href=\"#步骤二：制图表达\" class=\"headerlink\" title=\"步骤二：制图表达\"></a>步骤二：制图表达</h4><p>将拖拉机数据转为制图表达，重新为RULEID赋值，这里我全赋值为6，不能赋值为0哦。<br>目标数据线分为五个等级，再转为制图表达，RULEID是否重新赋值视情况而定。(能够满足步骤四的分级)</p>\n<h4 id=\"步骤三：合并merge\"><a href=\"#步骤三：合并merge\" class=\"headerlink\" title=\"步骤三：合并merge\"></a>步骤三：合并merge</h4><p>将两个制图表达数据合并。</p>\n<h4 id=\"步骤四：分级\"><a href=\"#步骤四：分级\" class=\"headerlink\" title=\"步骤四：分级\"></a>步骤四：分级</h4><p>将步骤三合并的文件进行分级，这里分为六级（包括整个图层），其中第六级用来渲染拖拉机符号。</p>\n<h4 id=\"步骤五：再次制图表达\"><a href=\"#步骤五：再次制图表达\" class=\"headerlink\" title=\"步骤五：再次制图表达\"></a>步骤五：再次制图表达</h4><p>将分级后的文件再次制作制图表达，对第六级进行符号渲染。</p>\n<h4 id=\"步骤六：将文件导入到数据库\"><a href=\"#步骤六：将文件导入到数据库\" class=\"headerlink\" title=\"步骤六：将文件导入到数据库\"></a>步骤六：将文件导入到数据库</h4><h4 id=\"步骤七：从数据库拉去数据设置timeslider属性，发布服务\"><a href=\"#步骤七：从数据库拉去数据设置timeslider属性，发布服务\" class=\"headerlink\" title=\"步骤七：从数据库拉去数据设置timeslider属性，发布服务\"></a>步骤七：从数据库拉去数据设置timeslider属性，发布服务</h4><h4 id=\"步骤八：调用服务\"><a href=\"#步骤八：调用服务\" class=\"headerlink\" title=\"步骤八：调用服务\"></a>步骤八：调用服务</h4><p>使用动态图层，要素服务调用，符号不渲染。</p>\n<h4 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=<span class=\"string\">\"Content-Type\"</span> content=<span class=\"string\">\"text/html; charset=utf-8\"</span>&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"initial-scale=1, maximum-scale=1,user-scalable=no\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Recent Earthquakes&lt;/title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"https://js.arcgis.com/3.29/dijit/themes/claro/claro.css\"</span>&gt;</span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"https://js.arcgis.com/3.29/esri/css/esri.css\"</span>&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">      html, body &#123;</span><br><span class=\"line\">        height: 100%;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">        padding: 0;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .dijitBorders&#123;</span><br><span class=\"line\">        margin:5px 5px 5px 5px; </span><br><span class=\"line\">        border:solid thin <span class=\"comment\">#9CAA9C;</span></span><br><span class=\"line\">       -moz-border-radius: 4px;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .labelText&#123;</span><br><span class=\"line\">        color:<span class=\"comment\">#9CAA9C;</span></span><br><span class=\"line\">        font-size:12pt;  </span><br><span class=\"line\">        font-family:<span class=\"string\">\"Tahoma\"</span>;</span><br><span class=\"line\">        margin:5px;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .headerText&#123;</span><br><span class=\"line\">        color:<span class=\"comment\">#9CAA9C;</span></span><br><span class=\"line\">        font-size:16pt;</span><br><span class=\"line\">        font-weight:bold;</span><br><span class=\"line\">        font-family: <span class=\"string\">\"Tahoma\"</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"https://js.arcgis.com/3.29/\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      var map,timeExtent;</span><br><span class=\"line\">      require([</span><br><span class=\"line\">        <span class=\"string\">\"esri/map\"</span>,<span class=\"string\">\"esri/layers/ArcGISDynamicMapServiceLayer\"</span>, <span class=\"string\">\"esri/layers/FeatureLayer\"</span>, <span class=\"string\">\"esri/TimeExtent\"</span>, <span class=\"string\">\"esri/layers/TimeInfo\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"esri/renderers/ClassBreaksRenderer\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"esri/symbols/SimpleMarkerSymbol\"</span>, <span class=\"string\">\"esri/symbols/SimpleLineSymbol\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"esri/dijit/editing/TemplatePicker\"</span>, <span class=\"string\">\"esri/dijit/TimeSlider\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"esri/renderers/TimeClassBreaksAger\"</span>, <span class=\"string\">\"esri/renderers/TemporalRenderer\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"dojo/parser\"</span>, <span class=\"string\">\"dojo/_base/array\"</span>, <span class=\"string\">\"esri/Color\"</span>, <span class=\"string\">\"dojo/dom\"</span>, <span class=\"string\">\"dojo/date\"</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"string\">\"dijit/layout/BorderContainer\"</span>, <span class=\"string\">\"dijit/layout/ContentPane\"</span>, <span class=\"string\">\"dojo/domReady!\"</span></span><br><span class=\"line\">      ], <span class=\"keyword\">function</span>(</span><br><span class=\"line\">        Map, ArcGISDynamicMapServiceLayer,FeatureLayer, TimeExtent, TimeInfo,</span><br><span class=\"line\">        ClassBreaksRenderer,</span><br><span class=\"line\">        SimpleMarkerSymbol, SimpleLineSymbol,</span><br><span class=\"line\">        TemplatePicker, TimeSlider,</span><br><span class=\"line\">        TimeClassBreaksAger, TemporalRenderer,</span><br><span class=\"line\">        parser, arrayUtils, Color, dom, date</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        parser.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">        map = new Map(<span class=\"string\">\"map\"</span>, &#123;</span><br><span class=\"line\">          basemap: <span class=\"string\">\"satellite\"</span>,</span><br><span class=\"line\">          center: [114.0143, 34.11075],</span><br><span class=\"line\">          slider: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          zoom:15</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        //边界</span><br><span class=\"line\">          var research_scope = new ArcGISDynamicMapServiceLayer(<span class=\"string\">\"http://localhost:6080/arcgis/rest/services/Henan_S/research_scope1/MapServer\"</span>,&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"100000\"</span>&#125;);</span><br><span class=\"line\">        map.on(<span class=\"string\">\"load\"</span>, mapLoaded);   </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">mapLoaded</span></span>() &#123;</span><br><span class=\"line\">            var SOMtlj = new ArcGISDynamicMapServiceLayer(<span class=\"string\">\"http://localhost:6080/arcgis/rest/services/Henan_S/PH1_TLJ/MapServer\"</span>,&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"3\"</span>&#125;);</span><br><span class=\"line\">            SOMtlj.on(<span class=\"string\">\"load\"</span>, featureLayerLoaded);</span><br><span class=\"line\">            map.addLayer(SOMtlj);</span><br><span class=\"line\">            map.addLayer(research_scope);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">featureLayerLoaded</span></span>() &#123;</span><br><span class=\"line\">          // create time slider</span><br><span class=\"line\">          var timeSlider = new TimeSlider(&#123; style: <span class=\"string\">\"width: 100%;\"</span>&#125;, dom.byId(<span class=\"string\">\"timeSliderDiv\"</span>));</span><br><span class=\"line\">          map.setTimeSlider(timeSlider);</span><br><span class=\"line\"></span><br><span class=\"line\">          timeExtent = new TimeExtent();</span><br><span class=\"line\">          </span><br><span class=\"line\">          // 设置时区后，开始时间和结束时间</span><br><span class=\"line\">          //timeExtent.startTime = new Date(<span class=\"string\">\"2019/06/06 23:59:00 UTC\"</span>);</span><br><span class=\"line\">          //timeExtent.endTime = new Date(<span class=\"string\">\"2019/06/07 05:52:00 UTC\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          timeSlider.setThumbCount(1);</span><br><span class=\"line\">          timeSlider.createTimeStopsByTimeInterval(timeExtent, 1, <span class=\"string\">\"esriTimeUnitsMinutes\"</span>); </span><br><span class=\"line\">        </span><br><span class=\"line\">          timeSlider.setThumbIndexes([0]);</span><br><span class=\"line\">          timeSlider.on(<span class=\"string\">\"time-extent-change\"</span>, displayTimeInfo);</span><br><span class=\"line\">          timeSlider.startup();</span><br><span class=\"line\">           // timeSlider.play();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> displayTimeInfo(timeExtent) &#123;</span><br><span class=\"line\">          var info = timeExtent.endTime;</span><br><span class=\"line\">          dom.byId(<span class=\"string\">\"timeInfo\"</span>).innerHTML = info;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;body class=<span class=\"string\">\"claro\"</span>&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"mainWindow\"</span> </span><br><span class=\"line\">         data-dojo-type=<span class=\"string\">\"dijit/layout/BorderContainer\"</span> </span><br><span class=\"line\">         data-dojo-propx=<span class=\"string\">\"design:'sidebar', gutters:true\"</span> </span><br><span class=\"line\">         style=<span class=\"string\">\"width:100%; height:100%;\"</span>&gt;</span><br><span class=\"line\">     &lt;div id=<span class=\"string\">\"header\"</span> </span><br><span class=\"line\">          data-dojo-type=<span class=\"string\">\"dijit/layout/ContentPane\"</span> </span><br><span class=\"line\">          data-dojo-props=<span class=\"string\">\"region:'top'\"</span> </span><br><span class=\"line\">          class=<span class=\"string\">\"dijitBorders\"</span> style=<span class=\"string\">\"height:100px;\"</span>&gt;</span><br><span class=\"line\">      &lt;center&gt;</span><br><span class=\"line\">        &lt;span class=<span class=\"string\">\"headerText\"</span>&gt;采样时序&lt;/span&gt;</span><br><span class=\"line\">        &lt;div id=<span class=\"string\">\"timeInfo\"</span> class=<span class=\"string\">\"labelText\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div id=<span class=\"string\">\"timeSliderDiv\"</span> &gt;&lt;/div&gt;</span><br><span class=\"line\">      &lt;/center&gt;</span><br><span class=\"line\">     &lt;/div&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\">      &lt;div id=<span class=\"string\">\"map\"</span> data-dojo-type=<span class=\"string\">\"dijit/layout/ContentPane\"</span> </span><br><span class=\"line\">           data-dojo-props=<span class=\"string\">\"region:'center'\"</span> class=<span class=\"string\">\"dijitBorders\"</span> </span><br><span class=\"line\">           style=<span class=\"string\">\"background-color:inherit;\"</span>&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\">      &lt;div id=<span class=\"string\">\"right\"</span> data-dojo-type=<span class=\"string\">\"dijit/layout/ContentPane\"</span> </span><br><span class=\"line\">           data-dojo-props=<span class=\"string\">\"region:'left'\"</span> </span><br><span class=\"line\">           style=<span class=\"string\">\"width:100px;font-size:small;\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;center&gt;&lt;span class=<span class=\"string\">\"labelText\"</span>&gt;Age&lt;/span&gt;&lt;/center&gt;</span><br><span class=\"line\">          &lt;div id=<span class=\"string\">\"ageDiv\"</span> class=<span class=\"string\">\"dijitBorders\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">          &lt;center&gt;&lt;span class=<span class=\"string\">\"labelText\"</span>&gt;Magnitude&lt;/span&gt;&lt;/center&gt;</span><br><span class=\"line\">          &lt;div id=<span class=\"string\">\"magnitudeDiv\"</span> class=<span class=\"string\">\"dijitBorders\"</span> &gt;&lt;/div&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\">     &lt;/div&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"补充1-2019-08-29\"><a href=\"#补充1-2019-08-29\" class=\"headerlink\" title=\"补充1:2019-08-29\"></a>补充1:2019-08-29</h4><blockquote>\n<p>发布服务前，设置时区</p>\n</blockquote>\n<p><img src=\"/2019/08/23/时序动画/02.png\" alt=\"02.png\"></p>\n<p>效果图：<br><img src=\"/2019/08/23/时序动画/01.png\" alt=\"01.png\"></p>\n<h4 id=\"步骤一：数据准备\"><a href=\"#步骤一：数据准备\" class=\"headerlink\" title=\"步骤一：数据准备\"></a>步骤一：数据准备</h4><p>拖拉机数据：时间2019/6/7 7:59:00-2019/6/713:52:00<br>目标数据：时间2019/6/7 8:00:00-2019/6/713:52:00 </p>\n<p>注意：所有的数据需放在地理数据库里，否则日期后的时分秒被自动截去删除。</p>\n<h4 id=\"步骤二：制图表达\"><a href=\"#步骤二：制图表达\" class=\"headerlink\" title=\"步骤二：制图表达\"></a>步骤二：制图表达</h4><p>将拖拉机数据转为制图表达，重新为RULEID赋值，这里我全赋值为6，不能赋值为0哦。<br>目标数据线分为五个等级，再转为制图表达，RULEID是否重新赋值视情况而定。(能够满足步骤四的分级)</p>\n<h4 id=\"步骤三：合并merge\"><a href=\"#步骤三：合并merge\" class=\"headerlink\" title=\"步骤三：合并merge\"></a>步骤三：合并merge</h4><p>将两个制图表达数据合并。</p>\n<h4 id=\"步骤四：分级\"><a href=\"#步骤四：分级\" class=\"headerlink\" title=\"步骤四：分级\"></a>步骤四：分级</h4><p>将步骤三合并的文件进行分级，这里分为六级（包括整个图层），其中第六级用来渲染拖拉机符号。</p>\n<h4 id=\"步骤五：再次制图表达\"><a href=\"#步骤五：再次制图表达\" class=\"headerlink\" title=\"步骤五：再次制图表达\"></a>步骤五：再次制图表达</h4><p>将分级后的文件再次制作制图表达，对第六级进行符号渲染。</p>\n<h4 id=\"步骤六：将文件导入到数据库\"><a href=\"#步骤六：将文件导入到数据库\" class=\"headerlink\" title=\"步骤六：将文件导入到数据库\"></a>步骤六：将文件导入到数据库</h4><h4 id=\"步骤七：从数据库拉去数据设置timeslider属性，发布服务\"><a href=\"#步骤七：从数据库拉去数据设置timeslider属性，发布服务\" class=\"headerlink\" title=\"步骤七：从数据库拉去数据设置timeslider属性，发布服务\"></a>步骤七：从数据库拉去数据设置timeslider属性，发布服务</h4><h4 id=\"步骤八：调用服务\"><a href=\"#步骤八：调用服务\" class=\"headerlink\" title=\"步骤八：调用服务\"></a>步骤八：调用服务</h4><p>使用动态图层，要素服务调用，符号不渲染。</p>\n<h4 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=<span class=\"string\">\"Content-Type\"</span> content=<span class=\"string\">\"text/html; charset=utf-8\"</span>&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;meta name=<span class=\"string\">\"viewport\"</span> content=<span class=\"string\">\"initial-scale=1, maximum-scale=1,user-scalable=no\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Recent Earthquakes&lt;/title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"https://js.arcgis.com/3.29/dijit/themes/claro/claro.css\"</span>&gt;</span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"https://js.arcgis.com/3.29/esri/css/esri.css\"</span>&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">      html, body &#123;</span><br><span class=\"line\">        height: 100%;</span><br><span class=\"line\">        width: 100%;</span><br><span class=\"line\">        margin: 0;</span><br><span class=\"line\">        padding: 0;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .dijitBorders&#123;</span><br><span class=\"line\">        margin:5px 5px 5px 5px; </span><br><span class=\"line\">        border:solid thin <span class=\"comment\">#9CAA9C;</span></span><br><span class=\"line\">       -moz-border-radius: 4px;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .labelText&#123;</span><br><span class=\"line\">        color:<span class=\"comment\">#9CAA9C;</span></span><br><span class=\"line\">        font-size:12pt;  </span><br><span class=\"line\">        font-family:<span class=\"string\">\"Tahoma\"</span>;</span><br><span class=\"line\">        margin:5px;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      .headerText&#123;</span><br><span class=\"line\">        color:<span class=\"comment\">#9CAA9C;</span></span><br><span class=\"line\">        font-size:16pt;</span><br><span class=\"line\">        font-weight:bold;</span><br><span class=\"line\">        font-family: <span class=\"string\">\"Tahoma\"</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;script src=<span class=\"string\">\"https://js.arcgis.com/3.29/\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">      var map,timeExtent;</span><br><span class=\"line\">      require([</span><br><span class=\"line\">        <span class=\"string\">\"esri/map\"</span>,<span class=\"string\">\"esri/layers/ArcGISDynamicMapServiceLayer\"</span>, <span class=\"string\">\"esri/layers/FeatureLayer\"</span>, <span class=\"string\">\"esri/TimeExtent\"</span>, <span class=\"string\">\"esri/layers/TimeInfo\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"esri/renderers/ClassBreaksRenderer\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"esri/symbols/SimpleMarkerSymbol\"</span>, <span class=\"string\">\"esri/symbols/SimpleLineSymbol\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"esri/dijit/editing/TemplatePicker\"</span>, <span class=\"string\">\"esri/dijit/TimeSlider\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"esri/renderers/TimeClassBreaksAger\"</span>, <span class=\"string\">\"esri/renderers/TemporalRenderer\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"dojo/parser\"</span>, <span class=\"string\">\"dojo/_base/array\"</span>, <span class=\"string\">\"esri/Color\"</span>, <span class=\"string\">\"dojo/dom\"</span>, <span class=\"string\">\"dojo/date\"</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"string\">\"dijit/layout/BorderContainer\"</span>, <span class=\"string\">\"dijit/layout/ContentPane\"</span>, <span class=\"string\">\"dojo/domReady!\"</span></span><br><span class=\"line\">      ], <span class=\"keyword\">function</span>(</span><br><span class=\"line\">        Map, ArcGISDynamicMapServiceLayer,FeatureLayer, TimeExtent, TimeInfo,</span><br><span class=\"line\">        ClassBreaksRenderer,</span><br><span class=\"line\">        SimpleMarkerSymbol, SimpleLineSymbol,</span><br><span class=\"line\">        TemplatePicker, TimeSlider,</span><br><span class=\"line\">        TimeClassBreaksAger, TemporalRenderer,</span><br><span class=\"line\">        parser, arrayUtils, Color, dom, date</span><br><span class=\"line\">      ) &#123;</span><br><span class=\"line\">        parser.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">        map = new Map(<span class=\"string\">\"map\"</span>, &#123;</span><br><span class=\"line\">          basemap: <span class=\"string\">\"satellite\"</span>,</span><br><span class=\"line\">          center: [114.0143, 34.11075],</span><br><span class=\"line\">          slider: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          zoom:15</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        //边界</span><br><span class=\"line\">          var research_scope = new ArcGISDynamicMapServiceLayer(<span class=\"string\">\"http://localhost:6080/arcgis/rest/services/Henan_S/research_scope1/MapServer\"</span>,&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"100000\"</span>&#125;);</span><br><span class=\"line\">        map.on(<span class=\"string\">\"load\"</span>, mapLoaded);   </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">mapLoaded</span></span>() &#123;</span><br><span class=\"line\">            var SOMtlj = new ArcGISDynamicMapServiceLayer(<span class=\"string\">\"http://localhost:6080/arcgis/rest/services/Henan_S/PH1_TLJ/MapServer\"</span>,&#123;<span class=\"string\">\"id\"</span>:<span class=\"string\">\"3\"</span>&#125;);</span><br><span class=\"line\">            SOMtlj.on(<span class=\"string\">\"load\"</span>, featureLayerLoaded);</span><br><span class=\"line\">            map.addLayer(SOMtlj);</span><br><span class=\"line\">            map.addLayer(research_scope);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">featureLayerLoaded</span></span>() &#123;</span><br><span class=\"line\">          // create time slider</span><br><span class=\"line\">          var timeSlider = new TimeSlider(&#123; style: <span class=\"string\">\"width: 100%;\"</span>&#125;, dom.byId(<span class=\"string\">\"timeSliderDiv\"</span>));</span><br><span class=\"line\">          map.setTimeSlider(timeSlider);</span><br><span class=\"line\"></span><br><span class=\"line\">          timeExtent = new TimeExtent();</span><br><span class=\"line\">          </span><br><span class=\"line\">          // 设置时区后，开始时间和结束时间</span><br><span class=\"line\">          //timeExtent.startTime = new Date(<span class=\"string\">\"2019/06/06 23:59:00 UTC\"</span>);</span><br><span class=\"line\">          //timeExtent.endTime = new Date(<span class=\"string\">\"2019/06/07 05:52:00 UTC\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          timeSlider.setThumbCount(1);</span><br><span class=\"line\">          timeSlider.createTimeStopsByTimeInterval(timeExtent, 1, <span class=\"string\">\"esriTimeUnitsMinutes\"</span>); </span><br><span class=\"line\">        </span><br><span class=\"line\">          timeSlider.setThumbIndexes([0]);</span><br><span class=\"line\">          timeSlider.on(<span class=\"string\">\"time-extent-change\"</span>, displayTimeInfo);</span><br><span class=\"line\">          timeSlider.startup();</span><br><span class=\"line\">           // timeSlider.play();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> displayTimeInfo(timeExtent) &#123;</span><br><span class=\"line\">          var info = timeExtent.endTime;</span><br><span class=\"line\">          dom.byId(<span class=\"string\">\"timeInfo\"</span>).innerHTML = info;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;body class=<span class=\"string\">\"claro\"</span>&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">\"mainWindow\"</span> </span><br><span class=\"line\">         data-dojo-type=<span class=\"string\">\"dijit/layout/BorderContainer\"</span> </span><br><span class=\"line\">         data-dojo-propx=<span class=\"string\">\"design:'sidebar', gutters:true\"</span> </span><br><span class=\"line\">         style=<span class=\"string\">\"width:100%; height:100%;\"</span>&gt;</span><br><span class=\"line\">     &lt;div id=<span class=\"string\">\"header\"</span> </span><br><span class=\"line\">          data-dojo-type=<span class=\"string\">\"dijit/layout/ContentPane\"</span> </span><br><span class=\"line\">          data-dojo-props=<span class=\"string\">\"region:'top'\"</span> </span><br><span class=\"line\">          class=<span class=\"string\">\"dijitBorders\"</span> style=<span class=\"string\">\"height:100px;\"</span>&gt;</span><br><span class=\"line\">      &lt;center&gt;</span><br><span class=\"line\">        &lt;span class=<span class=\"string\">\"headerText\"</span>&gt;采样时序&lt;/span&gt;</span><br><span class=\"line\">        &lt;div id=<span class=\"string\">\"timeInfo\"</span> class=<span class=\"string\">\"labelText\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div id=<span class=\"string\">\"timeSliderDiv\"</span> &gt;&lt;/div&gt;</span><br><span class=\"line\">      &lt;/center&gt;</span><br><span class=\"line\">     &lt;/div&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\">      &lt;div id=<span class=\"string\">\"map\"</span> data-dojo-type=<span class=\"string\">\"dijit/layout/ContentPane\"</span> </span><br><span class=\"line\">           data-dojo-props=<span class=\"string\">\"region:'center'\"</span> class=<span class=\"string\">\"dijitBorders\"</span> </span><br><span class=\"line\">           style=<span class=\"string\">\"background-color:inherit;\"</span>&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\">      &lt;div id=<span class=\"string\">\"right\"</span> data-dojo-type=<span class=\"string\">\"dijit/layout/ContentPane\"</span> </span><br><span class=\"line\">           data-dojo-props=<span class=\"string\">\"region:'left'\"</span> </span><br><span class=\"line\">           style=<span class=\"string\">\"width:100px;font-size:small;\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">          &lt;center&gt;&lt;span class=<span class=\"string\">\"labelText\"</span>&gt;Age&lt;/span&gt;&lt;/center&gt;</span><br><span class=\"line\">          &lt;div id=<span class=\"string\">\"ageDiv\"</span> class=<span class=\"string\">\"dijitBorders\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">          &lt;center&gt;&lt;span class=<span class=\"string\">\"labelText\"</span>&gt;Magnitude&lt;/span&gt;&lt;/center&gt;</span><br><span class=\"line\">          &lt;div id=<span class=\"string\">\"magnitudeDiv\"</span> class=<span class=\"string\">\"dijitBorders\"</span> &gt;&lt;/div&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\">     &lt;/div&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"盒模型","date":"2019-01-04T08:40:34.000Z","_content":"# css盒模型\n简介：就是用来装页面上的元素的矩形区域。CSS中的盒子模型包括IE盒子模型和标准的W3C盒子模型。\n\nbox-sizing(有3个值哦)：border-box,padding-box,content-box.\n\n标准盒子模型：\n![](box1.png)\nIE盒子模型：\n![](box2.png)\n区别：从图中我们可以看出，这两种盒子模型最主要的区别就是width的包含范围，在标准的盒子模型中，width指content部分的宽度，在IE盒子模型中，width表示content+padding+border这三个部分的宽度，故这使得在计算整个盒子的宽度时存在着差异：\n\n标准盒子模型的盒子宽度：左右border+左右padding+width\nIE盒子模型的盒子宽度：width\n\n在CSS3中引入了box-sizing属性，box-sizing:content-box;表示标准的盒子模型，box-sizing:border-box表示的是IE盒子模型\n\n最后，前面我们还提到了，box-sizing:padding-box,这个属性值的宽度包含了左右padding+width","source":"_posts/盒模型.md","raw":"---\ntitle: 盒模型\ndate: 2019-01-04 16:40:34\ncategories: \n- 基础前端技术\ntags: [盒模型]\n---\n# css盒模型\n简介：就是用来装页面上的元素的矩形区域。CSS中的盒子模型包括IE盒子模型和标准的W3C盒子模型。\n\nbox-sizing(有3个值哦)：border-box,padding-box,content-box.\n\n标准盒子模型：\n![](box1.png)\nIE盒子模型：\n![](box2.png)\n区别：从图中我们可以看出，这两种盒子模型最主要的区别就是width的包含范围，在标准的盒子模型中，width指content部分的宽度，在IE盒子模型中，width表示content+padding+border这三个部分的宽度，故这使得在计算整个盒子的宽度时存在着差异：\n\n标准盒子模型的盒子宽度：左右border+左右padding+width\nIE盒子模型的盒子宽度：width\n\n在CSS3中引入了box-sizing属性，box-sizing:content-box;表示标准的盒子模型，box-sizing:border-box表示的是IE盒子模型\n\n最后，前面我们还提到了，box-sizing:padding-box,这个属性值的宽度包含了左右padding+width","slug":"盒模型","published":1,"updated":"2019-07-17T11:39:10.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cwu004it09zty0rul9h","content":"<h1 id=\"css盒模型\"><a href=\"#css盒模型\" class=\"headerlink\" title=\"css盒模型\"></a>css盒模型</h1><p>简介：就是用来装页面上的元素的矩形区域。CSS中的盒子模型包括IE盒子模型和标准的W3C盒子模型。</p>\n<p>box-sizing(有3个值哦)：border-box,padding-box,content-box.</p>\n<p>标准盒子模型：<br><img src=\"/2019/01/04/盒模型/box1.png\" alt=\"\"><br>IE盒子模型：<br><img src=\"/2019/01/04/盒模型/box2.png\" alt=\"\"><br>区别：从图中我们可以看出，这两种盒子模型最主要的区别就是width的包含范围，在标准的盒子模型中，width指content部分的宽度，在IE盒子模型中，width表示content+padding+border这三个部分的宽度，故这使得在计算整个盒子的宽度时存在着差异：</p>\n<p>标准盒子模型的盒子宽度：左右border+左右padding+width<br>IE盒子模型的盒子宽度：width</p>\n<p>在CSS3中引入了box-sizing属性，box-sizing:content-box;表示标准的盒子模型，box-sizing:border-box表示的是IE盒子模型</p>\n<p>最后，前面我们还提到了，box-sizing:padding-box,这个属性值的宽度包含了左右padding+width</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"css盒模型\"><a href=\"#css盒模型\" class=\"headerlink\" title=\"css盒模型\"></a>css盒模型</h1><p>简介：就是用来装页面上的元素的矩形区域。CSS中的盒子模型包括IE盒子模型和标准的W3C盒子模型。</p>\n<p>box-sizing(有3个值哦)：border-box,padding-box,content-box.</p>\n<p>标准盒子模型：<br><img src=\"/2019/01/04/盒模型/box1.png\" alt=\"\"><br>IE盒子模型：<br><img src=\"/2019/01/04/盒模型/box2.png\" alt=\"\"><br>区别：从图中我们可以看出，这两种盒子模型最主要的区别就是width的包含范围，在标准的盒子模型中，width指content部分的宽度，在IE盒子模型中，width表示content+padding+border这三个部分的宽度，故这使得在计算整个盒子的宽度时存在着差异：</p>\n<p>标准盒子模型的盒子宽度：左右border+左右padding+width<br>IE盒子模型的盒子宽度：width</p>\n<p>在CSS3中引入了box-sizing属性，box-sizing:content-box;表示标准的盒子模型，box-sizing:border-box表示的是IE盒子模型</p>\n<p>最后，前面我们还提到了，box-sizing:padding-box,这个属性值的宽度包含了左右padding+width</p>\n"},{"title":"理解cookie、session、localStorage、sessionStorage之不同","date":"2019-01-02T02:03:31.000Z","_content":"\n# 理解cookie、session、localStorage、sessionStorage之不同\n\n![](http12.png)\n- 1、相同点：数据都保存在浏览器，同源共享。即相同的域下可以修改读取。\n\n- 2、不同点：\n\n     <font color=\"red\">大小数量： </font>IE6或更低版本最多20个cookie，IE7+可以有50个。 cookie大小4KB左右，超过部分会被截掉。sessionStoage，localStoage大小可达5M。\n\n     <font color=\"red\">传输： </font>每次请求cookie都会发送到服务器，然后回传给浏览器，sessionStoage,localStoage不会自动发送到服务器端。\n\n   <font color=\"red\">有效性：</font>cookie可以设置path路径，限制只属于某个路径。在过期时间之前都有效，即使窗口和浏览器关闭。sesesionStorage当前窗口有效，关闭窗口自动失效。localStorage始终有效，即使窗口和浏览器关闭。\n\n   <font color=\"red\">作用域：</font>cookie在同源页面中共享，sessionStorage只能在当前页有效，localStorage在所有同源页面中共享。\n\n    <font color=\"red\">操作方法：</font>Cookie的修改读取方法需自己实现，sessionStorage，localStorage提供了get，set方法。    \n\n注：cookie是不可以或缺的，cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。\n","source":"_posts/理解cookie、session、localStorage、sessionStorage之不同.md","raw":"---\ntitle: 理解cookie、session、localStorage、sessionStorage之不同\ndate: 2019-01-02 10:03:31\ncategories: \n- 基础前端技术\ntags: [cookie]\n---\n\n# 理解cookie、session、localStorage、sessionStorage之不同\n\n![](http12.png)\n- 1、相同点：数据都保存在浏览器，同源共享。即相同的域下可以修改读取。\n\n- 2、不同点：\n\n     <font color=\"red\">大小数量： </font>IE6或更低版本最多20个cookie，IE7+可以有50个。 cookie大小4KB左右，超过部分会被截掉。sessionStoage，localStoage大小可达5M。\n\n     <font color=\"red\">传输： </font>每次请求cookie都会发送到服务器，然后回传给浏览器，sessionStoage,localStoage不会自动发送到服务器端。\n\n   <font color=\"red\">有效性：</font>cookie可以设置path路径，限制只属于某个路径。在过期时间之前都有效，即使窗口和浏览器关闭。sesesionStorage当前窗口有效，关闭窗口自动失效。localStorage始终有效，即使窗口和浏览器关闭。\n\n   <font color=\"red\">作用域：</font>cookie在同源页面中共享，sessionStorage只能在当前页有效，localStorage在所有同源页面中共享。\n\n    <font color=\"red\">操作方法：</font>Cookie的修改读取方法需自己实现，sessionStorage，localStorage提供了get，set方法。    \n\n注：cookie是不可以或缺的，cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。\n","slug":"理解cookie、session、localStorage、sessionStorage之不同","published":1,"updated":"2019-07-17T11:39:10.718Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cwx004nt09z6kjmup8b","content":"<h1 id=\"理解cookie、session、localStorage、sessionStorage之不同\"><a href=\"#理解cookie、session、localStorage、sessionStorage之不同\" class=\"headerlink\" title=\"理解cookie、session、localStorage、sessionStorage之不同\"></a>理解cookie、session、localStorage、sessionStorage之不同</h1><p><img src=\"http12.png\" alt=\"\"></p>\n<ul>\n<li><p>1、相同点：数据都保存在浏览器，同源共享。即相同的域下可以修改读取。</p>\n</li>\n<li><p>2、不同点：</p>\n<p>   <font color=\"red\">大小数量： </font>IE6或更低版本最多20个cookie，IE7+可以有50个。 cookie大小4KB左右，超过部分会被截掉。sessionStoage，localStoage大小可达5M。</p>\n<p>   <font color=\"red\">传输： </font>每次请求cookie都会发送到服务器，然后回传给浏览器，sessionStoage,localStoage不会自动发送到服务器端。</p>\n<p> <font color=\"red\">有效性：</font>cookie可以设置path路径，限制只属于某个路径。在过期时间之前都有效，即使窗口和浏览器关闭。sesesionStorage当前窗口有效，关闭窗口自动失效。localStorage始终有效，即使窗口和浏览器关闭。</p>\n<p> <font color=\"red\">作用域：</font>cookie在同源页面中共享，sessionStorage只能在当前页有效，localStorage在所有同源页面中共享。</p>\n<p>  <font color=\"red\">操作方法：</font>Cookie的修改读取方法需自己实现，sessionStorage，localStorage提供了get，set方法。    </p>\n</li>\n</ul>\n<p>注：cookie是不可以或缺的，cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"理解cookie、session、localStorage、sessionStorage之不同\"><a href=\"#理解cookie、session、localStorage、sessionStorage之不同\" class=\"headerlink\" title=\"理解cookie、session、localStorage、sessionStorage之不同\"></a>理解cookie、session、localStorage、sessionStorage之不同</h1><p><img src=\"http12.png\" alt=\"\"></p>\n<ul>\n<li><p>1、相同点：数据都保存在浏览器，同源共享。即相同的域下可以修改读取。</p>\n</li>\n<li><p>2、不同点：</p>\n<p>   <font color=\"red\">大小数量： </font>IE6或更低版本最多20个cookie，IE7+可以有50个。 cookie大小4KB左右，超过部分会被截掉。sessionStoage，localStoage大小可达5M。</p>\n<p>   <font color=\"red\">传输： </font>每次请求cookie都会发送到服务器，然后回传给浏览器，sessionStoage,localStoage不会自动发送到服务器端。</p>\n<p> <font color=\"red\">有效性：</font>cookie可以设置path路径，限制只属于某个路径。在过期时间之前都有效，即使窗口和浏览器关闭。sesesionStorage当前窗口有效，关闭窗口自动失效。localStorage始终有效，即使窗口和浏览器关闭。</p>\n<p> <font color=\"red\">作用域：</font>cookie在同源页面中共享，sessionStorage只能在当前页有效，localStorage在所有同源页面中共享。</p>\n<p>  <font color=\"red\">操作方法：</font>Cookie的修改读取方法需自己实现，sessionStorage，localStorage提供了get，set方法。    </p>\n</li>\n</ul>\n<p>注：cookie是不可以或缺的，cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。</p>\n"},{"title":"类class","date":"2019-01-07T07:48:34.000Z","_content":"","source":"_posts/类class.md","raw":"---\ntitle: 类class\ndate: 2019-01-07 15:48:34\ntags:\n---\n","slug":"类class","published":1,"updated":"2019-01-07T07:48:34.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cwz004qt09zqe96phyr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"跨域","date":"2019-01-01T14:00:08.000Z","_content":"\njsonp跨域是通过动态添加script标签实现跨域的由于script标签只能发送get请求所以jsonp不支持post方式的跨域JSONP的最基本的原理是：动态添加一个<script>标签而script标签的src属性是没有跨域的限制的。这样说来，这种跨域方式其实与ajaxXmlHttpRequest协议无关了。可以说jsonp的方式原理上和<scriptsrc=\"http://跨域/...xx.js\"></script>是一致的，因为他的原理实际上就是 使用js的script标签 进行传参，那么必然是get方式的了，和浏览器中敲入一个url一样","source":"_posts/跨域.md","raw":"---\ntitle: 跨域\ndate: 2019-01-01 22:00:08\ncategories: \n- 基础前端技术\ntags: [跨域]\n---\n\njsonp跨域是通过动态添加script标签实现跨域的由于script标签只能发送get请求所以jsonp不支持post方式的跨域JSONP的最基本的原理是：动态添加一个<script>标签而script标签的src属性是没有跨域的限制的。这样说来，这种跨域方式其实与ajaxXmlHttpRequest协议无关了。可以说jsonp的方式原理上和<scriptsrc=\"http://跨域/...xx.js\"></script>是一致的，因为他的原理实际上就是 使用js的script标签 进行传参，那么必然是get方式的了，和浏览器中敲入一个url一样","slug":"跨域","published":1,"updated":"2019-07-17T11:39:10.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cx1004ut09zlr87ih5a","content":"<p>jsonp跨域是通过动态添加script标签实现跨域的由于script标签只能发送get请求所以jsonp不支持post方式的跨域JSONP的最基本的原理是：动态添加一个<script>标签而script标签的src属性是没有跨域的限制的。这样说来，这种跨域方式其实与ajaxXmlHttpRequest协议无关了。可以说jsonp的方式原理上和&lt;scriptsrc=”http://跨域/…xx.js”&gt;</script>是一致的，因为他的原理实际上就是 使用js的script标签 进行传参，那么必然是get方式的了，和浏览器中敲入一个url一样</p>\n","site":{"data":{}},"excerpt":"","more":"<p>jsonp跨域是通过动态添加script标签实现跨域的由于script标签只能发送get请求所以jsonp不支持post方式的跨域JSONP的最基本的原理是：动态添加一个<script>标签而script标签的src属性是没有跨域的限制的。这样说来，这种跨域方式其实与ajaxXmlHttpRequest协议无关了。可以说jsonp的方式原理上和&lt;scriptsrc=”http://跨域/…xx.js”&gt;</script>是一致的，因为他的原理实际上就是 使用js的script标签 进行传参，那么必然是get方式的了，和浏览器中敲入一个url一样</p>\n"},{"title":"遍历数组的常用方法","date":"2019-01-02T02:18:07.000Z","_content":"\n# 遍历数组的常用方法\n\n## 最传统方法 for循环\n```\nvar arr = [\"first\",\"second\",\"third\",\"fourth\",3,5,8];\nfor(var i = 0; i < arr.length;i++){\n    console.log(arr[i]);\n}\n    //输出：\n     first\n     second\n     third\n     fourth\n     3\n     5\n     8\n```\n## for… in\n```\nvar arr = [\"first\",\"second\",'third' ,\"fourth\",3,5,8];\nfor(var i in arr){\n     console.log(arr[i] +'/' + i);\n }\n //输出结果为：\n     first/0\n     second/1\n     third/2\n     fourth/3\n     3/4\n     5/5\n     8/6\n```\n## for…of\n```\n var arr = [\"first\",\"second\",'third' ,\"fourth\",3,5,8];\n for(var item of arr){\n     console.log(item);\n }\n //输出结果：\n     first\n     second\n     third\n     fourth\n     3\n     5\n     8\n```\n虽然for… in 、for…of都能够变历数组，但是两者还是有很大区别的，先说结论：\n>两者的主要区别在于：\n- 他们的迭代方式推荐在循环对象属性的时候，使用for in，在遍历数组的时候推荐使用for of\n- for…in 循环出来的是key, for…of循环出来的是value\n- for…in 是ES5 标准，for …of 是ES6标准，兼容性可能存在些问题，请注意使用\n- for…of 不能遍历普通的对象，需要和Object.keys()搭配使用。\n\n```\nvar arr = [\"first\",\"second\",'third' ,\"fourth\",3,5,8];\n    //给数组添加新属性\n    arr.name = 'zhangsan';\n    for(var item of arr){\n        console.log(item);\n    }\n    //输出：\n        first \n        second\n        third\n        fourth\n        3\n        5\n        8\n    console.log('--------------分隔符----------------');\n    for(var item in arr){\n        console.log(arr[item] + '/' + item);\n    }\n    //输出：\n     first/0\n     second/1\n     third/2\n     fourth/3\n     3/4\n     5/5\n     8/6 \n     zhangsan/name\n```\n循环除了遍历数组元素外，还会遍历自定义属性，for...of只可以循环可迭代的可迭代属性，不可迭代属性在循环中被忽略了\n\n## foreach方法\n被传递给foreach的函数会在数组的每个元素上执行一次，元素作为参数传递给该函数\n```\n    var arr = [\"first\",\"second\",\"third\",\"fourth\",3,5,8];\n    //element 表示arr的单元项，index 表示arr单元项对应的索引值\n    arr.forEach(function(element,index){\n        console.log(element + '/' + index);\n    })\n    //输出结果：\n      first/0\n      second/1\n      third/2\n      fourth/3\n      3/4\n      5/5\n      8/6\n```\n>注意：未赋值的值是不会在foreach循环迭代的，但是手动赋值为undefined的元素是会被列出的\n\n```\nvar arr1 = [\"first\",\"second\", ,\"fourth\",3,5,8];\narr1.forEach(function(element,index){\n    console.log(element + '/' + index);\n})\n  //输出结果\n     first/0\n     second/1\n     fourth/3\n     3/4\n     5/5\n     8/6\n```\n\n## map遍历数组\n并通过callback对数组元素进行操作，并将所有操作结果放入数组中并返回该数组\n```\n var arr = [\"first\",\"second\",'third' ,\"fourth\"];\n var arr2 = arr.map(function(item,index,arr){\n    return item.toUpperCase();\n })\n console.log(arr2);\n //输出：\n [FIRST,SECOND,THIRD, FOURTH]\n```\n## filter( )\n返回一个包含所有在回调函数上返回为true的元素新数组，回调函数在此担任的是过滤器的角色,当元素符和条件，过滤器就返回true,而filter则会返回所有符合过滤条件的元素\n```\nvar arr = [\"first\",\"second\",'third' ,\"fourth\",3,5,8];\n    var arr3 = arr.filter(function(item,index,arr){\n        if(typeof item == 'number'){\n            return item;\n        }\n    })\n    console.log(arr3);\n    //输出结果： \n    [3,5,8] \n```\n## every() \n当数组中的每一个元素在callback上被返回true时就返回true注意：要求每一个单元项都返回true时才为true)\nevery()与filter()的区别是：后者会返回所有符合过滤条件的元素；前者会判断是不是数组中的所有元素都符合条件，并且返回的是布尔值\n```\nvar arr = [\"first\",\"second\",'third' ,\"fourth\",3,5,8];\nvar bol = arr.every(function(item, index, array){\n    if(typeof item == 'string'){\n        return item;\n    }\n })\n console.log(bol); //false\n```\n## some()\n只要数组中有一项在callback上就返回true\nevery()与some()的区别是：前者要求所有元素都符合条件才返回true,后者要求只要有符合条件的就返回true\n```\nvar arr = [\"first\",\"second\",'third' ,\"fourth\",3,5,8];\n    var bol = arr.some(function(item, index, array){\n        if(typeof item == 'string'){\n            return item;\n        }\n    })\n    console.log(bol); //true\n```\n## reduce()\nreduce() 方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始缩减，最终为一个值。\n```\n[0, 1, 2, 3, 4].reduce(function(previousValue, currentValue, index, array){\n return previousValue + currentValue;\n});\n```\nreduce还有第二个参数，我们可以把这个参数作为第一次调用callback时的第一个参数，上面这个例子因为没有第二个参数，所以直接从数组的第二项开始，如果我们给了第二个参数为5\n```\n[0, 1, 2, 3, 4].reduce(function(previousValue, currentValue, index, array){\n return previousValue + currentValue;\n},5);\n```\n第一次调用的previousValue的值就用传入的第二个参数代替\n\n## reduceRight()\nreduceRight()方法的功能和reduce()功能是一样的，不同的是reduceRight()从数组的末尾向前将数组中的数组项做累加。\n\n# 数组方法总结\n对于数组，最关心的的两个问题：返回值是什么，会不会对原始数组造成影响，典型的例子就是 splice 和 slice 方法。对于那些返回原数组的函数，我们可以直接调用数组的链式调用，array.filter().sort().reverse()。\n下面用表格列出来所有方法的功能：\n![](array01.png)\n具体可参考：[https://segmentfault.com/a/1190000008147878](https://segmentfault.com/a/1190000008147878)","source":"_posts/遍历数组的常用方法.md","raw":"---\ntitle: 遍历数组的常用方法\ndate: 2019-01-02 10:18:07\ncategories: \n- 基础前端技术\ntags: [数组]\n---\n\n# 遍历数组的常用方法\n\n## 最传统方法 for循环\n```\nvar arr = [\"first\",\"second\",\"third\",\"fourth\",3,5,8];\nfor(var i = 0; i < arr.length;i++){\n    console.log(arr[i]);\n}\n    //输出：\n     first\n     second\n     third\n     fourth\n     3\n     5\n     8\n```\n## for… in\n```\nvar arr = [\"first\",\"second\",'third' ,\"fourth\",3,5,8];\nfor(var i in arr){\n     console.log(arr[i] +'/' + i);\n }\n //输出结果为：\n     first/0\n     second/1\n     third/2\n     fourth/3\n     3/4\n     5/5\n     8/6\n```\n## for…of\n```\n var arr = [\"first\",\"second\",'third' ,\"fourth\",3,5,8];\n for(var item of arr){\n     console.log(item);\n }\n //输出结果：\n     first\n     second\n     third\n     fourth\n     3\n     5\n     8\n```\n虽然for… in 、for…of都能够变历数组，但是两者还是有很大区别的，先说结论：\n>两者的主要区别在于：\n- 他们的迭代方式推荐在循环对象属性的时候，使用for in，在遍历数组的时候推荐使用for of\n- for…in 循环出来的是key, for…of循环出来的是value\n- for…in 是ES5 标准，for …of 是ES6标准，兼容性可能存在些问题，请注意使用\n- for…of 不能遍历普通的对象，需要和Object.keys()搭配使用。\n\n```\nvar arr = [\"first\",\"second\",'third' ,\"fourth\",3,5,8];\n    //给数组添加新属性\n    arr.name = 'zhangsan';\n    for(var item of arr){\n        console.log(item);\n    }\n    //输出：\n        first \n        second\n        third\n        fourth\n        3\n        5\n        8\n    console.log('--------------分隔符----------------');\n    for(var item in arr){\n        console.log(arr[item] + '/' + item);\n    }\n    //输出：\n     first/0\n     second/1\n     third/2\n     fourth/3\n     3/4\n     5/5\n     8/6 \n     zhangsan/name\n```\n循环除了遍历数组元素外，还会遍历自定义属性，for...of只可以循环可迭代的可迭代属性，不可迭代属性在循环中被忽略了\n\n## foreach方法\n被传递给foreach的函数会在数组的每个元素上执行一次，元素作为参数传递给该函数\n```\n    var arr = [\"first\",\"second\",\"third\",\"fourth\",3,5,8];\n    //element 表示arr的单元项，index 表示arr单元项对应的索引值\n    arr.forEach(function(element,index){\n        console.log(element + '/' + index);\n    })\n    //输出结果：\n      first/0\n      second/1\n      third/2\n      fourth/3\n      3/4\n      5/5\n      8/6\n```\n>注意：未赋值的值是不会在foreach循环迭代的，但是手动赋值为undefined的元素是会被列出的\n\n```\nvar arr1 = [\"first\",\"second\", ,\"fourth\",3,5,8];\narr1.forEach(function(element,index){\n    console.log(element + '/' + index);\n})\n  //输出结果\n     first/0\n     second/1\n     fourth/3\n     3/4\n     5/5\n     8/6\n```\n\n## map遍历数组\n并通过callback对数组元素进行操作，并将所有操作结果放入数组中并返回该数组\n```\n var arr = [\"first\",\"second\",'third' ,\"fourth\"];\n var arr2 = arr.map(function(item,index,arr){\n    return item.toUpperCase();\n })\n console.log(arr2);\n //输出：\n [FIRST,SECOND,THIRD, FOURTH]\n```\n## filter( )\n返回一个包含所有在回调函数上返回为true的元素新数组，回调函数在此担任的是过滤器的角色,当元素符和条件，过滤器就返回true,而filter则会返回所有符合过滤条件的元素\n```\nvar arr = [\"first\",\"second\",'third' ,\"fourth\",3,5,8];\n    var arr3 = arr.filter(function(item,index,arr){\n        if(typeof item == 'number'){\n            return item;\n        }\n    })\n    console.log(arr3);\n    //输出结果： \n    [3,5,8] \n```\n## every() \n当数组中的每一个元素在callback上被返回true时就返回true注意：要求每一个单元项都返回true时才为true)\nevery()与filter()的区别是：后者会返回所有符合过滤条件的元素；前者会判断是不是数组中的所有元素都符合条件，并且返回的是布尔值\n```\nvar arr = [\"first\",\"second\",'third' ,\"fourth\",3,5,8];\nvar bol = arr.every(function(item, index, array){\n    if(typeof item == 'string'){\n        return item;\n    }\n })\n console.log(bol); //false\n```\n## some()\n只要数组中有一项在callback上就返回true\nevery()与some()的区别是：前者要求所有元素都符合条件才返回true,后者要求只要有符合条件的就返回true\n```\nvar arr = [\"first\",\"second\",'third' ,\"fourth\",3,5,8];\n    var bol = arr.some(function(item, index, array){\n        if(typeof item == 'string'){\n            return item;\n        }\n    })\n    console.log(bol); //true\n```\n## reduce()\nreduce() 方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始缩减，最终为一个值。\n```\n[0, 1, 2, 3, 4].reduce(function(previousValue, currentValue, index, array){\n return previousValue + currentValue;\n});\n```\nreduce还有第二个参数，我们可以把这个参数作为第一次调用callback时的第一个参数，上面这个例子因为没有第二个参数，所以直接从数组的第二项开始，如果我们给了第二个参数为5\n```\n[0, 1, 2, 3, 4].reduce(function(previousValue, currentValue, index, array){\n return previousValue + currentValue;\n},5);\n```\n第一次调用的previousValue的值就用传入的第二个参数代替\n\n## reduceRight()\nreduceRight()方法的功能和reduce()功能是一样的，不同的是reduceRight()从数组的末尾向前将数组中的数组项做累加。\n\n# 数组方法总结\n对于数组，最关心的的两个问题：返回值是什么，会不会对原始数组造成影响，典型的例子就是 splice 和 slice 方法。对于那些返回原数组的函数，我们可以直接调用数组的链式调用，array.filter().sort().reverse()。\n下面用表格列出来所有方法的功能：\n![](array01.png)\n具体可参考：[https://segmentfault.com/a/1190000008147878](https://segmentfault.com/a/1190000008147878)","slug":"遍历数组的常用方法","published":1,"updated":"2019-07-17T11:39:10.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cy0005yt09zc9ldniu0","content":"<h1 id=\"遍历数组的常用方法\"><a href=\"#遍历数组的常用方法\" class=\"headerlink\" title=\"遍历数组的常用方法\"></a>遍历数组的常用方法</h1><h2 id=\"最传统方法-for循环\"><a href=\"#最传统方法-for循环\" class=\"headerlink\" title=\"最传统方法 for循环\"></a>最传统方法 for循环</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&quot;first&quot;,&quot;second&quot;,&quot;third&quot;,&quot;fourth&quot;,3,5,8];</span><br><span class=\"line\">for(var i = 0; i &lt; arr.length;i++)&#123;</span><br><span class=\"line\">    console.log(arr[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    //输出：</span><br><span class=\"line\">     first</span><br><span class=\"line\">     second</span><br><span class=\"line\">     third</span><br><span class=\"line\">     fourth</span><br><span class=\"line\">     3</span><br><span class=\"line\">     5</span><br><span class=\"line\">     8</span><br></pre></td></tr></table></figure>\n<h2 id=\"for…-in\"><a href=\"#for…-in\" class=\"headerlink\" title=\"for… in\"></a>for… in</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&quot;first&quot;,&quot;second&quot;,&apos;third&apos; ,&quot;fourth&quot;,3,5,8];</span><br><span class=\"line\">for(var i in arr)&#123;</span><br><span class=\"line\">     console.log(arr[i] +&apos;/&apos; + i);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> //输出结果为：</span><br><span class=\"line\">     first/0</span><br><span class=\"line\">     second/1</span><br><span class=\"line\">     third/2</span><br><span class=\"line\">     fourth/3</span><br><span class=\"line\">     3/4</span><br><span class=\"line\">     5/5</span><br><span class=\"line\">     8/6</span><br></pre></td></tr></table></figure>\n<h2 id=\"for…of\"><a href=\"#for…of\" class=\"headerlink\" title=\"for…of\"></a>for…of</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&quot;first&quot;,&quot;second&quot;,&apos;third&apos; ,&quot;fourth&quot;,3,5,8];</span><br><span class=\"line\">for(var item of arr)&#123;</span><br><span class=\"line\">    console.log(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出结果：</span><br><span class=\"line\">    first</span><br><span class=\"line\">    second</span><br><span class=\"line\">    third</span><br><span class=\"line\">    fourth</span><br><span class=\"line\">    3</span><br><span class=\"line\">    5</span><br><span class=\"line\">    8</span><br></pre></td></tr></table></figure>\n<p>虽然for… in 、for…of都能够变历数组，但是两者还是有很大区别的，先说结论：</p>\n<blockquote>\n<p>两者的主要区别在于：</p>\n<ul>\n<li>他们的迭代方式推荐在循环对象属性的时候，使用for in，在遍历数组的时候推荐使用for of</li>\n<li>for…in 循环出来的是key, for…of循环出来的是value</li>\n<li>for…in 是ES5 标准，for …of 是ES6标准，兼容性可能存在些问题，请注意使用</li>\n<li>for…of 不能遍历普通的对象，需要和Object.keys()搭配使用。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&quot;first&quot;,&quot;second&quot;,&apos;third&apos; ,&quot;fourth&quot;,3,5,8];</span><br><span class=\"line\">    //给数组添加新属性</span><br><span class=\"line\">    arr.name = &apos;zhangsan&apos;;</span><br><span class=\"line\">    for(var item of arr)&#123;</span><br><span class=\"line\">        console.log(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //输出：</span><br><span class=\"line\">        first </span><br><span class=\"line\">        second</span><br><span class=\"line\">        third</span><br><span class=\"line\">        fourth</span><br><span class=\"line\">        3</span><br><span class=\"line\">        5</span><br><span class=\"line\">        8</span><br><span class=\"line\">    console.log(&apos;--------------分隔符----------------&apos;);</span><br><span class=\"line\">    for(var item in arr)&#123;</span><br><span class=\"line\">        console.log(arr[item] + &apos;/&apos; + item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //输出：</span><br><span class=\"line\">     first/0</span><br><span class=\"line\">     second/1</span><br><span class=\"line\">     third/2</span><br><span class=\"line\">     fourth/3</span><br><span class=\"line\">     3/4</span><br><span class=\"line\">     5/5</span><br><span class=\"line\">     8/6 </span><br><span class=\"line\">     zhangsan/name</span><br></pre></td></tr></table></figure>\n<p>循环除了遍历数组元素外，还会遍历自定义属性，for…of只可以循环可迭代的可迭代属性，不可迭代属性在循环中被忽略了</p>\n<h2 id=\"foreach方法\"><a href=\"#foreach方法\" class=\"headerlink\" title=\"foreach方法\"></a>foreach方法</h2><p>被传递给foreach的函数会在数组的每个元素上执行一次，元素作为参数传递给该函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&quot;first&quot;,&quot;second&quot;,&quot;third&quot;,&quot;fourth&quot;,3,5,8];</span><br><span class=\"line\">//element 表示arr的单元项，index 表示arr单元项对应的索引值</span><br><span class=\"line\">arr.forEach(function(element,index)&#123;</span><br><span class=\"line\">    console.log(element + &apos;/&apos; + index);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//输出结果：</span><br><span class=\"line\">  first/0</span><br><span class=\"line\">  second/1</span><br><span class=\"line\">  third/2</span><br><span class=\"line\">  fourth/3</span><br><span class=\"line\">  3/4</span><br><span class=\"line\">  5/5</span><br><span class=\"line\">  8/6</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：未赋值的值是不会在foreach循环迭代的，但是手动赋值为undefined的元素是会被列出的</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr1 = [&quot;first&quot;,&quot;second&quot;, ,&quot;fourth&quot;,3,5,8];</span><br><span class=\"line\">arr1.forEach(function(element,index)&#123;</span><br><span class=\"line\">    console.log(element + &apos;/&apos; + index);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  //输出结果</span><br><span class=\"line\">     first/0</span><br><span class=\"line\">     second/1</span><br><span class=\"line\">     fourth/3</span><br><span class=\"line\">     3/4</span><br><span class=\"line\">     5/5</span><br><span class=\"line\">     8/6</span><br></pre></td></tr></table></figure>\n<h2 id=\"map遍历数组\"><a href=\"#map遍历数组\" class=\"headerlink\" title=\"map遍历数组\"></a>map遍历数组</h2><p>并通过callback对数组元素进行操作，并将所有操作结果放入数组中并返回该数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&quot;first&quot;,&quot;second&quot;,&apos;third&apos; ,&quot;fourth&quot;];</span><br><span class=\"line\">var arr2 = arr.map(function(item,index,arr)&#123;</span><br><span class=\"line\">   return item.toUpperCase();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(arr2);</span><br><span class=\"line\">//输出：</span><br><span class=\"line\">[FIRST,SECOND,THIRD, FOURTH]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter( )\"></a>filter( )</h2><p>返回一个包含所有在回调函数上返回为true的元素新数组，回调函数在此担任的是过滤器的角色,当元素符和条件，过滤器就返回true,而filter则会返回所有符合过滤条件的元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&quot;first&quot;,&quot;second&quot;,&apos;third&apos; ,&quot;fourth&quot;,3,5,8];</span><br><span class=\"line\">    var arr3 = arr.filter(function(item,index,arr)&#123;</span><br><span class=\"line\">        if(typeof item == &apos;number&apos;)&#123;</span><br><span class=\"line\">            return item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    console.log(arr3);</span><br><span class=\"line\">    //输出结果： </span><br><span class=\"line\">    [3,5,8]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h2><p>当数组中的每一个元素在callback上被返回true时就返回true注意：要求每一个单元项都返回true时才为true)<br>every()与filter()的区别是：后者会返回所有符合过滤条件的元素；前者会判断是不是数组中的所有元素都符合条件，并且返回的是布尔值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&quot;first&quot;,&quot;second&quot;,&apos;third&apos; ,&quot;fourth&quot;,3,5,8];</span><br><span class=\"line\">var bol = arr.every(function(item, index, array)&#123;</span><br><span class=\"line\">    if(typeof item == &apos;string&apos;)&#123;</span><br><span class=\"line\">        return item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"> console.log(bol); //false</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h2><p>只要数组中有一项在callback上就返回true<br>every()与some()的区别是：前者要求所有元素都符合条件才返回true,后者要求只要有符合条件的就返回true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&quot;first&quot;,&quot;second&quot;,&apos;third&apos; ,&quot;fourth&quot;,3,5,8];</span><br><span class=\"line\">    var bol = arr.some(function(item, index, array)&#123;</span><br><span class=\"line\">        if(typeof item == &apos;string&apos;)&#123;</span><br><span class=\"line\">            return item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    console.log(bol); //true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h2><p>reduce() 方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始缩减，最终为一个值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0, 1, 2, 3, 4].reduce(function(previousValue, currentValue, index, array)&#123;</span><br><span class=\"line\"> return previousValue + currentValue;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>reduce还有第二个参数，我们可以把这个参数作为第一次调用callback时的第一个参数，上面这个例子因为没有第二个参数，所以直接从数组的第二项开始，如果我们给了第二个参数为5<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0, 1, 2, 3, 4].reduce(function(previousValue, currentValue, index, array)&#123;</span><br><span class=\"line\"> return previousValue + currentValue;</span><br><span class=\"line\">&#125;,5);</span><br></pre></td></tr></table></figure></p>\n<p>第一次调用的previousValue的值就用传入的第二个参数代替</p>\n<h2 id=\"reduceRight\"><a href=\"#reduceRight\" class=\"headerlink\" title=\"reduceRight()\"></a>reduceRight()</h2><p>reduceRight()方法的功能和reduce()功能是一样的，不同的是reduceRight()从数组的末尾向前将数组中的数组项做累加。</p>\n<h1 id=\"数组方法总结\"><a href=\"#数组方法总结\" class=\"headerlink\" title=\"数组方法总结\"></a>数组方法总结</h1><p>对于数组，最关心的的两个问题：返回值是什么，会不会对原始数组造成影响，典型的例子就是 splice 和 slice 方法。对于那些返回原数组的函数，我们可以直接调用数组的链式调用，array.filter().sort().reverse()。<br>下面用表格列出来所有方法的功能：<br><img src=\"/2019/01/02/遍历数组的常用方法/array01.png\" alt=\"\"><br>具体可参考：<a href=\"https://segmentfault.com/a/1190000008147878\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000008147878</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"遍历数组的常用方法\"><a href=\"#遍历数组的常用方法\" class=\"headerlink\" title=\"遍历数组的常用方法\"></a>遍历数组的常用方法</h1><h2 id=\"最传统方法-for循环\"><a href=\"#最传统方法-for循环\" class=\"headerlink\" title=\"最传统方法 for循环\"></a>最传统方法 for循环</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&quot;first&quot;,&quot;second&quot;,&quot;third&quot;,&quot;fourth&quot;,3,5,8];</span><br><span class=\"line\">for(var i = 0; i &lt; arr.length;i++)&#123;</span><br><span class=\"line\">    console.log(arr[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    //输出：</span><br><span class=\"line\">     first</span><br><span class=\"line\">     second</span><br><span class=\"line\">     third</span><br><span class=\"line\">     fourth</span><br><span class=\"line\">     3</span><br><span class=\"line\">     5</span><br><span class=\"line\">     8</span><br></pre></td></tr></table></figure>\n<h2 id=\"for…-in\"><a href=\"#for…-in\" class=\"headerlink\" title=\"for… in\"></a>for… in</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&quot;first&quot;,&quot;second&quot;,&apos;third&apos; ,&quot;fourth&quot;,3,5,8];</span><br><span class=\"line\">for(var i in arr)&#123;</span><br><span class=\"line\">     console.log(arr[i] +&apos;/&apos; + i);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> //输出结果为：</span><br><span class=\"line\">     first/0</span><br><span class=\"line\">     second/1</span><br><span class=\"line\">     third/2</span><br><span class=\"line\">     fourth/3</span><br><span class=\"line\">     3/4</span><br><span class=\"line\">     5/5</span><br><span class=\"line\">     8/6</span><br></pre></td></tr></table></figure>\n<h2 id=\"for…of\"><a href=\"#for…of\" class=\"headerlink\" title=\"for…of\"></a>for…of</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&quot;first&quot;,&quot;second&quot;,&apos;third&apos; ,&quot;fourth&quot;,3,5,8];</span><br><span class=\"line\">for(var item of arr)&#123;</span><br><span class=\"line\">    console.log(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出结果：</span><br><span class=\"line\">    first</span><br><span class=\"line\">    second</span><br><span class=\"line\">    third</span><br><span class=\"line\">    fourth</span><br><span class=\"line\">    3</span><br><span class=\"line\">    5</span><br><span class=\"line\">    8</span><br></pre></td></tr></table></figure>\n<p>虽然for… in 、for…of都能够变历数组，但是两者还是有很大区别的，先说结论：</p>\n<blockquote>\n<p>两者的主要区别在于：</p>\n<ul>\n<li>他们的迭代方式推荐在循环对象属性的时候，使用for in，在遍历数组的时候推荐使用for of</li>\n<li>for…in 循环出来的是key, for…of循环出来的是value</li>\n<li>for…in 是ES5 标准，for …of 是ES6标准，兼容性可能存在些问题，请注意使用</li>\n<li>for…of 不能遍历普通的对象，需要和Object.keys()搭配使用。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&quot;first&quot;,&quot;second&quot;,&apos;third&apos; ,&quot;fourth&quot;,3,5,8];</span><br><span class=\"line\">    //给数组添加新属性</span><br><span class=\"line\">    arr.name = &apos;zhangsan&apos;;</span><br><span class=\"line\">    for(var item of arr)&#123;</span><br><span class=\"line\">        console.log(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //输出：</span><br><span class=\"line\">        first </span><br><span class=\"line\">        second</span><br><span class=\"line\">        third</span><br><span class=\"line\">        fourth</span><br><span class=\"line\">        3</span><br><span class=\"line\">        5</span><br><span class=\"line\">        8</span><br><span class=\"line\">    console.log(&apos;--------------分隔符----------------&apos;);</span><br><span class=\"line\">    for(var item in arr)&#123;</span><br><span class=\"line\">        console.log(arr[item] + &apos;/&apos; + item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //输出：</span><br><span class=\"line\">     first/0</span><br><span class=\"line\">     second/1</span><br><span class=\"line\">     third/2</span><br><span class=\"line\">     fourth/3</span><br><span class=\"line\">     3/4</span><br><span class=\"line\">     5/5</span><br><span class=\"line\">     8/6 </span><br><span class=\"line\">     zhangsan/name</span><br></pre></td></tr></table></figure>\n<p>循环除了遍历数组元素外，还会遍历自定义属性，for…of只可以循环可迭代的可迭代属性，不可迭代属性在循环中被忽略了</p>\n<h2 id=\"foreach方法\"><a href=\"#foreach方法\" class=\"headerlink\" title=\"foreach方法\"></a>foreach方法</h2><p>被传递给foreach的函数会在数组的每个元素上执行一次，元素作为参数传递给该函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&quot;first&quot;,&quot;second&quot;,&quot;third&quot;,&quot;fourth&quot;,3,5,8];</span><br><span class=\"line\">//element 表示arr的单元项，index 表示arr单元项对应的索引值</span><br><span class=\"line\">arr.forEach(function(element,index)&#123;</span><br><span class=\"line\">    console.log(element + &apos;/&apos; + index);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//输出结果：</span><br><span class=\"line\">  first/0</span><br><span class=\"line\">  second/1</span><br><span class=\"line\">  third/2</span><br><span class=\"line\">  fourth/3</span><br><span class=\"line\">  3/4</span><br><span class=\"line\">  5/5</span><br><span class=\"line\">  8/6</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：未赋值的值是不会在foreach循环迭代的，但是手动赋值为undefined的元素是会被列出的</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr1 = [&quot;first&quot;,&quot;second&quot;, ,&quot;fourth&quot;,3,5,8];</span><br><span class=\"line\">arr1.forEach(function(element,index)&#123;</span><br><span class=\"line\">    console.log(element + &apos;/&apos; + index);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  //输出结果</span><br><span class=\"line\">     first/0</span><br><span class=\"line\">     second/1</span><br><span class=\"line\">     fourth/3</span><br><span class=\"line\">     3/4</span><br><span class=\"line\">     5/5</span><br><span class=\"line\">     8/6</span><br></pre></td></tr></table></figure>\n<h2 id=\"map遍历数组\"><a href=\"#map遍历数组\" class=\"headerlink\" title=\"map遍历数组\"></a>map遍历数组</h2><p>并通过callback对数组元素进行操作，并将所有操作结果放入数组中并返回该数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&quot;first&quot;,&quot;second&quot;,&apos;third&apos; ,&quot;fourth&quot;];</span><br><span class=\"line\">var arr2 = arr.map(function(item,index,arr)&#123;</span><br><span class=\"line\">   return item.toUpperCase();</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(arr2);</span><br><span class=\"line\">//输出：</span><br><span class=\"line\">[FIRST,SECOND,THIRD, FOURTH]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter( )\"></a>filter( )</h2><p>返回一个包含所有在回调函数上返回为true的元素新数组，回调函数在此担任的是过滤器的角色,当元素符和条件，过滤器就返回true,而filter则会返回所有符合过滤条件的元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&quot;first&quot;,&quot;second&quot;,&apos;third&apos; ,&quot;fourth&quot;,3,5,8];</span><br><span class=\"line\">    var arr3 = arr.filter(function(item,index,arr)&#123;</span><br><span class=\"line\">        if(typeof item == &apos;number&apos;)&#123;</span><br><span class=\"line\">            return item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    console.log(arr3);</span><br><span class=\"line\">    //输出结果： </span><br><span class=\"line\">    [3,5,8]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"every\"><a href=\"#every\" class=\"headerlink\" title=\"every()\"></a>every()</h2><p>当数组中的每一个元素在callback上被返回true时就返回true注意：要求每一个单元项都返回true时才为true)<br>every()与filter()的区别是：后者会返回所有符合过滤条件的元素；前者会判断是不是数组中的所有元素都符合条件，并且返回的是布尔值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&quot;first&quot;,&quot;second&quot;,&apos;third&apos; ,&quot;fourth&quot;,3,5,8];</span><br><span class=\"line\">var bol = arr.every(function(item, index, array)&#123;</span><br><span class=\"line\">    if(typeof item == &apos;string&apos;)&#123;</span><br><span class=\"line\">        return item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\"> console.log(bol); //false</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"some\"><a href=\"#some\" class=\"headerlink\" title=\"some()\"></a>some()</h2><p>只要数组中有一项在callback上就返回true<br>every()与some()的区别是：前者要求所有元素都符合条件才返回true,后者要求只要有符合条件的就返回true<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [&quot;first&quot;,&quot;second&quot;,&apos;third&apos; ,&quot;fourth&quot;,3,5,8];</span><br><span class=\"line\">    var bol = arr.some(function(item, index, array)&#123;</span><br><span class=\"line\">        if(typeof item == &apos;string&apos;)&#123;</span><br><span class=\"line\">            return item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    console.log(bol); //true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h2><p>reduce() 方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始缩减，最终为一个值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0, 1, 2, 3, 4].reduce(function(previousValue, currentValue, index, array)&#123;</span><br><span class=\"line\"> return previousValue + currentValue;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>reduce还有第二个参数，我们可以把这个参数作为第一次调用callback时的第一个参数，上面这个例子因为没有第二个参数，所以直接从数组的第二项开始，如果我们给了第二个参数为5<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[0, 1, 2, 3, 4].reduce(function(previousValue, currentValue, index, array)&#123;</span><br><span class=\"line\"> return previousValue + currentValue;</span><br><span class=\"line\">&#125;,5);</span><br></pre></td></tr></table></figure></p>\n<p>第一次调用的previousValue的值就用传入的第二个参数代替</p>\n<h2 id=\"reduceRight\"><a href=\"#reduceRight\" class=\"headerlink\" title=\"reduceRight()\"></a>reduceRight()</h2><p>reduceRight()方法的功能和reduce()功能是一样的，不同的是reduceRight()从数组的末尾向前将数组中的数组项做累加。</p>\n<h1 id=\"数组方法总结\"><a href=\"#数组方法总结\" class=\"headerlink\" title=\"数组方法总结\"></a>数组方法总结</h1><p>对于数组，最关心的的两个问题：返回值是什么，会不会对原始数组造成影响，典型的例子就是 splice 和 slice 方法。对于那些返回原数组的函数，我们可以直接调用数组的链式调用，array.filter().sort().reverse()。<br>下面用表格列出来所有方法的功能：<br><img src=\"/2019/01/02/遍历数组的常用方法/array01.png\" alt=\"\"><br>具体可参考：<a href=\"https://segmentfault.com/a/1190000008147878\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000008147878</a></p>\n"},{"title":"闭包","date":"2019-01-02T02:54:13.000Z","_content":"\n# 闭包\n\n## 闭包理解\n### ** 特性：\n函数嵌套函数；\n函数内部可以引用函数外部的参数和变量；\n函数变量和参数不会被垃圾回收机制回收；\n### **优缺点：\n优点 \n- 希望一个变量长期驻扎在内存中 \n- 避免全局变量的污染 \n- 私有成员的存在 \n缺点 \n- 常驻内存，增大内存使用量，使用不当回造成内存泄漏；\n\n### ** 自执行函数的好处\n隔离作用域，避免全局作用域污染\n模拟块级作用域\n\n应用的两种情况：函数作为返回值、函数作为参数传递。\n### 第一，函数作为返回值：\n``` bash\nfunction fn(){\n    var max = 10;\n    return function bar(x){\n        if (x>max){\n            console.log(x)\n        }\n    }\n}\nvar f1 = fn();\nf1(15);\n```\n如上代码，bar函数作为返回值，赋值给f1变量。执行f1(15)时，用到了fn作用域下的max变量的值\n### 第二，函数作为参数被传递\n``` bash\nvar max = 10,\nfn = function(x){\n    if(x>max){\n        console.log(x)\n    }\n};\n(function(f){\n    var max = 100;\n    f(15);\n})(fn)\n```\n如上代码中，fn函数作为一个参数被传递进入另一个函数，赋值给f参数。执行f(15)时，max变量的取值是10，而不是100。\n## 闭包与作用域\n### 变量的作用域,是指变量的有效范围\n当在函数中声明一个变量的时候,如果该变量前面没有带上关键字 var,这个变量就会成为全局变量 ,这当然是一种很容易造成命名冲突的做法。\n另外一种情况是用 var 关键字在函数中声明变量,这时候的变量即是局部变量,只有在该函数内部才能访问到这个变量,在函数外面是访问不到的。\n\n例一\n``` bash\nvar func=function(){\n    var a=1;\n    console.log(a); //输出:1 \n};\nfunc();\nconsole.log ( a ); // Uncaught ReferenceError: a is not defined\n```\n\n例二，变量的搜索是从内到外而非从外到 内的。\n``` bash\nvar a=1;\nvar func1 = function(){ \n    var b=2;\n    var func2 = function(){ \n        var c=3;\n        console.log ( b ); // 输出:2 \n        console.log ( a );// 输出:1\n    }\n    func2();\n    console.log(c);//输出:Uncaught ReferenceError: c is not defined\n}; \nfunc1();\n```\n### 变量的生存周期。\n对于全局变量来说,全局变量的生存周期当然是的永久,除非我们主动销毁这个全局变量。\n\n而对于在函数内用 var 关键字声明的局部变量来说,当退出函数时,这些局部变量即失去了 它们的价值,它们都会随着函数的调用的结束而销毁\n\n例一\n``` bash\nvar func = function(){ \n    var a=1;\n    return function(){ \n        a++;\n        console.log(a);\n    } \n};\nvar f=func();\nf();// 输出:2 \nf();// 输出:3\nf();// 输出:4\nf();// 输出:5\n```\n跟我们之前的结论相反,上面的例子在当退出函数后,局部变量 a 并没有消失,而是似乎一直在某个地方 存活着。\n\n这是因为当执行 var f = func();时,f 返回了一个名函数的引用,它可以问到 func() 被调用时产生的环境,而局部变量 a 一直处在这个环境里。\n\n既然外局部变量所在的环境还能被外 界访问,这个局部变量就有了不被销毁的理由。在这里生了一个闭包结构,局部变量的声明看起来被延续了。\n\n例二，假设页面上有 5 个 div 节点,我们通过循环来给每个 div绑定 onclick 事件,按照索引顺序,点击第 1 个 div 时弹出 0,点击第 2 个 div 时出 1,以此类。\n``` bash\nvar nodes = document.getElementsByTagName( 'div' );\nfor(var i=0,len=nodes.length;i&lt;len;i++){ \n    nodes[ i ].onclick = function(){\n        alert(i); \n    }\n};\n```\n测试这段代码会发现,无论点击哪个 div,最后弹出的结果都是 5。\n\n<font color=red>这是因为 div 节点的 onclick事件是被异步触发的,当事件被触发的时候,for循环早已结束,此时 i 的值已经是 5,\n\n所以在 div 的 onclick 事件函数中顺着作用域链从内到外查找变量 i 时,查找到的值总是 5。\n\n解决方法是在闭包的帮助下,每次循环的 i 值都封闭起来。当在事件函数中顺着作用域链从内到外查找变量 i 时,会先找到被封闭在闭包环境中的 i,如果有 5 个 div,这里的 i 分别 是 0,1,2,3,4</font>>\n``` bash\nfor(var i=0,len=nodes.length;i&lt;len;i++){ \n    (function( i ){\n        nodes[ i ].onclick = function(){ \n            console.log(i);\n        } \n    })(i)\n};\n```\n例三\n``` bash\nvar Type = {};\nfor ( var i = 0, type; type = [ 'String', 'Array', 'Number' ][ i++ ]; ){ \n    (function( type ){\n        Type[ 'is' + type ] = function( obj ){\n            return Object.prototype.toString.call( obj ) === '[object '+ type +']';\n        }\n    })( type )\n};\nconsole.log( Type.isArray( [] ) );// 输出:true\nconsole.log( Type.isString( \"str\" ) );// 输出:true\nconsole.log( Type.isNumber( 5  ) );// 输出:true\nconsole.log( Type.isString( [] ) );// 输出:false\n```\n## 图解\n![](1.png)\n![](2.png)\n![](3.png)\n![](4.png)\n![](5.png)\n","source":"_posts/闭包.md","raw":"---\ntitle: 闭包\ndate: 2019-01-02 10:54:13\ncategories: \n- 基础前端技术\ntags: [闭包]\n---\n\n# 闭包\n\n## 闭包理解\n### ** 特性：\n函数嵌套函数；\n函数内部可以引用函数外部的参数和变量；\n函数变量和参数不会被垃圾回收机制回收；\n### **优缺点：\n优点 \n- 希望一个变量长期驻扎在内存中 \n- 避免全局变量的污染 \n- 私有成员的存在 \n缺点 \n- 常驻内存，增大内存使用量，使用不当回造成内存泄漏；\n\n### ** 自执行函数的好处\n隔离作用域，避免全局作用域污染\n模拟块级作用域\n\n应用的两种情况：函数作为返回值、函数作为参数传递。\n### 第一，函数作为返回值：\n``` bash\nfunction fn(){\n    var max = 10;\n    return function bar(x){\n        if (x>max){\n            console.log(x)\n        }\n    }\n}\nvar f1 = fn();\nf1(15);\n```\n如上代码，bar函数作为返回值，赋值给f1变量。执行f1(15)时，用到了fn作用域下的max变量的值\n### 第二，函数作为参数被传递\n``` bash\nvar max = 10,\nfn = function(x){\n    if(x>max){\n        console.log(x)\n    }\n};\n(function(f){\n    var max = 100;\n    f(15);\n})(fn)\n```\n如上代码中，fn函数作为一个参数被传递进入另一个函数，赋值给f参数。执行f(15)时，max变量的取值是10，而不是100。\n## 闭包与作用域\n### 变量的作用域,是指变量的有效范围\n当在函数中声明一个变量的时候,如果该变量前面没有带上关键字 var,这个变量就会成为全局变量 ,这当然是一种很容易造成命名冲突的做法。\n另外一种情况是用 var 关键字在函数中声明变量,这时候的变量即是局部变量,只有在该函数内部才能访问到这个变量,在函数外面是访问不到的。\n\n例一\n``` bash\nvar func=function(){\n    var a=1;\n    console.log(a); //输出:1 \n};\nfunc();\nconsole.log ( a ); // Uncaught ReferenceError: a is not defined\n```\n\n例二，变量的搜索是从内到外而非从外到 内的。\n``` bash\nvar a=1;\nvar func1 = function(){ \n    var b=2;\n    var func2 = function(){ \n        var c=3;\n        console.log ( b ); // 输出:2 \n        console.log ( a );// 输出:1\n    }\n    func2();\n    console.log(c);//输出:Uncaught ReferenceError: c is not defined\n}; \nfunc1();\n```\n### 变量的生存周期。\n对于全局变量来说,全局变量的生存周期当然是的永久,除非我们主动销毁这个全局变量。\n\n而对于在函数内用 var 关键字声明的局部变量来说,当退出函数时,这些局部变量即失去了 它们的价值,它们都会随着函数的调用的结束而销毁\n\n例一\n``` bash\nvar func = function(){ \n    var a=1;\n    return function(){ \n        a++;\n        console.log(a);\n    } \n};\nvar f=func();\nf();// 输出:2 \nf();// 输出:3\nf();// 输出:4\nf();// 输出:5\n```\n跟我们之前的结论相反,上面的例子在当退出函数后,局部变量 a 并没有消失,而是似乎一直在某个地方 存活着。\n\n这是因为当执行 var f = func();时,f 返回了一个名函数的引用,它可以问到 func() 被调用时产生的环境,而局部变量 a 一直处在这个环境里。\n\n既然外局部变量所在的环境还能被外 界访问,这个局部变量就有了不被销毁的理由。在这里生了一个闭包结构,局部变量的声明看起来被延续了。\n\n例二，假设页面上有 5 个 div 节点,我们通过循环来给每个 div绑定 onclick 事件,按照索引顺序,点击第 1 个 div 时弹出 0,点击第 2 个 div 时出 1,以此类。\n``` bash\nvar nodes = document.getElementsByTagName( 'div' );\nfor(var i=0,len=nodes.length;i&lt;len;i++){ \n    nodes[ i ].onclick = function(){\n        alert(i); \n    }\n};\n```\n测试这段代码会发现,无论点击哪个 div,最后弹出的结果都是 5。\n\n<font color=red>这是因为 div 节点的 onclick事件是被异步触发的,当事件被触发的时候,for循环早已结束,此时 i 的值已经是 5,\n\n所以在 div 的 onclick 事件函数中顺着作用域链从内到外查找变量 i 时,查找到的值总是 5。\n\n解决方法是在闭包的帮助下,每次循环的 i 值都封闭起来。当在事件函数中顺着作用域链从内到外查找变量 i 时,会先找到被封闭在闭包环境中的 i,如果有 5 个 div,这里的 i 分别 是 0,1,2,3,4</font>>\n``` bash\nfor(var i=0,len=nodes.length;i&lt;len;i++){ \n    (function( i ){\n        nodes[ i ].onclick = function(){ \n            console.log(i);\n        } \n    })(i)\n};\n```\n例三\n``` bash\nvar Type = {};\nfor ( var i = 0, type; type = [ 'String', 'Array', 'Number' ][ i++ ]; ){ \n    (function( type ){\n        Type[ 'is' + type ] = function( obj ){\n            return Object.prototype.toString.call( obj ) === '[object '+ type +']';\n        }\n    })( type )\n};\nconsole.log( Type.isArray( [] ) );// 输出:true\nconsole.log( Type.isString( \"str\" ) );// 输出:true\nconsole.log( Type.isNumber( 5  ) );// 输出:true\nconsole.log( Type.isString( [] ) );// 输出:false\n```\n## 图解\n![](1.png)\n![](2.png)\n![](3.png)\n![](4.png)\n![](5.png)\n","slug":"闭包","published":1,"updated":"2019-07-17T11:39:10.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cy20060t09z071kc5zb","content":"<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><h2 id=\"闭包理解\"><a href=\"#闭包理解\" class=\"headerlink\" title=\"闭包理解\"></a>闭包理解</h2><h3 id=\"特性：\"><a href=\"#特性：\" class=\"headerlink\" title=\"** 特性：\"></a>** 特性：</h3><p>函数嵌套函数；<br>函数内部可以引用函数外部的参数和变量；<br>函数变量和参数不会被垃圾回收机制回收；</p>\n<h3 id=\"优缺点：\"><a href=\"#优缺点：\" class=\"headerlink\" title=\"**优缺点：\"></a>**优缺点：</h3><p>优点 </p>\n<ul>\n<li>希望一个变量长期驻扎在内存中 </li>\n<li>避免全局变量的污染 </li>\n<li>私有成员的存在<br>缺点 </li>\n<li>常驻内存，增大内存使用量，使用不当回造成内存泄漏；</li>\n</ul>\n<h3 id=\"自执行函数的好处\"><a href=\"#自执行函数的好处\" class=\"headerlink\" title=\"** 自执行函数的好处\"></a>** 自执行函数的好处</h3><p>隔离作用域，避免全局作用域污染<br>模拟块级作用域</p>\n<p>应用的两种情况：函数作为返回值、函数作为参数传递。</p>\n<h3 id=\"第一，函数作为返回值：\"><a href=\"#第一，函数作为返回值：\" class=\"headerlink\" title=\"第一，函数作为返回值：\"></a>第一，函数作为返回值：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn</span></span>()&#123;</span><br><span class=\"line\">    var max = 10;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">function</span> bar(x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x&gt;max)&#123;</span><br><span class=\"line\">            console.log(x)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var f1 = fn();</span><br><span class=\"line\">f1(15);</span><br></pre></td></tr></table></figure>\n<p>如上代码，bar函数作为返回值，赋值给f1变量。执行f1(15)时，用到了fn作用域下的max变量的值</p>\n<h3 id=\"第二，函数作为参数被传递\"><a href=\"#第二，函数作为参数被传递\" class=\"headerlink\" title=\"第二，函数作为参数被传递\"></a>第二，函数作为参数被传递</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var max = 10,</span><br><span class=\"line\">fn = <span class=\"keyword\">function</span>(x)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;max)&#123;</span><br><span class=\"line\">        console.log(x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">(<span class=\"keyword\">function</span>(f)&#123;</span><br><span class=\"line\">    var max = 100;</span><br><span class=\"line\">    f(15);</span><br><span class=\"line\">&#125;)(fn)</span><br></pre></td></tr></table></figure>\n<p>如上代码中，fn函数作为一个参数被传递进入另一个函数，赋值给f参数。执行f(15)时，max变量的取值是10，而不是100。</p>\n<h2 id=\"闭包与作用域\"><a href=\"#闭包与作用域\" class=\"headerlink\" title=\"闭包与作用域\"></a>闭包与作用域</h2><h3 id=\"变量的作用域-是指变量的有效范围\"><a href=\"#变量的作用域-是指变量的有效范围\" class=\"headerlink\" title=\"变量的作用域,是指变量的有效范围\"></a>变量的作用域,是指变量的有效范围</h3><p>当在函数中声明一个变量的时候,如果该变量前面没有带上关键字 var,这个变量就会成为全局变量 ,这当然是一种很容易造成命名冲突的做法。<br>另外一种情况是用 var 关键字在函数中声明变量,这时候的变量即是局部变量,只有在该函数内部才能访问到这个变量,在函数外面是访问不到的。</p>\n<p>例一<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var func=<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    var a=1;</span><br><span class=\"line\">    console.log(a); //输出:1 </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">func();</span><br><span class=\"line\">console.log ( a ); // Uncaught ReferenceError: a is not defined</span><br></pre></td></tr></table></figure></p>\n<p>例二，变量的搜索是从内到外而非从外到 内的。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a=1;</span><br><span class=\"line\">var func1 = <span class=\"function\"><span class=\"title\">function</span></span>()&#123; </span><br><span class=\"line\">    var b=2;</span><br><span class=\"line\">    var func2 = <span class=\"function\"><span class=\"title\">function</span></span>()&#123; </span><br><span class=\"line\">        var c=3;</span><br><span class=\"line\">        console.log ( b ); // 输出:2 </span><br><span class=\"line\">        console.log ( a );// 输出:1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func2();</span><br><span class=\"line\">    console.log(c);//输出:Uncaught ReferenceError: c is not defined</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">func1();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"变量的生存周期。\"><a href=\"#变量的生存周期。\" class=\"headerlink\" title=\"变量的生存周期。\"></a>变量的生存周期。</h3><p>对于全局变量来说,全局变量的生存周期当然是的永久,除非我们主动销毁这个全局变量。</p>\n<p>而对于在函数内用 var 关键字声明的局部变量来说,当退出函数时,这些局部变量即失去了 它们的价值,它们都会随着函数的调用的结束而销毁</p>\n<p>例一<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var func = <span class=\"function\"><span class=\"title\">function</span></span>()&#123; </span><br><span class=\"line\">    var a=1;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"function\"><span class=\"title\">function</span></span>()&#123; </span><br><span class=\"line\">        a++;</span><br><span class=\"line\">        console.log(a);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var f=func();</span><br><span class=\"line\">f();// 输出:2 </span><br><span class=\"line\">f();// 输出:3</span><br><span class=\"line\">f();// 输出:4</span><br><span class=\"line\">f();// 输出:5</span><br></pre></td></tr></table></figure></p>\n<p>跟我们之前的结论相反,上面的例子在当退出函数后,局部变量 a 并没有消失,而是似乎一直在某个地方 存活着。</p>\n<p>这是因为当执行 var f = func();时,f 返回了一个名函数的引用,它可以问到 func() 被调用时产生的环境,而局部变量 a 一直处在这个环境里。</p>\n<p>既然外局部变量所在的环境还能被外 界访问,这个局部变量就有了不被销毁的理由。在这里生了一个闭包结构,局部变量的声明看起来被延续了。</p>\n<p>例二，假设页面上有 5 个 div 节点,我们通过循环来给每个 div绑定 onclick 事件,按照索引顺序,点击第 1 个 div 时弹出 0,点击第 2 个 div 时出 1,以此类。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var nodes = document.getElementsByTagName( <span class=\"string\">'div'</span> );</span><br><span class=\"line\"><span class=\"keyword\">for</span>(var i=0,len=nodes.length;i&amp;lt;len;i++)&#123; </span><br><span class=\"line\">    nodes[ i ].onclick = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        alert(i); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>测试这段代码会发现,无论点击哪个 div,最后弹出的结果都是 5。</p>\n<p><font color=\"red\">这是因为 div 节点的 onclick事件是被异步触发的,当事件被触发的时候,for循环早已结束,此时 i 的值已经是 5,</font></p>\n<p>所以在 div 的 onclick 事件函数中顺着作用域链从内到外查找变量 i 时,查找到的值总是 5。</p>\n<p>解决方法是在闭包的帮助下,每次循环的 i 值都封闭起来。当在事件函数中顺着作用域链从内到外查找变量 i 时,会先找到被封闭在闭包环境中的 i,如果有 5 个 div,这里的 i 分别 是 0,1,2,3,4&gt;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(var i=0,len=nodes.length;i&amp;lt;len;i++)&#123; </span><br><span class=\"line\">    (<span class=\"keyword\">function</span>( i )&#123;</span><br><span class=\"line\">        nodes[ i ].onclick = <span class=\"function\"><span class=\"title\">function</span></span>()&#123; </span><br><span class=\"line\">            console.log(i);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>例三<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Type = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( var i = 0, <span class=\"built_in\">type</span>; <span class=\"built_in\">type</span> = [ <span class=\"string\">'String'</span>, <span class=\"string\">'Array'</span>, <span class=\"string\">'Number'</span> ][ i++ ]; )&#123; </span><br><span class=\"line\">    (<span class=\"keyword\">function</span>( <span class=\"built_in\">type</span> )&#123;</span><br><span class=\"line\">        Type[ <span class=\"string\">'is'</span> + <span class=\"built_in\">type</span> ] = <span class=\"keyword\">function</span>( obj )&#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> Object.prototype.toString.call( obj ) === <span class=\"string\">'[object '</span>+ <span class=\"built_in\">type</span> +<span class=\"string\">']'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)( <span class=\"built_in\">type</span> )</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log( Type.isArray( [] ) );// 输出:<span class=\"literal\">true</span></span><br><span class=\"line\">console.log( Type.isString( <span class=\"string\">\"str\"</span> ) );// 输出:<span class=\"literal\">true</span></span><br><span class=\"line\">console.log( Type.isNumber( 5  ) );// 输出:<span class=\"literal\">true</span></span><br><span class=\"line\">console.log( Type.isString( [] ) );// 输出:<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"图解\"><a href=\"#图解\" class=\"headerlink\" title=\"图解\"></a>图解</h2><p><img src=\"/2019/01/02/闭包/1.png\" alt=\"\"><br><img src=\"/2019/01/02/闭包/2.png\" alt=\"\"><br><img src=\"/2019/01/02/闭包/3.png\" alt=\"\"><br><img src=\"/2019/01/02/闭包/4.png\" alt=\"\"><br><img src=\"/2019/01/02/闭包/5.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><h2 id=\"闭包理解\"><a href=\"#闭包理解\" class=\"headerlink\" title=\"闭包理解\"></a>闭包理解</h2><h3 id=\"特性：\"><a href=\"#特性：\" class=\"headerlink\" title=\"** 特性：\"></a>** 特性：</h3><p>函数嵌套函数；<br>函数内部可以引用函数外部的参数和变量；<br>函数变量和参数不会被垃圾回收机制回收；</p>\n<h3 id=\"优缺点：\"><a href=\"#优缺点：\" class=\"headerlink\" title=\"**优缺点：\"></a>**优缺点：</h3><p>优点 </p>\n<ul>\n<li>希望一个变量长期驻扎在内存中 </li>\n<li>避免全局变量的污染 </li>\n<li>私有成员的存在<br>缺点 </li>\n<li>常驻内存，增大内存使用量，使用不当回造成内存泄漏；</li>\n</ul>\n<h3 id=\"自执行函数的好处\"><a href=\"#自执行函数的好处\" class=\"headerlink\" title=\"** 自执行函数的好处\"></a>** 自执行函数的好处</h3><p>隔离作用域，避免全局作用域污染<br>模拟块级作用域</p>\n<p>应用的两种情况：函数作为返回值、函数作为参数传递。</p>\n<h3 id=\"第一，函数作为返回值：\"><a href=\"#第一，函数作为返回值：\" class=\"headerlink\" title=\"第一，函数作为返回值：\"></a>第一，函数作为返回值：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">fn</span></span>()&#123;</span><br><span class=\"line\">    var max = 10;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"keyword\">function</span> bar(x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x&gt;max)&#123;</span><br><span class=\"line\">            console.log(x)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var f1 = fn();</span><br><span class=\"line\">f1(15);</span><br></pre></td></tr></table></figure>\n<p>如上代码，bar函数作为返回值，赋值给f1变量。执行f1(15)时，用到了fn作用域下的max变量的值</p>\n<h3 id=\"第二，函数作为参数被传递\"><a href=\"#第二，函数作为参数被传递\" class=\"headerlink\" title=\"第二，函数作为参数被传递\"></a>第二，函数作为参数被传递</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var max = 10,</span><br><span class=\"line\">fn = <span class=\"keyword\">function</span>(x)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;max)&#123;</span><br><span class=\"line\">        console.log(x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">(<span class=\"keyword\">function</span>(f)&#123;</span><br><span class=\"line\">    var max = 100;</span><br><span class=\"line\">    f(15);</span><br><span class=\"line\">&#125;)(fn)</span><br></pre></td></tr></table></figure>\n<p>如上代码中，fn函数作为一个参数被传递进入另一个函数，赋值给f参数。执行f(15)时，max变量的取值是10，而不是100。</p>\n<h2 id=\"闭包与作用域\"><a href=\"#闭包与作用域\" class=\"headerlink\" title=\"闭包与作用域\"></a>闭包与作用域</h2><h3 id=\"变量的作用域-是指变量的有效范围\"><a href=\"#变量的作用域-是指变量的有效范围\" class=\"headerlink\" title=\"变量的作用域,是指变量的有效范围\"></a>变量的作用域,是指变量的有效范围</h3><p>当在函数中声明一个变量的时候,如果该变量前面没有带上关键字 var,这个变量就会成为全局变量 ,这当然是一种很容易造成命名冲突的做法。<br>另外一种情况是用 var 关键字在函数中声明变量,这时候的变量即是局部变量,只有在该函数内部才能访问到这个变量,在函数外面是访问不到的。</p>\n<p>例一<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var func=<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">    var a=1;</span><br><span class=\"line\">    console.log(a); //输出:1 </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">func();</span><br><span class=\"line\">console.log ( a ); // Uncaught ReferenceError: a is not defined</span><br></pre></td></tr></table></figure></p>\n<p>例二，变量的搜索是从内到外而非从外到 内的。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a=1;</span><br><span class=\"line\">var func1 = <span class=\"function\"><span class=\"title\">function</span></span>()&#123; </span><br><span class=\"line\">    var b=2;</span><br><span class=\"line\">    var func2 = <span class=\"function\"><span class=\"title\">function</span></span>()&#123; </span><br><span class=\"line\">        var c=3;</span><br><span class=\"line\">        console.log ( b ); // 输出:2 </span><br><span class=\"line\">        console.log ( a );// 输出:1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func2();</span><br><span class=\"line\">    console.log(c);//输出:Uncaught ReferenceError: c is not defined</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\">func1();</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"变量的生存周期。\"><a href=\"#变量的生存周期。\" class=\"headerlink\" title=\"变量的生存周期。\"></a>变量的生存周期。</h3><p>对于全局变量来说,全局变量的生存周期当然是的永久,除非我们主动销毁这个全局变量。</p>\n<p>而对于在函数内用 var 关键字声明的局部变量来说,当退出函数时,这些局部变量即失去了 它们的价值,它们都会随着函数的调用的结束而销毁</p>\n<p>例一<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var func = <span class=\"function\"><span class=\"title\">function</span></span>()&#123; </span><br><span class=\"line\">    var a=1;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"function\"><span class=\"title\">function</span></span>()&#123; </span><br><span class=\"line\">        a++;</span><br><span class=\"line\">        console.log(a);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var f=func();</span><br><span class=\"line\">f();// 输出:2 </span><br><span class=\"line\">f();// 输出:3</span><br><span class=\"line\">f();// 输出:4</span><br><span class=\"line\">f();// 输出:5</span><br></pre></td></tr></table></figure></p>\n<p>跟我们之前的结论相反,上面的例子在当退出函数后,局部变量 a 并没有消失,而是似乎一直在某个地方 存活着。</p>\n<p>这是因为当执行 var f = func();时,f 返回了一个名函数的引用,它可以问到 func() 被调用时产生的环境,而局部变量 a 一直处在这个环境里。</p>\n<p>既然外局部变量所在的环境还能被外 界访问,这个局部变量就有了不被销毁的理由。在这里生了一个闭包结构,局部变量的声明看起来被延续了。</p>\n<p>例二，假设页面上有 5 个 div 节点,我们通过循环来给每个 div绑定 onclick 事件,按照索引顺序,点击第 1 个 div 时弹出 0,点击第 2 个 div 时出 1,以此类。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var nodes = document.getElementsByTagName( <span class=\"string\">'div'</span> );</span><br><span class=\"line\"><span class=\"keyword\">for</span>(var i=0,len=nodes.length;i&amp;lt;len;i++)&#123; </span><br><span class=\"line\">    nodes[ i ].onclick = <span class=\"function\"><span class=\"title\">function</span></span>()&#123;</span><br><span class=\"line\">        alert(i); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>测试这段代码会发现,无论点击哪个 div,最后弹出的结果都是 5。</p>\n<p><font color=\"red\">这是因为 div 节点的 onclick事件是被异步触发的,当事件被触发的时候,for循环早已结束,此时 i 的值已经是 5,</font></p>\n<p>所以在 div 的 onclick 事件函数中顺着作用域链从内到外查找变量 i 时,查找到的值总是 5。</p>\n<p>解决方法是在闭包的帮助下,每次循环的 i 值都封闭起来。当在事件函数中顺着作用域链从内到外查找变量 i 时,会先找到被封闭在闭包环境中的 i,如果有 5 个 div,这里的 i 分别 是 0,1,2,3,4&gt;<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(var i=0,len=nodes.length;i&amp;lt;len;i++)&#123; </span><br><span class=\"line\">    (<span class=\"keyword\">function</span>( i )&#123;</span><br><span class=\"line\">        nodes[ i ].onclick = <span class=\"function\"><span class=\"title\">function</span></span>()&#123; </span><br><span class=\"line\">            console.log(i);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>例三<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Type = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( var i = 0, <span class=\"built_in\">type</span>; <span class=\"built_in\">type</span> = [ <span class=\"string\">'String'</span>, <span class=\"string\">'Array'</span>, <span class=\"string\">'Number'</span> ][ i++ ]; )&#123; </span><br><span class=\"line\">    (<span class=\"keyword\">function</span>( <span class=\"built_in\">type</span> )&#123;</span><br><span class=\"line\">        Type[ <span class=\"string\">'is'</span> + <span class=\"built_in\">type</span> ] = <span class=\"keyword\">function</span>( obj )&#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> Object.prototype.toString.call( obj ) === <span class=\"string\">'[object '</span>+ <span class=\"built_in\">type</span> +<span class=\"string\">']'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)( <span class=\"built_in\">type</span> )</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.log( Type.isArray( [] ) );// 输出:<span class=\"literal\">true</span></span><br><span class=\"line\">console.log( Type.isString( <span class=\"string\">\"str\"</span> ) );// 输出:<span class=\"literal\">true</span></span><br><span class=\"line\">console.log( Type.isNumber( 5  ) );// 输出:<span class=\"literal\">true</span></span><br><span class=\"line\">console.log( Type.isString( [] ) );// 输出:<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"图解\"><a href=\"#图解\" class=\"headerlink\" title=\"图解\"></a>图解</h2><p><img src=\"/2019/01/02/闭包/1.png\" alt=\"\"><br><img src=\"/2019/01/02/闭包/2.png\" alt=\"\"><br><img src=\"/2019/01/02/闭包/3.png\" alt=\"\"><br><img src=\"/2019/01/02/闭包/4.png\" alt=\"\"><br><img src=\"/2019/01/02/闭包/5.png\" alt=\"\"></p>\n"},{"title":"面试JS","date":"2019-01-03T13:42:31.000Z","_content":"# 介绍一下JS的数据类型？\n\n>简单类型：String、Number、Boolean、Null、Undefined\n>复杂类型：ObjectES6新增类型：Symbol\n>扩展：null与undefined有什么区别 \n\n答：null 表示一个对象被定义了，值为“空值”，而undefined 表示不存在这个值。 正因为这个原因，所以使用typeof判断时，null返回的是object，而undefined返回的是undefined。(判断两者时需要使用===严格判断)\nBoolean类型在进行判断的时候设置为 0、-0、null、\"\"、false、undefined 或 NaN，则该对象设置为 false。否则设置为 true（即使 value 参数是字符串 \"false\"）\n\n# 如何通过JS判断一个数组？\n\n> 1.instanceof方法\n\ninstanceof 运算符是用来测试一个对象是否在其原型链原型构造函数的属性。\n\n```\nvar arr = []; \narr instanceof Array; // true\n```\n>2.constructor方法\n\nconstructor属性返回对创建此对象的数组函数的引用，就是返回对象相对应的构造函数。\n```\nvar arr = []; \narr.constructor == Array; //true\n```\n>3.特性判断法\n\n利用判断数组独有的length和splice方法，但是这是不靠谱的，因为对象也能添加方法和属性。那怎么办了，有一个办法，可以利用数组的length属性没法枚举来判断。\n```\nfunction isArray(object){\n      return  object && typeof object==='object' &&    \n      typeof object.length==='number' &&  \n      typeof object.splice==='function' &&    \n       //判断length属性是否是可枚举的 对于数组 将得到false  \n      !(object.propertyIsEnumerable('length'));\n}\n```\n>4.最简单的方法\n\n这种写法，是 jQuery 正在使用的，淘宝的 kissy 也是使用这种方式。\n```\nObject.prototype.toString.call(value) == '[object Array]'\n// 利用这个方法，可以写一个返回数据类型的方法\nvar isType = function (obj) {\n     return Object.prototype.toString.call(obj).slice(8,-1); \n}\n```\n>5.ES5新增方法isArray()\n\n```\nvar a = new Array(123);\nvar b = new Date();\nconsole.log(Array.isArray(a)); //true\nconsole.log(Array.isArray(b)); //false\n```\n&扩展：\n使用instanceof和construcor，被判断的array必须是在当前页面声明的。比如，一个页面（父页面）有一个框架，框架中引用了一个页面（子页面），在子页面中声明了一个array，并将其赋值给父页面的一个变量，这时判断该变量，Array == object.constructor;会返回false。\n最简单的方法，在IE6下判断null和undefined，有一些bug，判断undefined和null均为Object，(并不是bug，是在ES3的标准下返回的就为Object)\n\n# 谈一谈let、const与var的区别？\n\n## let命令基本用法\n在ES6中，新增了let命令，用于声明变量，用来取代ES5中var命令，消除var声明的变量的不合理，不严谨之处。const用于声明常量。 \n让我们来看看let和var的区别\n>1.let不存在变量提升\n\n使用let声明的变量，不会像使用var那样存在“变量提升“”的现象。所以使用let声明变量，必须遵循“先声明，后使用”的原则。否则会报错\n```\nconsole.log(a); //ReferenceError\nlet a = 10;\n```\n如果是var声明的变量，则不会报错。\n```            \nconsole.log(b); //undefined\nvar b = 10;\n```\n>2.let声明的变量，存在块级作用域\n\nlet声明的变量只在所声明的代码块内有效。块级作用域由 { } 包括，if语句和for语句里面的{ }也属于块作用域。\n```\n{\n    var a = 10;\n    let b = 20;  \n}\n    console.log(a); //10\n    console.log(b); // ReferenceError: b is not defined\n```\n\n```\nvar a =[];\nfor( var i=0; i<10; i++ ){\n    a[i] = function(){\n        console.log(i);\n    }\n}\n\n    for( var j = 0; j<a.length; j++ ){\n        a[j](); //输出10个10。 因为i是var声明的，在全局范围内都用，每次新的i都会覆盖原来的。\n    }\n```\n\n```\nvar a =[];\n    for( let i=0; i<10; i++ ){\n        a[i] = function(){\n            console.log(i);\n        }\n    }\n\n    for( let j = 0; j<a.length; j++ ){\n        a[j](); //输出 0，1，2，...，9\n    }\n```\n\n\n>3.let不允许在同一作用域内重复声明同一个变量在同一作用域内，如果使用var声明同一个变量，则后面的覆盖前面的\n\n```\nvar a = 10;\nlet a = 10;\n\nconsole.log(a);//Uncaught SyntaxError:\n                 Identifier 'a' has already been declared\n\n或\n\nlet a = 10;\nlet a = 15;\n\nconsole.log(a);//Uncaught SyntaxError:\n                 Identifier 'a' has already been declared\n```\n>4.暂时性死区：在代码块内，使用let声明变量之前，该变量都是不可以使用用\n只要在同一作用域内存在let命令，他所声明的变量就“绑定”在这个作用域内，不管外部有没有声明\n\n例如\n```\n    let a =10;\n    function fn1(){\n        console.log(a);\n        let a = 5;\n    }\n    fn1();//Uncaught ReferenceError: a is not defined\n```\n\nES6规定，如果在区块中存在let和const声明的变量，则这个区块对这些声明的变量从一开始就形成一个封闭的作用域。不管在外部有没有声明这个变量。必须遵守“先声明，后使用”的原则，否则报错\n\nES6规定暂时性死区和不存在变量提升，主要是为了减少运行程序的错误，防止出现“先使用（变量），后声明（变量）”的情况，从而导致意料之外的行为。这种错误在ES5中很常见，现在有了这种规定，就可以避免出现此类错误了\n\n<font color=\"red\">总之，暂时性死区的本质就是，只要一进入当前作用域，所使用的变量就已存在，但是不可获取，只有等到声明变量的哪一行代码的出现，在可以获取和使用该变量</font>\n\n## const命令的基本使用\nconst用来声明常量，一旦声明，其值就不能更改\n```\nconst a = 10;\n    a = 20;\n\n console.log(a);//Uncaught TypeError: Assignment to constant variable.\n```\n- 1.const声明的常量不能改变，意味着const一旦声明常量，就必须同时初始化。不能先声明，后初始化，这样会报错\n\n- 2.与let一样。const声明的常量也只在块级作用域内有效 \n- 3.与let一样，必须先声明，后使用 \n- 4.与let一样，在同一作用域，const不能重复声明同一常量\n\n那么如果使用const声明对象呢？\n```\nconst b = {\n        name:'zs',\n        age:22\n    }\nb.name = \"lzx\";\n\nconsole.log(b.name+\"---\"+b.age);//输出lzx---22\n```\n<font color=\"red\">我们可以看到，使用const声明的对象的属性是可以修改。 </font>   \n因为Object类型是引用类型。用const声明常量保存的是对象的地址，不可变的是地址，在上面的代码中就是，不能把 b 指向另一个对象。而修改对象的属性，并不会改变对象的地址，因此用const声明对象的属性是可以修改的 \n\n# map与forEach的区别？\n\n\n1、forEach方法，是最基本的方法，就是遍历与循环，默认有3个传参：分别是遍历的数组内容item、数组索引index、和当前遍历数组Array。另外，除去第一个必须的回调函数参数，还可以接受一个上下文参数(改变回调函数的this指向)；并且forEach不会遍历空元素。\n2、map方法，基本用法与forEach一致，但是不同的，它会返回一个新的数组，所以在callback需要有return值，如果没有，会返回undefined。(从字面理解，map就是映射的意思)\n3、filter方法，用法和map很相似，从字面理解，就是过滤、筛选的意思。但是函数的callback需要返回布尔值true或false，并且返回值只需要为弱等==即可。\n4、some 方法，对数组中每一项运行指定函数，如果该函数对任一项返回true，则返回true。(一旦遇到true，就会中断循环，返回true，类似于||判断)\n5、every方法，对数组中的每一项运行给定函数，如果该函数对每一项返回true，则返回true。(一旦遇到false，就会中断循环，返回false，类似于&&判断)\n6、indexOf方法，与字符串中的indexOf类似，返回数组索引值，如果没有匹配，则会返回-1，第二个参数为可选，表示从当前位置开始搜索。\n7、lastIndexOf方法，与indexOf相似，只是是从数组的末尾开始查找，而第二个参数的默认值是array.length - 1。\n8、reduce方法，字面意思应该是‘减少’，但是实际是‘递归’的意思。实际就是应用一个函数针对数组的两个值(从左到右)，以减至一个值。它的callback接收4个参数：之前值(上一次循环返回的值)、当前值、索引值以及数组本身。initialValue参数可选，表示初始值。\n9、reduceRight方法，与reduce方法类似，只是从数组的末尾开始实现。\n\n# 谈一谈你理解的函数式编程？\n\n# 谈一谈箭头函数与普通函数的区别？\n\n\n- 箭头函数使得表达更加简洁。(这个是废话)\n- 函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。\n- 不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。\n- 不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。\n- 不可以使用yield命令，因此箭头函数不能用作Generator函数。\n\n\n# 谈一谈函数中this的指向吧？\n\n## 全局环境\n>无论是否在严格模式下，在全局执行环境中（在任何函数体外部）this 都指代全局对象。\n\n```bash\n// 在浏览器中, window 对象同时也是全局对象：\nconsole.log(this === window); // true\n\na = 37;\nconsole.log(window.a); // 37\n\nthis.b = \"MDN\";\nconsole.log(window.b)  // \"MDN\"\nconsole.log(b)         // \"MDN\"\n```\n\n## 函数（运行内）环境\n在函数内部，this的值取决于函数被调用的方式。\n### 简单调用\n\n因为下面的代码不在严格模式下，且 this 的值不是由该调用设置的，所以 this 的值默认指向全局对象\n```bash\nfunction f1(){\n  return this;\n}\n//在浏览器中：\nf1() === window;   //在浏览器中，全局对象是window\n\n//在Node中：\nf1() === global;\n```\n然而，在严格模式下，this将保持他进入执行环境时的值，所以下面的this将会默认为undefined。\n```bash\nfunction f2(){\n  \"use strict\"; // 这里是严格模式\n  return this;\n}\n\nf2() === undefined; // true\n```\n所以，在严格模式下，如果 this 没有被执行环境（execution context）定义，那它将保持为 undefined。\n\n>在第二个例子中，this的确应该是undefined，因为f2是被直接调用的，而不是作为对象的属性或方法调用的（如 window.f2()）。有一些浏览器最初在支持严格模式时没有正确实现这个功能，于是它们错误地返回了window对象。\n\n如果要想把 this 的值从一个环境传到另一个，就要用 call 或者apply 方法\n// 将一个对象作为call和apply的第一个参数，this会被绑定到这个对象。\n```bash\nvar obj = {a: 'Custom'};\n\n// 这个属性是在global对象定义的。\nvar a = 'Global';\n\nfunction whatsThis(arg) {\n  return this.a;  // this的值取决于函数的调用方式\n}\n\nwhatsThis();          // 'Global'\nwhatsThis.call(obj);  // 'Custom'\nwhatsThis.apply(obj); // 'Custom'\n```\n当一个函数在其主体中使用 this 关键字时，可以通过使用函数继承自Function.prototype 的 call 或 apply 方法将 this 值绑定到调用中的特定对象。\n```bash\nfunction add(c, d) {\n  return this.a + this.b + c + d;\n}\n\nvar o = {a: 1, b: 3};\n\n// 第一个参数是作为‘this’使用的对象\n// 后续参数作为参数传递给函数调用\nadd.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16\n\n// 第一个参数也是作为‘this’使用的对象\n// 第二个参数是一个数组，数组里的元素用作函数调用中的参数\nadd.apply(o, [10, 20]); // 1 + 3 + 10 + 20 = 34\n```\n使用 call 和 apply 函数的时候要注意，如果传递给 this 的值不是一个对象，JavaScript 会尝试使用内部 ToObject 操作将其转换为对象。因此，如果传递的值是一个原始值比如 7 或 'foo'，那么就会使用相关构造函数将它转换为对象，所以原始值 7 会被转换为对象，像 new Number(7) 这样，而字符串 'foo' 转化成 new String('foo') 这样，例如：\n```bash\nfunction bar() {\n  console.log(Object.prototype.toString.call(this));\n}\n\n//原始值 7 被隐式转换为对象\nbar.call(7); // [object Number]\n```\n### bind方法\nECMAScript 5 引入了 Function.prototype.bind。调用f.bind(someObject)会创建一个与f具有相同函数体和作用域的函数，但是在这个新函数中，this将永久地被绑定到了bind的第一个参数，无论这个函数是如何被调用的。\n```bash\nfunction f(){\n  return this.a;\n}\n\nvar g = f.bind({a:\"azerty\"});\nconsole.log(g()); // azerty\n\nvar h = g.bind({a:'yoo'}); // bind只生效一次！\nconsole.log(h()); // azerty\n\nvar o = {a:37, f:f, g:g, h:h};\nconsole.log(o.f(), o.g(), o.h()); // 37, azerty, azerty\n```\n### 箭头函数\n  [箭头函数详解1](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n  [箭头函数详解2](https://www.cnblogs.com/freelyflying/p/6978126.html)\n\n在箭头函数中，this与封闭词法环境的this保持一致。在全局代码中，它将被设置为全局对象\n```bash\nvar globalObject = this;\nvar foo = (() => this);\nconsole.log(foo() === globalObject); // true\n```\n>注意：如果将this传递给call、bind、或者apply，它将被忽略。不过你仍然可以为调用添加参数，不过第一个参数（thisArg）应该设置为null。\n\n```bash\n// 接着上面的代码\n// 作为对象的一个方法调用\nvar obj = {foo: foo};\nconsole.log(obj.foo() === globalObject); // true\n\n// 尝试使用call来设定this\nconsole.log(foo.call(obj) === globalObject); // true\n\n// 尝试使用bind来设定this\nfoo = foo.bind(obj);\nconsole.log(foo() === globalObject); // true\n```\n无论如何，foo 的 this 被设置为他被创建时的环境（在上面的例子中，就是全局对象）。这同样适用于在其他函数内创建的箭头函数：这些箭头函数的this被设置为封闭的词法环境的。\n```bash\n// 创建一个含有bar方法的obj对象，\n// bar返回一个函数，\n// 这个函数返回this，\n// 这个返回的函数是以箭头函数创建的，\n// 所以它的this被永久绑定到了它外层函数的this。\n// bar的值可以在调用中设置，这反过来又设置了返回函数的值。\nvar obj = {\n  bar: function() {\n    var x = (() => this);\n    return x;\n  }\n};\n\n// 作为obj对象的一个方法来调用bar，把它的this绑定到obj。\n// 将返回的函数的引用赋值给fn。\nvar fn = obj.bar();\n\n// 直接调用fn而不设置this，\n// 通常(即不使用箭头函数的情况)默认为全局对象\n// 若在严格模式则为undefined\nconsole.log(fn() === obj); // true\n\n// 但是注意，如果你只是引用obj的方法，\n// 而没有调用它\nvar fn2 = obj.bar;\n// 那么调用箭头函数后，this指向window，因为它从 bar 继承了this。\nconsole.log(fn2()() == window); // true\n```\n在上面的例子中，一个赋值给了 obj.bar的函数（称为匿名函数 A），返回了另一个箭头函数（称为匿名函数 B）。因此，在 A 调用时，函数B的this被永久设置为obj.bar（函数A）的this。当返回的函数（函数B）被调用时，它this始终是最初设置的。在上面的代码示例中，函数B的this被设置为函数A的this，即obj，所以即使被调用的方式通常将其设置为 undefined 或全局对象（或者如前面示例中的其他全局执行环境中的方法），它的 this 也仍然是 obj .\n### 作为对象的方法\n当函数作为对象里的方法被调用时，它们的 this 是调用该函数的对象。\n下面的例子中，当 o.f()被调用时，函数内的this将绑定到o对象。\n```bash\nvar o = {\n  prop: 37,\n  f: function() {\n    return this.prop;\n  }\n};\n\nconsole.log(o.f()); // logs 37\n```\n请注意，这样的行为，根本不受函数定义方式或位置的影响。在前面的例子中，我们在定义对象o的同时，将函数内联定义为成员f。但是，我们也可以先定义函数，然后再将其附属到o.f。这样做会导致相同的行为：\n```bash\nvar o = {prop: 37};\n\nfunction independent() {\n  return this.prop;\n}\n\no.f = independent;\n\nconsole.log(o.f()); // logs 37\n```\n这表明函数是从o的f成员调用的才是重点。\n\n同样，this 的绑定只受最靠近的成员引用的影响。在下面的这个例子中，我们把一个方法g当作对象o.b的函数调用。在这次执行期间，函数中的this将指向o.b。事实证明，这与他是对象 o 的成员没有多大关系，最靠近的引用才是最重要的。\n```bash\no.b = {g: independent, prop: 42};\nconsole.log(o.b.g()); // 42\n```\n### 原型链中的 this\n对于在对象原型链上某处定义的方法，同样的概念也适用。如果该方法存在于一个对象的原型链上，那么this指向的是调用这个方法的对象，就像该方法在对象上一样。\n```bash\nvar o = {\n  f: function() { \n    return this.a + this.b; \n  }\n};\nvar p = Object.create(o);\np.a = 1;\np.b = 4;\n\nconsole.log(p.f()); // 5\n```\n在这个例子中，对象p没有属于它自己的f属性，它的f属性继承自它的原型。虽然在对 f 的查找过程中，最终是在 o 中找到 f 属性的，这并没有关系；查找过程首先从 p.f 的引用开始，所以函数中的 this 指向p。也就是说，因为f是作为p的方法调用的，所以它的this指向了p。这是 JavaScript 的原型继承中的一个有趣的特性。\n### getter 与 setter 中的 this\n再次，相同的概念也适用于当函数在一个 getter 或者 setter 中被调用。用作 getter 或 setter 的函数都会把 this 绑定到设置或获取属性的对象。\n```bash\nfunction sum() {\n  return this.a + this.b + this.c;\n}\n\nvar o = {\n  a: 1,\n  b: 2,\n  c: 3,\n  get average() {\n    return (this.a + this.b + this.c) / 3;\n  }\n};\n\nObject.defineProperty(o, 'sum', {\n    get: sum, enumerable: true, configurable: true});\n\nconsole.log(o.average, o.sum); // logs 2, 6\n```\n### 作为构造函数\n当一个函数用作构造函数时（使用new关键字），它的this被绑定到正在构造的新对象\n>虽然构造器返回的默认值是this所指的那个对象，但它仍可以手动返回其他的对象（如果返回值不是一个对象，则返回this对象）。\n\n```bash\n/*\n * 构造函数这样工作:\n *\n * function MyConstructor(){\n *   // 函数实体写在这里\n *   // 根据需要在this上创建属性，然后赋值给它们，比如：\n *   this.fum = \"nom\";\n *   // 等等...\n *\n *   // 如果函数具有返回对象的return语句，\n *   // 则该对象将是 new 表达式的结果。 \n *   // 否则，表达式的结果是当前绑定到 this 的对象。\n *   //（即通常看到的常见情况）。\n * }\n */\n\nfunction C(){\n  this.a = 37;\n}\n\nvar o = new C();\nconsole.log(o.a); // logs 37\n\n\nfunction C2(){\n  this.a = 37;\n  return {a:38};\n}\n\no = new C2();\nconsole.log(o.a); // logs 38\n```\n### 作为一个DOM事件处理函数节\n当函数被用作事件处理函数时，它的this指向触发事件的元素（一些浏览器在使用非addEventListener的函数动态添加监听函数时不遵守这个约定）。\n```bash\n// 被调用时，将关联的元素变成蓝色\nfunction bluify(e){\n  console.log(this === e.currentTarget); // 总是 true\n\n  // 当 currentTarget 和 target 是同一个对象时为 true\n  console.log(this === e.target);        \n  this.style.backgroundColor = '#A5D9F3';\n}\n\n// 获取文档中的所有元素的列表\nvar elements = document.getElementsByTagName('*');\n\n// 将bluify作为元素的点击监听函数，当元素被点击时，就会变成蓝色\nfor(var i=0 ; i<elements.length ; i++){\n  elements[i].addEventListener('click', bluify, false);\n}\n```\n### 作为一个内联事件处理函数\n当代码被内联on-event 处理函数调用时，它的this指向监听器所在的DOM元素：\n```bash\n<button onclick=\"alert(this.tagName.toLowerCase());\">\n  Show this\n</button>\n```\n上面的 alert 会显示button。注意只有外层代码中的this是这样设置的：\n```bash\n<button onclick=\"alert((function(){return this})());\">\n  Show inner this\n</button>\n```\n在这种情况下，没有设置内部函数的this，所以它指向 global/window 对象（即非严格模式下调用的函数未设置this时指向的默认对象）\n\n\n\n\n# 异步编程的实现方式？\n\n\n回调函数：\n优点：简单、容易理解\n缺点：不利于维护，代码耦合高\n\n\n>1.事件监听(采用时间驱动模式，取决于某个事件是否发生)：\n\n优点：容易理解，可以绑定多个事件，每个事件可以指定多个回调函数\n缺点：事件驱动型，流程不够清晰\n\n\n>2.发布/订阅(观察者模式)：\n\n类似于事件监听，但是可以通过‘消息中心’，了解现在有多少发布者，多少订阅者。\n\n\n>3.Promise对象\n\n优点：可以利用then方法，进行链式写法；可以书写错误时的回调函数；\n缺点：编写和理解，相对比较难\n\n\n>4.Generator函数\n\n优点：函数体内外的数据交换、错误处理机制\n缺点：流程管理不方便\n\n>5.async函数\n\n优点：内置执行器、更好的语义、更广的适用性、返回的是Promise、结构清晰。\n缺点：错误处理机制\n\n......js基础\n\n类和继承（es5实现方法 + es6实现方法）；\n\npromise；\n\n写一个方法遍历所有文档树所有节点(考察递归)；\n\n\njsonp和跨域；\n\nsort排序相关(注意ascll这个坑)\n\n数组和对象的深浅拷贝；\n\nString + Array的一些基本操作；\n写一个数组去重的方法；\n冒泡和捕获；\n事件代理；\n\ncall、apply、bind；\n变量提升；\n高阶函数；\n动画；\nsetTimeout、setInterval和requestAnimationFrame；\n模块化开发；\n引起内存泄漏的原因；\najax；\nmap、filter、reduce相关；\nMap和Set；\n移动端开发相关；\n\n\n......技术拓展\n\n设计模式相关(单例、发布订阅等)；\n浏览器渲染过程；\n性能优化相关(这个点很大，设计很多方面，不要自以为优化就是网上经常看到的那一套)；\n设计一个模版引擎；\n设计一个打包工具；\n设计一个mvvm框架需要注意的case；\n源码阅读相关；\n\n作者：玩弄心里的鬼\n链接：https://juejin.im/post/59ec3d50f265da431c6f7339\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n# json的JSON.parse()和JSON.stringfy()\n## JSON.parse()\n>从字符串解析出对象\n\n```\n//定义一个字符串\nvar data='{\"name\":\"goatling\"}'\n//解析对象​\n​JSON.parse(data)\n结果是：\n​name:\"goatling\"\n```\n## JSON.stringfy()\n>从一个对象解析出字符串\n\n```\nvar data={name:'goatling'}\nJSON.stringify(data)\n结果是：\n'{\"name\":\"goatling\"}'\n```  ","source":"_posts/面试JS.md","raw":"---\ntitle: 面试JS\ndate: 2019-01-03 21:42:31\ncategories: \"基础前端技术\"\ntags: [JS]\n---\n# 介绍一下JS的数据类型？\n\n>简单类型：String、Number、Boolean、Null、Undefined\n>复杂类型：ObjectES6新增类型：Symbol\n>扩展：null与undefined有什么区别 \n\n答：null 表示一个对象被定义了，值为“空值”，而undefined 表示不存在这个值。 正因为这个原因，所以使用typeof判断时，null返回的是object，而undefined返回的是undefined。(判断两者时需要使用===严格判断)\nBoolean类型在进行判断的时候设置为 0、-0、null、\"\"、false、undefined 或 NaN，则该对象设置为 false。否则设置为 true（即使 value 参数是字符串 \"false\"）\n\n# 如何通过JS判断一个数组？\n\n> 1.instanceof方法\n\ninstanceof 运算符是用来测试一个对象是否在其原型链原型构造函数的属性。\n\n```\nvar arr = []; \narr instanceof Array; // true\n```\n>2.constructor方法\n\nconstructor属性返回对创建此对象的数组函数的引用，就是返回对象相对应的构造函数。\n```\nvar arr = []; \narr.constructor == Array; //true\n```\n>3.特性判断法\n\n利用判断数组独有的length和splice方法，但是这是不靠谱的，因为对象也能添加方法和属性。那怎么办了，有一个办法，可以利用数组的length属性没法枚举来判断。\n```\nfunction isArray(object){\n      return  object && typeof object==='object' &&    \n      typeof object.length==='number' &&  \n      typeof object.splice==='function' &&    \n       //判断length属性是否是可枚举的 对于数组 将得到false  \n      !(object.propertyIsEnumerable('length'));\n}\n```\n>4.最简单的方法\n\n这种写法，是 jQuery 正在使用的，淘宝的 kissy 也是使用这种方式。\n```\nObject.prototype.toString.call(value) == '[object Array]'\n// 利用这个方法，可以写一个返回数据类型的方法\nvar isType = function (obj) {\n     return Object.prototype.toString.call(obj).slice(8,-1); \n}\n```\n>5.ES5新增方法isArray()\n\n```\nvar a = new Array(123);\nvar b = new Date();\nconsole.log(Array.isArray(a)); //true\nconsole.log(Array.isArray(b)); //false\n```\n&扩展：\n使用instanceof和construcor，被判断的array必须是在当前页面声明的。比如，一个页面（父页面）有一个框架，框架中引用了一个页面（子页面），在子页面中声明了一个array，并将其赋值给父页面的一个变量，这时判断该变量，Array == object.constructor;会返回false。\n最简单的方法，在IE6下判断null和undefined，有一些bug，判断undefined和null均为Object，(并不是bug，是在ES3的标准下返回的就为Object)\n\n# 谈一谈let、const与var的区别？\n\n## let命令基本用法\n在ES6中，新增了let命令，用于声明变量，用来取代ES5中var命令，消除var声明的变量的不合理，不严谨之处。const用于声明常量。 \n让我们来看看let和var的区别\n>1.let不存在变量提升\n\n使用let声明的变量，不会像使用var那样存在“变量提升“”的现象。所以使用let声明变量，必须遵循“先声明，后使用”的原则。否则会报错\n```\nconsole.log(a); //ReferenceError\nlet a = 10;\n```\n如果是var声明的变量，则不会报错。\n```            \nconsole.log(b); //undefined\nvar b = 10;\n```\n>2.let声明的变量，存在块级作用域\n\nlet声明的变量只在所声明的代码块内有效。块级作用域由 { } 包括，if语句和for语句里面的{ }也属于块作用域。\n```\n{\n    var a = 10;\n    let b = 20;  \n}\n    console.log(a); //10\n    console.log(b); // ReferenceError: b is not defined\n```\n\n```\nvar a =[];\nfor( var i=0; i<10; i++ ){\n    a[i] = function(){\n        console.log(i);\n    }\n}\n\n    for( var j = 0; j<a.length; j++ ){\n        a[j](); //输出10个10。 因为i是var声明的，在全局范围内都用，每次新的i都会覆盖原来的。\n    }\n```\n\n```\nvar a =[];\n    for( let i=0; i<10; i++ ){\n        a[i] = function(){\n            console.log(i);\n        }\n    }\n\n    for( let j = 0; j<a.length; j++ ){\n        a[j](); //输出 0，1，2，...，9\n    }\n```\n\n\n>3.let不允许在同一作用域内重复声明同一个变量在同一作用域内，如果使用var声明同一个变量，则后面的覆盖前面的\n\n```\nvar a = 10;\nlet a = 10;\n\nconsole.log(a);//Uncaught SyntaxError:\n                 Identifier 'a' has already been declared\n\n或\n\nlet a = 10;\nlet a = 15;\n\nconsole.log(a);//Uncaught SyntaxError:\n                 Identifier 'a' has already been declared\n```\n>4.暂时性死区：在代码块内，使用let声明变量之前，该变量都是不可以使用用\n只要在同一作用域内存在let命令，他所声明的变量就“绑定”在这个作用域内，不管外部有没有声明\n\n例如\n```\n    let a =10;\n    function fn1(){\n        console.log(a);\n        let a = 5;\n    }\n    fn1();//Uncaught ReferenceError: a is not defined\n```\n\nES6规定，如果在区块中存在let和const声明的变量，则这个区块对这些声明的变量从一开始就形成一个封闭的作用域。不管在外部有没有声明这个变量。必须遵守“先声明，后使用”的原则，否则报错\n\nES6规定暂时性死区和不存在变量提升，主要是为了减少运行程序的错误，防止出现“先使用（变量），后声明（变量）”的情况，从而导致意料之外的行为。这种错误在ES5中很常见，现在有了这种规定，就可以避免出现此类错误了\n\n<font color=\"red\">总之，暂时性死区的本质就是，只要一进入当前作用域，所使用的变量就已存在，但是不可获取，只有等到声明变量的哪一行代码的出现，在可以获取和使用该变量</font>\n\n## const命令的基本使用\nconst用来声明常量，一旦声明，其值就不能更改\n```\nconst a = 10;\n    a = 20;\n\n console.log(a);//Uncaught TypeError: Assignment to constant variable.\n```\n- 1.const声明的常量不能改变，意味着const一旦声明常量，就必须同时初始化。不能先声明，后初始化，这样会报错\n\n- 2.与let一样。const声明的常量也只在块级作用域内有效 \n- 3.与let一样，必须先声明，后使用 \n- 4.与let一样，在同一作用域，const不能重复声明同一常量\n\n那么如果使用const声明对象呢？\n```\nconst b = {\n        name:'zs',\n        age:22\n    }\nb.name = \"lzx\";\n\nconsole.log(b.name+\"---\"+b.age);//输出lzx---22\n```\n<font color=\"red\">我们可以看到，使用const声明的对象的属性是可以修改。 </font>   \n因为Object类型是引用类型。用const声明常量保存的是对象的地址，不可变的是地址，在上面的代码中就是，不能把 b 指向另一个对象。而修改对象的属性，并不会改变对象的地址，因此用const声明对象的属性是可以修改的 \n\n# map与forEach的区别？\n\n\n1、forEach方法，是最基本的方法，就是遍历与循环，默认有3个传参：分别是遍历的数组内容item、数组索引index、和当前遍历数组Array。另外，除去第一个必须的回调函数参数，还可以接受一个上下文参数(改变回调函数的this指向)；并且forEach不会遍历空元素。\n2、map方法，基本用法与forEach一致，但是不同的，它会返回一个新的数组，所以在callback需要有return值，如果没有，会返回undefined。(从字面理解，map就是映射的意思)\n3、filter方法，用法和map很相似，从字面理解，就是过滤、筛选的意思。但是函数的callback需要返回布尔值true或false，并且返回值只需要为弱等==即可。\n4、some 方法，对数组中每一项运行指定函数，如果该函数对任一项返回true，则返回true。(一旦遇到true，就会中断循环，返回true，类似于||判断)\n5、every方法，对数组中的每一项运行给定函数，如果该函数对每一项返回true，则返回true。(一旦遇到false，就会中断循环，返回false，类似于&&判断)\n6、indexOf方法，与字符串中的indexOf类似，返回数组索引值，如果没有匹配，则会返回-1，第二个参数为可选，表示从当前位置开始搜索。\n7、lastIndexOf方法，与indexOf相似，只是是从数组的末尾开始查找，而第二个参数的默认值是array.length - 1。\n8、reduce方法，字面意思应该是‘减少’，但是实际是‘递归’的意思。实际就是应用一个函数针对数组的两个值(从左到右)，以减至一个值。它的callback接收4个参数：之前值(上一次循环返回的值)、当前值、索引值以及数组本身。initialValue参数可选，表示初始值。\n9、reduceRight方法，与reduce方法类似，只是从数组的末尾开始实现。\n\n# 谈一谈你理解的函数式编程？\n\n# 谈一谈箭头函数与普通函数的区别？\n\n\n- 箭头函数使得表达更加简洁。(这个是废话)\n- 函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。\n- 不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。\n- 不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。\n- 不可以使用yield命令，因此箭头函数不能用作Generator函数。\n\n\n# 谈一谈函数中this的指向吧？\n\n## 全局环境\n>无论是否在严格模式下，在全局执行环境中（在任何函数体外部）this 都指代全局对象。\n\n```bash\n// 在浏览器中, window 对象同时也是全局对象：\nconsole.log(this === window); // true\n\na = 37;\nconsole.log(window.a); // 37\n\nthis.b = \"MDN\";\nconsole.log(window.b)  // \"MDN\"\nconsole.log(b)         // \"MDN\"\n```\n\n## 函数（运行内）环境\n在函数内部，this的值取决于函数被调用的方式。\n### 简单调用\n\n因为下面的代码不在严格模式下，且 this 的值不是由该调用设置的，所以 this 的值默认指向全局对象\n```bash\nfunction f1(){\n  return this;\n}\n//在浏览器中：\nf1() === window;   //在浏览器中，全局对象是window\n\n//在Node中：\nf1() === global;\n```\n然而，在严格模式下，this将保持他进入执行环境时的值，所以下面的this将会默认为undefined。\n```bash\nfunction f2(){\n  \"use strict\"; // 这里是严格模式\n  return this;\n}\n\nf2() === undefined; // true\n```\n所以，在严格模式下，如果 this 没有被执行环境（execution context）定义，那它将保持为 undefined。\n\n>在第二个例子中，this的确应该是undefined，因为f2是被直接调用的，而不是作为对象的属性或方法调用的（如 window.f2()）。有一些浏览器最初在支持严格模式时没有正确实现这个功能，于是它们错误地返回了window对象。\n\n如果要想把 this 的值从一个环境传到另一个，就要用 call 或者apply 方法\n// 将一个对象作为call和apply的第一个参数，this会被绑定到这个对象。\n```bash\nvar obj = {a: 'Custom'};\n\n// 这个属性是在global对象定义的。\nvar a = 'Global';\n\nfunction whatsThis(arg) {\n  return this.a;  // this的值取决于函数的调用方式\n}\n\nwhatsThis();          // 'Global'\nwhatsThis.call(obj);  // 'Custom'\nwhatsThis.apply(obj); // 'Custom'\n```\n当一个函数在其主体中使用 this 关键字时，可以通过使用函数继承自Function.prototype 的 call 或 apply 方法将 this 值绑定到调用中的特定对象。\n```bash\nfunction add(c, d) {\n  return this.a + this.b + c + d;\n}\n\nvar o = {a: 1, b: 3};\n\n// 第一个参数是作为‘this’使用的对象\n// 后续参数作为参数传递给函数调用\nadd.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16\n\n// 第一个参数也是作为‘this’使用的对象\n// 第二个参数是一个数组，数组里的元素用作函数调用中的参数\nadd.apply(o, [10, 20]); // 1 + 3 + 10 + 20 = 34\n```\n使用 call 和 apply 函数的时候要注意，如果传递给 this 的值不是一个对象，JavaScript 会尝试使用内部 ToObject 操作将其转换为对象。因此，如果传递的值是一个原始值比如 7 或 'foo'，那么就会使用相关构造函数将它转换为对象，所以原始值 7 会被转换为对象，像 new Number(7) 这样，而字符串 'foo' 转化成 new String('foo') 这样，例如：\n```bash\nfunction bar() {\n  console.log(Object.prototype.toString.call(this));\n}\n\n//原始值 7 被隐式转换为对象\nbar.call(7); // [object Number]\n```\n### bind方法\nECMAScript 5 引入了 Function.prototype.bind。调用f.bind(someObject)会创建一个与f具有相同函数体和作用域的函数，但是在这个新函数中，this将永久地被绑定到了bind的第一个参数，无论这个函数是如何被调用的。\n```bash\nfunction f(){\n  return this.a;\n}\n\nvar g = f.bind({a:\"azerty\"});\nconsole.log(g()); // azerty\n\nvar h = g.bind({a:'yoo'}); // bind只生效一次！\nconsole.log(h()); // azerty\n\nvar o = {a:37, f:f, g:g, h:h};\nconsole.log(o.f(), o.g(), o.h()); // 37, azerty, azerty\n```\n### 箭头函数\n  [箭头函数详解1](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n  [箭头函数详解2](https://www.cnblogs.com/freelyflying/p/6978126.html)\n\n在箭头函数中，this与封闭词法环境的this保持一致。在全局代码中，它将被设置为全局对象\n```bash\nvar globalObject = this;\nvar foo = (() => this);\nconsole.log(foo() === globalObject); // true\n```\n>注意：如果将this传递给call、bind、或者apply，它将被忽略。不过你仍然可以为调用添加参数，不过第一个参数（thisArg）应该设置为null。\n\n```bash\n// 接着上面的代码\n// 作为对象的一个方法调用\nvar obj = {foo: foo};\nconsole.log(obj.foo() === globalObject); // true\n\n// 尝试使用call来设定this\nconsole.log(foo.call(obj) === globalObject); // true\n\n// 尝试使用bind来设定this\nfoo = foo.bind(obj);\nconsole.log(foo() === globalObject); // true\n```\n无论如何，foo 的 this 被设置为他被创建时的环境（在上面的例子中，就是全局对象）。这同样适用于在其他函数内创建的箭头函数：这些箭头函数的this被设置为封闭的词法环境的。\n```bash\n// 创建一个含有bar方法的obj对象，\n// bar返回一个函数，\n// 这个函数返回this，\n// 这个返回的函数是以箭头函数创建的，\n// 所以它的this被永久绑定到了它外层函数的this。\n// bar的值可以在调用中设置，这反过来又设置了返回函数的值。\nvar obj = {\n  bar: function() {\n    var x = (() => this);\n    return x;\n  }\n};\n\n// 作为obj对象的一个方法来调用bar，把它的this绑定到obj。\n// 将返回的函数的引用赋值给fn。\nvar fn = obj.bar();\n\n// 直接调用fn而不设置this，\n// 通常(即不使用箭头函数的情况)默认为全局对象\n// 若在严格模式则为undefined\nconsole.log(fn() === obj); // true\n\n// 但是注意，如果你只是引用obj的方法，\n// 而没有调用它\nvar fn2 = obj.bar;\n// 那么调用箭头函数后，this指向window，因为它从 bar 继承了this。\nconsole.log(fn2()() == window); // true\n```\n在上面的例子中，一个赋值给了 obj.bar的函数（称为匿名函数 A），返回了另一个箭头函数（称为匿名函数 B）。因此，在 A 调用时，函数B的this被永久设置为obj.bar（函数A）的this。当返回的函数（函数B）被调用时，它this始终是最初设置的。在上面的代码示例中，函数B的this被设置为函数A的this，即obj，所以即使被调用的方式通常将其设置为 undefined 或全局对象（或者如前面示例中的其他全局执行环境中的方法），它的 this 也仍然是 obj .\n### 作为对象的方法\n当函数作为对象里的方法被调用时，它们的 this 是调用该函数的对象。\n下面的例子中，当 o.f()被调用时，函数内的this将绑定到o对象。\n```bash\nvar o = {\n  prop: 37,\n  f: function() {\n    return this.prop;\n  }\n};\n\nconsole.log(o.f()); // logs 37\n```\n请注意，这样的行为，根本不受函数定义方式或位置的影响。在前面的例子中，我们在定义对象o的同时，将函数内联定义为成员f。但是，我们也可以先定义函数，然后再将其附属到o.f。这样做会导致相同的行为：\n```bash\nvar o = {prop: 37};\n\nfunction independent() {\n  return this.prop;\n}\n\no.f = independent;\n\nconsole.log(o.f()); // logs 37\n```\n这表明函数是从o的f成员调用的才是重点。\n\n同样，this 的绑定只受最靠近的成员引用的影响。在下面的这个例子中，我们把一个方法g当作对象o.b的函数调用。在这次执行期间，函数中的this将指向o.b。事实证明，这与他是对象 o 的成员没有多大关系，最靠近的引用才是最重要的。\n```bash\no.b = {g: independent, prop: 42};\nconsole.log(o.b.g()); // 42\n```\n### 原型链中的 this\n对于在对象原型链上某处定义的方法，同样的概念也适用。如果该方法存在于一个对象的原型链上，那么this指向的是调用这个方法的对象，就像该方法在对象上一样。\n```bash\nvar o = {\n  f: function() { \n    return this.a + this.b; \n  }\n};\nvar p = Object.create(o);\np.a = 1;\np.b = 4;\n\nconsole.log(p.f()); // 5\n```\n在这个例子中，对象p没有属于它自己的f属性，它的f属性继承自它的原型。虽然在对 f 的查找过程中，最终是在 o 中找到 f 属性的，这并没有关系；查找过程首先从 p.f 的引用开始，所以函数中的 this 指向p。也就是说，因为f是作为p的方法调用的，所以它的this指向了p。这是 JavaScript 的原型继承中的一个有趣的特性。\n### getter 与 setter 中的 this\n再次，相同的概念也适用于当函数在一个 getter 或者 setter 中被调用。用作 getter 或 setter 的函数都会把 this 绑定到设置或获取属性的对象。\n```bash\nfunction sum() {\n  return this.a + this.b + this.c;\n}\n\nvar o = {\n  a: 1,\n  b: 2,\n  c: 3,\n  get average() {\n    return (this.a + this.b + this.c) / 3;\n  }\n};\n\nObject.defineProperty(o, 'sum', {\n    get: sum, enumerable: true, configurable: true});\n\nconsole.log(o.average, o.sum); // logs 2, 6\n```\n### 作为构造函数\n当一个函数用作构造函数时（使用new关键字），它的this被绑定到正在构造的新对象\n>虽然构造器返回的默认值是this所指的那个对象，但它仍可以手动返回其他的对象（如果返回值不是一个对象，则返回this对象）。\n\n```bash\n/*\n * 构造函数这样工作:\n *\n * function MyConstructor(){\n *   // 函数实体写在这里\n *   // 根据需要在this上创建属性，然后赋值给它们，比如：\n *   this.fum = \"nom\";\n *   // 等等...\n *\n *   // 如果函数具有返回对象的return语句，\n *   // 则该对象将是 new 表达式的结果。 \n *   // 否则，表达式的结果是当前绑定到 this 的对象。\n *   //（即通常看到的常见情况）。\n * }\n */\n\nfunction C(){\n  this.a = 37;\n}\n\nvar o = new C();\nconsole.log(o.a); // logs 37\n\n\nfunction C2(){\n  this.a = 37;\n  return {a:38};\n}\n\no = new C2();\nconsole.log(o.a); // logs 38\n```\n### 作为一个DOM事件处理函数节\n当函数被用作事件处理函数时，它的this指向触发事件的元素（一些浏览器在使用非addEventListener的函数动态添加监听函数时不遵守这个约定）。\n```bash\n// 被调用时，将关联的元素变成蓝色\nfunction bluify(e){\n  console.log(this === e.currentTarget); // 总是 true\n\n  // 当 currentTarget 和 target 是同一个对象时为 true\n  console.log(this === e.target);        \n  this.style.backgroundColor = '#A5D9F3';\n}\n\n// 获取文档中的所有元素的列表\nvar elements = document.getElementsByTagName('*');\n\n// 将bluify作为元素的点击监听函数，当元素被点击时，就会变成蓝色\nfor(var i=0 ; i<elements.length ; i++){\n  elements[i].addEventListener('click', bluify, false);\n}\n```\n### 作为一个内联事件处理函数\n当代码被内联on-event 处理函数调用时，它的this指向监听器所在的DOM元素：\n```bash\n<button onclick=\"alert(this.tagName.toLowerCase());\">\n  Show this\n</button>\n```\n上面的 alert 会显示button。注意只有外层代码中的this是这样设置的：\n```bash\n<button onclick=\"alert((function(){return this})());\">\n  Show inner this\n</button>\n```\n在这种情况下，没有设置内部函数的this，所以它指向 global/window 对象（即非严格模式下调用的函数未设置this时指向的默认对象）\n\n\n\n\n# 异步编程的实现方式？\n\n\n回调函数：\n优点：简单、容易理解\n缺点：不利于维护，代码耦合高\n\n\n>1.事件监听(采用时间驱动模式，取决于某个事件是否发生)：\n\n优点：容易理解，可以绑定多个事件，每个事件可以指定多个回调函数\n缺点：事件驱动型，流程不够清晰\n\n\n>2.发布/订阅(观察者模式)：\n\n类似于事件监听，但是可以通过‘消息中心’，了解现在有多少发布者，多少订阅者。\n\n\n>3.Promise对象\n\n优点：可以利用then方法，进行链式写法；可以书写错误时的回调函数；\n缺点：编写和理解，相对比较难\n\n\n>4.Generator函数\n\n优点：函数体内外的数据交换、错误处理机制\n缺点：流程管理不方便\n\n>5.async函数\n\n优点：内置执行器、更好的语义、更广的适用性、返回的是Promise、结构清晰。\n缺点：错误处理机制\n\n......js基础\n\n类和继承（es5实现方法 + es6实现方法）；\n\npromise；\n\n写一个方法遍历所有文档树所有节点(考察递归)；\n\n\njsonp和跨域；\n\nsort排序相关(注意ascll这个坑)\n\n数组和对象的深浅拷贝；\n\nString + Array的一些基本操作；\n写一个数组去重的方法；\n冒泡和捕获；\n事件代理；\n\ncall、apply、bind；\n变量提升；\n高阶函数；\n动画；\nsetTimeout、setInterval和requestAnimationFrame；\n模块化开发；\n引起内存泄漏的原因；\najax；\nmap、filter、reduce相关；\nMap和Set；\n移动端开发相关；\n\n\n......技术拓展\n\n设计模式相关(单例、发布订阅等)；\n浏览器渲染过程；\n性能优化相关(这个点很大，设计很多方面，不要自以为优化就是网上经常看到的那一套)；\n设计一个模版引擎；\n设计一个打包工具；\n设计一个mvvm框架需要注意的case；\n源码阅读相关；\n\n作者：玩弄心里的鬼\n链接：https://juejin.im/post/59ec3d50f265da431c6f7339\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n# json的JSON.parse()和JSON.stringfy()\n## JSON.parse()\n>从字符串解析出对象\n\n```\n//定义一个字符串\nvar data='{\"name\":\"goatling\"}'\n//解析对象​\n​JSON.parse(data)\n结果是：\n​name:\"goatling\"\n```\n## JSON.stringfy()\n>从一个对象解析出字符串\n\n```\nvar data={name:'goatling'}\nJSON.stringify(data)\n结果是：\n'{\"name\":\"goatling\"}'\n```  ","slug":"面试JS","published":1,"updated":"2019-07-17T11:39:10.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cy50063t09zr6tspfym","content":"<h1 id=\"介绍一下JS的数据类型？\"><a href=\"#介绍一下JS的数据类型？\" class=\"headerlink\" title=\"介绍一下JS的数据类型？\"></a>介绍一下JS的数据类型？</h1><blockquote>\n<p>简单类型：String、Number、Boolean、Null、Undefined<br>复杂类型：ObjectES6新增类型：Symbol<br>扩展：null与undefined有什么区别 </p>\n</blockquote>\n<p>答：null 表示一个对象被定义了，值为“空值”，而undefined 表示不存在这个值。 正因为这个原因，所以使用typeof判断时，null返回的是object，而undefined返回的是undefined。(判断两者时需要使用===严格判断)<br>Boolean类型在进行判断的时候设置为 0、-0、null、””、false、undefined 或 NaN，则该对象设置为 false。否则设置为 true（即使 value 参数是字符串 “false”）</p>\n<h1 id=\"如何通过JS判断一个数组？\"><a href=\"#如何通过JS判断一个数组？\" class=\"headerlink\" title=\"如何通过JS判断一个数组？\"></a>如何通过JS判断一个数组？</h1><blockquote>\n<p>1.instanceof方法</p>\n</blockquote>\n<p>instanceof 运算符是用来测试一个对象是否在其原型链原型构造函数的属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = []; </span><br><span class=\"line\">arr instanceof Array; // true</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>2.constructor方法</p>\n</blockquote>\n<p>constructor属性返回对创建此对象的数组函数的引用，就是返回对象相对应的构造函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = []; </span><br><span class=\"line\">arr.constructor == Array; //true</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>3.特性判断法</p>\n</blockquote>\n<p>利用判断数组独有的length和splice方法，但是这是不靠谱的，因为对象也能添加方法和属性。那怎么办了，有一个办法，可以利用数组的length属性没法枚举来判断。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isArray(object)&#123;</span><br><span class=\"line\">      return  object &amp;&amp; typeof object===&apos;object&apos; &amp;&amp;    </span><br><span class=\"line\">      typeof object.length===&apos;number&apos; &amp;&amp;  </span><br><span class=\"line\">      typeof object.splice===&apos;function&apos; &amp;&amp;    </span><br><span class=\"line\">       //判断length属性是否是可枚举的 对于数组 将得到false  </span><br><span class=\"line\">      !(object.propertyIsEnumerable(&apos;length&apos;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>4.最简单的方法</p>\n</blockquote>\n<p>这种写法，是 jQuery 正在使用的，淘宝的 kissy 也是使用这种方式。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.prototype.toString.call(value) == &apos;[object Array]&apos;</span><br><span class=\"line\">// 利用这个方法，可以写一个返回数据类型的方法</span><br><span class=\"line\">var isType = function (obj) &#123;</span><br><span class=\"line\">     return Object.prototype.toString.call(obj).slice(8,-1); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>5.ES5新增方法isArray()</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new Array(123);</span><br><span class=\"line\">var b = new Date();</span><br><span class=\"line\">console.log(Array.isArray(a)); //true</span><br><span class=\"line\">console.log(Array.isArray(b)); //false</span><br></pre></td></tr></table></figure>\n<p>&amp;扩展：<br>使用instanceof和construcor，被判断的array必须是在当前页面声明的。比如，一个页面（父页面）有一个框架，框架中引用了一个页面（子页面），在子页面中声明了一个array，并将其赋值给父页面的一个变量，这时判断该变量，Array == object.constructor;会返回false。<br>最简单的方法，在IE6下判断null和undefined，有一些bug，判断undefined和null均为Object，(并不是bug，是在ES3的标准下返回的就为Object)</p>\n<h1 id=\"谈一谈let、const与var的区别？\"><a href=\"#谈一谈let、const与var的区别？\" class=\"headerlink\" title=\"谈一谈let、const与var的区别？\"></a>谈一谈let、const与var的区别？</h1><h2 id=\"let命令基本用法\"><a href=\"#let命令基本用法\" class=\"headerlink\" title=\"let命令基本用法\"></a>let命令基本用法</h2><p>在ES6中，新增了let命令，用于声明变量，用来取代ES5中var命令，消除var声明的变量的不合理，不严谨之处。const用于声明常量。<br>让我们来看看let和var的区别</p>\n<blockquote>\n<p>1.let不存在变量提升</p>\n</blockquote>\n<p>使用let声明的变量，不会像使用var那样存在“变量提升“”的现象。所以使用let声明变量，必须遵循“先声明，后使用”的原则。否则会报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(a); //ReferenceError</span><br><span class=\"line\">let a = 10;</span><br></pre></td></tr></table></figure></p>\n<p>如果是var声明的变量，则不会报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(b); //undefined</span><br><span class=\"line\">var b = 10;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>2.let声明的变量，存在块级作用域</p>\n</blockquote>\n<p>let声明的变量只在所声明的代码块内有效。块级作用域由 { } 包括，if语句和for语句里面的{ }也属于块作用域。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    var a = 10;</span><br><span class=\"line\">    let b = 20;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    console.log(a); //10</span><br><span class=\"line\">    console.log(b); // ReferenceError: b is not defined</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a =[];</span><br><span class=\"line\">for( var i=0; i&lt;10; i++ )&#123;</span><br><span class=\"line\">    a[i] = function()&#123;</span><br><span class=\"line\">        console.log(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for( var j = 0; j&lt;a.length; j++ )&#123;</span><br><span class=\"line\">        a[j](); //输出10个10。 因为i是var声明的，在全局范围内都用，每次新的i都会覆盖原来的。</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a =[];</span><br><span class=\"line\">    for( let i=0; i&lt;10; i++ )&#123;</span><br><span class=\"line\">        a[i] = function()&#123;</span><br><span class=\"line\">            console.log(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for( let j = 0; j&lt;a.length; j++ )&#123;</span><br><span class=\"line\">        a[j](); //输出 0，1，2，...，9</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>3.let不允许在同一作用域内重复声明同一个变量在同一作用域内，如果使用var声明同一个变量，则后面的覆盖前面的</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 10;</span><br><span class=\"line\">let a = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a);//Uncaught SyntaxError:</span><br><span class=\"line\">                 Identifier &apos;a&apos; has already been declared</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">let a = 10;</span><br><span class=\"line\">let a = 15;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a);//Uncaught SyntaxError:</span><br><span class=\"line\">                 Identifier &apos;a&apos; has already been declared</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>4.暂时性死区：在代码块内，使用let声明变量之前，该变量都是不可以使用用<br>只要在同一作用域内存在let命令，他所声明的变量就“绑定”在这个作用域内，不管外部有没有声明</p>\n</blockquote>\n<p>例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a =10;</span><br><span class=\"line\">function fn1()&#123;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">    let a = 5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn1();//Uncaught ReferenceError: a is not defined</span><br></pre></td></tr></table></figure></p>\n<p>ES6规定，如果在区块中存在let和const声明的变量，则这个区块对这些声明的变量从一开始就形成一个封闭的作用域。不管在外部有没有声明这个变量。必须遵守“先声明，后使用”的原则，否则报错</p>\n<p>ES6规定暂时性死区和不存在变量提升，主要是为了减少运行程序的错误，防止出现“先使用（变量），后声明（变量）”的情况，从而导致意料之外的行为。这种错误在ES5中很常见，现在有了这种规定，就可以避免出现此类错误了</p>\n<font color=\"red\">总之，暂时性死区的本质就是，只要一进入当前作用域，所使用的变量就已存在，但是不可获取，只有等到声明变量的哪一行代码的出现，在可以获取和使用该变量</font>\n\n<h2 id=\"const命令的基本使用\"><a href=\"#const命令的基本使用\" class=\"headerlink\" title=\"const命令的基本使用\"></a>const命令的基本使用</h2><p>const用来声明常量，一旦声明，其值就不能更改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = 10;</span><br><span class=\"line\">    a = 20;</span><br><span class=\"line\"></span><br><span class=\"line\"> console.log(a);//Uncaught TypeError: Assignment to constant variable.</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>1.const声明的常量不能改变，意味着const一旦声明常量，就必须同时初始化。不能先声明，后初始化，这样会报错</p>\n</li>\n<li><p>2.与let一样。const声明的常量也只在块级作用域内有效 </p>\n</li>\n<li>3.与let一样，必须先声明，后使用 </li>\n<li>4.与let一样，在同一作用域，const不能重复声明同一常量</li>\n</ul>\n<p>那么如果使用const声明对象呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const b = &#123;</span><br><span class=\"line\">        name:&apos;zs&apos;,</span><br><span class=\"line\">        age:22</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">b.name = &quot;lzx&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(b.name+&quot;---&quot;+b.age);//输出lzx---22</span><br></pre></td></tr></table></figure></p>\n<p><font color=\"red\">我们可以看到，使用const声明的对象的属性是可以修改。 </font><br>因为Object类型是引用类型。用const声明常量保存的是对象的地址，不可变的是地址，在上面的代码中就是，不能把 b 指向另一个对象。而修改对象的属性，并不会改变对象的地址，因此用const声明对象的属性是可以修改的 </p>\n<h1 id=\"map与forEach的区别？\"><a href=\"#map与forEach的区别？\" class=\"headerlink\" title=\"map与forEach的区别？\"></a>map与forEach的区别？</h1><p>1、forEach方法，是最基本的方法，就是遍历与循环，默认有3个传参：分别是遍历的数组内容item、数组索引index、和当前遍历数组Array。另外，除去第一个必须的回调函数参数，还可以接受一个上下文参数(改变回调函数的this指向)；并且forEach不会遍历空元素。<br>2、map方法，基本用法与forEach一致，但是不同的，它会返回一个新的数组，所以在callback需要有return值，如果没有，会返回undefined。(从字面理解，map就是映射的意思)<br>3、filter方法，用法和map很相似，从字面理解，就是过滤、筛选的意思。但是函数的callback需要返回布尔值true或false，并且返回值只需要为弱等==即可。<br>4、some 方法，对数组中每一项运行指定函数，如果该函数对任一项返回true，则返回true。(一旦遇到true，就会中断循环，返回true，类似于||判断)<br>5、every方法，对数组中的每一项运行给定函数，如果该函数对每一项返回true，则返回true。(一旦遇到false，就会中断循环，返回false，类似于&amp;&amp;判断)<br>6、indexOf方法，与字符串中的indexOf类似，返回数组索引值，如果没有匹配，则会返回-1，第二个参数为可选，表示从当前位置开始搜索。<br>7、lastIndexOf方法，与indexOf相似，只是是从数组的末尾开始查找，而第二个参数的默认值是array.length - 1。<br>8、reduce方法，字面意思应该是‘减少’，但是实际是‘递归’的意思。实际就是应用一个函数针对数组的两个值(从左到右)，以减至一个值。它的callback接收4个参数：之前值(上一次循环返回的值)、当前值、索引值以及数组本身。initialValue参数可选，表示初始值。<br>9、reduceRight方法，与reduce方法类似，只是从数组的末尾开始实现。</p>\n<h1 id=\"谈一谈你理解的函数式编程？\"><a href=\"#谈一谈你理解的函数式编程？\" class=\"headerlink\" title=\"谈一谈你理解的函数式编程？\"></a>谈一谈你理解的函数式编程？</h1><h1 id=\"谈一谈箭头函数与普通函数的区别？\"><a href=\"#谈一谈箭头函数与普通函数的区别？\" class=\"headerlink\" title=\"谈一谈箭头函数与普通函数的区别？\"></a>谈一谈箭头函数与普通函数的区别？</h1><ul>\n<li>箭头函数使得表达更加简洁。(这个是废话)</li>\n<li>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</li>\n<li>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</li>\n<li>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。</li>\n<li>不可以使用yield命令，因此箭头函数不能用作Generator函数。</li>\n</ul>\n<h1 id=\"谈一谈函数中this的指向吧？\"><a href=\"#谈一谈函数中this的指向吧？\" class=\"headerlink\" title=\"谈一谈函数中this的指向吧？\"></a>谈一谈函数中this的指向吧？</h1><h2 id=\"全局环境\"><a href=\"#全局环境\" class=\"headerlink\" title=\"全局环境\"></a>全局环境</h2><blockquote>\n<p>无论是否在严格模式下，在全局执行环境中（在任何函数体外部）this 都指代全局对象。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在浏览器中, window 对象同时也是全局对象：</span><br><span class=\"line\">console.log(this === window); // <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = 37;</span><br><span class=\"line\">console.log(window.a); // 37</span><br><span class=\"line\"></span><br><span class=\"line\">this.b = <span class=\"string\">\"MDN\"</span>;</span><br><span class=\"line\">console.log(window.b)  // <span class=\"string\">\"MDN\"</span></span><br><span class=\"line\">console.log(b)         // <span class=\"string\">\"MDN\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数（运行内）环境\"><a href=\"#函数（运行内）环境\" class=\"headerlink\" title=\"函数（运行内）环境\"></a>函数（运行内）环境</h2><p>在函数内部，this的值取决于函数被调用的方式。</p>\n<h3 id=\"简单调用\"><a href=\"#简单调用\" class=\"headerlink\" title=\"简单调用\"></a>简单调用</h3><p>因为下面的代码不在严格模式下，且 this 的值不是由该调用设置的，所以 this 的值默认指向全局对象<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>()&#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//在浏览器中：</span><br><span class=\"line\">f1() === window;   //在浏览器中，全局对象是window</span><br><span class=\"line\"></span><br><span class=\"line\">//在Node中：</span><br><span class=\"line\">f1() === global;</span><br></pre></td></tr></table></figure></p>\n<p>然而，在严格模式下，this将保持他进入执行环境时的值，所以下面的this将会默认为undefined。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f2</span></span>()&#123;</span><br><span class=\"line\">  <span class=\"string\">\"use strict\"</span>; // 这里是严格模式</span><br><span class=\"line\">  <span class=\"built_in\">return</span> this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f2() === undefined; // <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>所以，在严格模式下，如果 this 没有被执行环境（execution context）定义，那它将保持为 undefined。</p>\n<blockquote>\n<p>在第二个例子中，this的确应该是undefined，因为f2是被直接调用的，而不是作为对象的属性或方法调用的（如 window.f2()）。有一些浏览器最初在支持严格模式时没有正确实现这个功能，于是它们错误地返回了window对象。</p>\n</blockquote>\n<p>如果要想把 this 的值从一个环境传到另一个，就要用 call 或者apply 方法<br>// 将一个对象作为call和apply的第一个参数，this会被绑定到这个对象。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;a: <span class=\"string\">'Custom'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 这个属性是在global对象定义的。</span><br><span class=\"line\">var a = <span class=\"string\">'Global'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> whatsThis(arg) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> this.a;  // this的值取决于函数的调用方式</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">whatsThis();          // <span class=\"string\">'Global'</span></span><br><span class=\"line\">whatsThis.call(obj);  // <span class=\"string\">'Custom'</span></span><br><span class=\"line\">whatsThis.apply(obj); // <span class=\"string\">'Custom'</span></span><br></pre></td></tr></table></figure></p>\n<p>当一个函数在其主体中使用 this 关键字时，可以通过使用函数继承自Function.prototype 的 call 或 apply 方法将 this 值绑定到调用中的特定对象。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> add(c, d) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> this.a + this.b + c + d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var o = &#123;a: 1, b: 3&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 第一个参数是作为‘this’使用的对象</span><br><span class=\"line\">// 后续参数作为参数传递给函数调用</span><br><span class=\"line\">add.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16</span><br><span class=\"line\"></span><br><span class=\"line\">// 第一个参数也是作为‘this’使用的对象</span><br><span class=\"line\">// 第二个参数是一个数组，数组里的元素用作函数调用中的参数</span><br><span class=\"line\">add.apply(o, [10, 20]); // 1 + 3 + 10 + 20 = 34</span><br></pre></td></tr></table></figure></p>\n<p>使用 call 和 apply 函数的时候要注意，如果传递给 this 的值不是一个对象，JavaScript 会尝试使用内部 ToObject 操作将其转换为对象。因此，如果传递的值是一个原始值比如 7 或 ‘foo’，那么就会使用相关构造函数将它转换为对象，所以原始值 7 会被转换为对象，像 new Number(7) 这样，而字符串 ‘foo’ 转化成 new String(‘foo’) 这样，例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">bar</span></span>() &#123;</span><br><span class=\"line\">  console.log(Object.prototype.toString.call(this));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//原始值 7 被隐式转换为对象</span><br><span class=\"line\">bar.call(7); // [object Number]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"bind方法\"><a href=\"#bind方法\" class=\"headerlink\" title=\"bind方法\"></a>bind方法</h3><p>ECMAScript 5 引入了 Function.prototype.bind。调用f.bind(someObject)会创建一个与f具有相同函数体和作用域的函数，但是在这个新函数中，this将永久地被绑定到了bind的第一个参数，无论这个函数是如何被调用的。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f</span></span>()&#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> this.a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var g = f.bind(&#123;a:<span class=\"string\">\"azerty\"</span>&#125;);</span><br><span class=\"line\">console.log(g()); // azerty</span><br><span class=\"line\"></span><br><span class=\"line\">var h = g.bind(&#123;a:<span class=\"string\">'yoo'</span>&#125;); // <span class=\"built_in\">bind</span>只生效一次！</span><br><span class=\"line\">console.log(h()); // azerty</span><br><span class=\"line\"></span><br><span class=\"line\">var o = &#123;a:37, f:f, g:g, h:h&#125;;</span><br><span class=\"line\">console.log(o.f(), o.g(), o.h()); // 37, azerty, azerty</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">箭头函数详解1</a><br>  <a href=\"https://www.cnblogs.com/freelyflying/p/6978126.html\" target=\"_blank\" rel=\"noopener\">箭头函数详解2</a></p>\n<p>在箭头函数中，this与封闭词法环境的this保持一致。在全局代码中，它将被设置为全局对象<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var globalObject = this;</span><br><span class=\"line\">var foo = (() =&gt; this);</span><br><span class=\"line\">console.log(foo() === globalObject); // <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：如果将this传递给call、bind、或者apply，它将被忽略。不过你仍然可以为调用添加参数，不过第一个参数（thisArg）应该设置为null。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 接着上面的代码</span><br><span class=\"line\">// 作为对象的一个方法调用</span><br><span class=\"line\">var obj = &#123;foo: foo&#125;;</span><br><span class=\"line\">console.log(obj.foo() === globalObject); // <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 尝试使用call来设定this</span><br><span class=\"line\">console.log(foo.call(obj) === globalObject); // <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 尝试使用<span class=\"built_in\">bind</span>来设定this</span><br><span class=\"line\">foo = foo.bind(obj);</span><br><span class=\"line\">console.log(foo() === globalObject); // <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>无论如何，foo 的 this 被设置为他被创建时的环境（在上面的例子中，就是全局对象）。这同样适用于在其他函数内创建的箭头函数：这些箭头函数的this被设置为封闭的词法环境的。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建一个含有bar方法的obj对象，</span><br><span class=\"line\">// bar返回一个函数，</span><br><span class=\"line\">// 这个函数返回this，</span><br><span class=\"line\">// 这个返回的函数是以箭头函数创建的，</span><br><span class=\"line\">// 所以它的this被永久绑定到了它外层函数的this。</span><br><span class=\"line\">// bar的值可以在调用中设置，这反过来又设置了返回函数的值。</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  bar: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    var x = (() =&gt; this);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> x;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 作为obj对象的一个方法来调用bar，把它的this绑定到obj。</span><br><span class=\"line\">// 将返回的函数的引用赋值给fn。</span><br><span class=\"line\">var fn = obj.bar();</span><br><span class=\"line\"></span><br><span class=\"line\">// 直接调用fn而不设置this，</span><br><span class=\"line\">// 通常(即不使用箭头函数的情况)默认为全局对象</span><br><span class=\"line\">// 若在严格模式则为undefined</span><br><span class=\"line\">console.log(fn() === obj); // <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 但是注意，如果你只是引用obj的方法，</span><br><span class=\"line\">// 而没有调用它</span><br><span class=\"line\">var fn2 = obj.bar;</span><br><span class=\"line\">// 那么调用箭头函数后，this指向window，因为它从 bar 继承了this。</span><br><span class=\"line\">console.log(fn2()() == window); // <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，一个赋值给了 obj.bar的函数（称为匿名函数 A），返回了另一个箭头函数（称为匿名函数 B）。因此，在 A 调用时，函数B的this被永久设置为obj.bar（函数A）的this。当返回的函数（函数B）被调用时，它this始终是最初设置的。在上面的代码示例中，函数B的this被设置为函数A的this，即obj，所以即使被调用的方式通常将其设置为 undefined 或全局对象（或者如前面示例中的其他全局执行环境中的方法），它的 this 也仍然是 obj .</p>\n<h3 id=\"作为对象的方法\"><a href=\"#作为对象的方法\" class=\"headerlink\" title=\"作为对象的方法\"></a>作为对象的方法</h3><p>当函数作为对象里的方法被调用时，它们的 this 是调用该函数的对象。<br>下面的例子中，当 o.f()被调用时，函数内的this将绑定到o对象。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123;</span><br><span class=\"line\">  prop: 37,</span><br><span class=\"line\">  f: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> this.prop;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(o.f()); // logs 37</span><br></pre></td></tr></table></figure></p>\n<p>请注意，这样的行为，根本不受函数定义方式或位置的影响。在前面的例子中，我们在定义对象o的同时，将函数内联定义为成员f。但是，我们也可以先定义函数，然后再将其附属到o.f。这样做会导致相同的行为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123;prop: 37&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">independent</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> this.prop;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">o.f = independent;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(o.f()); // logs 37</span><br></pre></td></tr></table></figure></p>\n<p>这表明函数是从o的f成员调用的才是重点。</p>\n<p>同样，this 的绑定只受最靠近的成员引用的影响。在下面的这个例子中，我们把一个方法g当作对象o.b的函数调用。在这次执行期间，函数中的this将指向o.b。事实证明，这与他是对象 o 的成员没有多大关系，最靠近的引用才是最重要的。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o.b = &#123;g: independent, prop: 42&#125;;</span><br><span class=\"line\">console.log(o.b.g()); // 42</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"原型链中的-this\"><a href=\"#原型链中的-this\" class=\"headerlink\" title=\"原型链中的 this\"></a>原型链中的 this</h3><p>对于在对象原型链上某处定义的方法，同样的概念也适用。如果该方法存在于一个对象的原型链上，那么this指向的是调用这个方法的对象，就像该方法在对象上一样。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123;</span><br><span class=\"line\">  f: <span class=\"function\"><span class=\"title\">function</span></span>() &#123; </span><br><span class=\"line\">    <span class=\"built_in\">return</span> this.a + this.b; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var p = Object.create(o);</span><br><span class=\"line\">p.a = 1;</span><br><span class=\"line\">p.b = 4;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(p.f()); // 5</span><br></pre></td></tr></table></figure></p>\n<p>在这个例子中，对象p没有属于它自己的f属性，它的f属性继承自它的原型。虽然在对 f 的查找过程中，最终是在 o 中找到 f 属性的，这并没有关系；查找过程首先从 p.f 的引用开始，所以函数中的 this 指向p。也就是说，因为f是作为p的方法调用的，所以它的this指向了p。这是 JavaScript 的原型继承中的一个有趣的特性。</p>\n<h3 id=\"getter-与-setter-中的-this\"><a href=\"#getter-与-setter-中的-this\" class=\"headerlink\" title=\"getter 与 setter 中的 this\"></a>getter 与 setter 中的 this</h3><p>再次，相同的概念也适用于当函数在一个 getter 或者 setter 中被调用。用作 getter 或 setter 的函数都会把 this 绑定到设置或获取属性的对象。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">sum</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> this.a + this.b + this.c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var o = &#123;</span><br><span class=\"line\">  a: 1,</span><br><span class=\"line\">  b: 2,</span><br><span class=\"line\">  c: 3,</span><br><span class=\"line\">  get <span class=\"function\"><span class=\"title\">average</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> (this.a + this.b + this.c) / 3;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Object.defineProperty(o, <span class=\"string\">'sum'</span>, &#123;</span><br><span class=\"line\">    get: sum, enumerable: <span class=\"literal\">true</span>, configurable: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(o.average, o.sum); // logs 2, 6</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"作为构造函数\"><a href=\"#作为构造函数\" class=\"headerlink\" title=\"作为构造函数\"></a>作为构造函数</h3><p>当一个函数用作构造函数时（使用new关键字），它的this被绑定到正在构造的新对象</p>\n<blockquote>\n<p>虽然构造器返回的默认值是this所指的那个对象，但它仍可以手动返回其他的对象（如果返回值不是一个对象，则返回this对象）。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * 构造函数这样工作:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">MyConstructor</span></span>()&#123;</span><br><span class=\"line\"> *   // 函数实体写在这里</span><br><span class=\"line\"> *   // 根据需要在this上创建属性，然后赋值给它们，比如：</span><br><span class=\"line\"> *   this.fum = <span class=\"string\">\"nom\"</span>;</span><br><span class=\"line\"> *   // 等等...</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *   // 如果函数具有返回对象的<span class=\"built_in\">return</span>语句，</span><br><span class=\"line\"> *   // 则该对象将是 new 表达式的结果。 </span><br><span class=\"line\"> *   // 否则，表达式的结果是当前绑定到 this 的对象。</span><br><span class=\"line\"> *   //（即通常看到的常见情况）。</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">C</span></span>()&#123;</span><br><span class=\"line\">  this.a = 37;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var o = new C();</span><br><span class=\"line\">console.log(o.a); // logs 37</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">C2</span></span>()&#123;</span><br><span class=\"line\">  this.a = 37;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> &#123;a:38&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">o = new C2();</span><br><span class=\"line\">console.log(o.a); // logs 38</span><br></pre></td></tr></table></figure>\n<h3 id=\"作为一个DOM事件处理函数节\"><a href=\"#作为一个DOM事件处理函数节\" class=\"headerlink\" title=\"作为一个DOM事件处理函数节\"></a>作为一个DOM事件处理函数节</h3><p>当函数被用作事件处理函数时，它的this指向触发事件的元素（一些浏览器在使用非addEventListener的函数动态添加监听函数时不遵守这个约定）。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 被调用时，将关联的元素变成蓝色</span><br><span class=\"line\"><span class=\"keyword\">function</span> bluify(e)&#123;</span><br><span class=\"line\">  console.log(this === e.currentTarget); // 总是 <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  // 当 currentTarget 和 target 是同一个对象时为 <span class=\"literal\">true</span></span><br><span class=\"line\">  console.log(this === e.target);        </span><br><span class=\"line\">  this.style.backgroundColor = <span class=\"string\">'#A5D9F3'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取文档中的所有元素的列表</span><br><span class=\"line\">var elements = document.getElementsByTagName(<span class=\"string\">'*'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">// 将bluify作为元素的点击监听函数，当元素被点击时，就会变成蓝色</span><br><span class=\"line\"><span class=\"keyword\">for</span>(var i=0 ; i&lt;elements.length ; i++)&#123;</span><br><span class=\"line\">  elements[i].addEventListener(<span class=\"string\">'click'</span>, bluify, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"作为一个内联事件处理函数\"><a href=\"#作为一个内联事件处理函数\" class=\"headerlink\" title=\"作为一个内联事件处理函数\"></a>作为一个内联事件处理函数</h3><p>当代码被内联on-event 处理函数调用时，它的this指向监听器所在的DOM元素：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onclick=<span class=\"string\">\"alert(this.tagName.toLowerCase());\"</span>&gt;</span><br><span class=\"line\">  Show this</span><br><span class=\"line\">&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>上面的 alert 会显示button。注意只有外层代码中的this是这样设置的：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onclick=<span class=\"string\">\"alert((function()&#123;return this&#125;)());\"</span>&gt;</span><br><span class=\"line\">  Show inner this</span><br><span class=\"line\">&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在这种情况下，没有设置内部函数的this，所以它指向 global/window 对象（即非严格模式下调用的函数未设置this时指向的默认对象）</p>\n<h1 id=\"异步编程的实现方式？\"><a href=\"#异步编程的实现方式？\" class=\"headerlink\" title=\"异步编程的实现方式？\"></a>异步编程的实现方式？</h1><p>回调函数：<br>优点：简单、容易理解<br>缺点：不利于维护，代码耦合高</p>\n<blockquote>\n<p>1.事件监听(采用时间驱动模式，取决于某个事件是否发生)：</p>\n</blockquote>\n<p>优点：容易理解，可以绑定多个事件，每个事件可以指定多个回调函数<br>缺点：事件驱动型，流程不够清晰</p>\n<blockquote>\n<p>2.发布/订阅(观察者模式)：</p>\n</blockquote>\n<p>类似于事件监听，但是可以通过‘消息中心’，了解现在有多少发布者，多少订阅者。</p>\n<blockquote>\n<p>3.Promise对象</p>\n</blockquote>\n<p>优点：可以利用then方法，进行链式写法；可以书写错误时的回调函数；<br>缺点：编写和理解，相对比较难</p>\n<blockquote>\n<p>4.Generator函数</p>\n</blockquote>\n<p>优点：函数体内外的数据交换、错误处理机制<br>缺点：流程管理不方便</p>\n<blockquote>\n<p>5.async函数</p>\n</blockquote>\n<p>优点：内置执行器、更好的语义、更广的适用性、返回的是Promise、结构清晰。<br>缺点：错误处理机制</p>\n<p>……js基础</p>\n<p>类和继承（es5实现方法 + es6实现方法）；</p>\n<p>promise；</p>\n<p>写一个方法遍历所有文档树所有节点(考察递归)；</p>\n<p>jsonp和跨域；</p>\n<p>sort排序相关(注意ascll这个坑)</p>\n<p>数组和对象的深浅拷贝；</p>\n<p>String + Array的一些基本操作；<br>写一个数组去重的方法；<br>冒泡和捕获；<br>事件代理；</p>\n<p>call、apply、bind；<br>变量提升；<br>高阶函数；<br>动画；<br>setTimeout、setInterval和requestAnimationFrame；<br>模块化开发；<br>引起内存泄漏的原因；<br>ajax；<br>map、filter、reduce相关；<br>Map和Set；<br>移动端开发相关；</p>\n<p>……技术拓展</p>\n<p>设计模式相关(单例、发布订阅等)；<br>浏览器渲染过程；<br>性能优化相关(这个点很大，设计很多方面，不要自以为优化就是网上经常看到的那一套)；<br>设计一个模版引擎；<br>设计一个打包工具；<br>设计一个mvvm框架需要注意的case；<br>源码阅读相关；</p>\n<p>作者：玩弄心里的鬼<br>链接：<a href=\"https://juejin.im/post/59ec3d50f265da431c6f7339\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59ec3d50f265da431c6f7339</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h1 id=\"json的JSON-parse-和JSON-stringfy\"><a href=\"#json的JSON-parse-和JSON-stringfy\" class=\"headerlink\" title=\"json的JSON.parse()和JSON.stringfy()\"></a>json的JSON.parse()和JSON.stringfy()</h1><h2 id=\"JSON-parse\"><a href=\"#JSON-parse\" class=\"headerlink\" title=\"JSON.parse()\"></a>JSON.parse()</h2><blockquote>\n<p>从字符串解析出对象</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义一个字符串</span><br><span class=\"line\">var data=&apos;&#123;&quot;name&quot;:&quot;goatling&quot;&#125;&apos;</span><br><span class=\"line\">//解析对象​</span><br><span class=\"line\">​JSON.parse(data)</span><br><span class=\"line\">结果是：</span><br><span class=\"line\">​name:&quot;goatling&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"JSON-stringfy\"><a href=\"#JSON-stringfy\" class=\"headerlink\" title=\"JSON.stringfy()\"></a>JSON.stringfy()</h2><blockquote>\n<p>从一个对象解析出字符串</p>\n</blockquote>\n<pre><code>var data={name:&apos;goatling&apos;}\nJSON.stringify(data)\n结果是：\n&apos;{&quot;name&quot;:&quot;goatling&quot;}&apos;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"介绍一下JS的数据类型？\"><a href=\"#介绍一下JS的数据类型？\" class=\"headerlink\" title=\"介绍一下JS的数据类型？\"></a>介绍一下JS的数据类型？</h1><blockquote>\n<p>简单类型：String、Number、Boolean、Null、Undefined<br>复杂类型：ObjectES6新增类型：Symbol<br>扩展：null与undefined有什么区别 </p>\n</blockquote>\n<p>答：null 表示一个对象被定义了，值为“空值”，而undefined 表示不存在这个值。 正因为这个原因，所以使用typeof判断时，null返回的是object，而undefined返回的是undefined。(判断两者时需要使用===严格判断)<br>Boolean类型在进行判断的时候设置为 0、-0、null、””、false、undefined 或 NaN，则该对象设置为 false。否则设置为 true（即使 value 参数是字符串 “false”）</p>\n<h1 id=\"如何通过JS判断一个数组？\"><a href=\"#如何通过JS判断一个数组？\" class=\"headerlink\" title=\"如何通过JS判断一个数组？\"></a>如何通过JS判断一个数组？</h1><blockquote>\n<p>1.instanceof方法</p>\n</blockquote>\n<p>instanceof 运算符是用来测试一个对象是否在其原型链原型构造函数的属性。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = []; </span><br><span class=\"line\">arr instanceof Array; // true</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>2.constructor方法</p>\n</blockquote>\n<p>constructor属性返回对创建此对象的数组函数的引用，就是返回对象相对应的构造函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = []; </span><br><span class=\"line\">arr.constructor == Array; //true</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>3.特性判断法</p>\n</blockquote>\n<p>利用判断数组独有的length和splice方法，但是这是不靠谱的，因为对象也能添加方法和属性。那怎么办了，有一个办法，可以利用数组的length属性没法枚举来判断。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function isArray(object)&#123;</span><br><span class=\"line\">      return  object &amp;&amp; typeof object===&apos;object&apos; &amp;&amp;    </span><br><span class=\"line\">      typeof object.length===&apos;number&apos; &amp;&amp;  </span><br><span class=\"line\">      typeof object.splice===&apos;function&apos; &amp;&amp;    </span><br><span class=\"line\">       //判断length属性是否是可枚举的 对于数组 将得到false  </span><br><span class=\"line\">      !(object.propertyIsEnumerable(&apos;length&apos;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>4.最简单的方法</p>\n</blockquote>\n<p>这种写法，是 jQuery 正在使用的，淘宝的 kissy 也是使用这种方式。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.prototype.toString.call(value) == &apos;[object Array]&apos;</span><br><span class=\"line\">// 利用这个方法，可以写一个返回数据类型的方法</span><br><span class=\"line\">var isType = function (obj) &#123;</span><br><span class=\"line\">     return Object.prototype.toString.call(obj).slice(8,-1); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>5.ES5新增方法isArray()</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = new Array(123);</span><br><span class=\"line\">var b = new Date();</span><br><span class=\"line\">console.log(Array.isArray(a)); //true</span><br><span class=\"line\">console.log(Array.isArray(b)); //false</span><br></pre></td></tr></table></figure>\n<p>&amp;扩展：<br>使用instanceof和construcor，被判断的array必须是在当前页面声明的。比如，一个页面（父页面）有一个框架，框架中引用了一个页面（子页面），在子页面中声明了一个array，并将其赋值给父页面的一个变量，这时判断该变量，Array == object.constructor;会返回false。<br>最简单的方法，在IE6下判断null和undefined，有一些bug，判断undefined和null均为Object，(并不是bug，是在ES3的标准下返回的就为Object)</p>\n<h1 id=\"谈一谈let、const与var的区别？\"><a href=\"#谈一谈let、const与var的区别？\" class=\"headerlink\" title=\"谈一谈let、const与var的区别？\"></a>谈一谈let、const与var的区别？</h1><h2 id=\"let命令基本用法\"><a href=\"#let命令基本用法\" class=\"headerlink\" title=\"let命令基本用法\"></a>let命令基本用法</h2><p>在ES6中，新增了let命令，用于声明变量，用来取代ES5中var命令，消除var声明的变量的不合理，不严谨之处。const用于声明常量。<br>让我们来看看let和var的区别</p>\n<blockquote>\n<p>1.let不存在变量提升</p>\n</blockquote>\n<p>使用let声明的变量，不会像使用var那样存在“变量提升“”的现象。所以使用let声明变量，必须遵循“先声明，后使用”的原则。否则会报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(a); //ReferenceError</span><br><span class=\"line\">let a = 10;</span><br></pre></td></tr></table></figure></p>\n<p>如果是var声明的变量，则不会报错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(b); //undefined</span><br><span class=\"line\">var b = 10;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>2.let声明的变量，存在块级作用域</p>\n</blockquote>\n<p>let声明的变量只在所声明的代码块内有效。块级作用域由 { } 包括，if语句和for语句里面的{ }也属于块作用域。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    var a = 10;</span><br><span class=\"line\">    let b = 20;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    console.log(a); //10</span><br><span class=\"line\">    console.log(b); // ReferenceError: b is not defined</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a =[];</span><br><span class=\"line\">for( var i=0; i&lt;10; i++ )&#123;</span><br><span class=\"line\">    a[i] = function()&#123;</span><br><span class=\"line\">        console.log(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for( var j = 0; j&lt;a.length; j++ )&#123;</span><br><span class=\"line\">        a[j](); //输出10个10。 因为i是var声明的，在全局范围内都用，每次新的i都会覆盖原来的。</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a =[];</span><br><span class=\"line\">    for( let i=0; i&lt;10; i++ )&#123;</span><br><span class=\"line\">        a[i] = function()&#123;</span><br><span class=\"line\">            console.log(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    for( let j = 0; j&lt;a.length; j++ )&#123;</span><br><span class=\"line\">        a[j](); //输出 0，1，2，...，9</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>3.let不允许在同一作用域内重复声明同一个变量在同一作用域内，如果使用var声明同一个变量，则后面的覆盖前面的</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 10;</span><br><span class=\"line\">let a = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a);//Uncaught SyntaxError:</span><br><span class=\"line\">                 Identifier &apos;a&apos; has already been declared</span><br><span class=\"line\"></span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">let a = 10;</span><br><span class=\"line\">let a = 15;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a);//Uncaught SyntaxError:</span><br><span class=\"line\">                 Identifier &apos;a&apos; has already been declared</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>4.暂时性死区：在代码块内，使用let声明变量之前，该变量都是不可以使用用<br>只要在同一作用域内存在let命令，他所声明的变量就“绑定”在这个作用域内，不管外部有没有声明</p>\n</blockquote>\n<p>例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a =10;</span><br><span class=\"line\">function fn1()&#123;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">    let a = 5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn1();//Uncaught ReferenceError: a is not defined</span><br></pre></td></tr></table></figure></p>\n<p>ES6规定，如果在区块中存在let和const声明的变量，则这个区块对这些声明的变量从一开始就形成一个封闭的作用域。不管在外部有没有声明这个变量。必须遵守“先声明，后使用”的原则，否则报错</p>\n<p>ES6规定暂时性死区和不存在变量提升，主要是为了减少运行程序的错误，防止出现“先使用（变量），后声明（变量）”的情况，从而导致意料之外的行为。这种错误在ES5中很常见，现在有了这种规定，就可以避免出现此类错误了</p>\n<font color=\"red\">总之，暂时性死区的本质就是，只要一进入当前作用域，所使用的变量就已存在，但是不可获取，只有等到声明变量的哪一行代码的出现，在可以获取和使用该变量</font>\n\n<h2 id=\"const命令的基本使用\"><a href=\"#const命令的基本使用\" class=\"headerlink\" title=\"const命令的基本使用\"></a>const命令的基本使用</h2><p>const用来声明常量，一旦声明，其值就不能更改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const a = 10;</span><br><span class=\"line\">    a = 20;</span><br><span class=\"line\"></span><br><span class=\"line\"> console.log(a);//Uncaught TypeError: Assignment to constant variable.</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>1.const声明的常量不能改变，意味着const一旦声明常量，就必须同时初始化。不能先声明，后初始化，这样会报错</p>\n</li>\n<li><p>2.与let一样。const声明的常量也只在块级作用域内有效 </p>\n</li>\n<li>3.与let一样，必须先声明，后使用 </li>\n<li>4.与let一样，在同一作用域，const不能重复声明同一常量</li>\n</ul>\n<p>那么如果使用const声明对象呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const b = &#123;</span><br><span class=\"line\">        name:&apos;zs&apos;,</span><br><span class=\"line\">        age:22</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">b.name = &quot;lzx&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(b.name+&quot;---&quot;+b.age);//输出lzx---22</span><br></pre></td></tr></table></figure></p>\n<p><font color=\"red\">我们可以看到，使用const声明的对象的属性是可以修改。 </font><br>因为Object类型是引用类型。用const声明常量保存的是对象的地址，不可变的是地址，在上面的代码中就是，不能把 b 指向另一个对象。而修改对象的属性，并不会改变对象的地址，因此用const声明对象的属性是可以修改的 </p>\n<h1 id=\"map与forEach的区别？\"><a href=\"#map与forEach的区别？\" class=\"headerlink\" title=\"map与forEach的区别？\"></a>map与forEach的区别？</h1><p>1、forEach方法，是最基本的方法，就是遍历与循环，默认有3个传参：分别是遍历的数组内容item、数组索引index、和当前遍历数组Array。另外，除去第一个必须的回调函数参数，还可以接受一个上下文参数(改变回调函数的this指向)；并且forEach不会遍历空元素。<br>2、map方法，基本用法与forEach一致，但是不同的，它会返回一个新的数组，所以在callback需要有return值，如果没有，会返回undefined。(从字面理解，map就是映射的意思)<br>3、filter方法，用法和map很相似，从字面理解，就是过滤、筛选的意思。但是函数的callback需要返回布尔值true或false，并且返回值只需要为弱等==即可。<br>4、some 方法，对数组中每一项运行指定函数，如果该函数对任一项返回true，则返回true。(一旦遇到true，就会中断循环，返回true，类似于||判断)<br>5、every方法，对数组中的每一项运行给定函数，如果该函数对每一项返回true，则返回true。(一旦遇到false，就会中断循环，返回false，类似于&amp;&amp;判断)<br>6、indexOf方法，与字符串中的indexOf类似，返回数组索引值，如果没有匹配，则会返回-1，第二个参数为可选，表示从当前位置开始搜索。<br>7、lastIndexOf方法，与indexOf相似，只是是从数组的末尾开始查找，而第二个参数的默认值是array.length - 1。<br>8、reduce方法，字面意思应该是‘减少’，但是实际是‘递归’的意思。实际就是应用一个函数针对数组的两个值(从左到右)，以减至一个值。它的callback接收4个参数：之前值(上一次循环返回的值)、当前值、索引值以及数组本身。initialValue参数可选，表示初始值。<br>9、reduceRight方法，与reduce方法类似，只是从数组的末尾开始实现。</p>\n<h1 id=\"谈一谈你理解的函数式编程？\"><a href=\"#谈一谈你理解的函数式编程？\" class=\"headerlink\" title=\"谈一谈你理解的函数式编程？\"></a>谈一谈你理解的函数式编程？</h1><h1 id=\"谈一谈箭头函数与普通函数的区别？\"><a href=\"#谈一谈箭头函数与普通函数的区别？\" class=\"headerlink\" title=\"谈一谈箭头函数与普通函数的区别？\"></a>谈一谈箭头函数与普通函数的区别？</h1><ul>\n<li>箭头函数使得表达更加简洁。(这个是废话)</li>\n<li>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</li>\n<li>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</li>\n<li>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数代替。</li>\n<li>不可以使用yield命令，因此箭头函数不能用作Generator函数。</li>\n</ul>\n<h1 id=\"谈一谈函数中this的指向吧？\"><a href=\"#谈一谈函数中this的指向吧？\" class=\"headerlink\" title=\"谈一谈函数中this的指向吧？\"></a>谈一谈函数中this的指向吧？</h1><h2 id=\"全局环境\"><a href=\"#全局环境\" class=\"headerlink\" title=\"全局环境\"></a>全局环境</h2><blockquote>\n<p>无论是否在严格模式下，在全局执行环境中（在任何函数体外部）this 都指代全局对象。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在浏览器中, window 对象同时也是全局对象：</span><br><span class=\"line\">console.log(this === window); // <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = 37;</span><br><span class=\"line\">console.log(window.a); // 37</span><br><span class=\"line\"></span><br><span class=\"line\">this.b = <span class=\"string\">\"MDN\"</span>;</span><br><span class=\"line\">console.log(window.b)  // <span class=\"string\">\"MDN\"</span></span><br><span class=\"line\">console.log(b)         // <span class=\"string\">\"MDN\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数（运行内）环境\"><a href=\"#函数（运行内）环境\" class=\"headerlink\" title=\"函数（运行内）环境\"></a>函数（运行内）环境</h2><p>在函数内部，this的值取决于函数被调用的方式。</p>\n<h3 id=\"简单调用\"><a href=\"#简单调用\" class=\"headerlink\" title=\"简单调用\"></a>简单调用</h3><p>因为下面的代码不在严格模式下，且 this 的值不是由该调用设置的，所以 this 的值默认指向全局对象<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f1</span></span>()&#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//在浏览器中：</span><br><span class=\"line\">f1() === window;   //在浏览器中，全局对象是window</span><br><span class=\"line\"></span><br><span class=\"line\">//在Node中：</span><br><span class=\"line\">f1() === global;</span><br></pre></td></tr></table></figure></p>\n<p>然而，在严格模式下，this将保持他进入执行环境时的值，所以下面的this将会默认为undefined。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f2</span></span>()&#123;</span><br><span class=\"line\">  <span class=\"string\">\"use strict\"</span>; // 这里是严格模式</span><br><span class=\"line\">  <span class=\"built_in\">return</span> this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f2() === undefined; // <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>所以，在严格模式下，如果 this 没有被执行环境（execution context）定义，那它将保持为 undefined。</p>\n<blockquote>\n<p>在第二个例子中，this的确应该是undefined，因为f2是被直接调用的，而不是作为对象的属性或方法调用的（如 window.f2()）。有一些浏览器最初在支持严格模式时没有正确实现这个功能，于是它们错误地返回了window对象。</p>\n</blockquote>\n<p>如果要想把 this 的值从一个环境传到另一个，就要用 call 或者apply 方法<br>// 将一个对象作为call和apply的第一个参数，this会被绑定到这个对象。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;a: <span class=\"string\">'Custom'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 这个属性是在global对象定义的。</span><br><span class=\"line\">var a = <span class=\"string\">'Global'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> whatsThis(arg) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> this.a;  // this的值取决于函数的调用方式</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">whatsThis();          // <span class=\"string\">'Global'</span></span><br><span class=\"line\">whatsThis.call(obj);  // <span class=\"string\">'Custom'</span></span><br><span class=\"line\">whatsThis.apply(obj); // <span class=\"string\">'Custom'</span></span><br></pre></td></tr></table></figure></p>\n<p>当一个函数在其主体中使用 this 关键字时，可以通过使用函数继承自Function.prototype 的 call 或 apply 方法将 this 值绑定到调用中的特定对象。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> add(c, d) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> this.a + this.b + c + d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var o = &#123;a: 1, b: 3&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 第一个参数是作为‘this’使用的对象</span><br><span class=\"line\">// 后续参数作为参数传递给函数调用</span><br><span class=\"line\">add.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16</span><br><span class=\"line\"></span><br><span class=\"line\">// 第一个参数也是作为‘this’使用的对象</span><br><span class=\"line\">// 第二个参数是一个数组，数组里的元素用作函数调用中的参数</span><br><span class=\"line\">add.apply(o, [10, 20]); // 1 + 3 + 10 + 20 = 34</span><br></pre></td></tr></table></figure></p>\n<p>使用 call 和 apply 函数的时候要注意，如果传递给 this 的值不是一个对象，JavaScript 会尝试使用内部 ToObject 操作将其转换为对象。因此，如果传递的值是一个原始值比如 7 或 ‘foo’，那么就会使用相关构造函数将它转换为对象，所以原始值 7 会被转换为对象，像 new Number(7) 这样，而字符串 ‘foo’ 转化成 new String(‘foo’) 这样，例如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">bar</span></span>() &#123;</span><br><span class=\"line\">  console.log(Object.prototype.toString.call(this));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//原始值 7 被隐式转换为对象</span><br><span class=\"line\">bar.call(7); // [object Number]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"bind方法\"><a href=\"#bind方法\" class=\"headerlink\" title=\"bind方法\"></a>bind方法</h3><p>ECMAScript 5 引入了 Function.prototype.bind。调用f.bind(someObject)会创建一个与f具有相同函数体和作用域的函数，但是在这个新函数中，this将永久地被绑定到了bind的第一个参数，无论这个函数是如何被调用的。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">f</span></span>()&#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> this.a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var g = f.bind(&#123;a:<span class=\"string\">\"azerty\"</span>&#125;);</span><br><span class=\"line\">console.log(g()); // azerty</span><br><span class=\"line\"></span><br><span class=\"line\">var h = g.bind(&#123;a:<span class=\"string\">'yoo'</span>&#125;); // <span class=\"built_in\">bind</span>只生效一次！</span><br><span class=\"line\">console.log(h()); // azerty</span><br><span class=\"line\"></span><br><span class=\"line\">var o = &#123;a:37, f:f, g:g, h:h&#125;;</span><br><span class=\"line\">console.log(o.f(), o.g(), o.h()); // 37, azerty, azerty</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" target=\"_blank\" rel=\"noopener\">箭头函数详解1</a><br>  <a href=\"https://www.cnblogs.com/freelyflying/p/6978126.html\" target=\"_blank\" rel=\"noopener\">箭头函数详解2</a></p>\n<p>在箭头函数中，this与封闭词法环境的this保持一致。在全局代码中，它将被设置为全局对象<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var globalObject = this;</span><br><span class=\"line\">var foo = (() =&gt; this);</span><br><span class=\"line\">console.log(foo() === globalObject); // <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：如果将this传递给call、bind、或者apply，它将被忽略。不过你仍然可以为调用添加参数，不过第一个参数（thisArg）应该设置为null。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 接着上面的代码</span><br><span class=\"line\">// 作为对象的一个方法调用</span><br><span class=\"line\">var obj = &#123;foo: foo&#125;;</span><br><span class=\"line\">console.log(obj.foo() === globalObject); // <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 尝试使用call来设定this</span><br><span class=\"line\">console.log(foo.call(obj) === globalObject); // <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 尝试使用<span class=\"built_in\">bind</span>来设定this</span><br><span class=\"line\">foo = foo.bind(obj);</span><br><span class=\"line\">console.log(foo() === globalObject); // <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>无论如何，foo 的 this 被设置为他被创建时的环境（在上面的例子中，就是全局对象）。这同样适用于在其他函数内创建的箭头函数：这些箭头函数的this被设置为封闭的词法环境的。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建一个含有bar方法的obj对象，</span><br><span class=\"line\">// bar返回一个函数，</span><br><span class=\"line\">// 这个函数返回this，</span><br><span class=\"line\">// 这个返回的函数是以箭头函数创建的，</span><br><span class=\"line\">// 所以它的this被永久绑定到了它外层函数的this。</span><br><span class=\"line\">// bar的值可以在调用中设置，这反过来又设置了返回函数的值。</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  bar: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    var x = (() =&gt; this);</span><br><span class=\"line\">    <span class=\"built_in\">return</span> x;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 作为obj对象的一个方法来调用bar，把它的this绑定到obj。</span><br><span class=\"line\">// 将返回的函数的引用赋值给fn。</span><br><span class=\"line\">var fn = obj.bar();</span><br><span class=\"line\"></span><br><span class=\"line\">// 直接调用fn而不设置this，</span><br><span class=\"line\">// 通常(即不使用箭头函数的情况)默认为全局对象</span><br><span class=\"line\">// 若在严格模式则为undefined</span><br><span class=\"line\">console.log(fn() === obj); // <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 但是注意，如果你只是引用obj的方法，</span><br><span class=\"line\">// 而没有调用它</span><br><span class=\"line\">var fn2 = obj.bar;</span><br><span class=\"line\">// 那么调用箭头函数后，this指向window，因为它从 bar 继承了this。</span><br><span class=\"line\">console.log(fn2()() == window); // <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，一个赋值给了 obj.bar的函数（称为匿名函数 A），返回了另一个箭头函数（称为匿名函数 B）。因此，在 A 调用时，函数B的this被永久设置为obj.bar（函数A）的this。当返回的函数（函数B）被调用时，它this始终是最初设置的。在上面的代码示例中，函数B的this被设置为函数A的this，即obj，所以即使被调用的方式通常将其设置为 undefined 或全局对象（或者如前面示例中的其他全局执行环境中的方法），它的 this 也仍然是 obj .</p>\n<h3 id=\"作为对象的方法\"><a href=\"#作为对象的方法\" class=\"headerlink\" title=\"作为对象的方法\"></a>作为对象的方法</h3><p>当函数作为对象里的方法被调用时，它们的 this 是调用该函数的对象。<br>下面的例子中，当 o.f()被调用时，函数内的this将绑定到o对象。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123;</span><br><span class=\"line\">  prop: 37,</span><br><span class=\"line\">  f: <span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> this.prop;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(o.f()); // logs 37</span><br></pre></td></tr></table></figure></p>\n<p>请注意，这样的行为，根本不受函数定义方式或位置的影响。在前面的例子中，我们在定义对象o的同时，将函数内联定义为成员f。但是，我们也可以先定义函数，然后再将其附属到o.f。这样做会导致相同的行为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123;prop: 37&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">independent</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> this.prop;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">o.f = independent;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(o.f()); // logs 37</span><br></pre></td></tr></table></figure></p>\n<p>这表明函数是从o的f成员调用的才是重点。</p>\n<p>同样，this 的绑定只受最靠近的成员引用的影响。在下面的这个例子中，我们把一个方法g当作对象o.b的函数调用。在这次执行期间，函数中的this将指向o.b。事实证明，这与他是对象 o 的成员没有多大关系，最靠近的引用才是最重要的。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">o.b = &#123;g: independent, prop: 42&#125;;</span><br><span class=\"line\">console.log(o.b.g()); // 42</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"原型链中的-this\"><a href=\"#原型链中的-this\" class=\"headerlink\" title=\"原型链中的 this\"></a>原型链中的 this</h3><p>对于在对象原型链上某处定义的方法，同样的概念也适用。如果该方法存在于一个对象的原型链上，那么this指向的是调用这个方法的对象，就像该方法在对象上一样。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o = &#123;</span><br><span class=\"line\">  f: <span class=\"function\"><span class=\"title\">function</span></span>() &#123; </span><br><span class=\"line\">    <span class=\"built_in\">return</span> this.a + this.b; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var p = Object.create(o);</span><br><span class=\"line\">p.a = 1;</span><br><span class=\"line\">p.b = 4;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(p.f()); // 5</span><br></pre></td></tr></table></figure></p>\n<p>在这个例子中，对象p没有属于它自己的f属性，它的f属性继承自它的原型。虽然在对 f 的查找过程中，最终是在 o 中找到 f 属性的，这并没有关系；查找过程首先从 p.f 的引用开始，所以函数中的 this 指向p。也就是说，因为f是作为p的方法调用的，所以它的this指向了p。这是 JavaScript 的原型继承中的一个有趣的特性。</p>\n<h3 id=\"getter-与-setter-中的-this\"><a href=\"#getter-与-setter-中的-this\" class=\"headerlink\" title=\"getter 与 setter 中的 this\"></a>getter 与 setter 中的 this</h3><p>再次，相同的概念也适用于当函数在一个 getter 或者 setter 中被调用。用作 getter 或 setter 的函数都会把 this 绑定到设置或获取属性的对象。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">sum</span></span>() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> this.a + this.b + this.c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var o = &#123;</span><br><span class=\"line\">  a: 1,</span><br><span class=\"line\">  b: 2,</span><br><span class=\"line\">  c: 3,</span><br><span class=\"line\">  get <span class=\"function\"><span class=\"title\">average</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> (this.a + this.b + this.c) / 3;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Object.defineProperty(o, <span class=\"string\">'sum'</span>, &#123;</span><br><span class=\"line\">    get: sum, enumerable: <span class=\"literal\">true</span>, configurable: <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(o.average, o.sum); // logs 2, 6</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"作为构造函数\"><a href=\"#作为构造函数\" class=\"headerlink\" title=\"作为构造函数\"></a>作为构造函数</h3><p>当一个函数用作构造函数时（使用new关键字），它的this被绑定到正在构造的新对象</p>\n<blockquote>\n<p>虽然构造器返回的默认值是this所指的那个对象，但它仍可以手动返回其他的对象（如果返回值不是一个对象，则返回this对象）。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> * 构造函数这样工作:</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">MyConstructor</span></span>()&#123;</span><br><span class=\"line\"> *   // 函数实体写在这里</span><br><span class=\"line\"> *   // 根据需要在this上创建属性，然后赋值给它们，比如：</span><br><span class=\"line\"> *   this.fum = <span class=\"string\">\"nom\"</span>;</span><br><span class=\"line\"> *   // 等等...</span><br><span class=\"line\"> *</span><br><span class=\"line\"> *   // 如果函数具有返回对象的<span class=\"built_in\">return</span>语句，</span><br><span class=\"line\"> *   // 则该对象将是 new 表达式的结果。 </span><br><span class=\"line\"> *   // 否则，表达式的结果是当前绑定到 this 的对象。</span><br><span class=\"line\"> *   //（即通常看到的常见情况）。</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">C</span></span>()&#123;</span><br><span class=\"line\">  this.a = 37;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var o = new C();</span><br><span class=\"line\">console.log(o.a); // logs 37</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">C2</span></span>()&#123;</span><br><span class=\"line\">  this.a = 37;</span><br><span class=\"line\">  <span class=\"built_in\">return</span> &#123;a:38&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">o = new C2();</span><br><span class=\"line\">console.log(o.a); // logs 38</span><br></pre></td></tr></table></figure>\n<h3 id=\"作为一个DOM事件处理函数节\"><a href=\"#作为一个DOM事件处理函数节\" class=\"headerlink\" title=\"作为一个DOM事件处理函数节\"></a>作为一个DOM事件处理函数节</h3><p>当函数被用作事件处理函数时，它的this指向触发事件的元素（一些浏览器在使用非addEventListener的函数动态添加监听函数时不遵守这个约定）。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 被调用时，将关联的元素变成蓝色</span><br><span class=\"line\"><span class=\"keyword\">function</span> bluify(e)&#123;</span><br><span class=\"line\">  console.log(this === e.currentTarget); // 总是 <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  // 当 currentTarget 和 target 是同一个对象时为 <span class=\"literal\">true</span></span><br><span class=\"line\">  console.log(this === e.target);        </span><br><span class=\"line\">  this.style.backgroundColor = <span class=\"string\">'#A5D9F3'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 获取文档中的所有元素的列表</span><br><span class=\"line\">var elements = document.getElementsByTagName(<span class=\"string\">'*'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">// 将bluify作为元素的点击监听函数，当元素被点击时，就会变成蓝色</span><br><span class=\"line\"><span class=\"keyword\">for</span>(var i=0 ; i&lt;elements.length ; i++)&#123;</span><br><span class=\"line\">  elements[i].addEventListener(<span class=\"string\">'click'</span>, bluify, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"作为一个内联事件处理函数\"><a href=\"#作为一个内联事件处理函数\" class=\"headerlink\" title=\"作为一个内联事件处理函数\"></a>作为一个内联事件处理函数</h3><p>当代码被内联on-event 处理函数调用时，它的this指向监听器所在的DOM元素：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onclick=<span class=\"string\">\"alert(this.tagName.toLowerCase());\"</span>&gt;</span><br><span class=\"line\">  Show this</span><br><span class=\"line\">&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>上面的 alert 会显示button。注意只有外层代码中的this是这样设置的：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onclick=<span class=\"string\">\"alert((function()&#123;return this&#125;)());\"</span>&gt;</span><br><span class=\"line\">  Show inner this</span><br><span class=\"line\">&lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在这种情况下，没有设置内部函数的this，所以它指向 global/window 对象（即非严格模式下调用的函数未设置this时指向的默认对象）</p>\n<h1 id=\"异步编程的实现方式？\"><a href=\"#异步编程的实现方式？\" class=\"headerlink\" title=\"异步编程的实现方式？\"></a>异步编程的实现方式？</h1><p>回调函数：<br>优点：简单、容易理解<br>缺点：不利于维护，代码耦合高</p>\n<blockquote>\n<p>1.事件监听(采用时间驱动模式，取决于某个事件是否发生)：</p>\n</blockquote>\n<p>优点：容易理解，可以绑定多个事件，每个事件可以指定多个回调函数<br>缺点：事件驱动型，流程不够清晰</p>\n<blockquote>\n<p>2.发布/订阅(观察者模式)：</p>\n</blockquote>\n<p>类似于事件监听，但是可以通过‘消息中心’，了解现在有多少发布者，多少订阅者。</p>\n<blockquote>\n<p>3.Promise对象</p>\n</blockquote>\n<p>优点：可以利用then方法，进行链式写法；可以书写错误时的回调函数；<br>缺点：编写和理解，相对比较难</p>\n<blockquote>\n<p>4.Generator函数</p>\n</blockquote>\n<p>优点：函数体内外的数据交换、错误处理机制<br>缺点：流程管理不方便</p>\n<blockquote>\n<p>5.async函数</p>\n</blockquote>\n<p>优点：内置执行器、更好的语义、更广的适用性、返回的是Promise、结构清晰。<br>缺点：错误处理机制</p>\n<p>……js基础</p>\n<p>类和继承（es5实现方法 + es6实现方法）；</p>\n<p>promise；</p>\n<p>写一个方法遍历所有文档树所有节点(考察递归)；</p>\n<p>jsonp和跨域；</p>\n<p>sort排序相关(注意ascll这个坑)</p>\n<p>数组和对象的深浅拷贝；</p>\n<p>String + Array的一些基本操作；<br>写一个数组去重的方法；<br>冒泡和捕获；<br>事件代理；</p>\n<p>call、apply、bind；<br>变量提升；<br>高阶函数；<br>动画；<br>setTimeout、setInterval和requestAnimationFrame；<br>模块化开发；<br>引起内存泄漏的原因；<br>ajax；<br>map、filter、reduce相关；<br>Map和Set；<br>移动端开发相关；</p>\n<p>……技术拓展</p>\n<p>设计模式相关(单例、发布订阅等)；<br>浏览器渲染过程；<br>性能优化相关(这个点很大，设计很多方面，不要自以为优化就是网上经常看到的那一套)；<br>设计一个模版引擎；<br>设计一个打包工具；<br>设计一个mvvm框架需要注意的case；<br>源码阅读相关；</p>\n<p>作者：玩弄心里的鬼<br>链接：<a href=\"https://juejin.im/post/59ec3d50f265da431c6f7339\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/59ec3d50f265da431c6f7339</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h1 id=\"json的JSON-parse-和JSON-stringfy\"><a href=\"#json的JSON-parse-和JSON-stringfy\" class=\"headerlink\" title=\"json的JSON.parse()和JSON.stringfy()\"></a>json的JSON.parse()和JSON.stringfy()</h1><h2 id=\"JSON-parse\"><a href=\"#JSON-parse\" class=\"headerlink\" title=\"JSON.parse()\"></a>JSON.parse()</h2><blockquote>\n<p>从字符串解析出对象</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义一个字符串</span><br><span class=\"line\">var data=&apos;&#123;&quot;name&quot;:&quot;goatling&quot;&#125;&apos;</span><br><span class=\"line\">//解析对象​</span><br><span class=\"line\">​JSON.parse(data)</span><br><span class=\"line\">结果是：</span><br><span class=\"line\">​name:&quot;goatling&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"JSON-stringfy\"><a href=\"#JSON-stringfy\" class=\"headerlink\" title=\"JSON.stringfy()\"></a>JSON.stringfy()</h2><blockquote>\n<p>从一个对象解析出字符串</p>\n</blockquote>\n<pre><code>var data={name:&apos;goatling&apos;}\nJSON.stringify(data)\n结果是：\n&apos;{&quot;name&quot;:&quot;goatling&quot;}&apos;\n</code></pre>"},{"title":"CSS","date":"2018-12-26T09:28:15.000Z","_content":"\n\n# 响应式布局的常用解决方案对比(媒体查询、百分比、rem和vw/vh）\n简要介绍：前端开发中，静态网页通常需要适应不同分辨率的设备，常用的自适应解决方案包括媒体查询、百分比、rem和vw/vh等。本文从px单位出发，分析了px在移动端布局中的不足，接着介绍了几种不同的自适应解决方案。\n\n- px和视口\n- 媒体查询\n- 百分比\n- 自适应场景下的rem解决方案\n- 通过vw/vh来实现自适应\n\n## px和视口\n在静态网页中，我们经常用像素（px）作为单位，来描述一个元素的宽高以及定位信息。在pc端，通常认为css中,1px所表示的真实长度是固定的。\n那么，px真的是一个设备无关，跟长度单位米和分米一样是固定大小的吗？\n\n答案是否定的，下面图1.1和图1.2分别表示pc端下和移动端下的显示结果，在网页中我们设置的font-size统一为16px。\n![](css01.png)\n从上面两幅图的对比可以看出，字体都是16px，显然在pc端中文字正常显示，而在移动端文字很小，几乎看不到，说明在css中1px并不是固定大小，直观从我们发现在移动端1px所表示的长度较小，所以导致文字显示不清楚。\n\n那么css中的1px的真实长度到底由什么决定呢？\n\n为了理清楚这个概念我们首先介绍像素和视口的概念\n\n### 像素\n像素是网页布局的基础，一个像素表示了计算机屏幕所能显示的最小区域，像素分为两种类型：css像素和物理像素。\n\n我们在js或者css代码中使用的px单位就是指的是css像素，物理像素也称设备像素，只与设备或者说硬件有关，同样尺寸的屏幕，设备的密度越高，物理像素也就越多。下表表示css像素和物理像素的具体区别：\n>css像素:  为web开发者提供，在css中使用的一个抽象单位 \n>物理像素 : 只与设备的硬件密度有关，任何设备的物理像素都是固定的 \n那么css像素与物理像素的转换关系是怎么样的呢？为了明确css像素和物理像素的转换关系，必须先了解视口是什么。\n\n### 视口\n广义的视口，是指浏览器显示内容的屏幕区域，狭义的视口包括了布局视口、视觉视口和理想视口\n\n(1) 布局视口（layout viewport）\n布局视口定义了pc网页在移动端的默认布局行为，因为通常pc的分辨率较大，布局视口默认为980px。也就是说在不设置网页的viewport的情况下，pc端的网页默认会以布局视口为基准，在移动端进行展示。因此我们可以明显看出来，默认为布局视口时，根植于pc端的网页在移动端展示很模糊。\n\n(2) 视觉视口（visual viewport）\n视觉视口表示浏览器内看到的网站的显示区域，用户可以通过缩放来查看网页的显示内容，从而改变视觉视口。视觉视口的定义，就像拿着一个放大镜分别从不同距离观察同一个物体，视觉视口仅仅类似于放大镜中显示的内容，因此视觉视口不会影响布局视口的宽度和高度。\n\n(3) 理想视口（ideal viewport）\n理想视口或者应该全称为“理想的布局视口”，在移动设备中就是指设备的分辨率。换句话说，理想视口或者说分辨率就是给定设备物理像素的情况下，最佳的“布局视口”。\n\n上述视口中，最重要的是要明确理想视口的概念，在移动端中，理想视口或者说分辨率跟物理像素之间有什么关系呢？\n\n为了理清分辨率和物理像素之间的联系，我们介绍一个用DPR（Device pixel ratio）设备像素比来表示，则可以写成：\n\n1 DPR = 物理像素／分辨率\n在不缩放的情况下，一个css像素就对应一个dpr，也就是说，在不缩放\n\n1 CSS像素 = 物理像素／分辨率\n此外，在移动端的布局中，我们可以通过viewport元标签来控制布局，比如一般情况下，我们可以通过下述标签使得移动端在理想视口下布局：\n```\n<meta id=\"viewport\" name=\"viewport\" content=\"width=device-width; initial-scale=1.0; maximum-scale=1; user-scalable=no;\">\n```\n| 属性名 |取值 | 描述|\n|-------|--------|--------|\n| width |  正整数| 定义布局视口的宽度，单位为像素|\n| height | 正整数 |定义布局视口的高度，单位为像素，很少使用|\n| initial-scale |  [0,10]|  初始缩放比例，1表示不缩放|\n| minimum-scale|  [0,10] | 最小缩放比例|\n| maximum-scale|  [0,10] | 最大缩放比例|\n| user-scalable|  yes／no | 是否允许手动缩放页面，默认值为yes|\n其中我们来看width属性，在移动端布局时，在meta标签中我们会将width设置称为device-width，device-width一般是表示分辨率的宽，通过width=device-width的设置我们就将布局视口设置成了理想的视口。\n### px与自适应\n上述我们了解到了当通过viewport元标签，设置布局视口为理想视口时，1个css像素可以表示成：\n\n1 CSS像素 = 物理像素／分辨率\n我们直到，在pc端的布局视口通常情况下为980px，移动端以iphone6为例，分辨率为375 * 667，也就是说布局视口在理想的情况下为375px。比如现在我们有一个750px * 1134px的视觉稿，那么在pc端，一个css像素可以如下计算：\n\nPC端： 1 CSS像素 = 物理像素／分辨率 = 750 ／ 980 =0.76 px\n而在iphone6下：\n\niphone6：1 CSS像素 = 物理像素 ／分辨率 = 750 ／ 375 = 2 px\n也就是说在PC端，一个CSS像素可以用0.76个物理像素来表示，而iphone6中 一个CSS像素表示了2个物理像素。此外不同的移动设备分辨率不同，也就是1个CSS像素可以表示的物理像素是不同的，因此如果在css中仅仅通过px作为长度和宽度的单位，造成的结果就是无法通过一套样式，实现各端的自适应。\n## 媒体查询\n在前面我们说到，不同端的设备下，在css文件中，1px所表示的物理像素的大小是不同的，因此通过一套样式，是无法实现各端的自适应。由此我们联想：\n\n如果一套样式不行，那么能否给每一种设备各一套不同的样式来实现自适应的效果？\n\n答案是肯定的。\n\n使用@media媒体查询可以针对不同的媒体类型定义不同的样式，特别是响应式页面，可以针对不同屏幕的大小，编写多套样式，从而达到自适应的效果。举例来说：\n```\n@media screen and (max-width: 960px){\n    body{\n      background-color:#FF6699\n    }\n}\n\n@media screen and (max-width: 768px){\n    body{\n      background-color:#00FF66;\n    }\n}\n\n@media screen and (max-width: 550px){\n    body{\n      background-color:#6633FF;\n    }\n}\n\n@media screen and (max-width: 320px){\n    body{\n      background-color:#FFFF00;\n    }\n}\n```\n上述的代码通过媒体查询定义了几套样式，通过max-width设置样式生效时的最大分辨率，上述的代码分别对分辨率在0～320px，320px～550px，550px～768px以及768px～960px的屏幕设置了不同的背景颜色。\n\n通过媒体查询，可以通过给不同分辨率的设备编写不同的样式来实现响应式的布局，比如我们为不同分辨率的屏幕，设置不同的背景图片。比如给小屏幕手机设置@2x图，为大屏幕手机设置@3X图，通过媒体查询就能很方便的实现。\n\n但是媒体查询的缺点也很明显，如果在浏览器大小改变时，需要改变的样式太多，那么多套样式代码会很繁琐。\n## 百分比\n除了用px结合媒体查询实现响应式布局外，我们也可以通过百分比单位 \" % \" 来实现响应式的效果。\n\n比如当浏览器的宽度或者高度发生变化时，通过百分比单位，通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。\n\n为了了解百分比布局，首先要了解的问题是：\n\ncss中的子元素中的百分比（%）到底是谁的百分比？\n\n直观的理解，我们可能会认为子元素的百分比完全相对于直接父元素，height百分比相对于height，width百分比相对于width。当然这种理解是正确的，但是根据css的盒式模型，除了height、width属性外，还具有padding、border、margin等等属性。那么这些属性设置成百分比，是根据父元素的那些属性呢？此外还有border-radius和translate等属性中的百分比，又是相对于什么呢？下面来具体分析。\n\n1. 百分比的具体分析\n（1）子元素height和width的百分比\n\n子元素的height或width中使用百分比，是相对于子元素的直接父元素，width相对于父元素的width，height相对于父元素的height。比如：\n```\n<div class=\"parent\">\n  <div class=\"child\"></div>\n</div>\n如果设置：\n.father{\nwidth:200px;\nheight:100px;\n}\n.child{\nwidth:50%;\nheight:50%;\n}\n```\n展示的效果为：\n![](css02.png)\n(2) top和bottom 、left和right\n\n子元素的top和bottom如果设置百分比，则相对于直接非static定位(默认定位)的父元素的高度，同样\n\n子元素的left和right如果设置百分比，则相对于直接非static定位(默认定位的)父元素的宽度。\n\n展示的效果为：\n![](css03.png)\n（3）padding\n\n子元素的padding如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的width，而与父元素的height无关。\n\n举例来说：\n```\n.parent{\n  width:200px;\n  height:100px;\n  background:green;\n}\n.child{\n  width:0px;\n  height:0px;\n  background:blue;\n  color:white;\n  padding-top:50%;\n  padding-left:50%;\n}\n```\n展示的效果为：\n![](css04.png)\n子元素的初始宽高为0，通过padding可以将父元素撑大，上图的蓝色部分是一个正方形，且边长为100px,说明padding不论宽高，如果设置成百分比都相对于父元素的width。\n\n（4）margin\n\n跟padding一样，margin也是如此，子元素的margin如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的width。这里就不具体举例。\n\n（5）border-radius\n\nborder-radius不一样，如果设置border-radius为百分比，则是相对于自身的宽度，举例来说：\n```\n  <div class=\"trangle\"></div>\n```\n设置border-radius为百分比：\n```\n.trangle{\n  width:100px;\n  height:100px;\n  border-radius:50%;\n  background:blue;\n  margin-top:10px;\n}\n```\n展示效果为：\n\n![](css06.gif)\n2. 百分比单位布局应用\n百分比单位在布局上应用还是很广泛的，这里介绍一种应用。\n比如我们要实现一个固定长宽比的长方形，比如要实现一个长宽比为4:3的长方形,我们可以根据padding属性来实现，因为padding不管是垂直方向还是水平方向，百分比单位都相对于父元素的宽度，因此我们可以设置padding-top为百分比来实现，长宽自适应的长方形：\n```\n<div class=\"trangle\"></div>\n```\n设置样式让其自适应：\n```\n.trangle{\n  height:0;\n  width:100%;\n  padding-top:75%;\n}\n```\n通过设置padding-top：75%,相对比宽度的75%，因此这样就设置了一个长宽高恒定比例的长方形，具体效果\n![](css05.png)\n3. 百分比单位缺点\n从上述对于百分比单位的介绍我们很容易看出如果全部使用百分比单位来实现响应式的布局，有明显的以下两个缺点：\n（1）计算困难，如果我们要定义一个元素的宽度和高度，按照设计稿，必须换算成百分比单位。\n（2）从小节1可以看出，各个属性中如果使用百分比，相对父元素的属性并不是唯一的。比如width和height相对于父元素的width和height，而margin、padding不管垂直还是水平方向都相对比父元素的宽度、border-radius则是相对于元素自身等等，造成我们使用百分比单位容易使布局问题变得复杂。\n\n## 自适应场景下的rem解决方案\n1. rem单位\n\n首先来看，什么是rem单位。rem是一个灵活的、可扩展的单位，由浏览器转化像素并显示。与em单位不同，rem单位无论嵌套层级如何，都只相对于浏览器的根元素（HTML元素）的font-size。默认情况下，html元素的font-size为16px，所以：\n```\n    1 rem = 12px\n```\n为了计算方便，通常可以将html的font-size设置成：\n```\n    html{ font-size: 62.5% }\n```\n这种情况下：\n```\n    1 rem = 10px\n```\n\n2.通过rem来实现响应式布局\n\nrem单位都是相对于根元素html的font-size来决定大小的,根元素的font-size相当于提供了一个基准，当页面的size发生变化时，只需要改变font-size的值，那么以rem为固定单位的元素的大小也会发生响应的变化。\n因此，如果通过rem来实现响应式的布局，只需要根据视图容器的大小，动态的改变font-size即可。\n```\nfunction refreshRem() {\n    var docEl = doc.documentElement;\n    var width = docEl.getBoundingClientRect().width;\n    var rem = width / 10;\n    docEl.style.fontSize = rem + 'px';\n    flexible.rem = win.rem = rem;\n}\nwin.addEventListener('resize', refreshRem);\n```\n上述代码中将视图容器分为10份，font-size用十分之一的宽度来表示，最后在header标签中执行这段代码，就可以动态定义font-size的大小，从而1rem在不同的视觉容器中表示不同的大小，用rem固定单位可以实现不同容器内布局的自适应。\n\n3. rem2px和px2rem\n\n如果在响应式布局中使用rem单位，那么存在一个单位换算的问题，rem2px表示从rem换算成px，这个就不说了，只要rem乘以相应的font-size中的大小，就能换算成px。更多的应用是px2rem，表示的是从px转化为rem。\n\n比如给定的视觉稿为750px（物理像素），如果我们要将所有的布局单位都用rem来表示，一种比较笨的办法就是对所有的height和width等元素，乘以相应的比例，现将视觉稿换算成rem单位，然后一个个的用rem来表示。另一种比较方便的解决方法就是，在css中我们还是用px来表示元素的大小，最后编写完css代码之后，将css文件中的所有px单位，转化成rem单位。\n\npx2rem的原理也很简单，重点在于预处理以px为单位的css文件，处理后将所有的px变成rem单位。可以通过两种方式来实现：\n\n1） webpack loader的形式：\n```\nnpm install px2rem-loader\n```\n在webpack的配置文件中：\n```\nmodule.exports = {\n  // ...\n  module: {\n    rules: [{\n      test: /\\.css$/,\n      use: [{\n        loader: 'style-loader'\n      }, {\n        loader: 'css-loader'\n      }, {\n        loader: 'px2rem-loader',\n        // options here\n        options: {\n          remUni: 75,\n          remPrecision: 8\n        }\n      }]\n    }]\n  }\n}\n```\n2）webpack中使用postcss plugin\n```\nnpm install postcss-loader\n```\n在webpack的plugin中:\n```\nvar px2rem = require('postcss-px2rem');\n\nmodule.exports = {\n  module: {\n    loaders: [\n      {\n        test: /\\.css$/,\n        loader: \"style-loader!css-loader!postcss-loader\"\n      }\n    ]\n  },\n  postcss: function() {\n    return [px2rem({remUnit: 75})];\n  }\n}\n```\n4. rem 布局应用举例\n\n网易新闻的移动端页面使用了rem布局，具体例子如下：\n\n![](css07.gif)\n\n5. rem 布局的缺点\n\n通过rem单位，可以实现响应式的布局，特别是引入相应的postcss相关插件，免去了设计稿中的px到rem的计算。rem单位在国外的一些网站也有使用，这里所说的rem来实现布局的缺点，或者说是小缺陷是：\n\n在响应式布局中，必须通过js来动态控制根元素font-size的大小。\n\n也就是说css样式和js代码有一定的耦合性。且必须将改变font-size的代码放在css样式之前。\n\n## 通过vw/vh来实现自适应\n1. 什么是vw/vh ?\n\ncss3中引入了一个新的单位vw/vh，与视图窗口有关，vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度，除了vw和vh外，还有vmin和vmax两个相关的单位。各个单位具体的含义如下：\n\n|单位  |含义|\n|---|---|\n|vw  |相对于视窗的宽度，视窗宽度是100vw|\n|vh  |相对于视窗的高度，视窗高度是100vh|\n|vmin|    vw和vh中的较小值|\n|vmax|    vw和vh中的较大值|\n这里我们发现视窗宽高都是100vw／100vh，那么vw或者vh，下简称vw，很类似百分比单位。vw和%的区别为：\n\n|单位|  含义|\n|---|---|\n|% |  大部分相对于祖先元素，也有相对于自身的情况比如（border-radius、translate等)|\n|vw/vh|   相对于视窗的尺寸|\n从对比中我们可以发现，vw单位与百分比类似，单确有区别，前面我们介绍了百分比单位的换算困难，这里的vw更像\"理想的百分比单位\"。任意层级元素，在使用vw单位的情况下，1vw都等于视图宽度的百分之一。\n\n2. vw单位换算\n\n同样的，如果要将px换算成vw单位，很简单，只要确定视图的窗口大小（布局视口），如果我们将布局视口设置成分辨率大小，比如对于iphone6/7 375*667的分辨率，那么px可以通过如下方式换算成vw：\n```\n1px = （1/375）*100 vw\n```\n此外，也可以通过postcss的相应插件，预处理css做一个自动的转换，postcss-px-to-viewport可以自动将px转化成vw。\npostcss-px-to-viewport的默认参数为：\n```\nvar defaults = {\n  viewportWidth: 320,\n  viewportHeight: 568, \n  unitPrecision: 5,\n  viewportUnit: 'vw',\n  selectorBlackList: [],\n  minPixelValue: 1,\n  mediaQuery: false\n};\n```\n通过指定视窗的宽度和高度，以及换算精度，就能将px转化成vw。\n\n3. vw/vh单位的兼容性\n可以在[https://caniuse.com/](https://caniuse.com/) 查看各个版本的浏览器对vw单位的支持性。\n从上图我们发现，绝大多数的浏览器支持vw单位，但是ie9-11不支持vmin和vmax，考虑到vmin和vmax单位不常用，vw单位在绝大部分高版本浏览器内的支持性很好，但是opera浏览器整体不支持vw单位，如果需要兼容opera浏览器的布局，不推荐使用vw。\n\n## 小结\n本文介绍在布局中常用的单位，比如px、%、rem和vw等等，以及不同的单位在响应式布局中的优缺点。\n\n# 画一条0.5px的线\n- 采用meta viewport的方式\n\n- 采用 border-image的方式\n\n- 采用transform: scale()的方式\n\n# link标签和import标签的区别\n- link属于html标签，而@import是css提供的\n- 页面被加载时，link会同时被加载，而@import引用的css会等到页面加载结束后加载。\n- link是html标签，因此没有兼容性，而@import只有IE5以上才能识别。\n- link方式样式的权重高于@import的。\n\n# transition和animation的区别\nAnimation和transition大部分属性是相同的，他们都是随时间改变元素的属性值，他们的主要区别是transition需要触发一个事件才能改变属性，而animation不需要触发任何事件的情况下才会随时间改变属性值，并且transition为2帧，从from .... to，而animation可以一帧一帧的。\n\n# Flex布局\n文章链接：\nhttp://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool（语法篇）\nhttp://www.ruanyifeng.com/blog/2015/07/flex-examples.html（实例篇）\n\nFlex是Flexible Box的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。\n布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。\n\n简单的分为容器属性和元素属性\n容器的属性：\n\nflex-direction：决定主轴的方向（即子item的排列方法）\n.box {\nflex-direction: row | row-reverse | column | column-reverse;\n}\nflex-wrap：决定换行规则\n.box{\nflex-wrap: nowrap | wrap | wrap-reverse;\n}\nflex-flow：\n.box {\nflex-flow: || ;\n}\njustify-content：对其方式，水平主轴对齐方式\nalign-items：对齐方式，竖直轴线方向\n项目的属性（元素的属性）：\n\norder属性：定义项目的排列顺序，顺序越小，排列越靠前，默认为0\nflex-grow属性：定义项目的放大比例，即使存在空间，也不会放大\nflex-shrink属性：定义了项目的缩小比例，当空间不足的情况下会等比例的缩小，如果定义个item的flow-shrink为0，则为不缩小\nflex-basis属性：定义了在分配多余的空间，项目占据的空间。\nflex：是flex-grow和flex-shrink、flex-basis的简写，默认值为0 1 auto。\nalign-self：允许单个项目与其他项目不一样的对齐方式，可以覆盖align-items，默认属性为auto，表示继承父元素的align-items\n比如说，用flex实现圣杯布局\n\n# BFC（块级格式化上下文，用于清除浮动，防止margin重叠等）\n直译成：块级格式化上下文，是一个独立的渲染区域，并且有一定的布局规则。\n\nBFC区域不会与float box重叠\nBFC是页面上的一个独立容器，子元素不会影响到外面\n计算BFC的高度时，浮动元素也会参与计算\n哪些元素会生成BFC：\n\n根元素\n- float不为none的元素\n- position为fixed和absolute的元素\n- display为inline-block、table-cell、table-caption，flex，inline-flex的元素\n- overflow不为visible的元素\n\n\n>BFC定义\n\n1、 box\nbox是css布局的基本单位，元素的类型和display属性决定了box的类型。不同的类型的盒子会参与不同的formatting context。\nblock-level box :display属性为block、list-item(作为列表显示的元素)、table的元素会生成block-level box。\n2、formatting context\n它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用\n\nBFC（block formatting context）为块级格式化上下文，他是一个独立渲染区域，并且只有block-level box参与，规定了block-level box内部的布局方式。\n\n>布局规则\n\n- 1、内部的box会在垂直方向上一个接一个的放置\n```bash\n<div class=\"div1\"></div>\n<div class=\"div2\"></div>\n```\n- 2、同一个bfc内，两个相邻box元素的margin会产生重叠，重叠距离为数值大的margin值\n给div1设置margin: 20px 0,给div2设置margin: 30px 0,此时div1和div2之间的间距为30px。\n\n解决方式  让两个元素不属于同一个BFC\n3、BFC区域不会与浮动元素重叠\n```bash\n<div class=\"left\"></div>\n<div class=\"main\"></div>\n```\n此时main元素没有产生bfc,left元素浮动，效果如下：\n给main元素设置overflow:hidden变为bfc,效果如下：\n- 4、计算BFC的高度时，浮动元素也参与计算\n- 5、每个元素的margin box的左边， 与 包含块 border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此\n- 6、BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素\n>3、产生BFC的方式\n- 1、overflow属性不是visible\n- 2、float属性不为none\n- 3、display属性为inline-block、table-cell、flex、inline-flex、table-caption\n- 4、position为absolute、fixed\n- 5、body根元素\n\n\n# 关于js动画和css3动画的差异性\n渲染线程分为main thread和compositor thread，如果css动画只改变transform和opacity，这时整个CSS动画得以在compositor trhead完成（而js动画则会在main thread执行，然后出发compositor thread进行下一步操作），特别注意的是如果改变transform和opacity是不会layout或者paint的。\n区别：\n\n- 功能涵盖面，js比css大\n- 实现/重构难度不一，CSS3比js更加简单，性能跳优方向固定\n- 对帧速表现不好的低版本浏览器，css3可以做到自然降级\n- css动画有天然事件支持\n- css3有兼容性问题\n\n# 块元素和行元素\nHTML可以将元素分类方式分为行内元素、块状元素和行内块状元素三种。首先需要说明的是，这三者是可以互相转换的，使用display属性能够将三者任意转换：\n\n　　(1)display:inline;转换为行内元素\n\n　　(2)display:block;转换为块状元素\n\n　　(3)display:inline-block;转换为行内块状元素\n块元素：独占一行，并且有自动填满父元素，可以设置margin和pading以及高度和宽度\n行元素：不会独占一行，width和height会失效，并且在垂直方向的padding和margin会失\n效。\n1.块状元素\n　　块状元素代表性的就是div，其他如p、nav、aside、header、footer、section、article、ul-li、address等等，都可以用div来实现。不过为了可以方便程序员解读代码，一般都会使用特定的语义化标签，使得代码可读性强，且便于查错。\n\n　　块状元素特征：(1)能够识别宽高\n\n　　　　　　　　　(2)margin和padding的上下左右均对其有效\n\n　　　　　　　　　(3)可以自动换行\n\n　　　　　　　　　(4)多个块状元素标签写在一起，默认排列方式为从上至下\n2.块状元素\n　　块状元素代表性的就是div，其他如p、nav、aside、header、footer、section、article、ul-li、address等等，都可以用div来实现。不过为了可以方便程序员解读代码，一般都会使用特定的语义化标签，使得代码可读性强，且便于查错。\n\n　　块状元素特征：(1)能够识别宽高\n\n　　　　　　　　　(2)margin和padding的上下左右均对其有效\n\n　　　　　　　　　(3)可以自动换行\n\n　　　　　　　　　(4)多个块状元素标签写在一起，默认排列方式为从上至下\n3.行内块状元素\n　　行内块状元素综合了行内元素和块状元素的特性，但是各有取舍。因此行内块状元素在日常的使用中，由于其特性，使用的次数也比较多。\n\n　　行内块状元素特征：(1)不自动换行\n\n　　　　　　　　　　　(2)能够识别宽高\n\n　　　　　　　　　　　(3)默认排列方式为从左到右\n\n# 多行元素的文本省略号\n```\ndisplay: -webkit-box\n-webkit-box-orient:vertical\n-webkit-line-clamp:3\noverflow:hidden\n```\n# visibility=hidden, opacity=0，display:none\nopacity=0，该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定一些事件，如click事件，那么点击该区域，也能触发点击事件的visibility=hidden，该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已经绑定的事件display=none，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素删除掉一样。\n# 双边距重叠问题（外边距折叠）\n多个相邻（兄弟或者父子关系）普通流的块元素垂直方向marigin会重叠\n\n折叠的结果为：\n\n两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。\n两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。\n两个外边距一正一负时，折叠结果是两者的相加的和。\n\n# position\n\n- static  默认。位置设置为 static 的元素，它始终会处于页面流给予的位置（static 元素会忽略任何 top、bottom、left 或 right 声明）。\n- relative  位置被设置为 relative 的元素，可将其移至相对于其正常位置的地方，因此 \"left:20\" 会将元素移至元素正常位置左边 20 个像素的位置。\n- absolute  位置设置为 absolute 的元素，可定位于相对于包含它的元素的指定坐标。此元素的位置可通过 \"left\"、\"top\"、\"right\" 以及 \"bottom\" 属性来规定。\n- fixed 位置被设置为 fixed 的元素，可定位于相对于浏览器窗口的指定坐标。此元素的位置可通过 \"left\"、\"top\"、\"right\" 以及\"bottom\" 属性来规定。不论窗口滚动与否，元素都会留在那个位置。工作于 IE7（strict 模式）。\n- sticky 基于用户的滚动位置来定位。粘性定位的元素是依赖于用户的滚动，在position:relative 与 position:fixed定位之间切换。它的行为就像position:relative;而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。\n\n# animation\n语法\n```bash\n@keyframes animationname {keyframes-selector {css-styles;}}\n```\n下面的表格列出了 @keyframes 规则和所有动画属性：\n\n|属性|  描述|  CSS|\n|----|----|--|\n|@keyframes  |规定动画。 |3|\n|animation |所有动画属性的简写属性，除了 animation-play-state 属性。 |3|\n|animation-name  |规定 @keyframes 动画的名称。|  3|\n|animation-duration | 规定动画完成一个周期所花费的秒或毫秒。默认是 0。| 3| \n|animation-timing-function |规定动画的速度曲线。默认是 \"ease\"。 |3|\n|animation-delay |规定动画何时开始。默认是 0。 |3|\n|animation-iteration-count |规定动画被播放的次数。默认是 1。 |3|\n|animation-direction| 规定动画是否在下一周期逆向地播放。默认是 \"normal\"。 | 3|\n|animation-play-state  |规定动画是否正在运行或暂停。默认是 \"running\"。 | 3|\n|animation-fill-mode |规定对象动画时间之外的状态。 | 3|\n\n# 伪元素伪类\n>css3为了区分伪类和伪元素，伪元素采用双冒号写法。\n\n伪类 -- :hover, :link, :active, :visited, :first-child, :last-child, nth-child(n), :not(), :focus\n伪元素 -- ::before, ::after, ::first-letter, ::first-line, ::selection\n>定义:\n\n伪类：用于向某些选择器添加特殊的效果\n伪元素：用于将特殊的效果添加到某些选择器\n>区别\n\n例子来理解\n```bash\n<p>\n    <em>This</em>\n    <em>is a text</em>\n</p>\n```\n![](weilei01.png)\n如果我们想要第一个em标签字体颜色变红怎么做呢 \n使用我们熟悉的伪类很简单\n```bash\nem:first-child {\n    color: red;\n}\n```\n![](weilei02.png)\n但是如果不存在伪类我们怎么做呢 \n这是我们就需要为第一个em标签添加类\n```\n<p>\n    <em class=\"first-child\">This</em>\n    <em>is a text</em>\n</p>\n\nem.first-child {\n    color: red;\n}\n```\n可以实现同样的效果\n```\n<p>\n    <em>This</em>\n    <em>is a text</em>\n</p>\n```\n还是这个例子 \n现在我想让这个段落的第一个字母变红 \n\n这回我们需要使用伪元素\n```\np::first-letter {\n    color: red;\n}\n```\n![](weilei03.png)\n同样假设伪元素不存在的情况 \n这时我们只能嵌套span标签来实现\n```\n<p>\n    <em><span>T</span>his</em>\n    <em>is a text</em>\n</p>\n\np span {\n    color: red;\n}\n```\n看到这里，相信大家已经清楚了为什么一个叫做伪类，一个叫做伪元素 \n伪类的效果可以通过添加实际的类来实现 \n伪元素的效果可以通过添加实际的元素来实现 \n<font color=\"red\">它们的本质区别就是是否抽象创造了新元素</font>\n伪元素是可以设置content属性的，类似于标签，但是伪类只能设置样式不能设置内容。\n**注意**\n伪类就像真正的类一样，可以叠加使用 \n没有数量上限，只要不是互斥的 \n比如这样\n```bash\nem:first-child:hover {\n    color: red;\n}\n```\n但注意，这里是“与”的关系 \n也就是说既要满足“first-child”第一个子元素 \n又要满足“hover”光标悬浮\n伪元素就要严格的多 \n伪元素在一个选择器中只能出现一次，并且只能出现在末尾 \n（这里有同学误会了，所以我作出了修改） \n像下面的样式是无法生效的\n```bash\np::first-letter:hover {  /*错误的写法：伪元素不是末尾*/\n    color: red;\n}\np::first-letter::selection {  /*错误的写法：伪元素出现了多个*/\n    color: red;\n}\n```\n关于它们的优先级 \n在计算权重的时候 \n伪类与类优先级相同 \n伪元素与标签优先级相同\n\n**总结**\n- 伪类与伪元素都是用于向选择器加特殊效果\n- 伪类与伪元素的本质区别就是是否抽象创造了新元素\n- 伪类只要不是互斥可以叠加使用\n- 伪元素在一个选择器中只能出现一次，并且只能出现在末尾\n- 伪类与伪元素优先级分别与类、标签优先级相同","source":"_posts/面试CSS.md","raw":"---\ntitle: CSS\ndate: 2018-12-26 17:28:15\ncategories: \n- 基础前端技术\ntags: [CSS]\n---\n\n\n# 响应式布局的常用解决方案对比(媒体查询、百分比、rem和vw/vh）\n简要介绍：前端开发中，静态网页通常需要适应不同分辨率的设备，常用的自适应解决方案包括媒体查询、百分比、rem和vw/vh等。本文从px单位出发，分析了px在移动端布局中的不足，接着介绍了几种不同的自适应解决方案。\n\n- px和视口\n- 媒体查询\n- 百分比\n- 自适应场景下的rem解决方案\n- 通过vw/vh来实现自适应\n\n## px和视口\n在静态网页中，我们经常用像素（px）作为单位，来描述一个元素的宽高以及定位信息。在pc端，通常认为css中,1px所表示的真实长度是固定的。\n那么，px真的是一个设备无关，跟长度单位米和分米一样是固定大小的吗？\n\n答案是否定的，下面图1.1和图1.2分别表示pc端下和移动端下的显示结果，在网页中我们设置的font-size统一为16px。\n![](css01.png)\n从上面两幅图的对比可以看出，字体都是16px，显然在pc端中文字正常显示，而在移动端文字很小，几乎看不到，说明在css中1px并不是固定大小，直观从我们发现在移动端1px所表示的长度较小，所以导致文字显示不清楚。\n\n那么css中的1px的真实长度到底由什么决定呢？\n\n为了理清楚这个概念我们首先介绍像素和视口的概念\n\n### 像素\n像素是网页布局的基础，一个像素表示了计算机屏幕所能显示的最小区域，像素分为两种类型：css像素和物理像素。\n\n我们在js或者css代码中使用的px单位就是指的是css像素，物理像素也称设备像素，只与设备或者说硬件有关，同样尺寸的屏幕，设备的密度越高，物理像素也就越多。下表表示css像素和物理像素的具体区别：\n>css像素:  为web开发者提供，在css中使用的一个抽象单位 \n>物理像素 : 只与设备的硬件密度有关，任何设备的物理像素都是固定的 \n那么css像素与物理像素的转换关系是怎么样的呢？为了明确css像素和物理像素的转换关系，必须先了解视口是什么。\n\n### 视口\n广义的视口，是指浏览器显示内容的屏幕区域，狭义的视口包括了布局视口、视觉视口和理想视口\n\n(1) 布局视口（layout viewport）\n布局视口定义了pc网页在移动端的默认布局行为，因为通常pc的分辨率较大，布局视口默认为980px。也就是说在不设置网页的viewport的情况下，pc端的网页默认会以布局视口为基准，在移动端进行展示。因此我们可以明显看出来，默认为布局视口时，根植于pc端的网页在移动端展示很模糊。\n\n(2) 视觉视口（visual viewport）\n视觉视口表示浏览器内看到的网站的显示区域，用户可以通过缩放来查看网页的显示内容，从而改变视觉视口。视觉视口的定义，就像拿着一个放大镜分别从不同距离观察同一个物体，视觉视口仅仅类似于放大镜中显示的内容，因此视觉视口不会影响布局视口的宽度和高度。\n\n(3) 理想视口（ideal viewport）\n理想视口或者应该全称为“理想的布局视口”，在移动设备中就是指设备的分辨率。换句话说，理想视口或者说分辨率就是给定设备物理像素的情况下，最佳的“布局视口”。\n\n上述视口中，最重要的是要明确理想视口的概念，在移动端中，理想视口或者说分辨率跟物理像素之间有什么关系呢？\n\n为了理清分辨率和物理像素之间的联系，我们介绍一个用DPR（Device pixel ratio）设备像素比来表示，则可以写成：\n\n1 DPR = 物理像素／分辨率\n在不缩放的情况下，一个css像素就对应一个dpr，也就是说，在不缩放\n\n1 CSS像素 = 物理像素／分辨率\n此外，在移动端的布局中，我们可以通过viewport元标签来控制布局，比如一般情况下，我们可以通过下述标签使得移动端在理想视口下布局：\n```\n<meta id=\"viewport\" name=\"viewport\" content=\"width=device-width; initial-scale=1.0; maximum-scale=1; user-scalable=no;\">\n```\n| 属性名 |取值 | 描述|\n|-------|--------|--------|\n| width |  正整数| 定义布局视口的宽度，单位为像素|\n| height | 正整数 |定义布局视口的高度，单位为像素，很少使用|\n| initial-scale |  [0,10]|  初始缩放比例，1表示不缩放|\n| minimum-scale|  [0,10] | 最小缩放比例|\n| maximum-scale|  [0,10] | 最大缩放比例|\n| user-scalable|  yes／no | 是否允许手动缩放页面，默认值为yes|\n其中我们来看width属性，在移动端布局时，在meta标签中我们会将width设置称为device-width，device-width一般是表示分辨率的宽，通过width=device-width的设置我们就将布局视口设置成了理想的视口。\n### px与自适应\n上述我们了解到了当通过viewport元标签，设置布局视口为理想视口时，1个css像素可以表示成：\n\n1 CSS像素 = 物理像素／分辨率\n我们直到，在pc端的布局视口通常情况下为980px，移动端以iphone6为例，分辨率为375 * 667，也就是说布局视口在理想的情况下为375px。比如现在我们有一个750px * 1134px的视觉稿，那么在pc端，一个css像素可以如下计算：\n\nPC端： 1 CSS像素 = 物理像素／分辨率 = 750 ／ 980 =0.76 px\n而在iphone6下：\n\niphone6：1 CSS像素 = 物理像素 ／分辨率 = 750 ／ 375 = 2 px\n也就是说在PC端，一个CSS像素可以用0.76个物理像素来表示，而iphone6中 一个CSS像素表示了2个物理像素。此外不同的移动设备分辨率不同，也就是1个CSS像素可以表示的物理像素是不同的，因此如果在css中仅仅通过px作为长度和宽度的单位，造成的结果就是无法通过一套样式，实现各端的自适应。\n## 媒体查询\n在前面我们说到，不同端的设备下，在css文件中，1px所表示的物理像素的大小是不同的，因此通过一套样式，是无法实现各端的自适应。由此我们联想：\n\n如果一套样式不行，那么能否给每一种设备各一套不同的样式来实现自适应的效果？\n\n答案是肯定的。\n\n使用@media媒体查询可以针对不同的媒体类型定义不同的样式，特别是响应式页面，可以针对不同屏幕的大小，编写多套样式，从而达到自适应的效果。举例来说：\n```\n@media screen and (max-width: 960px){\n    body{\n      background-color:#FF6699\n    }\n}\n\n@media screen and (max-width: 768px){\n    body{\n      background-color:#00FF66;\n    }\n}\n\n@media screen and (max-width: 550px){\n    body{\n      background-color:#6633FF;\n    }\n}\n\n@media screen and (max-width: 320px){\n    body{\n      background-color:#FFFF00;\n    }\n}\n```\n上述的代码通过媒体查询定义了几套样式，通过max-width设置样式生效时的最大分辨率，上述的代码分别对分辨率在0～320px，320px～550px，550px～768px以及768px～960px的屏幕设置了不同的背景颜色。\n\n通过媒体查询，可以通过给不同分辨率的设备编写不同的样式来实现响应式的布局，比如我们为不同分辨率的屏幕，设置不同的背景图片。比如给小屏幕手机设置@2x图，为大屏幕手机设置@3X图，通过媒体查询就能很方便的实现。\n\n但是媒体查询的缺点也很明显，如果在浏览器大小改变时，需要改变的样式太多，那么多套样式代码会很繁琐。\n## 百分比\n除了用px结合媒体查询实现响应式布局外，我们也可以通过百分比单位 \" % \" 来实现响应式的效果。\n\n比如当浏览器的宽度或者高度发生变化时，通过百分比单位，通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。\n\n为了了解百分比布局，首先要了解的问题是：\n\ncss中的子元素中的百分比（%）到底是谁的百分比？\n\n直观的理解，我们可能会认为子元素的百分比完全相对于直接父元素，height百分比相对于height，width百分比相对于width。当然这种理解是正确的，但是根据css的盒式模型，除了height、width属性外，还具有padding、border、margin等等属性。那么这些属性设置成百分比，是根据父元素的那些属性呢？此外还有border-radius和translate等属性中的百分比，又是相对于什么呢？下面来具体分析。\n\n1. 百分比的具体分析\n（1）子元素height和width的百分比\n\n子元素的height或width中使用百分比，是相对于子元素的直接父元素，width相对于父元素的width，height相对于父元素的height。比如：\n```\n<div class=\"parent\">\n  <div class=\"child\"></div>\n</div>\n如果设置：\n.father{\nwidth:200px;\nheight:100px;\n}\n.child{\nwidth:50%;\nheight:50%;\n}\n```\n展示的效果为：\n![](css02.png)\n(2) top和bottom 、left和right\n\n子元素的top和bottom如果设置百分比，则相对于直接非static定位(默认定位)的父元素的高度，同样\n\n子元素的left和right如果设置百分比，则相对于直接非static定位(默认定位的)父元素的宽度。\n\n展示的效果为：\n![](css03.png)\n（3）padding\n\n子元素的padding如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的width，而与父元素的height无关。\n\n举例来说：\n```\n.parent{\n  width:200px;\n  height:100px;\n  background:green;\n}\n.child{\n  width:0px;\n  height:0px;\n  background:blue;\n  color:white;\n  padding-top:50%;\n  padding-left:50%;\n}\n```\n展示的效果为：\n![](css04.png)\n子元素的初始宽高为0，通过padding可以将父元素撑大，上图的蓝色部分是一个正方形，且边长为100px,说明padding不论宽高，如果设置成百分比都相对于父元素的width。\n\n（4）margin\n\n跟padding一样，margin也是如此，子元素的margin如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的width。这里就不具体举例。\n\n（5）border-radius\n\nborder-radius不一样，如果设置border-radius为百分比，则是相对于自身的宽度，举例来说：\n```\n  <div class=\"trangle\"></div>\n```\n设置border-radius为百分比：\n```\n.trangle{\n  width:100px;\n  height:100px;\n  border-radius:50%;\n  background:blue;\n  margin-top:10px;\n}\n```\n展示效果为：\n\n![](css06.gif)\n2. 百分比单位布局应用\n百分比单位在布局上应用还是很广泛的，这里介绍一种应用。\n比如我们要实现一个固定长宽比的长方形，比如要实现一个长宽比为4:3的长方形,我们可以根据padding属性来实现，因为padding不管是垂直方向还是水平方向，百分比单位都相对于父元素的宽度，因此我们可以设置padding-top为百分比来实现，长宽自适应的长方形：\n```\n<div class=\"trangle\"></div>\n```\n设置样式让其自适应：\n```\n.trangle{\n  height:0;\n  width:100%;\n  padding-top:75%;\n}\n```\n通过设置padding-top：75%,相对比宽度的75%，因此这样就设置了一个长宽高恒定比例的长方形，具体效果\n![](css05.png)\n3. 百分比单位缺点\n从上述对于百分比单位的介绍我们很容易看出如果全部使用百分比单位来实现响应式的布局，有明显的以下两个缺点：\n（1）计算困难，如果我们要定义一个元素的宽度和高度，按照设计稿，必须换算成百分比单位。\n（2）从小节1可以看出，各个属性中如果使用百分比，相对父元素的属性并不是唯一的。比如width和height相对于父元素的width和height，而margin、padding不管垂直还是水平方向都相对比父元素的宽度、border-radius则是相对于元素自身等等，造成我们使用百分比单位容易使布局问题变得复杂。\n\n## 自适应场景下的rem解决方案\n1. rem单位\n\n首先来看，什么是rem单位。rem是一个灵活的、可扩展的单位，由浏览器转化像素并显示。与em单位不同，rem单位无论嵌套层级如何，都只相对于浏览器的根元素（HTML元素）的font-size。默认情况下，html元素的font-size为16px，所以：\n```\n    1 rem = 12px\n```\n为了计算方便，通常可以将html的font-size设置成：\n```\n    html{ font-size: 62.5% }\n```\n这种情况下：\n```\n    1 rem = 10px\n```\n\n2.通过rem来实现响应式布局\n\nrem单位都是相对于根元素html的font-size来决定大小的,根元素的font-size相当于提供了一个基准，当页面的size发生变化时，只需要改变font-size的值，那么以rem为固定单位的元素的大小也会发生响应的变化。\n因此，如果通过rem来实现响应式的布局，只需要根据视图容器的大小，动态的改变font-size即可。\n```\nfunction refreshRem() {\n    var docEl = doc.documentElement;\n    var width = docEl.getBoundingClientRect().width;\n    var rem = width / 10;\n    docEl.style.fontSize = rem + 'px';\n    flexible.rem = win.rem = rem;\n}\nwin.addEventListener('resize', refreshRem);\n```\n上述代码中将视图容器分为10份，font-size用十分之一的宽度来表示，最后在header标签中执行这段代码，就可以动态定义font-size的大小，从而1rem在不同的视觉容器中表示不同的大小，用rem固定单位可以实现不同容器内布局的自适应。\n\n3. rem2px和px2rem\n\n如果在响应式布局中使用rem单位，那么存在一个单位换算的问题，rem2px表示从rem换算成px，这个就不说了，只要rem乘以相应的font-size中的大小，就能换算成px。更多的应用是px2rem，表示的是从px转化为rem。\n\n比如给定的视觉稿为750px（物理像素），如果我们要将所有的布局单位都用rem来表示，一种比较笨的办法就是对所有的height和width等元素，乘以相应的比例，现将视觉稿换算成rem单位，然后一个个的用rem来表示。另一种比较方便的解决方法就是，在css中我们还是用px来表示元素的大小，最后编写完css代码之后，将css文件中的所有px单位，转化成rem单位。\n\npx2rem的原理也很简单，重点在于预处理以px为单位的css文件，处理后将所有的px变成rem单位。可以通过两种方式来实现：\n\n1） webpack loader的形式：\n```\nnpm install px2rem-loader\n```\n在webpack的配置文件中：\n```\nmodule.exports = {\n  // ...\n  module: {\n    rules: [{\n      test: /\\.css$/,\n      use: [{\n        loader: 'style-loader'\n      }, {\n        loader: 'css-loader'\n      }, {\n        loader: 'px2rem-loader',\n        // options here\n        options: {\n          remUni: 75,\n          remPrecision: 8\n        }\n      }]\n    }]\n  }\n}\n```\n2）webpack中使用postcss plugin\n```\nnpm install postcss-loader\n```\n在webpack的plugin中:\n```\nvar px2rem = require('postcss-px2rem');\n\nmodule.exports = {\n  module: {\n    loaders: [\n      {\n        test: /\\.css$/,\n        loader: \"style-loader!css-loader!postcss-loader\"\n      }\n    ]\n  },\n  postcss: function() {\n    return [px2rem({remUnit: 75})];\n  }\n}\n```\n4. rem 布局应用举例\n\n网易新闻的移动端页面使用了rem布局，具体例子如下：\n\n![](css07.gif)\n\n5. rem 布局的缺点\n\n通过rem单位，可以实现响应式的布局，特别是引入相应的postcss相关插件，免去了设计稿中的px到rem的计算。rem单位在国外的一些网站也有使用，这里所说的rem来实现布局的缺点，或者说是小缺陷是：\n\n在响应式布局中，必须通过js来动态控制根元素font-size的大小。\n\n也就是说css样式和js代码有一定的耦合性。且必须将改变font-size的代码放在css样式之前。\n\n## 通过vw/vh来实现自适应\n1. 什么是vw/vh ?\n\ncss3中引入了一个新的单位vw/vh，与视图窗口有关，vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度，除了vw和vh外，还有vmin和vmax两个相关的单位。各个单位具体的含义如下：\n\n|单位  |含义|\n|---|---|\n|vw  |相对于视窗的宽度，视窗宽度是100vw|\n|vh  |相对于视窗的高度，视窗高度是100vh|\n|vmin|    vw和vh中的较小值|\n|vmax|    vw和vh中的较大值|\n这里我们发现视窗宽高都是100vw／100vh，那么vw或者vh，下简称vw，很类似百分比单位。vw和%的区别为：\n\n|单位|  含义|\n|---|---|\n|% |  大部分相对于祖先元素，也有相对于自身的情况比如（border-radius、translate等)|\n|vw/vh|   相对于视窗的尺寸|\n从对比中我们可以发现，vw单位与百分比类似，单确有区别，前面我们介绍了百分比单位的换算困难，这里的vw更像\"理想的百分比单位\"。任意层级元素，在使用vw单位的情况下，1vw都等于视图宽度的百分之一。\n\n2. vw单位换算\n\n同样的，如果要将px换算成vw单位，很简单，只要确定视图的窗口大小（布局视口），如果我们将布局视口设置成分辨率大小，比如对于iphone6/7 375*667的分辨率，那么px可以通过如下方式换算成vw：\n```\n1px = （1/375）*100 vw\n```\n此外，也可以通过postcss的相应插件，预处理css做一个自动的转换，postcss-px-to-viewport可以自动将px转化成vw。\npostcss-px-to-viewport的默认参数为：\n```\nvar defaults = {\n  viewportWidth: 320,\n  viewportHeight: 568, \n  unitPrecision: 5,\n  viewportUnit: 'vw',\n  selectorBlackList: [],\n  minPixelValue: 1,\n  mediaQuery: false\n};\n```\n通过指定视窗的宽度和高度，以及换算精度，就能将px转化成vw。\n\n3. vw/vh单位的兼容性\n可以在[https://caniuse.com/](https://caniuse.com/) 查看各个版本的浏览器对vw单位的支持性。\n从上图我们发现，绝大多数的浏览器支持vw单位，但是ie9-11不支持vmin和vmax，考虑到vmin和vmax单位不常用，vw单位在绝大部分高版本浏览器内的支持性很好，但是opera浏览器整体不支持vw单位，如果需要兼容opera浏览器的布局，不推荐使用vw。\n\n## 小结\n本文介绍在布局中常用的单位，比如px、%、rem和vw等等，以及不同的单位在响应式布局中的优缺点。\n\n# 画一条0.5px的线\n- 采用meta viewport的方式\n\n- 采用 border-image的方式\n\n- 采用transform: scale()的方式\n\n# link标签和import标签的区别\n- link属于html标签，而@import是css提供的\n- 页面被加载时，link会同时被加载，而@import引用的css会等到页面加载结束后加载。\n- link是html标签，因此没有兼容性，而@import只有IE5以上才能识别。\n- link方式样式的权重高于@import的。\n\n# transition和animation的区别\nAnimation和transition大部分属性是相同的，他们都是随时间改变元素的属性值，他们的主要区别是transition需要触发一个事件才能改变属性，而animation不需要触发任何事件的情况下才会随时间改变属性值，并且transition为2帧，从from .... to，而animation可以一帧一帧的。\n\n# Flex布局\n文章链接：\nhttp://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool（语法篇）\nhttp://www.ruanyifeng.com/blog/2015/07/flex-examples.html（实例篇）\n\nFlex是Flexible Box的缩写，意为\"弹性布局\"，用来为盒状模型提供最大的灵活性。\n布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。\n\n简单的分为容器属性和元素属性\n容器的属性：\n\nflex-direction：决定主轴的方向（即子item的排列方法）\n.box {\nflex-direction: row | row-reverse | column | column-reverse;\n}\nflex-wrap：决定换行规则\n.box{\nflex-wrap: nowrap | wrap | wrap-reverse;\n}\nflex-flow：\n.box {\nflex-flow: || ;\n}\njustify-content：对其方式，水平主轴对齐方式\nalign-items：对齐方式，竖直轴线方向\n项目的属性（元素的属性）：\n\norder属性：定义项目的排列顺序，顺序越小，排列越靠前，默认为0\nflex-grow属性：定义项目的放大比例，即使存在空间，也不会放大\nflex-shrink属性：定义了项目的缩小比例，当空间不足的情况下会等比例的缩小，如果定义个item的flow-shrink为0，则为不缩小\nflex-basis属性：定义了在分配多余的空间，项目占据的空间。\nflex：是flex-grow和flex-shrink、flex-basis的简写，默认值为0 1 auto。\nalign-self：允许单个项目与其他项目不一样的对齐方式，可以覆盖align-items，默认属性为auto，表示继承父元素的align-items\n比如说，用flex实现圣杯布局\n\n# BFC（块级格式化上下文，用于清除浮动，防止margin重叠等）\n直译成：块级格式化上下文，是一个独立的渲染区域，并且有一定的布局规则。\n\nBFC区域不会与float box重叠\nBFC是页面上的一个独立容器，子元素不会影响到外面\n计算BFC的高度时，浮动元素也会参与计算\n哪些元素会生成BFC：\n\n根元素\n- float不为none的元素\n- position为fixed和absolute的元素\n- display为inline-block、table-cell、table-caption，flex，inline-flex的元素\n- overflow不为visible的元素\n\n\n>BFC定义\n\n1、 box\nbox是css布局的基本单位，元素的类型和display属性决定了box的类型。不同的类型的盒子会参与不同的formatting context。\nblock-level box :display属性为block、list-item(作为列表显示的元素)、table的元素会生成block-level box。\n2、formatting context\n它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用\n\nBFC（block formatting context）为块级格式化上下文，他是一个独立渲染区域，并且只有block-level box参与，规定了block-level box内部的布局方式。\n\n>布局规则\n\n- 1、内部的box会在垂直方向上一个接一个的放置\n```bash\n<div class=\"div1\"></div>\n<div class=\"div2\"></div>\n```\n- 2、同一个bfc内，两个相邻box元素的margin会产生重叠，重叠距离为数值大的margin值\n给div1设置margin: 20px 0,给div2设置margin: 30px 0,此时div1和div2之间的间距为30px。\n\n解决方式  让两个元素不属于同一个BFC\n3、BFC区域不会与浮动元素重叠\n```bash\n<div class=\"left\"></div>\n<div class=\"main\"></div>\n```\n此时main元素没有产生bfc,left元素浮动，效果如下：\n给main元素设置overflow:hidden变为bfc,效果如下：\n- 4、计算BFC的高度时，浮动元素也参与计算\n- 5、每个元素的margin box的左边， 与 包含块 border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此\n- 6、BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素\n>3、产生BFC的方式\n- 1、overflow属性不是visible\n- 2、float属性不为none\n- 3、display属性为inline-block、table-cell、flex、inline-flex、table-caption\n- 4、position为absolute、fixed\n- 5、body根元素\n\n\n# 关于js动画和css3动画的差异性\n渲染线程分为main thread和compositor thread，如果css动画只改变transform和opacity，这时整个CSS动画得以在compositor trhead完成（而js动画则会在main thread执行，然后出发compositor thread进行下一步操作），特别注意的是如果改变transform和opacity是不会layout或者paint的。\n区别：\n\n- 功能涵盖面，js比css大\n- 实现/重构难度不一，CSS3比js更加简单，性能跳优方向固定\n- 对帧速表现不好的低版本浏览器，css3可以做到自然降级\n- css动画有天然事件支持\n- css3有兼容性问题\n\n# 块元素和行元素\nHTML可以将元素分类方式分为行内元素、块状元素和行内块状元素三种。首先需要说明的是，这三者是可以互相转换的，使用display属性能够将三者任意转换：\n\n　　(1)display:inline;转换为行内元素\n\n　　(2)display:block;转换为块状元素\n\n　　(3)display:inline-block;转换为行内块状元素\n块元素：独占一行，并且有自动填满父元素，可以设置margin和pading以及高度和宽度\n行元素：不会独占一行，width和height会失效，并且在垂直方向的padding和margin会失\n效。\n1.块状元素\n　　块状元素代表性的就是div，其他如p、nav、aside、header、footer、section、article、ul-li、address等等，都可以用div来实现。不过为了可以方便程序员解读代码，一般都会使用特定的语义化标签，使得代码可读性强，且便于查错。\n\n　　块状元素特征：(1)能够识别宽高\n\n　　　　　　　　　(2)margin和padding的上下左右均对其有效\n\n　　　　　　　　　(3)可以自动换行\n\n　　　　　　　　　(4)多个块状元素标签写在一起，默认排列方式为从上至下\n2.块状元素\n　　块状元素代表性的就是div，其他如p、nav、aside、header、footer、section、article、ul-li、address等等，都可以用div来实现。不过为了可以方便程序员解读代码，一般都会使用特定的语义化标签，使得代码可读性强，且便于查错。\n\n　　块状元素特征：(1)能够识别宽高\n\n　　　　　　　　　(2)margin和padding的上下左右均对其有效\n\n　　　　　　　　　(3)可以自动换行\n\n　　　　　　　　　(4)多个块状元素标签写在一起，默认排列方式为从上至下\n3.行内块状元素\n　　行内块状元素综合了行内元素和块状元素的特性，但是各有取舍。因此行内块状元素在日常的使用中，由于其特性，使用的次数也比较多。\n\n　　行内块状元素特征：(1)不自动换行\n\n　　　　　　　　　　　(2)能够识别宽高\n\n　　　　　　　　　　　(3)默认排列方式为从左到右\n\n# 多行元素的文本省略号\n```\ndisplay: -webkit-box\n-webkit-box-orient:vertical\n-webkit-line-clamp:3\noverflow:hidden\n```\n# visibility=hidden, opacity=0，display:none\nopacity=0，该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定一些事件，如click事件，那么点击该区域，也能触发点击事件的visibility=hidden，该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已经绑定的事件display=none，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素删除掉一样。\n# 双边距重叠问题（外边距折叠）\n多个相邻（兄弟或者父子关系）普通流的块元素垂直方向marigin会重叠\n\n折叠的结果为：\n\n两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。\n两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。\n两个外边距一正一负时，折叠结果是两者的相加的和。\n\n# position\n\n- static  默认。位置设置为 static 的元素，它始终会处于页面流给予的位置（static 元素会忽略任何 top、bottom、left 或 right 声明）。\n- relative  位置被设置为 relative 的元素，可将其移至相对于其正常位置的地方，因此 \"left:20\" 会将元素移至元素正常位置左边 20 个像素的位置。\n- absolute  位置设置为 absolute 的元素，可定位于相对于包含它的元素的指定坐标。此元素的位置可通过 \"left\"、\"top\"、\"right\" 以及 \"bottom\" 属性来规定。\n- fixed 位置被设置为 fixed 的元素，可定位于相对于浏览器窗口的指定坐标。此元素的位置可通过 \"left\"、\"top\"、\"right\" 以及\"bottom\" 属性来规定。不论窗口滚动与否，元素都会留在那个位置。工作于 IE7（strict 模式）。\n- sticky 基于用户的滚动位置来定位。粘性定位的元素是依赖于用户的滚动，在position:relative 与 position:fixed定位之间切换。它的行为就像position:relative;而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。\n\n# animation\n语法\n```bash\n@keyframes animationname {keyframes-selector {css-styles;}}\n```\n下面的表格列出了 @keyframes 规则和所有动画属性：\n\n|属性|  描述|  CSS|\n|----|----|--|\n|@keyframes  |规定动画。 |3|\n|animation |所有动画属性的简写属性，除了 animation-play-state 属性。 |3|\n|animation-name  |规定 @keyframes 动画的名称。|  3|\n|animation-duration | 规定动画完成一个周期所花费的秒或毫秒。默认是 0。| 3| \n|animation-timing-function |规定动画的速度曲线。默认是 \"ease\"。 |3|\n|animation-delay |规定动画何时开始。默认是 0。 |3|\n|animation-iteration-count |规定动画被播放的次数。默认是 1。 |3|\n|animation-direction| 规定动画是否在下一周期逆向地播放。默认是 \"normal\"。 | 3|\n|animation-play-state  |规定动画是否正在运行或暂停。默认是 \"running\"。 | 3|\n|animation-fill-mode |规定对象动画时间之外的状态。 | 3|\n\n# 伪元素伪类\n>css3为了区分伪类和伪元素，伪元素采用双冒号写法。\n\n伪类 -- :hover, :link, :active, :visited, :first-child, :last-child, nth-child(n), :not(), :focus\n伪元素 -- ::before, ::after, ::first-letter, ::first-line, ::selection\n>定义:\n\n伪类：用于向某些选择器添加特殊的效果\n伪元素：用于将特殊的效果添加到某些选择器\n>区别\n\n例子来理解\n```bash\n<p>\n    <em>This</em>\n    <em>is a text</em>\n</p>\n```\n![](weilei01.png)\n如果我们想要第一个em标签字体颜色变红怎么做呢 \n使用我们熟悉的伪类很简单\n```bash\nem:first-child {\n    color: red;\n}\n```\n![](weilei02.png)\n但是如果不存在伪类我们怎么做呢 \n这是我们就需要为第一个em标签添加类\n```\n<p>\n    <em class=\"first-child\">This</em>\n    <em>is a text</em>\n</p>\n\nem.first-child {\n    color: red;\n}\n```\n可以实现同样的效果\n```\n<p>\n    <em>This</em>\n    <em>is a text</em>\n</p>\n```\n还是这个例子 \n现在我想让这个段落的第一个字母变红 \n\n这回我们需要使用伪元素\n```\np::first-letter {\n    color: red;\n}\n```\n![](weilei03.png)\n同样假设伪元素不存在的情况 \n这时我们只能嵌套span标签来实现\n```\n<p>\n    <em><span>T</span>his</em>\n    <em>is a text</em>\n</p>\n\np span {\n    color: red;\n}\n```\n看到这里，相信大家已经清楚了为什么一个叫做伪类，一个叫做伪元素 \n伪类的效果可以通过添加实际的类来实现 \n伪元素的效果可以通过添加实际的元素来实现 \n<font color=\"red\">它们的本质区别就是是否抽象创造了新元素</font>\n伪元素是可以设置content属性的，类似于标签，但是伪类只能设置样式不能设置内容。\n**注意**\n伪类就像真正的类一样，可以叠加使用 \n没有数量上限，只要不是互斥的 \n比如这样\n```bash\nem:first-child:hover {\n    color: red;\n}\n```\n但注意，这里是“与”的关系 \n也就是说既要满足“first-child”第一个子元素 \n又要满足“hover”光标悬浮\n伪元素就要严格的多 \n伪元素在一个选择器中只能出现一次，并且只能出现在末尾 \n（这里有同学误会了，所以我作出了修改） \n像下面的样式是无法生效的\n```bash\np::first-letter:hover {  /*错误的写法：伪元素不是末尾*/\n    color: red;\n}\np::first-letter::selection {  /*错误的写法：伪元素出现了多个*/\n    color: red;\n}\n```\n关于它们的优先级 \n在计算权重的时候 \n伪类与类优先级相同 \n伪元素与标签优先级相同\n\n**总结**\n- 伪类与伪元素都是用于向选择器加特殊效果\n- 伪类与伪元素的本质区别就是是否抽象创造了新元素\n- 伪类只要不是互斥可以叠加使用\n- 伪元素在一个选择器中只能出现一次，并且只能出现在末尾\n- 伪类与伪元素优先级分别与类、标签优先级相同","slug":"面试CSS","published":1,"updated":"2019-07-17T11:39:10.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cy70065t09zkix92rau","content":"<h1 id=\"响应式布局的常用解决方案对比-媒体查询、百分比、rem和vw-vh）\"><a href=\"#响应式布局的常用解决方案对比-媒体查询、百分比、rem和vw-vh）\" class=\"headerlink\" title=\"响应式布局的常用解决方案对比(媒体查询、百分比、rem和vw/vh）\"></a>响应式布局的常用解决方案对比(媒体查询、百分比、rem和vw/vh）</h1><p>简要介绍：前端开发中，静态网页通常需要适应不同分辨率的设备，常用的自适应解决方案包括媒体查询、百分比、rem和vw/vh等。本文从px单位出发，分析了px在移动端布局中的不足，接着介绍了几种不同的自适应解决方案。</p>\n<ul>\n<li>px和视口</li>\n<li>媒体查询</li>\n<li>百分比</li>\n<li>自适应场景下的rem解决方案</li>\n<li>通过vw/vh来实现自适应</li>\n</ul>\n<h2 id=\"px和视口\"><a href=\"#px和视口\" class=\"headerlink\" title=\"px和视口\"></a>px和视口</h2><p>在静态网页中，我们经常用像素（px）作为单位，来描述一个元素的宽高以及定位信息。在pc端，通常认为css中,1px所表示的真实长度是固定的。<br>那么，px真的是一个设备无关，跟长度单位米和分米一样是固定大小的吗？</p>\n<p>答案是否定的，下面图1.1和图1.2分别表示pc端下和移动端下的显示结果，在网页中我们设置的font-size统一为16px。<br><img src=\"/2018/12/26/面试CSS/css01.png\" alt=\"\"><br>从上面两幅图的对比可以看出，字体都是16px，显然在pc端中文字正常显示，而在移动端文字很小，几乎看不到，说明在css中1px并不是固定大小，直观从我们发现在移动端1px所表示的长度较小，所以导致文字显示不清楚。</p>\n<p>那么css中的1px的真实长度到底由什么决定呢？</p>\n<p>为了理清楚这个概念我们首先介绍像素和视口的概念</p>\n<h3 id=\"像素\"><a href=\"#像素\" class=\"headerlink\" title=\"像素\"></a>像素</h3><p>像素是网页布局的基础，一个像素表示了计算机屏幕所能显示的最小区域，像素分为两种类型：css像素和物理像素。</p>\n<p>我们在js或者css代码中使用的px单位就是指的是css像素，物理像素也称设备像素，只与设备或者说硬件有关，同样尺寸的屏幕，设备的密度越高，物理像素也就越多。下表表示css像素和物理像素的具体区别：</p>\n<blockquote>\n<p>css像素:  为web开发者提供，在css中使用的一个抽象单位<br>物理像素 : 只与设备的硬件密度有关，任何设备的物理像素都是固定的<br>那么css像素与物理像素的转换关系是怎么样的呢？为了明确css像素和物理像素的转换关系，必须先了解视口是什么。</p>\n</blockquote>\n<h3 id=\"视口\"><a href=\"#视口\" class=\"headerlink\" title=\"视口\"></a>视口</h3><p>广义的视口，是指浏览器显示内容的屏幕区域，狭义的视口包括了布局视口、视觉视口和理想视口</p>\n<p>(1) 布局视口（layout viewport）<br>布局视口定义了pc网页在移动端的默认布局行为，因为通常pc的分辨率较大，布局视口默认为980px。也就是说在不设置网页的viewport的情况下，pc端的网页默认会以布局视口为基准，在移动端进行展示。因此我们可以明显看出来，默认为布局视口时，根植于pc端的网页在移动端展示很模糊。</p>\n<p>(2) 视觉视口（visual viewport）<br>视觉视口表示浏览器内看到的网站的显示区域，用户可以通过缩放来查看网页的显示内容，从而改变视觉视口。视觉视口的定义，就像拿着一个放大镜分别从不同距离观察同一个物体，视觉视口仅仅类似于放大镜中显示的内容，因此视觉视口不会影响布局视口的宽度和高度。</p>\n<p>(3) 理想视口（ideal viewport）<br>理想视口或者应该全称为“理想的布局视口”，在移动设备中就是指设备的分辨率。换句话说，理想视口或者说分辨率就是给定设备物理像素的情况下，最佳的“布局视口”。</p>\n<p>上述视口中，最重要的是要明确理想视口的概念，在移动端中，理想视口或者说分辨率跟物理像素之间有什么关系呢？</p>\n<p>为了理清分辨率和物理像素之间的联系，我们介绍一个用DPR（Device pixel ratio）设备像素比来表示，则可以写成：</p>\n<p>1 DPR = 物理像素／分辨率<br>在不缩放的情况下，一个css像素就对应一个dpr，也就是说，在不缩放</p>\n<p>1 CSS像素 = 物理像素／分辨率<br>此外，在移动端的布局中，我们可以通过viewport元标签来控制布局，比如一般情况下，我们可以通过下述标签使得移动端在理想视口下布局：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta id=&quot;viewport&quot; name=&quot;viewport&quot; content=&quot;width=device-width; initial-scale=1.0; maximum-scale=1; user-scalable=no;&quot;&gt;</span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>取值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>正整数</td>\n<td>定义布局视口的宽度，单位为像素</td>\n</tr>\n<tr>\n<td>height</td>\n<td>正整数</td>\n<td>定义布局视口的高度，单位为像素，很少使用</td>\n</tr>\n<tr>\n<td>initial-scale</td>\n<td>[0,10]</td>\n<td>初始缩放比例，1表示不缩放</td>\n</tr>\n<tr>\n<td>minimum-scale</td>\n<td>[0,10]</td>\n<td>最小缩放比例</td>\n</tr>\n<tr>\n<td>maximum-scale</td>\n<td>[0,10]</td>\n<td>最大缩放比例</td>\n</tr>\n<tr>\n<td>user-scalable</td>\n<td>yes／no</td>\n<td>是否允许手动缩放页面，默认值为yes</td>\n</tr>\n</tbody>\n</table>\n<p>其中我们来看width属性，在移动端布局时，在meta标签中我们会将width设置称为device-width，device-width一般是表示分辨率的宽，通过width=device-width的设置我们就将布局视口设置成了理想的视口。</p>\n<h3 id=\"px与自适应\"><a href=\"#px与自适应\" class=\"headerlink\" title=\"px与自适应\"></a>px与自适应</h3><p>上述我们了解到了当通过viewport元标签，设置布局视口为理想视口时，1个css像素可以表示成：</p>\n<p>1 CSS像素 = 物理像素／分辨率<br>我们直到，在pc端的布局视口通常情况下为980px，移动端以iphone6为例，分辨率为375 <em> 667，也就是说布局视口在理想的情况下为375px。比如现在我们有一个750px </em> 1134px的视觉稿，那么在pc端，一个css像素可以如下计算：</p>\n<p>PC端： 1 CSS像素 = 物理像素／分辨率 = 750 ／ 980 =0.76 px<br>而在iphone6下：</p>\n<p>iphone6：1 CSS像素 = 物理像素 ／分辨率 = 750 ／ 375 = 2 px<br>也就是说在PC端，一个CSS像素可以用0.76个物理像素来表示，而iphone6中 一个CSS像素表示了2个物理像素。此外不同的移动设备分辨率不同，也就是1个CSS像素可以表示的物理像素是不同的，因此如果在css中仅仅通过px作为长度和宽度的单位，造成的结果就是无法通过一套样式，实现各端的自适应。</p>\n<h2 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h2><p>在前面我们说到，不同端的设备下，在css文件中，1px所表示的物理像素的大小是不同的，因此通过一套样式，是无法实现各端的自适应。由此我们联想：</p>\n<p>如果一套样式不行，那么能否给每一种设备各一套不同的样式来实现自适应的效果？</p>\n<p>答案是肯定的。</p>\n<p>使用@media媒体查询可以针对不同的媒体类型定义不同的样式，特别是响应式页面，可以针对不同屏幕的大小，编写多套样式，从而达到自适应的效果。举例来说：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media screen and (max-width: 960px)&#123;</span><br><span class=\"line\">    body&#123;</span><br><span class=\"line\">      background-color:#FF6699</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@media screen and (max-width: 768px)&#123;</span><br><span class=\"line\">    body&#123;</span><br><span class=\"line\">      background-color:#00FF66;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@media screen and (max-width: 550px)&#123;</span><br><span class=\"line\">    body&#123;</span><br><span class=\"line\">      background-color:#6633FF;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@media screen and (max-width: 320px)&#123;</span><br><span class=\"line\">    body&#123;</span><br><span class=\"line\">      background-color:#FFFF00;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上述的代码通过媒体查询定义了几套样式，通过max-width设置样式生效时的最大分辨率，上述的代码分别对分辨率在0～320px，320px～550px，550px～768px以及768px～960px的屏幕设置了不同的背景颜色。</p>\n<p>通过媒体查询，可以通过给不同分辨率的设备编写不同的样式来实现响应式的布局，比如我们为不同分辨率的屏幕，设置不同的背景图片。比如给小屏幕手机设置@2x图，为大屏幕手机设置@3X图，通过媒体查询就能很方便的实现。</p>\n<p>但是媒体查询的缺点也很明显，如果在浏览器大小改变时，需要改变的样式太多，那么多套样式代码会很繁琐。</p>\n<h2 id=\"百分比\"><a href=\"#百分比\" class=\"headerlink\" title=\"百分比\"></a>百分比</h2><p>除了用px结合媒体查询实现响应式布局外，我们也可以通过百分比单位 “ % “ 来实现响应式的效果。</p>\n<p>比如当浏览器的宽度或者高度发生变化时，通过百分比单位，通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。</p>\n<p>为了了解百分比布局，首先要了解的问题是：</p>\n<p>css中的子元素中的百分比（%）到底是谁的百分比？</p>\n<p>直观的理解，我们可能会认为子元素的百分比完全相对于直接父元素，height百分比相对于height，width百分比相对于width。当然这种理解是正确的，但是根据css的盒式模型，除了height、width属性外，还具有padding、border、margin等等属性。那么这些属性设置成百分比，是根据父元素的那些属性呢？此外还有border-radius和translate等属性中的百分比，又是相对于什么呢？下面来具体分析。</p>\n<ol>\n<li>百分比的具体分析<br>（1）子元素height和width的百分比</li>\n</ol>\n<p>子元素的height或width中使用百分比，是相对于子元素的直接父元素，width相对于父元素的width，height相对于父元素的height。比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">如果设置：</span><br><span class=\"line\">.father&#123;</span><br><span class=\"line\">width:200px;</span><br><span class=\"line\">height:100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child&#123;</span><br><span class=\"line\">width:50%;</span><br><span class=\"line\">height:50%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>展示的效果为：<br><img src=\"/2018/12/26/面试CSS/css02.png\" alt=\"\"><br>(2) top和bottom 、left和right</p>\n<p>子元素的top和bottom如果设置百分比，则相对于直接非static定位(默认定位)的父元素的高度，同样</p>\n<p>子元素的left和right如果设置百分比，则相对于直接非static定位(默认定位的)父元素的宽度。</p>\n<p>展示的效果为：<br><img src=\"/2018/12/26/面试CSS/css03.png\" alt=\"\"><br>（3）padding</p>\n<p>子元素的padding如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的width，而与父元素的height无关。</p>\n<p>举例来说：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent&#123;</span><br><span class=\"line\">  width:200px;</span><br><span class=\"line\">  height:100px;</span><br><span class=\"line\">  background:green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child&#123;</span><br><span class=\"line\">  width:0px;</span><br><span class=\"line\">  height:0px;</span><br><span class=\"line\">  background:blue;</span><br><span class=\"line\">  color:white;</span><br><span class=\"line\">  padding-top:50%;</span><br><span class=\"line\">  padding-left:50%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>展示的效果为：<br><img src=\"/2018/12/26/面试CSS/css04.png\" alt=\"\"><br>子元素的初始宽高为0，通过padding可以将父元素撑大，上图的蓝色部分是一个正方形，且边长为100px,说明padding不论宽高，如果设置成百分比都相对于父元素的width。</p>\n<p>（4）margin</p>\n<p>跟padding一样，margin也是如此，子元素的margin如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的width。这里就不具体举例。</p>\n<p>（5）border-radius</p>\n<p>border-radius不一样，如果设置border-radius为百分比，则是相对于自身的宽度，举例来说：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;trangle&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>设置border-radius为百分比：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.trangle&#123;</span><br><span class=\"line\">  width:100px;</span><br><span class=\"line\">  height:100px;</span><br><span class=\"line\">  border-radius:50%;</span><br><span class=\"line\">  background:blue;</span><br><span class=\"line\">  margin-top:10px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>展示效果为：</p>\n<p><img src=\"/2018/12/26/面试CSS/css06.gif\" alt=\"\"></p>\n<ol start=\"2\">\n<li>百分比单位布局应用<br>百分比单位在布局上应用还是很广泛的，这里介绍一种应用。<br>比如我们要实现一个固定长宽比的长方形，比如要实现一个长宽比为4:3的长方形,我们可以根据padding属性来实现，因为padding不管是垂直方向还是水平方向，百分比单位都相对于父元素的宽度，因此我们可以设置padding-top为百分比来实现，长宽自适应的长方形：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;trangle&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>设置样式让其自适应：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.trangle&#123;</span><br><span class=\"line\">  height:0;</span><br><span class=\"line\">  width:100%;</span><br><span class=\"line\">  padding-top:75%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过设置padding-top：75%,相对比宽度的75%，因此这样就设置了一个长宽高恒定比例的长方形，具体效果<br><img src=\"/2018/12/26/面试CSS/css05.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>百分比单位缺点<br>从上述对于百分比单位的介绍我们很容易看出如果全部使用百分比单位来实现响应式的布局，有明显的以下两个缺点：<br>（1）计算困难，如果我们要定义一个元素的宽度和高度，按照设计稿，必须换算成百分比单位。<br>（2）从小节1可以看出，各个属性中如果使用百分比，相对父元素的属性并不是唯一的。比如width和height相对于父元素的width和height，而margin、padding不管垂直还是水平方向都相对比父元素的宽度、border-radius则是相对于元素自身等等，造成我们使用百分比单位容易使布局问题变得复杂。</li>\n</ol>\n<h2 id=\"自适应场景下的rem解决方案\"><a href=\"#自适应场景下的rem解决方案\" class=\"headerlink\" title=\"自适应场景下的rem解决方案\"></a>自适应场景下的rem解决方案</h2><ol>\n<li>rem单位</li>\n</ol>\n<p>首先来看，什么是rem单位。rem是一个灵活的、可扩展的单位，由浏览器转化像素并显示。与em单位不同，rem单位无论嵌套层级如何，都只相对于浏览器的根元素（HTML元素）的font-size。默认情况下，html元素的font-size为16px，所以：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 rem = 12px</span><br></pre></td></tr></table></figure></p>\n<p>为了计算方便，通常可以将html的font-size设置成：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html&#123; font-size: 62.5% &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种情况下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 rem = 10px</span><br></pre></td></tr></table></figure></p>\n<p>2.通过rem来实现响应式布局</p>\n<p>rem单位都是相对于根元素html的font-size来决定大小的,根元素的font-size相当于提供了一个基准，当页面的size发生变化时，只需要改变font-size的值，那么以rem为固定单位的元素的大小也会发生响应的变化。<br>因此，如果通过rem来实现响应式的布局，只需要根据视图容器的大小，动态的改变font-size即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function refreshRem() &#123;</span><br><span class=\"line\">    var docEl = doc.documentElement;</span><br><span class=\"line\">    var width = docEl.getBoundingClientRect().width;</span><br><span class=\"line\">    var rem = width / 10;</span><br><span class=\"line\">    docEl.style.fontSize = rem + &apos;px&apos;;</span><br><span class=\"line\">    flexible.rem = win.rem = rem;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">win.addEventListener(&apos;resize&apos;, refreshRem);</span><br></pre></td></tr></table></figure></p>\n<p>上述代码中将视图容器分为10份，font-size用十分之一的宽度来表示，最后在header标签中执行这段代码，就可以动态定义font-size的大小，从而1rem在不同的视觉容器中表示不同的大小，用rem固定单位可以实现不同容器内布局的自适应。</p>\n<ol start=\"3\">\n<li>rem2px和px2rem</li>\n</ol>\n<p>如果在响应式布局中使用rem单位，那么存在一个单位换算的问题，rem2px表示从rem换算成px，这个就不说了，只要rem乘以相应的font-size中的大小，就能换算成px。更多的应用是px2rem，表示的是从px转化为rem。</p>\n<p>比如给定的视觉稿为750px（物理像素），如果我们要将所有的布局单位都用rem来表示，一种比较笨的办法就是对所有的height和width等元素，乘以相应的比例，现将视觉稿换算成rem单位，然后一个个的用rem来表示。另一种比较方便的解决方法就是，在css中我们还是用px来表示元素的大小，最后编写完css代码之后，将css文件中的所有px单位，转化成rem单位。</p>\n<p>px2rem的原理也很简单，重点在于预处理以px为单位的css文件，处理后将所有的px变成rem单位。可以通过两种方式来实现：</p>\n<p>1） webpack loader的形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install px2rem-loader</span><br></pre></td></tr></table></figure></p>\n<p>在webpack的配置文件中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [&#123;</span><br><span class=\"line\">      test: /\\.css$/,</span><br><span class=\"line\">      use: [&#123;</span><br><span class=\"line\">        loader: &apos;style-loader&apos;</span><br><span class=\"line\">      &#125;, &#123;</span><br><span class=\"line\">        loader: &apos;css-loader&apos;</span><br><span class=\"line\">      &#125;, &#123;</span><br><span class=\"line\">        loader: &apos;px2rem-loader&apos;,</span><br><span class=\"line\">        // options here</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          remUni: 75,</span><br><span class=\"line\">          remPrecision: 8</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;]</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2）webpack中使用postcss plugin<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install postcss-loader</span><br></pre></td></tr></table></figure></p>\n<p>在webpack的plugin中:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var px2rem = require(&apos;postcss-px2rem&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.css$/,</span><br><span class=\"line\">        loader: &quot;style-loader!css-loader!postcss-loader&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  postcss: function() &#123;</span><br><span class=\"line\">    return [px2rem(&#123;remUnit: 75&#125;)];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"4\">\n<li>rem 布局应用举例</li>\n</ol>\n<p>网易新闻的移动端页面使用了rem布局，具体例子如下：</p>\n<p><img src=\"/2018/12/26/面试CSS/css07.gif\" alt=\"\"></p>\n<ol start=\"5\">\n<li>rem 布局的缺点</li>\n</ol>\n<p>通过rem单位，可以实现响应式的布局，特别是引入相应的postcss相关插件，免去了设计稿中的px到rem的计算。rem单位在国外的一些网站也有使用，这里所说的rem来实现布局的缺点，或者说是小缺陷是：</p>\n<p>在响应式布局中，必须通过js来动态控制根元素font-size的大小。</p>\n<p>也就是说css样式和js代码有一定的耦合性。且必须将改变font-size的代码放在css样式之前。</p>\n<h2 id=\"通过vw-vh来实现自适应\"><a href=\"#通过vw-vh来实现自适应\" class=\"headerlink\" title=\"通过vw/vh来实现自适应\"></a>通过vw/vh来实现自适应</h2><ol>\n<li>什么是vw/vh ?</li>\n</ol>\n<p>css3中引入了一个新的单位vw/vh，与视图窗口有关，vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度，除了vw和vh外，还有vmin和vmax两个相关的单位。各个单位具体的含义如下：</p>\n<table>\n<thead>\n<tr>\n<th>单位</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>vw</td>\n<td>相对于视窗的宽度，视窗宽度是100vw</td>\n</tr>\n<tr>\n<td>vh</td>\n<td>相对于视窗的高度，视窗高度是100vh</td>\n</tr>\n<tr>\n<td>vmin</td>\n<td>vw和vh中的较小值</td>\n</tr>\n<tr>\n<td>vmax</td>\n<td>vw和vh中的较大值</td>\n</tr>\n</tbody>\n</table>\n<p>这里我们发现视窗宽高都是100vw／100vh，那么vw或者vh，下简称vw，很类似百分比单位。vw和%的区别为：</p>\n<table>\n<thead>\n<tr>\n<th>单位</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%</td>\n<td>大部分相对于祖先元素，也有相对于自身的情况比如（border-radius、translate等)</td>\n</tr>\n<tr>\n<td>vw/vh</td>\n<td>相对于视窗的尺寸</td>\n</tr>\n</tbody>\n</table>\n<p>从对比中我们可以发现，vw单位与百分比类似，单确有区别，前面我们介绍了百分比单位的换算困难，这里的vw更像”理想的百分比单位”。任意层级元素，在使用vw单位的情况下，1vw都等于视图宽度的百分之一。</p>\n<ol start=\"2\">\n<li>vw单位换算</li>\n</ol>\n<p>同样的，如果要将px换算成vw单位，很简单，只要确定视图的窗口大小（布局视口），如果我们将布局视口设置成分辨率大小，比如对于iphone6/7 375*667的分辨率，那么px可以通过如下方式换算成vw：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1px = （1/375）*100 vw</span><br></pre></td></tr></table></figure></p>\n<p>此外，也可以通过postcss的相应插件，预处理css做一个自动的转换，postcss-px-to-viewport可以自动将px转化成vw。<br>postcss-px-to-viewport的默认参数为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var defaults = &#123;</span><br><span class=\"line\">  viewportWidth: 320,</span><br><span class=\"line\">  viewportHeight: 568, </span><br><span class=\"line\">  unitPrecision: 5,</span><br><span class=\"line\">  viewportUnit: &apos;vw&apos;,</span><br><span class=\"line\">  selectorBlackList: [],</span><br><span class=\"line\">  minPixelValue: 1,</span><br><span class=\"line\">  mediaQuery: false</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>通过指定视窗的宽度和高度，以及换算精度，就能将px转化成vw。</p>\n<ol start=\"3\">\n<li>vw/vh单位的兼容性<br>可以在<a href=\"https://caniuse.com/\" target=\"_blank\" rel=\"noopener\">https://caniuse.com/</a> 查看各个版本的浏览器对vw单位的支持性。<br>从上图我们发现，绝大多数的浏览器支持vw单位，但是ie9-11不支持vmin和vmax，考虑到vmin和vmax单位不常用，vw单位在绝大部分高版本浏览器内的支持性很好，但是opera浏览器整体不支持vw单位，如果需要兼容opera浏览器的布局，不推荐使用vw。</li>\n</ol>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本文介绍在布局中常用的单位，比如px、%、rem和vw等等，以及不同的单位在响应式布局中的优缺点。</p>\n<h1 id=\"画一条0-5px的线\"><a href=\"#画一条0-5px的线\" class=\"headerlink\" title=\"画一条0.5px的线\"></a>画一条0.5px的线</h1><ul>\n<li><p>采用meta viewport的方式</p>\n</li>\n<li><p>采用 border-image的方式</p>\n</li>\n<li><p>采用transform: scale()的方式</p>\n</li>\n</ul>\n<h1 id=\"link标签和import标签的区别\"><a href=\"#link标签和import标签的区别\" class=\"headerlink\" title=\"link标签和import标签的区别\"></a>link标签和import标签的区别</h1><ul>\n<li>link属于html标签，而@import是css提供的</li>\n<li>页面被加载时，link会同时被加载，而@import引用的css会等到页面加载结束后加载。</li>\n<li>link是html标签，因此没有兼容性，而@import只有IE5以上才能识别。</li>\n<li>link方式样式的权重高于@import的。</li>\n</ul>\n<h1 id=\"transition和animation的区别\"><a href=\"#transition和animation的区别\" class=\"headerlink\" title=\"transition和animation的区别\"></a>transition和animation的区别</h1><p>Animation和transition大部分属性是相同的，他们都是随时间改变元素的属性值，他们的主要区别是transition需要触发一个事件才能改变属性，而animation不需要触发任何事件的情况下才会随时间改变属性值，并且transition为2帧，从from …. to，而animation可以一帧一帧的。</p>\n<h1 id=\"Flex布局\"><a href=\"#Flex布局\" class=\"headerlink\" title=\"Flex布局\"></a>Flex布局</h1><p>文章链接：<br><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool（语法篇）\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool（语法篇）</a><br><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html（实例篇）\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/07/flex-examples.html（实例篇）</a></p>\n<p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p>\n<p>简单的分为容器属性和元素属性<br>容器的属性：</p>\n<p>flex-direction：决定主轴的方向（即子item的排列方法）<br>.box {<br>flex-direction: row | row-reverse | column | column-reverse;<br>}<br>flex-wrap：决定换行规则<br>.box{<br>flex-wrap: nowrap | wrap | wrap-reverse;<br>}<br>flex-flow：<br>.box {<br>flex-flow: || ;<br>}<br>justify-content：对其方式，水平主轴对齐方式<br>align-items：对齐方式，竖直轴线方向<br>项目的属性（元素的属性）：</p>\n<p>order属性：定义项目的排列顺序，顺序越小，排列越靠前，默认为0<br>flex-grow属性：定义项目的放大比例，即使存在空间，也不会放大<br>flex-shrink属性：定义了项目的缩小比例，当空间不足的情况下会等比例的缩小，如果定义个item的flow-shrink为0，则为不缩小<br>flex-basis属性：定义了在分配多余的空间，项目占据的空间。<br>flex：是flex-grow和flex-shrink、flex-basis的简写，默认值为0 1 auto。<br>align-self：允许单个项目与其他项目不一样的对齐方式，可以覆盖align-items，默认属性为auto，表示继承父元素的align-items<br>比如说，用flex实现圣杯布局</p>\n<h1 id=\"BFC（块级格式化上下文，用于清除浮动，防止margin重叠等）\"><a href=\"#BFC（块级格式化上下文，用于清除浮动，防止margin重叠等）\" class=\"headerlink\" title=\"BFC（块级格式化上下文，用于清除浮动，防止margin重叠等）\"></a>BFC（块级格式化上下文，用于清除浮动，防止margin重叠等）</h1><p>直译成：块级格式化上下文，是一个独立的渲染区域，并且有一定的布局规则。</p>\n<p>BFC区域不会与float box重叠<br>BFC是页面上的一个独立容器，子元素不会影响到外面<br>计算BFC的高度时，浮动元素也会参与计算<br>哪些元素会生成BFC：</p>\n<p>根元素</p>\n<ul>\n<li>float不为none的元素</li>\n<li>position为fixed和absolute的元素</li>\n<li>display为inline-block、table-cell、table-caption，flex，inline-flex的元素</li>\n<li>overflow不为visible的元素</li>\n</ul>\n<blockquote>\n<p>BFC定义</p>\n</blockquote>\n<p>1、 box<br>box是css布局的基本单位，元素的类型和display属性决定了box的类型。不同的类型的盒子会参与不同的formatting context。<br>block-level box :display属性为block、list-item(作为列表显示的元素)、table的元素会生成block-level box。<br>2、formatting context<br>它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用</p>\n<p>BFC（block formatting context）为块级格式化上下文，他是一个独立渲染区域，并且只有block-level box参与，规定了block-level box内部的布局方式。</p>\n<blockquote>\n<p>布局规则</p>\n</blockquote>\n<ul>\n<li><p>1、内部的box会在垂直方向上一个接一个的放置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=<span class=\"string\">\"div1\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=<span class=\"string\">\"div2\"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2、同一个bfc内，两个相邻box元素的margin会产生重叠，重叠距离为数值大的margin值<br>给div1设置margin: 20px 0,给div2设置margin: 30px 0,此时div1和div2之间的间距为30px。</p>\n</li>\n</ul>\n<p>解决方式  让两个元素不属于同一个BFC<br>3、BFC区域不会与浮动元素重叠<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=<span class=\"string\">\"left\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=<span class=\"string\">\"main\"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>此时main元素没有产生bfc,left元素浮动，效果如下：<br>给main元素设置overflow:hidden变为bfc,效果如下：</p>\n<ul>\n<li>4、计算BFC的高度时，浮动元素也参与计算</li>\n<li>5、每个元素的margin box的左边， 与 包含块 border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此</li>\n<li>6、BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素<blockquote>\n<p>3、产生BFC的方式</p>\n</blockquote>\n</li>\n<li>1、overflow属性不是visible</li>\n<li>2、float属性不为none</li>\n<li>3、display属性为inline-block、table-cell、flex、inline-flex、table-caption</li>\n<li>4、position为absolute、fixed</li>\n<li>5、body根元素</li>\n</ul>\n<h1 id=\"关于js动画和css3动画的差异性\"><a href=\"#关于js动画和css3动画的差异性\" class=\"headerlink\" title=\"关于js动画和css3动画的差异性\"></a>关于js动画和css3动画的差异性</h1><p>渲染线程分为main thread和compositor thread，如果css动画只改变transform和opacity，这时整个CSS动画得以在compositor trhead完成（而js动画则会在main thread执行，然后出发compositor thread进行下一步操作），特别注意的是如果改变transform和opacity是不会layout或者paint的。<br>区别：</p>\n<ul>\n<li>功能涵盖面，js比css大</li>\n<li>实现/重构难度不一，CSS3比js更加简单，性能跳优方向固定</li>\n<li>对帧速表现不好的低版本浏览器，css3可以做到自然降级</li>\n<li>css动画有天然事件支持</li>\n<li>css3有兼容性问题</li>\n</ul>\n<h1 id=\"块元素和行元素\"><a href=\"#块元素和行元素\" class=\"headerlink\" title=\"块元素和行元素\"></a>块元素和行元素</h1><p>HTML可以将元素分类方式分为行内元素、块状元素和行内块状元素三种。首先需要说明的是，这三者是可以互相转换的，使用display属性能够将三者任意转换：</p>\n<p>　　(1)display:inline;转换为行内元素</p>\n<p>　　(2)display:block;转换为块状元素</p>\n<p>　　(3)display:inline-block;转换为行内块状元素<br>块元素：独占一行，并且有自动填满父元素，可以设置margin和pading以及高度和宽度<br>行元素：不会独占一行，width和height会失效，并且在垂直方向的padding和margin会失<br>效。<br>1.块状元素<br>　　块状元素代表性的就是div，其他如p、nav、aside、header、footer、section、article、ul-li、address等等，都可以用div来实现。不过为了可以方便程序员解读代码，一般都会使用特定的语义化标签，使得代码可读性强，且便于查错。</p>\n<p>　　块状元素特征：(1)能够识别宽高</p>\n<p>　　　　　　　　　(2)margin和padding的上下左右均对其有效</p>\n<p>　　　　　　　　　(3)可以自动换行</p>\n<p>　　　　　　　　　(4)多个块状元素标签写在一起，默认排列方式为从上至下<br>2.块状元素<br>　　块状元素代表性的就是div，其他如p、nav、aside、header、footer、section、article、ul-li、address等等，都可以用div来实现。不过为了可以方便程序员解读代码，一般都会使用特定的语义化标签，使得代码可读性强，且便于查错。</p>\n<p>　　块状元素特征：(1)能够识别宽高</p>\n<p>　　　　　　　　　(2)margin和padding的上下左右均对其有效</p>\n<p>　　　　　　　　　(3)可以自动换行</p>\n<p>　　　　　　　　　(4)多个块状元素标签写在一起，默认排列方式为从上至下<br>3.行内块状元素<br>　　行内块状元素综合了行内元素和块状元素的特性，但是各有取舍。因此行内块状元素在日常的使用中，由于其特性，使用的次数也比较多。</p>\n<p>　　行内块状元素特征：(1)不自动换行</p>\n<p>　　　　　　　　　　　(2)能够识别宽高</p>\n<p>　　　　　　　　　　　(3)默认排列方式为从左到右</p>\n<h1 id=\"多行元素的文本省略号\"><a href=\"#多行元素的文本省略号\" class=\"headerlink\" title=\"多行元素的文本省略号\"></a>多行元素的文本省略号</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: -webkit-box</span><br><span class=\"line\">-webkit-box-orient:vertical</span><br><span class=\"line\">-webkit-line-clamp:3</span><br><span class=\"line\">overflow:hidden</span><br></pre></td></tr></table></figure>\n<h1 id=\"visibility-hidden-opacity-0，display-none\"><a href=\"#visibility-hidden-opacity-0，display-none\" class=\"headerlink\" title=\"visibility=hidden, opacity=0，display:none\"></a>visibility=hidden, opacity=0，display:none</h1><p>opacity=0，该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定一些事件，如click事件，那么点击该区域，也能触发点击事件的visibility=hidden，该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已经绑定的事件display=none，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素删除掉一样。</p>\n<h1 id=\"双边距重叠问题（外边距折叠）\"><a href=\"#双边距重叠问题（外边距折叠）\" class=\"headerlink\" title=\"双边距重叠问题（外边距折叠）\"></a>双边距重叠问题（外边距折叠）</h1><p>多个相邻（兄弟或者父子关系）普通流的块元素垂直方向marigin会重叠</p>\n<p>折叠的结果为：</p>\n<p>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。<br>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。<br>两个外边距一正一负时，折叠结果是两者的相加的和。</p>\n<h1 id=\"position\"><a href=\"#position\" class=\"headerlink\" title=\"position\"></a>position</h1><ul>\n<li>static  默认。位置设置为 static 的元素，它始终会处于页面流给予的位置（static 元素会忽略任何 top、bottom、left 或 right 声明）。</li>\n<li>relative  位置被设置为 relative 的元素，可将其移至相对于其正常位置的地方，因此 “left:20” 会将元素移至元素正常位置左边 20 个像素的位置。</li>\n<li>absolute  位置设置为 absolute 的元素，可定位于相对于包含它的元素的指定坐标。此元素的位置可通过 “left”、”top”、”right” 以及 “bottom” 属性来规定。</li>\n<li>fixed 位置被设置为 fixed 的元素，可定位于相对于浏览器窗口的指定坐标。此元素的位置可通过 “left”、”top”、”right” 以及”bottom” 属性来规定。不论窗口滚动与否，元素都会留在那个位置。工作于 IE7（strict 模式）。</li>\n<li>sticky 基于用户的滚动位置来定位。粘性定位的元素是依赖于用户的滚动，在position:relative 与 position:fixed定位之间切换。它的行为就像position:relative;而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。</li>\n</ul>\n<h1 id=\"animation\"><a href=\"#animation\" class=\"headerlink\" title=\"animation\"></a>animation</h1><p>语法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@keyframes animationname &#123;keyframes-selector &#123;css-styles;&#125;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面的表格列出了 @keyframes 规则和所有动画属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n<th>CSS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@keyframes</td>\n<td>规定动画。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation</td>\n<td>所有动画属性的简写属性，除了 animation-play-state 属性。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-name</td>\n<td>规定 @keyframes 动画的名称。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-duration</td>\n<td>规定动画完成一个周期所花费的秒或毫秒。默认是 0。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-timing-function</td>\n<td>规定动画的速度曲线。默认是 “ease”。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-delay</td>\n<td>规定动画何时开始。默认是 0。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-iteration-count</td>\n<td>规定动画被播放的次数。默认是 1。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-direction</td>\n<td>规定动画是否在下一周期逆向地播放。默认是 “normal”。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-play-state</td>\n<td>规定动画是否正在运行或暂停。默认是 “running”。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-fill-mode</td>\n<td>规定对象动画时间之外的状态。</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"伪元素伪类\"><a href=\"#伪元素伪类\" class=\"headerlink\" title=\"伪元素伪类\"></a>伪元素伪类</h1><blockquote>\n<p>css3为了区分伪类和伪元素，伪元素采用双冒号写法。</p>\n</blockquote>\n<p>伪类 – :hover, :link, :active, :visited, :first-child, :last-child, nth-child(n), :not(), :focus<br>伪元素 – ::before, ::after, ::first-letter, ::first-line, ::selection</p>\n<blockquote>\n<p>定义:</p>\n</blockquote>\n<p>伪类：用于向某些选择器添加特殊的效果<br>伪元素：用于将特殊的效果添加到某些选择器</p>\n<blockquote>\n<p>区别</p>\n</blockquote>\n<p>例子来理解<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">    &lt;em&gt;This&lt;/em&gt;</span><br><span class=\"line\">    &lt;em&gt;is a text&lt;/em&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/12/26/面试CSS/weilei01.png\" alt=\"\"><br>如果我们想要第一个em标签字体颜色变红怎么做呢<br>使用我们熟悉的伪类很简单<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">em:first-child &#123;</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/12/26/面试CSS/weilei02.png\" alt=\"\"><br>但是如果不存在伪类我们怎么做呢<br>这是我们就需要为第一个em标签添加类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">    &lt;em class=&quot;first-child&quot;&gt;This&lt;/em&gt;</span><br><span class=\"line\">    &lt;em&gt;is a text&lt;/em&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">em.first-child &#123;</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以实现同样的效果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">    &lt;em&gt;This&lt;/em&gt;</span><br><span class=\"line\">    &lt;em&gt;is a text&lt;/em&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>\n<p>还是这个例子<br>现在我想让这个段落的第一个字母变红 </p>\n<p>这回我们需要使用伪元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p::first-letter &#123;</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/12/26/面试CSS/weilei03.png\" alt=\"\"><br>同样假设伪元素不存在的情况<br>这时我们只能嵌套span标签来实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">    &lt;em&gt;&lt;span&gt;T&lt;/span&gt;his&lt;/em&gt;</span><br><span class=\"line\">    &lt;em&gt;is a text&lt;/em&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">p span &#123;</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看到这里，相信大家已经清楚了为什么一个叫做伪类，一个叫做伪元素<br>伪类的效果可以通过添加实际的类来实现<br>伪元素的效果可以通过添加实际的元素来实现 </p>\n<p><font color=\"red\">它们的本质区别就是是否抽象创造了新元素</font><br>伪元素是可以设置content属性的，类似于标签，但是伪类只能设置样式不能设置内容。<br><strong>注意</strong><br>伪类就像真正的类一样，可以叠加使用<br>没有数量上限，只要不是互斥的<br>比如这样<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">em:first-child:hover &#123;</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但注意，这里是“与”的关系<br>也就是说既要满足“first-child”第一个子元素<br>又要满足“hover”光标悬浮<br>伪元素就要严格的多<br>伪元素在一个选择器中只能出现一次，并且只能出现在末尾<br>（这里有同学误会了，所以我作出了修改）<br>像下面的样式是无法生效的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p::first-letter:hover &#123;  /*错误的写法：伪元素不是末尾*/</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p::first-letter::selection &#123;  /*错误的写法：伪元素出现了多个*/</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>关于它们的优先级<br>在计算权重的时候<br>伪类与类优先级相同<br>伪元素与标签优先级相同</p>\n<p><strong>总结</strong></p>\n<ul>\n<li>伪类与伪元素都是用于向选择器加特殊效果</li>\n<li>伪类与伪元素的本质区别就是是否抽象创造了新元素</li>\n<li>伪类只要不是互斥可以叠加使用</li>\n<li>伪元素在一个选择器中只能出现一次，并且只能出现在末尾</li>\n<li>伪类与伪元素优先级分别与类、标签优先级相同</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"响应式布局的常用解决方案对比-媒体查询、百分比、rem和vw-vh）\"><a href=\"#响应式布局的常用解决方案对比-媒体查询、百分比、rem和vw-vh）\" class=\"headerlink\" title=\"响应式布局的常用解决方案对比(媒体查询、百分比、rem和vw/vh）\"></a>响应式布局的常用解决方案对比(媒体查询、百分比、rem和vw/vh）</h1><p>简要介绍：前端开发中，静态网页通常需要适应不同分辨率的设备，常用的自适应解决方案包括媒体查询、百分比、rem和vw/vh等。本文从px单位出发，分析了px在移动端布局中的不足，接着介绍了几种不同的自适应解决方案。</p>\n<ul>\n<li>px和视口</li>\n<li>媒体查询</li>\n<li>百分比</li>\n<li>自适应场景下的rem解决方案</li>\n<li>通过vw/vh来实现自适应</li>\n</ul>\n<h2 id=\"px和视口\"><a href=\"#px和视口\" class=\"headerlink\" title=\"px和视口\"></a>px和视口</h2><p>在静态网页中，我们经常用像素（px）作为单位，来描述一个元素的宽高以及定位信息。在pc端，通常认为css中,1px所表示的真实长度是固定的。<br>那么，px真的是一个设备无关，跟长度单位米和分米一样是固定大小的吗？</p>\n<p>答案是否定的，下面图1.1和图1.2分别表示pc端下和移动端下的显示结果，在网页中我们设置的font-size统一为16px。<br><img src=\"/2018/12/26/面试CSS/css01.png\" alt=\"\"><br>从上面两幅图的对比可以看出，字体都是16px，显然在pc端中文字正常显示，而在移动端文字很小，几乎看不到，说明在css中1px并不是固定大小，直观从我们发现在移动端1px所表示的长度较小，所以导致文字显示不清楚。</p>\n<p>那么css中的1px的真实长度到底由什么决定呢？</p>\n<p>为了理清楚这个概念我们首先介绍像素和视口的概念</p>\n<h3 id=\"像素\"><a href=\"#像素\" class=\"headerlink\" title=\"像素\"></a>像素</h3><p>像素是网页布局的基础，一个像素表示了计算机屏幕所能显示的最小区域，像素分为两种类型：css像素和物理像素。</p>\n<p>我们在js或者css代码中使用的px单位就是指的是css像素，物理像素也称设备像素，只与设备或者说硬件有关，同样尺寸的屏幕，设备的密度越高，物理像素也就越多。下表表示css像素和物理像素的具体区别：</p>\n<blockquote>\n<p>css像素:  为web开发者提供，在css中使用的一个抽象单位<br>物理像素 : 只与设备的硬件密度有关，任何设备的物理像素都是固定的<br>那么css像素与物理像素的转换关系是怎么样的呢？为了明确css像素和物理像素的转换关系，必须先了解视口是什么。</p>\n</blockquote>\n<h3 id=\"视口\"><a href=\"#视口\" class=\"headerlink\" title=\"视口\"></a>视口</h3><p>广义的视口，是指浏览器显示内容的屏幕区域，狭义的视口包括了布局视口、视觉视口和理想视口</p>\n<p>(1) 布局视口（layout viewport）<br>布局视口定义了pc网页在移动端的默认布局行为，因为通常pc的分辨率较大，布局视口默认为980px。也就是说在不设置网页的viewport的情况下，pc端的网页默认会以布局视口为基准，在移动端进行展示。因此我们可以明显看出来，默认为布局视口时，根植于pc端的网页在移动端展示很模糊。</p>\n<p>(2) 视觉视口（visual viewport）<br>视觉视口表示浏览器内看到的网站的显示区域，用户可以通过缩放来查看网页的显示内容，从而改变视觉视口。视觉视口的定义，就像拿着一个放大镜分别从不同距离观察同一个物体，视觉视口仅仅类似于放大镜中显示的内容，因此视觉视口不会影响布局视口的宽度和高度。</p>\n<p>(3) 理想视口（ideal viewport）<br>理想视口或者应该全称为“理想的布局视口”，在移动设备中就是指设备的分辨率。换句话说，理想视口或者说分辨率就是给定设备物理像素的情况下，最佳的“布局视口”。</p>\n<p>上述视口中，最重要的是要明确理想视口的概念，在移动端中，理想视口或者说分辨率跟物理像素之间有什么关系呢？</p>\n<p>为了理清分辨率和物理像素之间的联系，我们介绍一个用DPR（Device pixel ratio）设备像素比来表示，则可以写成：</p>\n<p>1 DPR = 物理像素／分辨率<br>在不缩放的情况下，一个css像素就对应一个dpr，也就是说，在不缩放</p>\n<p>1 CSS像素 = 物理像素／分辨率<br>此外，在移动端的布局中，我们可以通过viewport元标签来控制布局，比如一般情况下，我们可以通过下述标签使得移动端在理想视口下布局：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta id=&quot;viewport&quot; name=&quot;viewport&quot; content=&quot;width=device-width; initial-scale=1.0; maximum-scale=1; user-scalable=no;&quot;&gt;</span><br></pre></td></tr></table></figure></p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>取值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>正整数</td>\n<td>定义布局视口的宽度，单位为像素</td>\n</tr>\n<tr>\n<td>height</td>\n<td>正整数</td>\n<td>定义布局视口的高度，单位为像素，很少使用</td>\n</tr>\n<tr>\n<td>initial-scale</td>\n<td>[0,10]</td>\n<td>初始缩放比例，1表示不缩放</td>\n</tr>\n<tr>\n<td>minimum-scale</td>\n<td>[0,10]</td>\n<td>最小缩放比例</td>\n</tr>\n<tr>\n<td>maximum-scale</td>\n<td>[0,10]</td>\n<td>最大缩放比例</td>\n</tr>\n<tr>\n<td>user-scalable</td>\n<td>yes／no</td>\n<td>是否允许手动缩放页面，默认值为yes</td>\n</tr>\n</tbody>\n</table>\n<p>其中我们来看width属性，在移动端布局时，在meta标签中我们会将width设置称为device-width，device-width一般是表示分辨率的宽，通过width=device-width的设置我们就将布局视口设置成了理想的视口。</p>\n<h3 id=\"px与自适应\"><a href=\"#px与自适应\" class=\"headerlink\" title=\"px与自适应\"></a>px与自适应</h3><p>上述我们了解到了当通过viewport元标签，设置布局视口为理想视口时，1个css像素可以表示成：</p>\n<p>1 CSS像素 = 物理像素／分辨率<br>我们直到，在pc端的布局视口通常情况下为980px，移动端以iphone6为例，分辨率为375 <em> 667，也就是说布局视口在理想的情况下为375px。比如现在我们有一个750px </em> 1134px的视觉稿，那么在pc端，一个css像素可以如下计算：</p>\n<p>PC端： 1 CSS像素 = 物理像素／分辨率 = 750 ／ 980 =0.76 px<br>而在iphone6下：</p>\n<p>iphone6：1 CSS像素 = 物理像素 ／分辨率 = 750 ／ 375 = 2 px<br>也就是说在PC端，一个CSS像素可以用0.76个物理像素来表示，而iphone6中 一个CSS像素表示了2个物理像素。此外不同的移动设备分辨率不同，也就是1个CSS像素可以表示的物理像素是不同的，因此如果在css中仅仅通过px作为长度和宽度的单位，造成的结果就是无法通过一套样式，实现各端的自适应。</p>\n<h2 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h2><p>在前面我们说到，不同端的设备下，在css文件中，1px所表示的物理像素的大小是不同的，因此通过一套样式，是无法实现各端的自适应。由此我们联想：</p>\n<p>如果一套样式不行，那么能否给每一种设备各一套不同的样式来实现自适应的效果？</p>\n<p>答案是肯定的。</p>\n<p>使用@media媒体查询可以针对不同的媒体类型定义不同的样式，特别是响应式页面，可以针对不同屏幕的大小，编写多套样式，从而达到自适应的效果。举例来说：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media screen and (max-width: 960px)&#123;</span><br><span class=\"line\">    body&#123;</span><br><span class=\"line\">      background-color:#FF6699</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@media screen and (max-width: 768px)&#123;</span><br><span class=\"line\">    body&#123;</span><br><span class=\"line\">      background-color:#00FF66;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@media screen and (max-width: 550px)&#123;</span><br><span class=\"line\">    body&#123;</span><br><span class=\"line\">      background-color:#6633FF;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@media screen and (max-width: 320px)&#123;</span><br><span class=\"line\">    body&#123;</span><br><span class=\"line\">      background-color:#FFFF00;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上述的代码通过媒体查询定义了几套样式，通过max-width设置样式生效时的最大分辨率，上述的代码分别对分辨率在0～320px，320px～550px，550px～768px以及768px～960px的屏幕设置了不同的背景颜色。</p>\n<p>通过媒体查询，可以通过给不同分辨率的设备编写不同的样式来实现响应式的布局，比如我们为不同分辨率的屏幕，设置不同的背景图片。比如给小屏幕手机设置@2x图，为大屏幕手机设置@3X图，通过媒体查询就能很方便的实现。</p>\n<p>但是媒体查询的缺点也很明显，如果在浏览器大小改变时，需要改变的样式太多，那么多套样式代码会很繁琐。</p>\n<h2 id=\"百分比\"><a href=\"#百分比\" class=\"headerlink\" title=\"百分比\"></a>百分比</h2><p>除了用px结合媒体查询实现响应式布局外，我们也可以通过百分比单位 “ % “ 来实现响应式的效果。</p>\n<p>比如当浏览器的宽度或者高度发生变化时，通过百分比单位，通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。</p>\n<p>为了了解百分比布局，首先要了解的问题是：</p>\n<p>css中的子元素中的百分比（%）到底是谁的百分比？</p>\n<p>直观的理解，我们可能会认为子元素的百分比完全相对于直接父元素，height百分比相对于height，width百分比相对于width。当然这种理解是正确的，但是根据css的盒式模型，除了height、width属性外，还具有padding、border、margin等等属性。那么这些属性设置成百分比，是根据父元素的那些属性呢？此外还有border-radius和translate等属性中的百分比，又是相对于什么呢？下面来具体分析。</p>\n<ol>\n<li>百分比的具体分析<br>（1）子元素height和width的百分比</li>\n</ol>\n<p>子元素的height或width中使用百分比，是相对于子元素的直接父元素，width相对于父元素的width，height相对于父元素的height。比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">如果设置：</span><br><span class=\"line\">.father&#123;</span><br><span class=\"line\">width:200px;</span><br><span class=\"line\">height:100px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child&#123;</span><br><span class=\"line\">width:50%;</span><br><span class=\"line\">height:50%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>展示的效果为：<br><img src=\"/2018/12/26/面试CSS/css02.png\" alt=\"\"><br>(2) top和bottom 、left和right</p>\n<p>子元素的top和bottom如果设置百分比，则相对于直接非static定位(默认定位)的父元素的高度，同样</p>\n<p>子元素的left和right如果设置百分比，则相对于直接非static定位(默认定位的)父元素的宽度。</p>\n<p>展示的效果为：<br><img src=\"/2018/12/26/面试CSS/css03.png\" alt=\"\"><br>（3）padding</p>\n<p>子元素的padding如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的width，而与父元素的height无关。</p>\n<p>举例来说：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent&#123;</span><br><span class=\"line\">  width:200px;</span><br><span class=\"line\">  height:100px;</span><br><span class=\"line\">  background:green;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child&#123;</span><br><span class=\"line\">  width:0px;</span><br><span class=\"line\">  height:0px;</span><br><span class=\"line\">  background:blue;</span><br><span class=\"line\">  color:white;</span><br><span class=\"line\">  padding-top:50%;</span><br><span class=\"line\">  padding-left:50%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>展示的效果为：<br><img src=\"/2018/12/26/面试CSS/css04.png\" alt=\"\"><br>子元素的初始宽高为0，通过padding可以将父元素撑大，上图的蓝色部分是一个正方形，且边长为100px,说明padding不论宽高，如果设置成百分比都相对于父元素的width。</p>\n<p>（4）margin</p>\n<p>跟padding一样，margin也是如此，子元素的margin如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的width。这里就不具体举例。</p>\n<p>（5）border-radius</p>\n<p>border-radius不一样，如果设置border-radius为百分比，则是相对于自身的宽度，举例来说：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;trangle&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>设置border-radius为百分比：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.trangle&#123;</span><br><span class=\"line\">  width:100px;</span><br><span class=\"line\">  height:100px;</span><br><span class=\"line\">  border-radius:50%;</span><br><span class=\"line\">  background:blue;</span><br><span class=\"line\">  margin-top:10px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>展示效果为：</p>\n<p><img src=\"/2018/12/26/面试CSS/css06.gif\" alt=\"\"></p>\n<ol start=\"2\">\n<li>百分比单位布局应用<br>百分比单位在布局上应用还是很广泛的，这里介绍一种应用。<br>比如我们要实现一个固定长宽比的长方形，比如要实现一个长宽比为4:3的长方形,我们可以根据padding属性来实现，因为padding不管是垂直方向还是水平方向，百分比单位都相对于父元素的宽度，因此我们可以设置padding-top为百分比来实现，长宽自适应的长方形：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;trangle&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>设置样式让其自适应：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.trangle&#123;</span><br><span class=\"line\">  height:0;</span><br><span class=\"line\">  width:100%;</span><br><span class=\"line\">  padding-top:75%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过设置padding-top：75%,相对比宽度的75%，因此这样就设置了一个长宽高恒定比例的长方形，具体效果<br><img src=\"/2018/12/26/面试CSS/css05.png\" alt=\"\"></p>\n<ol start=\"3\">\n<li>百分比单位缺点<br>从上述对于百分比单位的介绍我们很容易看出如果全部使用百分比单位来实现响应式的布局，有明显的以下两个缺点：<br>（1）计算困难，如果我们要定义一个元素的宽度和高度，按照设计稿，必须换算成百分比单位。<br>（2）从小节1可以看出，各个属性中如果使用百分比，相对父元素的属性并不是唯一的。比如width和height相对于父元素的width和height，而margin、padding不管垂直还是水平方向都相对比父元素的宽度、border-radius则是相对于元素自身等等，造成我们使用百分比单位容易使布局问题变得复杂。</li>\n</ol>\n<h2 id=\"自适应场景下的rem解决方案\"><a href=\"#自适应场景下的rem解决方案\" class=\"headerlink\" title=\"自适应场景下的rem解决方案\"></a>自适应场景下的rem解决方案</h2><ol>\n<li>rem单位</li>\n</ol>\n<p>首先来看，什么是rem单位。rem是一个灵活的、可扩展的单位，由浏览器转化像素并显示。与em单位不同，rem单位无论嵌套层级如何，都只相对于浏览器的根元素（HTML元素）的font-size。默认情况下，html元素的font-size为16px，所以：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 rem = 12px</span><br></pre></td></tr></table></figure></p>\n<p>为了计算方便，通常可以将html的font-size设置成：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html&#123; font-size: 62.5% &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种情况下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 rem = 10px</span><br></pre></td></tr></table></figure></p>\n<p>2.通过rem来实现响应式布局</p>\n<p>rem单位都是相对于根元素html的font-size来决定大小的,根元素的font-size相当于提供了一个基准，当页面的size发生变化时，只需要改变font-size的值，那么以rem为固定单位的元素的大小也会发生响应的变化。<br>因此，如果通过rem来实现响应式的布局，只需要根据视图容器的大小，动态的改变font-size即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function refreshRem() &#123;</span><br><span class=\"line\">    var docEl = doc.documentElement;</span><br><span class=\"line\">    var width = docEl.getBoundingClientRect().width;</span><br><span class=\"line\">    var rem = width / 10;</span><br><span class=\"line\">    docEl.style.fontSize = rem + &apos;px&apos;;</span><br><span class=\"line\">    flexible.rem = win.rem = rem;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">win.addEventListener(&apos;resize&apos;, refreshRem);</span><br></pre></td></tr></table></figure></p>\n<p>上述代码中将视图容器分为10份，font-size用十分之一的宽度来表示，最后在header标签中执行这段代码，就可以动态定义font-size的大小，从而1rem在不同的视觉容器中表示不同的大小，用rem固定单位可以实现不同容器内布局的自适应。</p>\n<ol start=\"3\">\n<li>rem2px和px2rem</li>\n</ol>\n<p>如果在响应式布局中使用rem单位，那么存在一个单位换算的问题，rem2px表示从rem换算成px，这个就不说了，只要rem乘以相应的font-size中的大小，就能换算成px。更多的应用是px2rem，表示的是从px转化为rem。</p>\n<p>比如给定的视觉稿为750px（物理像素），如果我们要将所有的布局单位都用rem来表示，一种比较笨的办法就是对所有的height和width等元素，乘以相应的比例，现将视觉稿换算成rem单位，然后一个个的用rem来表示。另一种比较方便的解决方法就是，在css中我们还是用px来表示元素的大小，最后编写完css代码之后，将css文件中的所有px单位，转化成rem单位。</p>\n<p>px2rem的原理也很简单，重点在于预处理以px为单位的css文件，处理后将所有的px变成rem单位。可以通过两种方式来实现：</p>\n<p>1） webpack loader的形式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install px2rem-loader</span><br></pre></td></tr></table></figure></p>\n<p>在webpack的配置文件中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    rules: [&#123;</span><br><span class=\"line\">      test: /\\.css$/,</span><br><span class=\"line\">      use: [&#123;</span><br><span class=\"line\">        loader: &apos;style-loader&apos;</span><br><span class=\"line\">      &#125;, &#123;</span><br><span class=\"line\">        loader: &apos;css-loader&apos;</span><br><span class=\"line\">      &#125;, &#123;</span><br><span class=\"line\">        loader: &apos;px2rem-loader&apos;,</span><br><span class=\"line\">        // options here</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          remUni: 75,</span><br><span class=\"line\">          remPrecision: 8</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;]</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2）webpack中使用postcss plugin<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install postcss-loader</span><br></pre></td></tr></table></figure></p>\n<p>在webpack的plugin中:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var px2rem = require(&apos;postcss-px2rem&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  module: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: /\\.css$/,</span><br><span class=\"line\">        loader: &quot;style-loader!css-loader!postcss-loader&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  postcss: function() &#123;</span><br><span class=\"line\">    return [px2rem(&#123;remUnit: 75&#125;)];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"4\">\n<li>rem 布局应用举例</li>\n</ol>\n<p>网易新闻的移动端页面使用了rem布局，具体例子如下：</p>\n<p><img src=\"/2018/12/26/面试CSS/css07.gif\" alt=\"\"></p>\n<ol start=\"5\">\n<li>rem 布局的缺点</li>\n</ol>\n<p>通过rem单位，可以实现响应式的布局，特别是引入相应的postcss相关插件，免去了设计稿中的px到rem的计算。rem单位在国外的一些网站也有使用，这里所说的rem来实现布局的缺点，或者说是小缺陷是：</p>\n<p>在响应式布局中，必须通过js来动态控制根元素font-size的大小。</p>\n<p>也就是说css样式和js代码有一定的耦合性。且必须将改变font-size的代码放在css样式之前。</p>\n<h2 id=\"通过vw-vh来实现自适应\"><a href=\"#通过vw-vh来实现自适应\" class=\"headerlink\" title=\"通过vw/vh来实现自适应\"></a>通过vw/vh来实现自适应</h2><ol>\n<li>什么是vw/vh ?</li>\n</ol>\n<p>css3中引入了一个新的单位vw/vh，与视图窗口有关，vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度，除了vw和vh外，还有vmin和vmax两个相关的单位。各个单位具体的含义如下：</p>\n<table>\n<thead>\n<tr>\n<th>单位</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>vw</td>\n<td>相对于视窗的宽度，视窗宽度是100vw</td>\n</tr>\n<tr>\n<td>vh</td>\n<td>相对于视窗的高度，视窗高度是100vh</td>\n</tr>\n<tr>\n<td>vmin</td>\n<td>vw和vh中的较小值</td>\n</tr>\n<tr>\n<td>vmax</td>\n<td>vw和vh中的较大值</td>\n</tr>\n</tbody>\n</table>\n<p>这里我们发现视窗宽高都是100vw／100vh，那么vw或者vh，下简称vw，很类似百分比单位。vw和%的区别为：</p>\n<table>\n<thead>\n<tr>\n<th>单位</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%</td>\n<td>大部分相对于祖先元素，也有相对于自身的情况比如（border-radius、translate等)</td>\n</tr>\n<tr>\n<td>vw/vh</td>\n<td>相对于视窗的尺寸</td>\n</tr>\n</tbody>\n</table>\n<p>从对比中我们可以发现，vw单位与百分比类似，单确有区别，前面我们介绍了百分比单位的换算困难，这里的vw更像”理想的百分比单位”。任意层级元素，在使用vw单位的情况下，1vw都等于视图宽度的百分之一。</p>\n<ol start=\"2\">\n<li>vw单位换算</li>\n</ol>\n<p>同样的，如果要将px换算成vw单位，很简单，只要确定视图的窗口大小（布局视口），如果我们将布局视口设置成分辨率大小，比如对于iphone6/7 375*667的分辨率，那么px可以通过如下方式换算成vw：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1px = （1/375）*100 vw</span><br></pre></td></tr></table></figure></p>\n<p>此外，也可以通过postcss的相应插件，预处理css做一个自动的转换，postcss-px-to-viewport可以自动将px转化成vw。<br>postcss-px-to-viewport的默认参数为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var defaults = &#123;</span><br><span class=\"line\">  viewportWidth: 320,</span><br><span class=\"line\">  viewportHeight: 568, </span><br><span class=\"line\">  unitPrecision: 5,</span><br><span class=\"line\">  viewportUnit: &apos;vw&apos;,</span><br><span class=\"line\">  selectorBlackList: [],</span><br><span class=\"line\">  minPixelValue: 1,</span><br><span class=\"line\">  mediaQuery: false</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>通过指定视窗的宽度和高度，以及换算精度，就能将px转化成vw。</p>\n<ol start=\"3\">\n<li>vw/vh单位的兼容性<br>可以在<a href=\"https://caniuse.com/\" target=\"_blank\" rel=\"noopener\">https://caniuse.com/</a> 查看各个版本的浏览器对vw单位的支持性。<br>从上图我们发现，绝大多数的浏览器支持vw单位，但是ie9-11不支持vmin和vmax，考虑到vmin和vmax单位不常用，vw单位在绝大部分高版本浏览器内的支持性很好，但是opera浏览器整体不支持vw单位，如果需要兼容opera浏览器的布局，不推荐使用vw。</li>\n</ol>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本文介绍在布局中常用的单位，比如px、%、rem和vw等等，以及不同的单位在响应式布局中的优缺点。</p>\n<h1 id=\"画一条0-5px的线\"><a href=\"#画一条0-5px的线\" class=\"headerlink\" title=\"画一条0.5px的线\"></a>画一条0.5px的线</h1><ul>\n<li><p>采用meta viewport的方式</p>\n</li>\n<li><p>采用 border-image的方式</p>\n</li>\n<li><p>采用transform: scale()的方式</p>\n</li>\n</ul>\n<h1 id=\"link标签和import标签的区别\"><a href=\"#link标签和import标签的区别\" class=\"headerlink\" title=\"link标签和import标签的区别\"></a>link标签和import标签的区别</h1><ul>\n<li>link属于html标签，而@import是css提供的</li>\n<li>页面被加载时，link会同时被加载，而@import引用的css会等到页面加载结束后加载。</li>\n<li>link是html标签，因此没有兼容性，而@import只有IE5以上才能识别。</li>\n<li>link方式样式的权重高于@import的。</li>\n</ul>\n<h1 id=\"transition和animation的区别\"><a href=\"#transition和animation的区别\" class=\"headerlink\" title=\"transition和animation的区别\"></a>transition和animation的区别</h1><p>Animation和transition大部分属性是相同的，他们都是随时间改变元素的属性值，他们的主要区别是transition需要触发一个事件才能改变属性，而animation不需要触发任何事件的情况下才会随时间改变属性值，并且transition为2帧，从from …. to，而animation可以一帧一帧的。</p>\n<h1 id=\"Flex布局\"><a href=\"#Flex布局\" class=\"headerlink\" title=\"Flex布局\"></a>Flex布局</h1><p>文章链接：<br><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool（语法篇）\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool（语法篇）</a><br><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html（实例篇）\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2015/07/flex-examples.html（实例篇）</a></p>\n<p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br>布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p>\n<p>简单的分为容器属性和元素属性<br>容器的属性：</p>\n<p>flex-direction：决定主轴的方向（即子item的排列方法）<br>.box {<br>flex-direction: row | row-reverse | column | column-reverse;<br>}<br>flex-wrap：决定换行规则<br>.box{<br>flex-wrap: nowrap | wrap | wrap-reverse;<br>}<br>flex-flow：<br>.box {<br>flex-flow: || ;<br>}<br>justify-content：对其方式，水平主轴对齐方式<br>align-items：对齐方式，竖直轴线方向<br>项目的属性（元素的属性）：</p>\n<p>order属性：定义项目的排列顺序，顺序越小，排列越靠前，默认为0<br>flex-grow属性：定义项目的放大比例，即使存在空间，也不会放大<br>flex-shrink属性：定义了项目的缩小比例，当空间不足的情况下会等比例的缩小，如果定义个item的flow-shrink为0，则为不缩小<br>flex-basis属性：定义了在分配多余的空间，项目占据的空间。<br>flex：是flex-grow和flex-shrink、flex-basis的简写，默认值为0 1 auto。<br>align-self：允许单个项目与其他项目不一样的对齐方式，可以覆盖align-items，默认属性为auto，表示继承父元素的align-items<br>比如说，用flex实现圣杯布局</p>\n<h1 id=\"BFC（块级格式化上下文，用于清除浮动，防止margin重叠等）\"><a href=\"#BFC（块级格式化上下文，用于清除浮动，防止margin重叠等）\" class=\"headerlink\" title=\"BFC（块级格式化上下文，用于清除浮动，防止margin重叠等）\"></a>BFC（块级格式化上下文，用于清除浮动，防止margin重叠等）</h1><p>直译成：块级格式化上下文，是一个独立的渲染区域，并且有一定的布局规则。</p>\n<p>BFC区域不会与float box重叠<br>BFC是页面上的一个独立容器，子元素不会影响到外面<br>计算BFC的高度时，浮动元素也会参与计算<br>哪些元素会生成BFC：</p>\n<p>根元素</p>\n<ul>\n<li>float不为none的元素</li>\n<li>position为fixed和absolute的元素</li>\n<li>display为inline-block、table-cell、table-caption，flex，inline-flex的元素</li>\n<li>overflow不为visible的元素</li>\n</ul>\n<blockquote>\n<p>BFC定义</p>\n</blockquote>\n<p>1、 box<br>box是css布局的基本单位，元素的类型和display属性决定了box的类型。不同的类型的盒子会参与不同的formatting context。<br>block-level box :display属性为block、list-item(作为列表显示的元素)、table的元素会生成block-level box。<br>2、formatting context<br>它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用</p>\n<p>BFC（block formatting context）为块级格式化上下文，他是一个独立渲染区域，并且只有block-level box参与，规定了block-level box内部的布局方式。</p>\n<blockquote>\n<p>布局规则</p>\n</blockquote>\n<ul>\n<li><p>1、内部的box会在垂直方向上一个接一个的放置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=<span class=\"string\">\"div1\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=<span class=\"string\">\"div2\"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2、同一个bfc内，两个相邻box元素的margin会产生重叠，重叠距离为数值大的margin值<br>给div1设置margin: 20px 0,给div2设置margin: 30px 0,此时div1和div2之间的间距为30px。</p>\n</li>\n</ul>\n<p>解决方式  让两个元素不属于同一个BFC<br>3、BFC区域不会与浮动元素重叠<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=<span class=\"string\">\"left\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;div class=<span class=\"string\">\"main\"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<p>此时main元素没有产生bfc,left元素浮动，效果如下：<br>给main元素设置overflow:hidden变为bfc,效果如下：</p>\n<ul>\n<li>4、计算BFC的高度时，浮动元素也参与计算</li>\n<li>5、每个元素的margin box的左边， 与 包含块 border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此</li>\n<li>6、BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素<blockquote>\n<p>3、产生BFC的方式</p>\n</blockquote>\n</li>\n<li>1、overflow属性不是visible</li>\n<li>2、float属性不为none</li>\n<li>3、display属性为inline-block、table-cell、flex、inline-flex、table-caption</li>\n<li>4、position为absolute、fixed</li>\n<li>5、body根元素</li>\n</ul>\n<h1 id=\"关于js动画和css3动画的差异性\"><a href=\"#关于js动画和css3动画的差异性\" class=\"headerlink\" title=\"关于js动画和css3动画的差异性\"></a>关于js动画和css3动画的差异性</h1><p>渲染线程分为main thread和compositor thread，如果css动画只改变transform和opacity，这时整个CSS动画得以在compositor trhead完成（而js动画则会在main thread执行，然后出发compositor thread进行下一步操作），特别注意的是如果改变transform和opacity是不会layout或者paint的。<br>区别：</p>\n<ul>\n<li>功能涵盖面，js比css大</li>\n<li>实现/重构难度不一，CSS3比js更加简单，性能跳优方向固定</li>\n<li>对帧速表现不好的低版本浏览器，css3可以做到自然降级</li>\n<li>css动画有天然事件支持</li>\n<li>css3有兼容性问题</li>\n</ul>\n<h1 id=\"块元素和行元素\"><a href=\"#块元素和行元素\" class=\"headerlink\" title=\"块元素和行元素\"></a>块元素和行元素</h1><p>HTML可以将元素分类方式分为行内元素、块状元素和行内块状元素三种。首先需要说明的是，这三者是可以互相转换的，使用display属性能够将三者任意转换：</p>\n<p>　　(1)display:inline;转换为行内元素</p>\n<p>　　(2)display:block;转换为块状元素</p>\n<p>　　(3)display:inline-block;转换为行内块状元素<br>块元素：独占一行，并且有自动填满父元素，可以设置margin和pading以及高度和宽度<br>行元素：不会独占一行，width和height会失效，并且在垂直方向的padding和margin会失<br>效。<br>1.块状元素<br>　　块状元素代表性的就是div，其他如p、nav、aside、header、footer、section、article、ul-li、address等等，都可以用div来实现。不过为了可以方便程序员解读代码，一般都会使用特定的语义化标签，使得代码可读性强，且便于查错。</p>\n<p>　　块状元素特征：(1)能够识别宽高</p>\n<p>　　　　　　　　　(2)margin和padding的上下左右均对其有效</p>\n<p>　　　　　　　　　(3)可以自动换行</p>\n<p>　　　　　　　　　(4)多个块状元素标签写在一起，默认排列方式为从上至下<br>2.块状元素<br>　　块状元素代表性的就是div，其他如p、nav、aside、header、footer、section、article、ul-li、address等等，都可以用div来实现。不过为了可以方便程序员解读代码，一般都会使用特定的语义化标签，使得代码可读性强，且便于查错。</p>\n<p>　　块状元素特征：(1)能够识别宽高</p>\n<p>　　　　　　　　　(2)margin和padding的上下左右均对其有效</p>\n<p>　　　　　　　　　(3)可以自动换行</p>\n<p>　　　　　　　　　(4)多个块状元素标签写在一起，默认排列方式为从上至下<br>3.行内块状元素<br>　　行内块状元素综合了行内元素和块状元素的特性，但是各有取舍。因此行内块状元素在日常的使用中，由于其特性，使用的次数也比较多。</p>\n<p>　　行内块状元素特征：(1)不自动换行</p>\n<p>　　　　　　　　　　　(2)能够识别宽高</p>\n<p>　　　　　　　　　　　(3)默认排列方式为从左到右</p>\n<h1 id=\"多行元素的文本省略号\"><a href=\"#多行元素的文本省略号\" class=\"headerlink\" title=\"多行元素的文本省略号\"></a>多行元素的文本省略号</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: -webkit-box</span><br><span class=\"line\">-webkit-box-orient:vertical</span><br><span class=\"line\">-webkit-line-clamp:3</span><br><span class=\"line\">overflow:hidden</span><br></pre></td></tr></table></figure>\n<h1 id=\"visibility-hidden-opacity-0，display-none\"><a href=\"#visibility-hidden-opacity-0，display-none\" class=\"headerlink\" title=\"visibility=hidden, opacity=0，display:none\"></a>visibility=hidden, opacity=0，display:none</h1><p>opacity=0，该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定一些事件，如click事件，那么点击该区域，也能触发点击事件的visibility=hidden，该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已经绑定的事件display=none，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素删除掉一样。</p>\n<h1 id=\"双边距重叠问题（外边距折叠）\"><a href=\"#双边距重叠问题（外边距折叠）\" class=\"headerlink\" title=\"双边距重叠问题（外边距折叠）\"></a>双边距重叠问题（外边距折叠）</h1><p>多个相邻（兄弟或者父子关系）普通流的块元素垂直方向marigin会重叠</p>\n<p>折叠的结果为：</p>\n<p>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。<br>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。<br>两个外边距一正一负时，折叠结果是两者的相加的和。</p>\n<h1 id=\"position\"><a href=\"#position\" class=\"headerlink\" title=\"position\"></a>position</h1><ul>\n<li>static  默认。位置设置为 static 的元素，它始终会处于页面流给予的位置（static 元素会忽略任何 top、bottom、left 或 right 声明）。</li>\n<li>relative  位置被设置为 relative 的元素，可将其移至相对于其正常位置的地方，因此 “left:20” 会将元素移至元素正常位置左边 20 个像素的位置。</li>\n<li>absolute  位置设置为 absolute 的元素，可定位于相对于包含它的元素的指定坐标。此元素的位置可通过 “left”、”top”、”right” 以及 “bottom” 属性来规定。</li>\n<li>fixed 位置被设置为 fixed 的元素，可定位于相对于浏览器窗口的指定坐标。此元素的位置可通过 “left”、”top”、”right” 以及”bottom” 属性来规定。不论窗口滚动与否，元素都会留在那个位置。工作于 IE7（strict 模式）。</li>\n<li>sticky 基于用户的滚动位置来定位。粘性定位的元素是依赖于用户的滚动，在position:relative 与 position:fixed定位之间切换。它的行为就像position:relative;而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。</li>\n</ul>\n<h1 id=\"animation\"><a href=\"#animation\" class=\"headerlink\" title=\"animation\"></a>animation</h1><p>语法<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@keyframes animationname &#123;keyframes-selector &#123;css-styles;&#125;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>下面的表格列出了 @keyframes 规则和所有动画属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n<th>CSS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@keyframes</td>\n<td>规定动画。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation</td>\n<td>所有动画属性的简写属性，除了 animation-play-state 属性。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-name</td>\n<td>规定 @keyframes 动画的名称。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-duration</td>\n<td>规定动画完成一个周期所花费的秒或毫秒。默认是 0。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-timing-function</td>\n<td>规定动画的速度曲线。默认是 “ease”。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-delay</td>\n<td>规定动画何时开始。默认是 0。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-iteration-count</td>\n<td>规定动画被播放的次数。默认是 1。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-direction</td>\n<td>规定动画是否在下一周期逆向地播放。默认是 “normal”。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-play-state</td>\n<td>规定动画是否正在运行或暂停。默认是 “running”。</td>\n<td>3</td>\n</tr>\n<tr>\n<td>animation-fill-mode</td>\n<td>规定对象动画时间之外的状态。</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"伪元素伪类\"><a href=\"#伪元素伪类\" class=\"headerlink\" title=\"伪元素伪类\"></a>伪元素伪类</h1><blockquote>\n<p>css3为了区分伪类和伪元素，伪元素采用双冒号写法。</p>\n</blockquote>\n<p>伪类 – :hover, :link, :active, :visited, :first-child, :last-child, nth-child(n), :not(), :focus<br>伪元素 – ::before, ::after, ::first-letter, ::first-line, ::selection</p>\n<blockquote>\n<p>定义:</p>\n</blockquote>\n<p>伪类：用于向某些选择器添加特殊的效果<br>伪元素：用于将特殊的效果添加到某些选择器</p>\n<blockquote>\n<p>区别</p>\n</blockquote>\n<p>例子来理解<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">    &lt;em&gt;This&lt;/em&gt;</span><br><span class=\"line\">    &lt;em&gt;is a text&lt;/em&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/12/26/面试CSS/weilei01.png\" alt=\"\"><br>如果我们想要第一个em标签字体颜色变红怎么做呢<br>使用我们熟悉的伪类很简单<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">em:first-child &#123;</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/12/26/面试CSS/weilei02.png\" alt=\"\"><br>但是如果不存在伪类我们怎么做呢<br>这是我们就需要为第一个em标签添加类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">    &lt;em class=&quot;first-child&quot;&gt;This&lt;/em&gt;</span><br><span class=\"line\">    &lt;em&gt;is a text&lt;/em&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">em.first-child &#123;</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以实现同样的效果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">    &lt;em&gt;This&lt;/em&gt;</span><br><span class=\"line\">    &lt;em&gt;is a text&lt;/em&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>\n<p>还是这个例子<br>现在我想让这个段落的第一个字母变红 </p>\n<p>这回我们需要使用伪元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p::first-letter &#123;</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2018/12/26/面试CSS/weilei03.png\" alt=\"\"><br>同样假设伪元素不存在的情况<br>这时我们只能嵌套span标签来实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;</span><br><span class=\"line\">    &lt;em&gt;&lt;span&gt;T&lt;/span&gt;his&lt;/em&gt;</span><br><span class=\"line\">    &lt;em&gt;is a text&lt;/em&gt;</span><br><span class=\"line\">&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">p span &#123;</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>看到这里，相信大家已经清楚了为什么一个叫做伪类，一个叫做伪元素<br>伪类的效果可以通过添加实际的类来实现<br>伪元素的效果可以通过添加实际的元素来实现 </p>\n<p><font color=\"red\">它们的本质区别就是是否抽象创造了新元素</font><br>伪元素是可以设置content属性的，类似于标签，但是伪类只能设置样式不能设置内容。<br><strong>注意</strong><br>伪类就像真正的类一样，可以叠加使用<br>没有数量上限，只要不是互斥的<br>比如这样<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">em:first-child:hover &#123;</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>但注意，这里是“与”的关系<br>也就是说既要满足“first-child”第一个子元素<br>又要满足“hover”光标悬浮<br>伪元素就要严格的多<br>伪元素在一个选择器中只能出现一次，并且只能出现在末尾<br>（这里有同学误会了，所以我作出了修改）<br>像下面的样式是无法生效的<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p::first-letter:hover &#123;  /*错误的写法：伪元素不是末尾*/</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p::first-letter::selection &#123;  /*错误的写法：伪元素出现了多个*/</span><br><span class=\"line\">    color: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>关于它们的优先级<br>在计算权重的时候<br>伪类与类优先级相同<br>伪元素与标签优先级相同</p>\n<p><strong>总结</strong></p>\n<ul>\n<li>伪类与伪元素都是用于向选择器加特殊效果</li>\n<li>伪类与伪元素的本质区别就是是否抽象创造了新元素</li>\n<li>伪类只要不是互斥可以叠加使用</li>\n<li>伪元素在一个选择器中只能出现一次，并且只能出现在末尾</li>\n<li>伪类与伪元素优先级分别与类、标签优先级相同</li>\n</ul>\n"},{"title":"原型与继承","date":"2018-12-26T09:28:15.000Z","_content":"# prototype、proto和constructor的三者关系\njavascript里的关系又多又乱。作用域链是一种单向的链式关系，还算简单清晰；this机制的调用关系，稍微有些复杂；而关于原型，则是prototype、proto和constructor的三角关系。本文先用一张图开宗明义，然后详细解释原型的三角关系\n![](proto01.png)\n## 概念\n上图中的复杂关系，实际上来源就两行代码:\n```\nfunction Foo(){};\nvar f1 = new Foo;\n```\n- 【构造函数】\n\n　　用来初始化新创建的对象的函数是构造函数。在例子中，Foo()函数是构造函数\n\n- 【实例对象】\n\n　　通过构造函数的new操作创建的对象是实例对象。可以用一个构造函数，构造多个实例对象\n```\nfunction Foo(){};\nvar f1 = new Foo;\nvar f2 = new Foo;\nconsole.log(f1 === f2);//false\n```\n- 【原型对象及prototype】\n\n　　构造函数有一个prototype属性，指向实例对象的原型对象。通过同一个构造函数实例化的多个对象具有相同的原型对象。经常使用原型对象来实现继承\n```\nfunction Foo(){};\nFoo.prototype.a = 1;\nvar f1 = new Foo;\nvar f2 = new Foo;\n\nconsole.log(Foo.prototype.a);//1\nconsole.log(f1.a);//1\nconsole.log(f2.a);//1\n```\n- 【constructor】\n\n　　原型对象有一个constructor属性，指向该原型对象对应的构造函数\n```\nfunction Foo(){};\nconsole.log(Foo.prototype.constructor === Foo);//true\n```\n　　由于实例对象可以继承原型对象的属性，所以实例对象也拥有constructor属性，同样指向原型对象对应的构造函数\n```\nfunction Foo(){};\nvar f1 = new Foo;\nconsole.log(f1.constructor === Foo);//true\n```\n- 【proto】\n\n　　实例对象有一个proto属性，指向该实例对象对应的原型对象\n```\nfunction Foo(){};\nvar f1 = new Foo;\nconsole.log(f1.__proto__ === Foo.prototype);//true\n```\n\n## 说明\n　　概念介绍完了，现在对图示的关系进行详细说明\n```\nfunction Foo(){};\nvar f1 = new Foo;\n```\n>【第一部分： Foo】\n\n![](proto02.png)\n实例对象f1是通过构造函数Foo()的new操作创建的。构造函数Foo()的原型对象是Foo.prototype；实例对象f1通过__proto__属性也指向原型对象Foo.prototype\n```\nfunction Foo(){};\nvar f1 = new Foo;\nconsole.log(f1.__proto === Foo.prototype);//true\n```\n　　实例对象f1本身并没有constructor属性，但它可以继承原型对象Foo.prototype的constructor属性\n```\nfunction Foo(){};\nvar f1 = new Foo;\nconsole.log(Foo.prototype.constructor === Foo);//true\nconsole.log(f1.constructor === Foo);//true\nconsole.log(f1.hasOwnProperty('constructor'));//false\n```\n　　下图是实例对象f1的控制台效果\n![](proto03.png)\n>【第二部分： Object】\n\n![](proto04.png)\n　Foo.prototype是f1的原型对象，同时它也是实例对象。实际上，任何对象都可以看做是通过Object()构造函数的new操作实例化的对象\n　　所以，Foo.prototype作为实例对象，它的构造函数是Object()，原型对象是Object.prototype。相应地，构造函数Object()的prototype属性指向原型对象Object.prototype；实例对象Foo.prototype的proto属性同样指向原型对象Object.prototype\n```\nfunction Foo(){};\nvar f1 = new Foo;\nconsole.log(Foo.prototype.__proto__ === Object.prototype);//true\n```\n　　实例对象Foo.prototype本身具有constructor属性，所以它会覆盖继承自原型对象Object.prototype的constructor属性\n```\nfunction Foo(){};\nvar f1 = new Foo;\nconsole.log(Foo.prototype.constructor === Foo);//true\nconsole.log(Object.prototype.constructor === Object);//true\nconsole.log(Foo.prototype.hasOwnProperty('constructor'));//true\n```\n　　下图是实例对象Foo.prototype的控制台效果:\n![](proto05.png)\n如果Object.prototype作为实例对象的话，其原型对象是什么，结果是null。私以为，这可能也是typeof null的结果是'object'的原因之一吧\n```\nconsole.log(Object.prototype.__proto__ === null);//true\n```\n\n>【第三部分： Function】\n\n![](proto06.png)\n前面已经介绍过，函数也是对象，只不过是具有特殊功能的对象而已。任何函数都可以看做是通过Function()构造函数的new操作实例化的结果\n\n　　如果把函数Foo当成实例对象的话，其构造函数是Function()，其原型对象是Function.prototype；类似地，函数Object的构造函数也是Function()，其原型对象是Function.prototype\n```\nfunction Foo(){};\nvar f1 = new Foo;\nconsole.log(Foo.__proto__ === Function.prototype);//true\nconsole.log(Object.__proto__ === Function.prototype);//true\n```\n　　原型对象Function.prototype的constructor属性指向构造函数Function()；实例对象Object和Foo本身没有constructor属性，需要继承原型对象Function.prototype的constructor属性\n\n```\nfunction Foo(){};\nvar f1 = new Foo;\nconsole.log(Function.prototype.constructor === Function);//true\nconsole.log(Foo.constructor === Function);//true\nconsole.log(Foo.hasOwnProperty('constructor'));//false\nconsole.log(Object.constructor === Function);//true\nconsole.log(Object.hasOwnProperty('constructor'));//false\n```\n　　所有的函数都可以看成是构造函数Function()的new操作的实例化对象。那么，Function可以看成是调用其自身的new操作的实例化的结果\n\n　　所以，如果Function作为实例对象，其构造函数是Function，其原型对象是Function.prototype\n```\nconsole.log(Function.__proto__ === Function.prototype);//true\nconsole.log(Function.prototype.constructor === Function);//true\nconsole.log(Function.prototype === Function.prototype);//true\n```\n　　如果Function.prototype作为实例对象的话，其原型对象是什么呢？和前面一样，所有的对象都可以看成是Object()构造函数的new操作的实例化结果。所以，Function.prototype的原型对象是Object.prototype，其原型函数是Object()\n```\nconsole.log(Function.prototype.__proto__ === Object.prototype);//true\n```\n　　第二部分介绍过，Object.prototype的原型对象是null\n```\nconsole.log(Object.prototype.__proto__ === null);//true\n```\n\n## 总结\n　　【1】函数(Function也是函数)是new Function的结果，所以函数可以作为实例对象，其构造函数是Function()，原型对象是Function.prototype\n\n　　【2】对象(函数也是对象)是new Object的结果，所以对象可以作为实例对象，其构造函数是Object()，原型对象是Object.prototype\n\n　　【3】Object.prototype的原型对象是null\n# JS继承的6种方式\n>[原型]\n\n```\n// B是A的原型，A是B的构造函数\nA.prototype = B\nB.constructor = A\n```\n>[约定]\n\n```\n// 父类\nfunction Super(){\n  this.property = 'Super Property'\n}\nSuper.prototype.getProperty = function(){\n  return this.property\n}\n```\n## 构造函数继承\n1.基本思想\n通过使用call、apply方法可以在新创建的对象上执行构造函数,用父类的构造函数来增加子类的实例\n\n2.具体实现\n```\n// 子类\nfunction Sub(){\n  Super.call(this)\n  this.property = 'Sub Property'\n}\n```\n3.优缺点\n1）优点\n简单明了，直接继承超类构造函数的属性和方法\n2）缺点\n无法继承原型链上的属性和方法\n## 原型链继承\n1.基本思想\n利用原型链来实现继承，超类的一个实例作为子类的原型\n\n2.具体实现\n```\n// 子类\nfunction Sub(){\n  this.property = 'Sub Property'\n}\nSub.prototype = new Super()\n// 注意这里new Super()生成的超类对象并没有constructor属性,故需添加上\nSub.prototype.constructor = Sub\n```\n3.优缺点\n1）优点\n简单明了，容易实现\n实例是子类的实例，实际上也是父类的一个实例\n父类新增原型方法/原型属性，子类都能访问到\n2）缺点\n所有子类的实例的原型都共享同一个超类实例的属性和方法\n无法实现多继承\n## 组合继承\n1.基本思想\n利用构造继承和原型链组合\n\n2.具体实现\n````\n// 子类\nfunction Sub(){\n  Super.call(this)\n  this.property = 'Sub Property'\n}\nSub.prototype = new Super()\n// 注意这里new Super()生成的超类对象并没有constructor属性,故需添加上\nSub.prototype.constructor = Sub\n````\n3.优缺点\n1）优点\n解决了构造继承和原型链继承的两个问题\n2）缺点\n实际上子类上会拥有超类的两份属性，只是子类的属性覆盖了超类的属性\n## 原型式继承\n1.基本思想\n采用原型式继承并不需要定义一个类，传入参数obj,生成一个继承obj对象的对象\n\n2.具体实现\n```\nfunction objectCreate(obj){\n  function F(){}\n  F.prototype = obj\n  return new F()\n}\n```\n3.优缺点\n1）优点：\n直接通过对象生成一个继承该对象的对象\n2）缺点：\n## 寄生式继承\n1.基本思想\n创建一个仅仅用于封装继承过程的函数，然后在内部以某种方式增强对象，最后返回对象\n\n2.具体实现\n```\nfunction objectCreate(obj){\n  function F(){}\n  F.prototype = obj\n  return new F()\n}\nfunction createSubObj(superInstance){\n  var clone = objectCreate(superInstance)\n  clone.property = 'Sub Property'\n  return clone\n}\n```\n3.优缺点\n1）优点：\n原型式继承的一种拓展\n2）缺点：\n依旧没有类的概念\n## 六.寄生组合式继承\n1.基本思想\n结合寄生式继承和组合式继承，完美实现不带两份超类属性的继承方式\n\n2.具体实现\n```\nfunction inheritPrototype(Super,Sub){\n  var superProtoClone = Object.Create(Super.prototype)\n  superProtoClone.constructor = Sub\n  Sub.prototype = Super\n}\nfunction Sub(){\n  Super.call()\n  Sub.property = 'Sub Property'\n}\ninheritPrototype(Super,Sub)\n```\n3.优缺点\n1）优点：\n完美实现继承，解决了组合式继承带两份属性的问题\n2）缺点：\n过于繁琐，故不如组合继承\n\n","source":"_posts/原型.md","raw":"---\ntitle: 原型与继承\ndate: 2018-12-26 17:28:15\ncategories: \"基础前端技术\"\ntags: [原型，继承]\n---\n# prototype、proto和constructor的三者关系\njavascript里的关系又多又乱。作用域链是一种单向的链式关系，还算简单清晰；this机制的调用关系，稍微有些复杂；而关于原型，则是prototype、proto和constructor的三角关系。本文先用一张图开宗明义，然后详细解释原型的三角关系\n![](proto01.png)\n## 概念\n上图中的复杂关系，实际上来源就两行代码:\n```\nfunction Foo(){};\nvar f1 = new Foo;\n```\n- 【构造函数】\n\n　　用来初始化新创建的对象的函数是构造函数。在例子中，Foo()函数是构造函数\n\n- 【实例对象】\n\n　　通过构造函数的new操作创建的对象是实例对象。可以用一个构造函数，构造多个实例对象\n```\nfunction Foo(){};\nvar f1 = new Foo;\nvar f2 = new Foo;\nconsole.log(f1 === f2);//false\n```\n- 【原型对象及prototype】\n\n　　构造函数有一个prototype属性，指向实例对象的原型对象。通过同一个构造函数实例化的多个对象具有相同的原型对象。经常使用原型对象来实现继承\n```\nfunction Foo(){};\nFoo.prototype.a = 1;\nvar f1 = new Foo;\nvar f2 = new Foo;\n\nconsole.log(Foo.prototype.a);//1\nconsole.log(f1.a);//1\nconsole.log(f2.a);//1\n```\n- 【constructor】\n\n　　原型对象有一个constructor属性，指向该原型对象对应的构造函数\n```\nfunction Foo(){};\nconsole.log(Foo.prototype.constructor === Foo);//true\n```\n　　由于实例对象可以继承原型对象的属性，所以实例对象也拥有constructor属性，同样指向原型对象对应的构造函数\n```\nfunction Foo(){};\nvar f1 = new Foo;\nconsole.log(f1.constructor === Foo);//true\n```\n- 【proto】\n\n　　实例对象有一个proto属性，指向该实例对象对应的原型对象\n```\nfunction Foo(){};\nvar f1 = new Foo;\nconsole.log(f1.__proto__ === Foo.prototype);//true\n```\n\n## 说明\n　　概念介绍完了，现在对图示的关系进行详细说明\n```\nfunction Foo(){};\nvar f1 = new Foo;\n```\n>【第一部分： Foo】\n\n![](proto02.png)\n实例对象f1是通过构造函数Foo()的new操作创建的。构造函数Foo()的原型对象是Foo.prototype；实例对象f1通过__proto__属性也指向原型对象Foo.prototype\n```\nfunction Foo(){};\nvar f1 = new Foo;\nconsole.log(f1.__proto === Foo.prototype);//true\n```\n　　实例对象f1本身并没有constructor属性，但它可以继承原型对象Foo.prototype的constructor属性\n```\nfunction Foo(){};\nvar f1 = new Foo;\nconsole.log(Foo.prototype.constructor === Foo);//true\nconsole.log(f1.constructor === Foo);//true\nconsole.log(f1.hasOwnProperty('constructor'));//false\n```\n　　下图是实例对象f1的控制台效果\n![](proto03.png)\n>【第二部分： Object】\n\n![](proto04.png)\n　Foo.prototype是f1的原型对象，同时它也是实例对象。实际上，任何对象都可以看做是通过Object()构造函数的new操作实例化的对象\n　　所以，Foo.prototype作为实例对象，它的构造函数是Object()，原型对象是Object.prototype。相应地，构造函数Object()的prototype属性指向原型对象Object.prototype；实例对象Foo.prototype的proto属性同样指向原型对象Object.prototype\n```\nfunction Foo(){};\nvar f1 = new Foo;\nconsole.log(Foo.prototype.__proto__ === Object.prototype);//true\n```\n　　实例对象Foo.prototype本身具有constructor属性，所以它会覆盖继承自原型对象Object.prototype的constructor属性\n```\nfunction Foo(){};\nvar f1 = new Foo;\nconsole.log(Foo.prototype.constructor === Foo);//true\nconsole.log(Object.prototype.constructor === Object);//true\nconsole.log(Foo.prototype.hasOwnProperty('constructor'));//true\n```\n　　下图是实例对象Foo.prototype的控制台效果:\n![](proto05.png)\n如果Object.prototype作为实例对象的话，其原型对象是什么，结果是null。私以为，这可能也是typeof null的结果是'object'的原因之一吧\n```\nconsole.log(Object.prototype.__proto__ === null);//true\n```\n\n>【第三部分： Function】\n\n![](proto06.png)\n前面已经介绍过，函数也是对象，只不过是具有特殊功能的对象而已。任何函数都可以看做是通过Function()构造函数的new操作实例化的结果\n\n　　如果把函数Foo当成实例对象的话，其构造函数是Function()，其原型对象是Function.prototype；类似地，函数Object的构造函数也是Function()，其原型对象是Function.prototype\n```\nfunction Foo(){};\nvar f1 = new Foo;\nconsole.log(Foo.__proto__ === Function.prototype);//true\nconsole.log(Object.__proto__ === Function.prototype);//true\n```\n　　原型对象Function.prototype的constructor属性指向构造函数Function()；实例对象Object和Foo本身没有constructor属性，需要继承原型对象Function.prototype的constructor属性\n\n```\nfunction Foo(){};\nvar f1 = new Foo;\nconsole.log(Function.prototype.constructor === Function);//true\nconsole.log(Foo.constructor === Function);//true\nconsole.log(Foo.hasOwnProperty('constructor'));//false\nconsole.log(Object.constructor === Function);//true\nconsole.log(Object.hasOwnProperty('constructor'));//false\n```\n　　所有的函数都可以看成是构造函数Function()的new操作的实例化对象。那么，Function可以看成是调用其自身的new操作的实例化的结果\n\n　　所以，如果Function作为实例对象，其构造函数是Function，其原型对象是Function.prototype\n```\nconsole.log(Function.__proto__ === Function.prototype);//true\nconsole.log(Function.prototype.constructor === Function);//true\nconsole.log(Function.prototype === Function.prototype);//true\n```\n　　如果Function.prototype作为实例对象的话，其原型对象是什么呢？和前面一样，所有的对象都可以看成是Object()构造函数的new操作的实例化结果。所以，Function.prototype的原型对象是Object.prototype，其原型函数是Object()\n```\nconsole.log(Function.prototype.__proto__ === Object.prototype);//true\n```\n　　第二部分介绍过，Object.prototype的原型对象是null\n```\nconsole.log(Object.prototype.__proto__ === null);//true\n```\n\n## 总结\n　　【1】函数(Function也是函数)是new Function的结果，所以函数可以作为实例对象，其构造函数是Function()，原型对象是Function.prototype\n\n　　【2】对象(函数也是对象)是new Object的结果，所以对象可以作为实例对象，其构造函数是Object()，原型对象是Object.prototype\n\n　　【3】Object.prototype的原型对象是null\n# JS继承的6种方式\n>[原型]\n\n```\n// B是A的原型，A是B的构造函数\nA.prototype = B\nB.constructor = A\n```\n>[约定]\n\n```\n// 父类\nfunction Super(){\n  this.property = 'Super Property'\n}\nSuper.prototype.getProperty = function(){\n  return this.property\n}\n```\n## 构造函数继承\n1.基本思想\n通过使用call、apply方法可以在新创建的对象上执行构造函数,用父类的构造函数来增加子类的实例\n\n2.具体实现\n```\n// 子类\nfunction Sub(){\n  Super.call(this)\n  this.property = 'Sub Property'\n}\n```\n3.优缺点\n1）优点\n简单明了，直接继承超类构造函数的属性和方法\n2）缺点\n无法继承原型链上的属性和方法\n## 原型链继承\n1.基本思想\n利用原型链来实现继承，超类的一个实例作为子类的原型\n\n2.具体实现\n```\n// 子类\nfunction Sub(){\n  this.property = 'Sub Property'\n}\nSub.prototype = new Super()\n// 注意这里new Super()生成的超类对象并没有constructor属性,故需添加上\nSub.prototype.constructor = Sub\n```\n3.优缺点\n1）优点\n简单明了，容易实现\n实例是子类的实例，实际上也是父类的一个实例\n父类新增原型方法/原型属性，子类都能访问到\n2）缺点\n所有子类的实例的原型都共享同一个超类实例的属性和方法\n无法实现多继承\n## 组合继承\n1.基本思想\n利用构造继承和原型链组合\n\n2.具体实现\n````\n// 子类\nfunction Sub(){\n  Super.call(this)\n  this.property = 'Sub Property'\n}\nSub.prototype = new Super()\n// 注意这里new Super()生成的超类对象并没有constructor属性,故需添加上\nSub.prototype.constructor = Sub\n````\n3.优缺点\n1）优点\n解决了构造继承和原型链继承的两个问题\n2）缺点\n实际上子类上会拥有超类的两份属性，只是子类的属性覆盖了超类的属性\n## 原型式继承\n1.基本思想\n采用原型式继承并不需要定义一个类，传入参数obj,生成一个继承obj对象的对象\n\n2.具体实现\n```\nfunction objectCreate(obj){\n  function F(){}\n  F.prototype = obj\n  return new F()\n}\n```\n3.优缺点\n1）优点：\n直接通过对象生成一个继承该对象的对象\n2）缺点：\n## 寄生式继承\n1.基本思想\n创建一个仅仅用于封装继承过程的函数，然后在内部以某种方式增强对象，最后返回对象\n\n2.具体实现\n```\nfunction objectCreate(obj){\n  function F(){}\n  F.prototype = obj\n  return new F()\n}\nfunction createSubObj(superInstance){\n  var clone = objectCreate(superInstance)\n  clone.property = 'Sub Property'\n  return clone\n}\n```\n3.优缺点\n1）优点：\n原型式继承的一种拓展\n2）缺点：\n依旧没有类的概念\n## 六.寄生组合式继承\n1.基本思想\n结合寄生式继承和组合式继承，完美实现不带两份超类属性的继承方式\n\n2.具体实现\n```\nfunction inheritPrototype(Super,Sub){\n  var superProtoClone = Object.Create(Super.prototype)\n  superProtoClone.constructor = Sub\n  Sub.prototype = Super\n}\nfunction Sub(){\n  Super.call()\n  Sub.property = 'Sub Property'\n}\ninheritPrototype(Super,Sub)\n```\n3.优缺点\n1）优点：\n完美实现继承，解决了组合式继承带两份属性的问题\n2）缺点：\n过于繁琐，故不如组合继承\n\n","slug":"原型","published":1,"updated":"2019-07-17T11:39:42.508Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cyq0067t09zcugd995w","content":"<h1 id=\"prototype、proto和constructor的三者关系\"><a href=\"#prototype、proto和constructor的三者关系\" class=\"headerlink\" title=\"prototype、proto和constructor的三者关系\"></a>prototype、proto和constructor的三者关系</h1><p>javascript里的关系又多又乱。作用域链是一种单向的链式关系，还算简单清晰；this机制的调用关系，稍微有些复杂；而关于原型，则是prototype、proto和constructor的三角关系。本文先用一张图开宗明义，然后详细解释原型的三角关系<br><img src=\"/2018/12/26/原型/proto01.png\" alt=\"\"></p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>上图中的复杂关系，实际上来源就两行代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>【构造函数】</li>\n</ul>\n<p>　　用来初始化新创建的对象的函数是构造函数。在例子中，Foo()函数是构造函数</p>\n<ul>\n<li>【实例对象】</li>\n</ul>\n<p>　　通过构造函数的new操作创建的对象是实例对象。可以用一个构造函数，构造多个实例对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">var f2 = new Foo;</span><br><span class=\"line\">console.log(f1 === f2);//false</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>【原型对象及prototype】</li>\n</ul>\n<p>　　构造函数有一个prototype属性，指向实例对象的原型对象。通过同一个构造函数实例化的多个对象具有相同的原型对象。经常使用原型对象来实现继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">Foo.prototype.a = 1;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">var f2 = new Foo;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(Foo.prototype.a);//1</span><br><span class=\"line\">console.log(f1.a);//1</span><br><span class=\"line\">console.log(f2.a);//1</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>【constructor】</li>\n</ul>\n<p>　　原型对象有一个constructor属性，指向该原型对象对应的构造函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">console.log(Foo.prototype.constructor === Foo);//true</span><br></pre></td></tr></table></figure></p>\n<p>　　由于实例对象可以继承原型对象的属性，所以实例对象也拥有constructor属性，同样指向原型对象对应的构造函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">console.log(f1.constructor === Foo);//true</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>【proto】</li>\n</ul>\n<p>　　实例对象有一个proto属性，指向该实例对象对应的原型对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">console.log(f1.__proto__ === Foo.prototype);//true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>　　概念介绍完了，现在对图示的关系进行详细说明<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>【第一部分： Foo】</p>\n</blockquote>\n<p><img src=\"/2018/12/26/原型/proto02.png\" alt=\"\"><br>实例对象f1是通过构造函数Foo()的new操作创建的。构造函数Foo()的原型对象是Foo.prototype；实例对象f1通过<strong>proto</strong>属性也指向原型对象Foo.prototype<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">console.log(f1.__proto === Foo.prototype);//true</span><br></pre></td></tr></table></figure></p>\n<p>　　实例对象f1本身并没有constructor属性，但它可以继承原型对象Foo.prototype的constructor属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">console.log(Foo.prototype.constructor === Foo);//true</span><br><span class=\"line\">console.log(f1.constructor === Foo);//true</span><br><span class=\"line\">console.log(f1.hasOwnProperty(&apos;constructor&apos;));//false</span><br></pre></td></tr></table></figure></p>\n<p>　　下图是实例对象f1的控制台效果<br><img src=\"/2018/12/26/原型/proto03.png\" alt=\"\"></p>\n<blockquote>\n<p>【第二部分： Object】</p>\n</blockquote>\n<p><img src=\"/2018/12/26/原型/proto04.png\" alt=\"\"><br>　Foo.prototype是f1的原型对象，同时它也是实例对象。实际上，任何对象都可以看做是通过Object()构造函数的new操作实例化的对象<br>　　所以，Foo.prototype作为实例对象，它的构造函数是Object()，原型对象是Object.prototype。相应地，构造函数Object()的prototype属性指向原型对象Object.prototype；实例对象Foo.prototype的proto属性同样指向原型对象Object.prototype<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">console.log(Foo.prototype.__proto__ === Object.prototype);//true</span><br></pre></td></tr></table></figure></p>\n<p>　　实例对象Foo.prototype本身具有constructor属性，所以它会覆盖继承自原型对象Object.prototype的constructor属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">console.log(Foo.prototype.constructor === Foo);//true</span><br><span class=\"line\">console.log(Object.prototype.constructor === Object);//true</span><br><span class=\"line\">console.log(Foo.prototype.hasOwnProperty(&apos;constructor&apos;));//true</span><br></pre></td></tr></table></figure></p>\n<p>　　下图是实例对象Foo.prototype的控制台效果:<br><img src=\"/2018/12/26/原型/proto05.png\" alt=\"\"><br>如果Object.prototype作为实例对象的话，其原型对象是什么，结果是null。私以为，这可能也是typeof null的结果是’object’的原因之一吧<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Object.prototype.__proto__ === null);//true</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>【第三部分： Function】</p>\n</blockquote>\n<p><img src=\"/2018/12/26/原型/proto06.png\" alt=\"\"><br>前面已经介绍过，函数也是对象，只不过是具有特殊功能的对象而已。任何函数都可以看做是通过Function()构造函数的new操作实例化的结果</p>\n<p>　　如果把函数Foo当成实例对象的话，其构造函数是Function()，其原型对象是Function.prototype；类似地，函数Object的构造函数也是Function()，其原型对象是Function.prototype<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">console.log(Foo.__proto__ === Function.prototype);//true</span><br><span class=\"line\">console.log(Object.__proto__ === Function.prototype);//true</span><br></pre></td></tr></table></figure></p>\n<p>　　原型对象Function.prototype的constructor属性指向构造函数Function()；实例对象Object和Foo本身没有constructor属性，需要继承原型对象Function.prototype的constructor属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">console.log(Function.prototype.constructor === Function);//true</span><br><span class=\"line\">console.log(Foo.constructor === Function);//true</span><br><span class=\"line\">console.log(Foo.hasOwnProperty(&apos;constructor&apos;));//false</span><br><span class=\"line\">console.log(Object.constructor === Function);//true</span><br><span class=\"line\">console.log(Object.hasOwnProperty(&apos;constructor&apos;));//false</span><br></pre></td></tr></table></figure>\n<p>　　所有的函数都可以看成是构造函数Function()的new操作的实例化对象。那么，Function可以看成是调用其自身的new操作的实例化的结果</p>\n<p>　　所以，如果Function作为实例对象，其构造函数是Function，其原型对象是Function.prototype<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Function.__proto__ === Function.prototype);//true</span><br><span class=\"line\">console.log(Function.prototype.constructor === Function);//true</span><br><span class=\"line\">console.log(Function.prototype === Function.prototype);//true</span><br></pre></td></tr></table></figure></p>\n<p>　　如果Function.prototype作为实例对象的话，其原型对象是什么呢？和前面一样，所有的对象都可以看成是Object()构造函数的new操作的实例化结果。所以，Function.prototype的原型对象是Object.prototype，其原型函数是Object()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Function.prototype.__proto__ === Object.prototype);//true</span><br></pre></td></tr></table></figure></p>\n<p>　　第二部分介绍过，Object.prototype的原型对象是null<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Object.prototype.__proto__ === null);//true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>　　【1】函数(Function也是函数)是new Function的结果，所以函数可以作为实例对象，其构造函数是Function()，原型对象是Function.prototype</p>\n<p>　　【2】对象(函数也是对象)是new Object的结果，所以对象可以作为实例对象，其构造函数是Object()，原型对象是Object.prototype</p>\n<p>　　【3】Object.prototype的原型对象是null</p>\n<h1 id=\"JS继承的6种方式\"><a href=\"#JS继承的6种方式\" class=\"headerlink\" title=\"JS继承的6种方式\"></a>JS继承的6种方式</h1><blockquote>\n<p>[原型]</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// B是A的原型，A是B的构造函数</span><br><span class=\"line\">A.prototype = B</span><br><span class=\"line\">B.constructor = A</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>[约定]</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 父类</span><br><span class=\"line\">function Super()&#123;</span><br><span class=\"line\">  this.property = &apos;Super Property&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Super.prototype.getProperty = function()&#123;</span><br><span class=\"line\">  return this.property</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造函数继承\"><a href=\"#构造函数继承\" class=\"headerlink\" title=\"构造函数继承\"></a>构造函数继承</h2><p>1.基本思想<br>通过使用call、apply方法可以在新创建的对象上执行构造函数,用父类的构造函数来增加子类的实例</p>\n<p>2.具体实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 子类</span><br><span class=\"line\">function Sub()&#123;</span><br><span class=\"line\">  Super.call(this)</span><br><span class=\"line\">  this.property = &apos;Sub Property&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.优缺点<br>1）优点<br>简单明了，直接继承超类构造函数的属性和方法<br>2）缺点<br>无法继承原型链上的属性和方法</p>\n<h2 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h2><p>1.基本思想<br>利用原型链来实现继承，超类的一个实例作为子类的原型</p>\n<p>2.具体实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 子类</span><br><span class=\"line\">function Sub()&#123;</span><br><span class=\"line\">  this.property = &apos;Sub Property&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Sub.prototype = new Super()</span><br><span class=\"line\">// 注意这里new Super()生成的超类对象并没有constructor属性,故需添加上</span><br><span class=\"line\">Sub.prototype.constructor = Sub</span><br></pre></td></tr></table></figure></p>\n<p>3.优缺点<br>1）优点<br>简单明了，容易实现<br>实例是子类的实例，实际上也是父类的一个实例<br>父类新增原型方法/原型属性，子类都能访问到<br>2）缺点<br>所有子类的实例的原型都共享同一个超类实例的属性和方法<br>无法实现多继承</p>\n<h2 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h2><p>1.基本思想<br>利用构造继承和原型链组合</p>\n<p>2.具体实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 子类</span><br><span class=\"line\">function Sub()&#123;</span><br><span class=\"line\">  Super.call(this)</span><br><span class=\"line\">  this.property = &apos;Sub Property&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Sub.prototype = new Super()</span><br><span class=\"line\">// 注意这里new Super()生成的超类对象并没有constructor属性,故需添加上</span><br><span class=\"line\">Sub.prototype.constructor = Sub</span><br></pre></td></tr></table></figure></p>\n<p>3.优缺点<br>1）优点<br>解决了构造继承和原型链继承的两个问题<br>2）缺点<br>实际上子类上会拥有超类的两份属性，只是子类的属性覆盖了超类的属性</p>\n<h2 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h2><p>1.基本思想<br>采用原型式继承并不需要定义一个类，传入参数obj,生成一个继承obj对象的对象</p>\n<p>2.具体实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function objectCreate(obj)&#123;</span><br><span class=\"line\">  function F()&#123;&#125;</span><br><span class=\"line\">  F.prototype = obj</span><br><span class=\"line\">  return new F()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.优缺点<br>1）优点：<br>直接通过对象生成一个继承该对象的对象<br>2）缺点：</p>\n<h2 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h2><p>1.基本思想<br>创建一个仅仅用于封装继承过程的函数，然后在内部以某种方式增强对象，最后返回对象</p>\n<p>2.具体实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function objectCreate(obj)&#123;</span><br><span class=\"line\">  function F()&#123;&#125;</span><br><span class=\"line\">  F.prototype = obj</span><br><span class=\"line\">  return new F()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function createSubObj(superInstance)&#123;</span><br><span class=\"line\">  var clone = objectCreate(superInstance)</span><br><span class=\"line\">  clone.property = &apos;Sub Property&apos;</span><br><span class=\"line\">  return clone</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.优缺点<br>1）优点：<br>原型式继承的一种拓展<br>2）缺点：<br>依旧没有类的概念</p>\n<h2 id=\"六-寄生组合式继承\"><a href=\"#六-寄生组合式继承\" class=\"headerlink\" title=\"六.寄生组合式继承\"></a>六.寄生组合式继承</h2><p>1.基本思想<br>结合寄生式继承和组合式继承，完美实现不带两份超类属性的继承方式</p>\n<p>2.具体实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function inheritPrototype(Super,Sub)&#123;</span><br><span class=\"line\">  var superProtoClone = Object.Create(Super.prototype)</span><br><span class=\"line\">  superProtoClone.constructor = Sub</span><br><span class=\"line\">  Sub.prototype = Super</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function Sub()&#123;</span><br><span class=\"line\">  Super.call()</span><br><span class=\"line\">  Sub.property = &apos;Sub Property&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inheritPrototype(Super,Sub)</span><br></pre></td></tr></table></figure></p>\n<p>3.优缺点<br>1）优点：<br>完美实现继承，解决了组合式继承带两份属性的问题<br>2）缺点：<br>过于繁琐，故不如组合继承</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"prototype、proto和constructor的三者关系\"><a href=\"#prototype、proto和constructor的三者关系\" class=\"headerlink\" title=\"prototype、proto和constructor的三者关系\"></a>prototype、proto和constructor的三者关系</h1><p>javascript里的关系又多又乱。作用域链是一种单向的链式关系，还算简单清晰；this机制的调用关系，稍微有些复杂；而关于原型，则是prototype、proto和constructor的三角关系。本文先用一张图开宗明义，然后详细解释原型的三角关系<br><img src=\"/2018/12/26/原型/proto01.png\" alt=\"\"></p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p>上图中的复杂关系，实际上来源就两行代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>【构造函数】</li>\n</ul>\n<p>　　用来初始化新创建的对象的函数是构造函数。在例子中，Foo()函数是构造函数</p>\n<ul>\n<li>【实例对象】</li>\n</ul>\n<p>　　通过构造函数的new操作创建的对象是实例对象。可以用一个构造函数，构造多个实例对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">var f2 = new Foo;</span><br><span class=\"line\">console.log(f1 === f2);//false</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>【原型对象及prototype】</li>\n</ul>\n<p>　　构造函数有一个prototype属性，指向实例对象的原型对象。通过同一个构造函数实例化的多个对象具有相同的原型对象。经常使用原型对象来实现继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">Foo.prototype.a = 1;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">var f2 = new Foo;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(Foo.prototype.a);//1</span><br><span class=\"line\">console.log(f1.a);//1</span><br><span class=\"line\">console.log(f2.a);//1</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>【constructor】</li>\n</ul>\n<p>　　原型对象有一个constructor属性，指向该原型对象对应的构造函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">console.log(Foo.prototype.constructor === Foo);//true</span><br></pre></td></tr></table></figure></p>\n<p>　　由于实例对象可以继承原型对象的属性，所以实例对象也拥有constructor属性，同样指向原型对象对应的构造函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">console.log(f1.constructor === Foo);//true</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>【proto】</li>\n</ul>\n<p>　　实例对象有一个proto属性，指向该实例对象对应的原型对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">console.log(f1.__proto__ === Foo.prototype);//true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>　　概念介绍完了，现在对图示的关系进行详细说明<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>【第一部分： Foo】</p>\n</blockquote>\n<p><img src=\"/2018/12/26/原型/proto02.png\" alt=\"\"><br>实例对象f1是通过构造函数Foo()的new操作创建的。构造函数Foo()的原型对象是Foo.prototype；实例对象f1通过<strong>proto</strong>属性也指向原型对象Foo.prototype<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">console.log(f1.__proto === Foo.prototype);//true</span><br></pre></td></tr></table></figure></p>\n<p>　　实例对象f1本身并没有constructor属性，但它可以继承原型对象Foo.prototype的constructor属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">console.log(Foo.prototype.constructor === Foo);//true</span><br><span class=\"line\">console.log(f1.constructor === Foo);//true</span><br><span class=\"line\">console.log(f1.hasOwnProperty(&apos;constructor&apos;));//false</span><br></pre></td></tr></table></figure></p>\n<p>　　下图是实例对象f1的控制台效果<br><img src=\"/2018/12/26/原型/proto03.png\" alt=\"\"></p>\n<blockquote>\n<p>【第二部分： Object】</p>\n</blockquote>\n<p><img src=\"/2018/12/26/原型/proto04.png\" alt=\"\"><br>　Foo.prototype是f1的原型对象，同时它也是实例对象。实际上，任何对象都可以看做是通过Object()构造函数的new操作实例化的对象<br>　　所以，Foo.prototype作为实例对象，它的构造函数是Object()，原型对象是Object.prototype。相应地，构造函数Object()的prototype属性指向原型对象Object.prototype；实例对象Foo.prototype的proto属性同样指向原型对象Object.prototype<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">console.log(Foo.prototype.__proto__ === Object.prototype);//true</span><br></pre></td></tr></table></figure></p>\n<p>　　实例对象Foo.prototype本身具有constructor属性，所以它会覆盖继承自原型对象Object.prototype的constructor属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">console.log(Foo.prototype.constructor === Foo);//true</span><br><span class=\"line\">console.log(Object.prototype.constructor === Object);//true</span><br><span class=\"line\">console.log(Foo.prototype.hasOwnProperty(&apos;constructor&apos;));//true</span><br></pre></td></tr></table></figure></p>\n<p>　　下图是实例对象Foo.prototype的控制台效果:<br><img src=\"/2018/12/26/原型/proto05.png\" alt=\"\"><br>如果Object.prototype作为实例对象的话，其原型对象是什么，结果是null。私以为，这可能也是typeof null的结果是’object’的原因之一吧<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Object.prototype.__proto__ === null);//true</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>【第三部分： Function】</p>\n</blockquote>\n<p><img src=\"/2018/12/26/原型/proto06.png\" alt=\"\"><br>前面已经介绍过，函数也是对象，只不过是具有特殊功能的对象而已。任何函数都可以看做是通过Function()构造函数的new操作实例化的结果</p>\n<p>　　如果把函数Foo当成实例对象的话，其构造函数是Function()，其原型对象是Function.prototype；类似地，函数Object的构造函数也是Function()，其原型对象是Function.prototype<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">console.log(Foo.__proto__ === Function.prototype);//true</span><br><span class=\"line\">console.log(Object.__proto__ === Function.prototype);//true</span><br></pre></td></tr></table></figure></p>\n<p>　　原型对象Function.prototype的constructor属性指向构造函数Function()；实例对象Object和Foo本身没有constructor属性，需要继承原型对象Function.prototype的constructor属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Foo()&#123;&#125;;</span><br><span class=\"line\">var f1 = new Foo;</span><br><span class=\"line\">console.log(Function.prototype.constructor === Function);//true</span><br><span class=\"line\">console.log(Foo.constructor === Function);//true</span><br><span class=\"line\">console.log(Foo.hasOwnProperty(&apos;constructor&apos;));//false</span><br><span class=\"line\">console.log(Object.constructor === Function);//true</span><br><span class=\"line\">console.log(Object.hasOwnProperty(&apos;constructor&apos;));//false</span><br></pre></td></tr></table></figure>\n<p>　　所有的函数都可以看成是构造函数Function()的new操作的实例化对象。那么，Function可以看成是调用其自身的new操作的实例化的结果</p>\n<p>　　所以，如果Function作为实例对象，其构造函数是Function，其原型对象是Function.prototype<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Function.__proto__ === Function.prototype);//true</span><br><span class=\"line\">console.log(Function.prototype.constructor === Function);//true</span><br><span class=\"line\">console.log(Function.prototype === Function.prototype);//true</span><br></pre></td></tr></table></figure></p>\n<p>　　如果Function.prototype作为实例对象的话，其原型对象是什么呢？和前面一样，所有的对象都可以看成是Object()构造函数的new操作的实例化结果。所以，Function.prototype的原型对象是Object.prototype，其原型函数是Object()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Function.prototype.__proto__ === Object.prototype);//true</span><br></pre></td></tr></table></figure></p>\n<p>　　第二部分介绍过，Object.prototype的原型对象是null<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Object.prototype.__proto__ === null);//true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>　　【1】函数(Function也是函数)是new Function的结果，所以函数可以作为实例对象，其构造函数是Function()，原型对象是Function.prototype</p>\n<p>　　【2】对象(函数也是对象)是new Object的结果，所以对象可以作为实例对象，其构造函数是Object()，原型对象是Object.prototype</p>\n<p>　　【3】Object.prototype的原型对象是null</p>\n<h1 id=\"JS继承的6种方式\"><a href=\"#JS继承的6种方式\" class=\"headerlink\" title=\"JS继承的6种方式\"></a>JS继承的6种方式</h1><blockquote>\n<p>[原型]</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// B是A的原型，A是B的构造函数</span><br><span class=\"line\">A.prototype = B</span><br><span class=\"line\">B.constructor = A</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>[约定]</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 父类</span><br><span class=\"line\">function Super()&#123;</span><br><span class=\"line\">  this.property = &apos;Super Property&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Super.prototype.getProperty = function()&#123;</span><br><span class=\"line\">  return this.property</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"构造函数继承\"><a href=\"#构造函数继承\" class=\"headerlink\" title=\"构造函数继承\"></a>构造函数继承</h2><p>1.基本思想<br>通过使用call、apply方法可以在新创建的对象上执行构造函数,用父类的构造函数来增加子类的实例</p>\n<p>2.具体实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 子类</span><br><span class=\"line\">function Sub()&#123;</span><br><span class=\"line\">  Super.call(this)</span><br><span class=\"line\">  this.property = &apos;Sub Property&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.优缺点<br>1）优点<br>简单明了，直接继承超类构造函数的属性和方法<br>2）缺点<br>无法继承原型链上的属性和方法</p>\n<h2 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h2><p>1.基本思想<br>利用原型链来实现继承，超类的一个实例作为子类的原型</p>\n<p>2.具体实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 子类</span><br><span class=\"line\">function Sub()&#123;</span><br><span class=\"line\">  this.property = &apos;Sub Property&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Sub.prototype = new Super()</span><br><span class=\"line\">// 注意这里new Super()生成的超类对象并没有constructor属性,故需添加上</span><br><span class=\"line\">Sub.prototype.constructor = Sub</span><br></pre></td></tr></table></figure></p>\n<p>3.优缺点<br>1）优点<br>简单明了，容易实现<br>实例是子类的实例，实际上也是父类的一个实例<br>父类新增原型方法/原型属性，子类都能访问到<br>2）缺点<br>所有子类的实例的原型都共享同一个超类实例的属性和方法<br>无法实现多继承</p>\n<h2 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h2><p>1.基本思想<br>利用构造继承和原型链组合</p>\n<p>2.具体实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 子类</span><br><span class=\"line\">function Sub()&#123;</span><br><span class=\"line\">  Super.call(this)</span><br><span class=\"line\">  this.property = &apos;Sub Property&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Sub.prototype = new Super()</span><br><span class=\"line\">// 注意这里new Super()生成的超类对象并没有constructor属性,故需添加上</span><br><span class=\"line\">Sub.prototype.constructor = Sub</span><br></pre></td></tr></table></figure></p>\n<p>3.优缺点<br>1）优点<br>解决了构造继承和原型链继承的两个问题<br>2）缺点<br>实际上子类上会拥有超类的两份属性，只是子类的属性覆盖了超类的属性</p>\n<h2 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h2><p>1.基本思想<br>采用原型式继承并不需要定义一个类，传入参数obj,生成一个继承obj对象的对象</p>\n<p>2.具体实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function objectCreate(obj)&#123;</span><br><span class=\"line\">  function F()&#123;&#125;</span><br><span class=\"line\">  F.prototype = obj</span><br><span class=\"line\">  return new F()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.优缺点<br>1）优点：<br>直接通过对象生成一个继承该对象的对象<br>2）缺点：</p>\n<h2 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h2><p>1.基本思想<br>创建一个仅仅用于封装继承过程的函数，然后在内部以某种方式增强对象，最后返回对象</p>\n<p>2.具体实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function objectCreate(obj)&#123;</span><br><span class=\"line\">  function F()&#123;&#125;</span><br><span class=\"line\">  F.prototype = obj</span><br><span class=\"line\">  return new F()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function createSubObj(superInstance)&#123;</span><br><span class=\"line\">  var clone = objectCreate(superInstance)</span><br><span class=\"line\">  clone.property = &apos;Sub Property&apos;</span><br><span class=\"line\">  return clone</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.优缺点<br>1）优点：<br>原型式继承的一种拓展<br>2）缺点：<br>依旧没有类的概念</p>\n<h2 id=\"六-寄生组合式继承\"><a href=\"#六-寄生组合式继承\" class=\"headerlink\" title=\"六.寄生组合式继承\"></a>六.寄生组合式继承</h2><p>1.基本思想<br>结合寄生式继承和组合式继承，完美实现不带两份超类属性的继承方式</p>\n<p>2.具体实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function inheritPrototype(Super,Sub)&#123;</span><br><span class=\"line\">  var superProtoClone = Object.Create(Super.prototype)</span><br><span class=\"line\">  superProtoClone.constructor = Sub</span><br><span class=\"line\">  Sub.prototype = Super</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function Sub()&#123;</span><br><span class=\"line\">  Super.call()</span><br><span class=\"line\">  Sub.property = &apos;Sub Property&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">inheritPrototype(Super,Sub)</span><br></pre></td></tr></table></figure></p>\n<p>3.优缺点<br>1）优点：<br>完美实现继承，解决了组合式继承带两份属性的问题<br>2）缺点：<br>过于繁琐，故不如组合继承</p>\n"},{"title":"python基础(三)--数据类型","date":"2019-08-07T10:59:42.000Z","_content":"### Python Number(数字)\nPython Number 数据类型用于存储数值。\n\n数据类型是不允许改变的,这就意味着如果改变 Number 数据类型的值，将重新分配内存空间。\n\n以下实例在变量赋值时 Number 对象将被创建：\n```\nvar1 = 1\nvar2 = 10\n```\nPython 支持四种不同的数值类型：\n\n* 整型(Int) - 通常被称为是整型或整数，是正或负整数，不带小数点。\n* 长整型(long integers) - 无限大小的整数，整数最后是一个大写或小写的L。\n* 浮点型(floating point real values) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）\n* 复数(complex numbers) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。\n\n#### Python Number 类型转换\n![01.png](01.png)\n#### Python math 模块、cmath 模块\nPython 中数学运算常用的函数基本都在 math 模块、cmath 模块中。\n\nPython math 模块提供了许多对浮点数的数学运算函数。\n\nPython cmath 模块包含了一些用于复数运算的函数。\n\ncmath 模块的函数跟 math 模块函数基本一致，区别是 cmath 模块运算的是复数，math 模块运算的是数学运算。\n\n要使用 math 或 cmath 函数必须先导入：\n```\nimport math\n```\n#### Python数学函数\n![02.png](02.png)\n#### Python随机数函数\n![03.png](03.png)\n#### Python三角函数\n![04.png](04.png)\n#### Python数学常量\n![05.png](05.png)\n### Python 字符串\n可以使用引号('或\")来创建字符串\nPython访问字符串中的值\nPython不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。\n\nPython访问子字符串，可以使用方括号来截取字符串，如下实例：\n```\n#!/usr/bin/python\n \nvar1 = 'Hello World!'\nvar2 = \"Python Runoob\"\n \nprint \"var1[0]: \", var1[0]\nprint \"var2[1:5]: \", var2[1:5]\n```\nPython字符串更新\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nvar1 = 'Hello World!'\nprint \"更新字符串 :- \", var1[:6] + 'Runoob!'\n```\nPython转义字符\n![06.png](06.png)\n![07.png](07.png)\nPython字符串运算符\n![08.png](08.png)\nPython 字符串格式化 \n![09.png](09.png)\n```\n#!/usr/bin/python\n\nprint \"My name is %s and weight is %d kg!\" % ('Zara', 21) \n```\n以上实例输出结果：\n```\nMy name is Zara and weight is 21 kg!\n```\nPython三引号（triple quotes）\n\npython中三引号可以将复杂的字符串进行复制:\npython三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。\n三引号的语法是一对连续的单引号或者双引号（通常都是成对的用）。\n\nUnicode 字符串\n引号前小写的\"u\"表示这里创建的是一个 Unicode 字符串。如果你想加入一个特殊字符，可以使用 Python 的 Unicode-Escape 编码。\n### Python 列表(List)\n序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。\nPython有6个序列的内置类型，但最常见的是列表和元组。\n序列都可以进行的操作包括索引，切片，加，乘，检查成员。\n此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。\n列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。\n列表的数据项不需要具有相同的类型\n创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：\n```\nlist1 = ['physics', 'chemistry', 1997, 2000]\nlist2 = [1, 2, 3, 4, 5 ]\nlist3 = [\"a\", \"b\", \"c\", \"d\"]\n```\n访问列表中的值\n使用下标索引来访问列表中的值，同样你也可以使用方括号的形式截取字符，如下所示：\n```\n#!/usr/bin/python\n \nlist1 = ['physics', 'chemistry', 1997, 2000]\nlist2 = [1, 2, 3, 4, 5, 6, 7 ]\n \nprint \"list1[0]: \", list1[0]\nprint \"list2[1:5]: \", list2[1:5]\n```\n更新列表\n你可以对列表的数据项进行修改或更新，你也可以使用append()方法来添加列表项，如下所示：\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nlist = []          ## 空列表\nlist.append('Google')   ## 使用 append() 添加元素\nlist.append('Runoob')\nprint list\n```\n删除列表元素\n```\n#!/usr/bin/python\n \nlist1 = ['physics', 'chemistry', 1997, 2000]\n \nprint list1\ndel list1[2]\nprint \"After deleting value at index 2 : \"\nprint list1\n```\nPython列表脚本操作符\n列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。\n![10.png](10.png)\nPython列表截取\n```\n>>>L = ['Google', 'Runoob', 'Taobao']\n>>> L[2]\n'Taobao'\n>>> L[-2]\n'Runoob'\n>>> L[1:]\n['Runoob', 'Taobao']\n>>>\n```\n![11.png](11.png)\nPython列表函数&方法\n![12.png](12.png)\n![13.png](13.png)\n### Python 元组\nPython的元组与列表类似，不同之处在于元组的元素不能修改。\n元组使用小括号，列表使用方括号。\n元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。\n```\ntup1 = ('physics', 'chemistry', 1997, 2000)\ntup2 = (1, 2, 3, 4, 5 )\ntup3 = \"a\", \"b\", \"c\", \"d\"\n```\n创建空元组\n```\ntup1 = ()\n```\n元组中只包含一个元素时，需要在元素后面添加逗号\n```\ntup1 = (50,)\n```\n访问元组\n元组可以使用下标索引来访问元组中的值\n```\n#!/usr/bin/python\n \ntup1 = ('physics', 'chemistry', 1997, 2000)\ntup2 = (1, 2, 3, 4, 5, 6, 7 )\n \nprint \"tup1[0]: \", tup1[0]\nprint \"tup2[1:5]: \", tup2[1:5]\n```\n修改元组\n元组中的元素值是不允许修改的，但我们可以对元组进行连接组合\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \ntup1 = (12, 34.56)\ntup2 = ('abc', 'xyz')\n \n# 以下修改元组元素操作是非法的。\n# tup1[0] = 100\n \n# 创建一个新的元组\ntup3 = tup1 + tup2\nprint tup3\n```\n以上实例输出结果：\n```\n(12, 34.56, 'abc', 'xyz')\n```\n删除元组\n元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组\n```\n#!/usr/bin/python\n \ntup = ('physics', 'chemistry', 1997, 2000)\n \nprint tup\ndel tup\nprint \"After deleting tup : \"\nprint tup\n```\n元组运算符\n与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组\n![14.png](14.png)\n元组索引，截取\n![15.png](15.png)\n无关闭分隔符\n任意无符号的对象，以逗号隔开，默认为元组\n元组内置函数\n![16.png](16.png)\n### Python 字典(Dictionary)\n字典是另一种可变容器模型，且可存储任意类型对象。\n\n字典的每个键值 key=>value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 {} 中 ,格式如下所示：\n```\nd = {key1 : value1, key2 : value2 }\n```\n键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一。\n```\n>>>dict = {'a': 1, 'b': 2, 'b': '3'}\n>>> dict['b']\n'3'\n>>> dict\n{'a': 1, 'b': '3'}\n```\n值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。\n\n一个简单的字典实例：\n```\ndict = {'Alice': '2341', 'Beth': '9102', 'Cecil': '3258'}\n```\n访问字典里的值\n```\n#!/usr/bin/python\n \ndict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}\n \nprint \"dict['Name']: \", dict['Name']\nprint \"dict['Age']: \", dict['Age']\n```\n修改字典\n向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对\n```\n#!/usr/bin/python\n \ndict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}\n \ndict['Age'] = 8 # 更新\ndict['School'] = \"RUNOOB\" # 添加\n \n \nprint \"dict['Age']: \", dict['Age']\nprint \"dict['School']: \", dict['School']\n```\n删除字典元素\n能删单一的元素也能清空字典，清空只需一项操作。\n\n显示删除一个字典用del命令.\n### Python 日期和时间\nPython 程序能用很多方式处理日期和时间，转换日期格式是一个常见的功能。\n\nPython 提供了一个 time 和 calendar 模块可以用于格式化日期和时间。\n\n时间间隔是以秒为单位的浮点小数。\n\n每个时间戳都以自从1970年1月1日午夜（历元）经过了多长时间来表示。\n\nPython 的 time 模块下有很多函数可以转换常见日期格式。如函数time.time()用于获取当前时间戳\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nimport time;  # 引入time模块\n \nticks = time.time()\nprint \"当前时间戳为:\", ticks\n```\n以上实例输出结果：\n```\n当前时间戳为: 1459994552.51\n```\n获取当前时间\n```\nlocaltime = time.localtime(time.time())\nprint \"本地时间为 :\", localtime\n```\n\n获取格式化的时间\n```\nimport time\n \nlocaltime = time.asctime( time.localtime(time.time()) )\nprint \"本地时间为 :\", localtime\n```\n格式化日期\n我们可以使用 time 模块的 strftime 方法来格式化日期，：\n```\ntime.strftime(format[, t])\n```\n获取某月日历\n```\nimport calendar\n \ncal = calendar.month(2016, 1)\nprint \"以下输出2016年1月份的日历:\"\nprint cal\n```\n### Python 函数\n函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。\n\n函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数。\n#### 定义一个函数\n你可以定义一个由自己想要功能的函数，以下是简单的规则：\n\n* 函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。\n* 任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。\n* 函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。\n* 函数内容以冒号起始，并且缩进。\n* return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。\n\n#### 函数调用\n定义一个函数只给了函数一个名称，指定了函数里包含的参数，和代码块结构。\n\n这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从Python提示符执行。\n\n如下实例调用了printme（）函数：\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \n# 定义函数\ndef printme( str ):\n   \"打印任何传入的字符串\"\n   print str;\n   return;\n \n# 调用函数\nprintme(\"我要调用用户自定义函数!\");\nprintme(\"再次调用同一函数\");\n```","source":"_posts/python基础3.md","raw":"---\ntitle: python基础(三)--数据类型\ndate: 2019-08-07 18:59:42\ncategories:\n- python\ntags: [python基础]\n---\n### Python Number(数字)\nPython Number 数据类型用于存储数值。\n\n数据类型是不允许改变的,这就意味着如果改变 Number 数据类型的值，将重新分配内存空间。\n\n以下实例在变量赋值时 Number 对象将被创建：\n```\nvar1 = 1\nvar2 = 10\n```\nPython 支持四种不同的数值类型：\n\n* 整型(Int) - 通常被称为是整型或整数，是正或负整数，不带小数点。\n* 长整型(long integers) - 无限大小的整数，整数最后是一个大写或小写的L。\n* 浮点型(floating point real values) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）\n* 复数(complex numbers) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。\n\n#### Python Number 类型转换\n![01.png](01.png)\n#### Python math 模块、cmath 模块\nPython 中数学运算常用的函数基本都在 math 模块、cmath 模块中。\n\nPython math 模块提供了许多对浮点数的数学运算函数。\n\nPython cmath 模块包含了一些用于复数运算的函数。\n\ncmath 模块的函数跟 math 模块函数基本一致，区别是 cmath 模块运算的是复数，math 模块运算的是数学运算。\n\n要使用 math 或 cmath 函数必须先导入：\n```\nimport math\n```\n#### Python数学函数\n![02.png](02.png)\n#### Python随机数函数\n![03.png](03.png)\n#### Python三角函数\n![04.png](04.png)\n#### Python数学常量\n![05.png](05.png)\n### Python 字符串\n可以使用引号('或\")来创建字符串\nPython访问字符串中的值\nPython不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。\n\nPython访问子字符串，可以使用方括号来截取字符串，如下实例：\n```\n#!/usr/bin/python\n \nvar1 = 'Hello World!'\nvar2 = \"Python Runoob\"\n \nprint \"var1[0]: \", var1[0]\nprint \"var2[1:5]: \", var2[1:5]\n```\nPython字符串更新\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\nvar1 = 'Hello World!'\nprint \"更新字符串 :- \", var1[:6] + 'Runoob!'\n```\nPython转义字符\n![06.png](06.png)\n![07.png](07.png)\nPython字符串运算符\n![08.png](08.png)\nPython 字符串格式化 \n![09.png](09.png)\n```\n#!/usr/bin/python\n\nprint \"My name is %s and weight is %d kg!\" % ('Zara', 21) \n```\n以上实例输出结果：\n```\nMy name is Zara and weight is 21 kg!\n```\nPython三引号（triple quotes）\n\npython中三引号可以将复杂的字符串进行复制:\npython三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。\n三引号的语法是一对连续的单引号或者双引号（通常都是成对的用）。\n\nUnicode 字符串\n引号前小写的\"u\"表示这里创建的是一个 Unicode 字符串。如果你想加入一个特殊字符，可以使用 Python 的 Unicode-Escape 编码。\n### Python 列表(List)\n序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。\nPython有6个序列的内置类型，但最常见的是列表和元组。\n序列都可以进行的操作包括索引，切片，加，乘，检查成员。\n此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。\n列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。\n列表的数据项不需要具有相同的类型\n创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：\n```\nlist1 = ['physics', 'chemistry', 1997, 2000]\nlist2 = [1, 2, 3, 4, 5 ]\nlist3 = [\"a\", \"b\", \"c\", \"d\"]\n```\n访问列表中的值\n使用下标索引来访问列表中的值，同样你也可以使用方括号的形式截取字符，如下所示：\n```\n#!/usr/bin/python\n \nlist1 = ['physics', 'chemistry', 1997, 2000]\nlist2 = [1, 2, 3, 4, 5, 6, 7 ]\n \nprint \"list1[0]: \", list1[0]\nprint \"list2[1:5]: \", list2[1:5]\n```\n更新列表\n你可以对列表的数据项进行修改或更新，你也可以使用append()方法来添加列表项，如下所示：\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nlist = []          ## 空列表\nlist.append('Google')   ## 使用 append() 添加元素\nlist.append('Runoob')\nprint list\n```\n删除列表元素\n```\n#!/usr/bin/python\n \nlist1 = ['physics', 'chemistry', 1997, 2000]\n \nprint list1\ndel list1[2]\nprint \"After deleting value at index 2 : \"\nprint list1\n```\nPython列表脚本操作符\n列表对 + 和 * 的操作符与字符串相似。+ 号用于组合列表，* 号用于重复列表。\n![10.png](10.png)\nPython列表截取\n```\n>>>L = ['Google', 'Runoob', 'Taobao']\n>>> L[2]\n'Taobao'\n>>> L[-2]\n'Runoob'\n>>> L[1:]\n['Runoob', 'Taobao']\n>>>\n```\n![11.png](11.png)\nPython列表函数&方法\n![12.png](12.png)\n![13.png](13.png)\n### Python 元组\nPython的元组与列表类似，不同之处在于元组的元素不能修改。\n元组使用小括号，列表使用方括号。\n元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。\n```\ntup1 = ('physics', 'chemistry', 1997, 2000)\ntup2 = (1, 2, 3, 4, 5 )\ntup3 = \"a\", \"b\", \"c\", \"d\"\n```\n创建空元组\n```\ntup1 = ()\n```\n元组中只包含一个元素时，需要在元素后面添加逗号\n```\ntup1 = (50,)\n```\n访问元组\n元组可以使用下标索引来访问元组中的值\n```\n#!/usr/bin/python\n \ntup1 = ('physics', 'chemistry', 1997, 2000)\ntup2 = (1, 2, 3, 4, 5, 6, 7 )\n \nprint \"tup1[0]: \", tup1[0]\nprint \"tup2[1:5]: \", tup2[1:5]\n```\n修改元组\n元组中的元素值是不允许修改的，但我们可以对元组进行连接组合\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \ntup1 = (12, 34.56)\ntup2 = ('abc', 'xyz')\n \n# 以下修改元组元素操作是非法的。\n# tup1[0] = 100\n \n# 创建一个新的元组\ntup3 = tup1 + tup2\nprint tup3\n```\n以上实例输出结果：\n```\n(12, 34.56, 'abc', 'xyz')\n```\n删除元组\n元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组\n```\n#!/usr/bin/python\n \ntup = ('physics', 'chemistry', 1997, 2000)\n \nprint tup\ndel tup\nprint \"After deleting tup : \"\nprint tup\n```\n元组运算符\n与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组\n![14.png](14.png)\n元组索引，截取\n![15.png](15.png)\n无关闭分隔符\n任意无符号的对象，以逗号隔开，默认为元组\n元组内置函数\n![16.png](16.png)\n### Python 字典(Dictionary)\n字典是另一种可变容器模型，且可存储任意类型对象。\n\n字典的每个键值 key=>value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 {} 中 ,格式如下所示：\n```\nd = {key1 : value1, key2 : value2 }\n```\n键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一。\n```\n>>>dict = {'a': 1, 'b': 2, 'b': '3'}\n>>> dict['b']\n'3'\n>>> dict\n{'a': 1, 'b': '3'}\n```\n值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。\n\n一个简单的字典实例：\n```\ndict = {'Alice': '2341', 'Beth': '9102', 'Cecil': '3258'}\n```\n访问字典里的值\n```\n#!/usr/bin/python\n \ndict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}\n \nprint \"dict['Name']: \", dict['Name']\nprint \"dict['Age']: \", dict['Age']\n```\n修改字典\n向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对\n```\n#!/usr/bin/python\n \ndict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}\n \ndict['Age'] = 8 # 更新\ndict['School'] = \"RUNOOB\" # 添加\n \n \nprint \"dict['Age']: \", dict['Age']\nprint \"dict['School']: \", dict['School']\n```\n删除字典元素\n能删单一的元素也能清空字典，清空只需一项操作。\n\n显示删除一个字典用del命令.\n### Python 日期和时间\nPython 程序能用很多方式处理日期和时间，转换日期格式是一个常见的功能。\n\nPython 提供了一个 time 和 calendar 模块可以用于格式化日期和时间。\n\n时间间隔是以秒为单位的浮点小数。\n\n每个时间戳都以自从1970年1月1日午夜（历元）经过了多长时间来表示。\n\nPython 的 time 模块下有很多函数可以转换常见日期格式。如函数time.time()用于获取当前时间戳\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \nimport time;  # 引入time模块\n \nticks = time.time()\nprint \"当前时间戳为:\", ticks\n```\n以上实例输出结果：\n```\n当前时间戳为: 1459994552.51\n```\n获取当前时间\n```\nlocaltime = time.localtime(time.time())\nprint \"本地时间为 :\", localtime\n```\n\n获取格式化的时间\n```\nimport time\n \nlocaltime = time.asctime( time.localtime(time.time()) )\nprint \"本地时间为 :\", localtime\n```\n格式化日期\n我们可以使用 time 模块的 strftime 方法来格式化日期，：\n```\ntime.strftime(format[, t])\n```\n获取某月日历\n```\nimport calendar\n \ncal = calendar.month(2016, 1)\nprint \"以下输出2016年1月份的日历:\"\nprint cal\n```\n### Python 函数\n函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。\n\n函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数。\n#### 定义一个函数\n你可以定义一个由自己想要功能的函数，以下是简单的规则：\n\n* 函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。\n* 任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。\n* 函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。\n* 函数内容以冒号起始，并且缩进。\n* return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。\n\n#### 函数调用\n定义一个函数只给了函数一个名称，指定了函数里包含的参数，和代码块结构。\n\n这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从Python提示符执行。\n\n如下实例调用了printme（）函数：\n```\n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n \n# 定义函数\ndef printme( str ):\n   \"打印任何传入的字符串\"\n   print str;\n   return;\n \n# 调用函数\nprintme(\"我要调用用户自定义函数!\");\nprintme(\"再次调用同一函数\");\n```","slug":"python基础3","published":1,"updated":"2019-08-07T12:04:56.010Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck14n5cyu006bt09zyrmq021m","content":"<h3 id=\"Python-Number-数字\"><a href=\"#Python-Number-数字\" class=\"headerlink\" title=\"Python Number(数字)\"></a>Python Number(数字)</h3><p>Python Number 数据类型用于存储数值。</p>\n<p>数据类型是不允许改变的,这就意味着如果改变 Number 数据类型的值，将重新分配内存空间。</p>\n<p>以下实例在变量赋值时 Number 对象将被创建：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var1 = 1</span><br><span class=\"line\">var2 = 10</span><br></pre></td></tr></table></figure></p>\n<p>Python 支持四种不同的数值类型：</p>\n<ul>\n<li>整型(Int) - 通常被称为是整型或整数，是正或负整数，不带小数点。</li>\n<li>长整型(long integers) - 无限大小的整数，整数最后是一个大写或小写的L。</li>\n<li>浮点型(floating point real values) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）</li>\n<li>复数(complex numbers) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</li>\n</ul>\n<h4 id=\"Python-Number-类型转换\"><a href=\"#Python-Number-类型转换\" class=\"headerlink\" title=\"Python Number 类型转换\"></a>Python Number 类型转换</h4><p><img src=\"/2019/08/07/python基础3/01.png\" alt=\"01.png\"></p>\n<h4 id=\"Python-math-模块、cmath-模块\"><a href=\"#Python-math-模块、cmath-模块\" class=\"headerlink\" title=\"Python math 模块、cmath 模块\"></a>Python math 模块、cmath 模块</h4><p>Python 中数学运算常用的函数基本都在 math 模块、cmath 模块中。</p>\n<p>Python math 模块提供了许多对浮点数的数学运算函数。</p>\n<p>Python cmath 模块包含了一些用于复数运算的函数。</p>\n<p>cmath 模块的函数跟 math 模块函数基本一致，区别是 cmath 模块运算的是复数，math 模块运算的是数学运算。</p>\n<p>要使用 math 或 cmath 函数必须先导入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import math</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Python数学函数\"><a href=\"#Python数学函数\" class=\"headerlink\" title=\"Python数学函数\"></a>Python数学函数</h4><p><img src=\"/2019/08/07/python基础3/02.png\" alt=\"02.png\"></p>\n<h4 id=\"Python随机数函数\"><a href=\"#Python随机数函数\" class=\"headerlink\" title=\"Python随机数函数\"></a>Python随机数函数</h4><p><img src=\"/2019/08/07/python基础3/03.png\" alt=\"03.png\"></p>\n<h4 id=\"Python三角函数\"><a href=\"#Python三角函数\" class=\"headerlink\" title=\"Python三角函数\"></a>Python三角函数</h4><p><img src=\"/2019/08/07/python基础3/04.png\" alt=\"04.png\"></p>\n<h4 id=\"Python数学常量\"><a href=\"#Python数学常量\" class=\"headerlink\" title=\"Python数学常量\"></a>Python数学常量</h4><p><img src=\"/2019/08/07/python基础3/05.png\" alt=\"05.png\"></p>\n<h3 id=\"Python-字符串\"><a href=\"#Python-字符串\" class=\"headerlink\" title=\"Python 字符串\"></a>Python 字符串</h3><p>可以使用引号(‘或”)来创建字符串<br>Python访问字符串中的值<br>Python不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。</p>\n<p>Python访问子字符串，可以使用方括号来截取字符串，如下实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"> </span><br><span class=\"line\">var1 = &apos;Hello World!&apos;</span><br><span class=\"line\">var2 = &quot;Python Runoob&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">print &quot;var1[0]: &quot;, var1[0]</span><br><span class=\"line\">print &quot;var2[1:5]: &quot;, var2[1:5]</span><br></pre></td></tr></table></figure></p>\n<p>Python字符串更新<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\">var1 = &apos;Hello World!&apos;</span><br><span class=\"line\">print &quot;更新字符串 :- &quot;, var1[:6] + &apos;Runoob!&apos;</span><br></pre></td></tr></table></figure></p>\n<p>Python转义字符<br><img src=\"/2019/08/07/python基础3/06.png\" alt=\"06.png\"><br><img src=\"/2019/08/07/python基础3/07.png\" alt=\"07.png\"><br>Python字符串运算符<br><img src=\"/2019/08/07/python基础3/08.png\" alt=\"08.png\"><br>Python 字符串格式化<br><img src=\"/2019/08/07/python基础3/09.png\" alt=\"09.png\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"></span><br><span class=\"line\">print &quot;My name is %s and weight is %d kg!&quot; % (&apos;Zara&apos;, 21)</span><br></pre></td></tr></table></figure></p>\n<p>以上实例输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">My name is Zara and weight is 21 kg!</span><br></pre></td></tr></table></figure></p>\n<p>Python三引号（triple quotes）</p>\n<p>python中三引号可以将复杂的字符串进行复制:<br>python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。<br>三引号的语法是一对连续的单引号或者双引号（通常都是成对的用）。</p>\n<p>Unicode 字符串<br>引号前小写的”u”表示这里创建的是一个 Unicode 字符串。如果你想加入一个特殊字符，可以使用 Python 的 Unicode-Escape 编码。</p>\n<h3 id=\"Python-列表-List\"><a href=\"#Python-列表-List\" class=\"headerlink\" title=\"Python 列表(List)\"></a>Python 列表(List)</h3><p>序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。<br>Python有6个序列的内置类型，但最常见的是列表和元组。<br>序列都可以进行的操作包括索引，切片，加，乘，检查成员。<br>此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。<br>列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。<br>列表的数据项不需要具有相同的类型<br>创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list1 = [&apos;physics&apos;, &apos;chemistry&apos;, 1997, 2000]</span><br><span class=\"line\">list2 = [1, 2, 3, 4, 5 ]</span><br><span class=\"line\">list3 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>访问列表中的值<br>使用下标索引来访问列表中的值，同样你也可以使用方括号的形式截取字符，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"> </span><br><span class=\"line\">list1 = [&apos;physics&apos;, &apos;chemistry&apos;, 1997, 2000]</span><br><span class=\"line\">list2 = [1, 2, 3, 4, 5, 6, 7 ]</span><br><span class=\"line\"> </span><br><span class=\"line\">print &quot;list1[0]: &quot;, list1[0]</span><br><span class=\"line\">print &quot;list2[1:5]: &quot;, list2[1:5]</span><br></pre></td></tr></table></figure></p>\n<p>更新列表<br>你可以对列表的数据项进行修改或更新，你也可以使用append()方法来添加列表项，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">list = []          ## 空列表</span><br><span class=\"line\">list.append(&apos;Google&apos;)   ## 使用 append() 添加元素</span><br><span class=\"line\">list.append(&apos;Runoob&apos;)</span><br><span class=\"line\">print list</span><br></pre></td></tr></table></figure></p>\n<p>删除列表元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"> </span><br><span class=\"line\">list1 = [&apos;physics&apos;, &apos;chemistry&apos;, 1997, 2000]</span><br><span class=\"line\"> </span><br><span class=\"line\">print list1</span><br><span class=\"line\">del list1[2]</span><br><span class=\"line\">print &quot;After deleting value at index 2 : &quot;</span><br><span class=\"line\">print list1</span><br></pre></td></tr></table></figure></p>\n<p>Python列表脚本操作符<br>列表对 + 和 <em> 的操作符与字符串相似。+ 号用于组合列表，</em> 号用于重复列表。<br><img src=\"/2019/08/07/python基础3/10.png\" alt=\"10.png\"><br>Python列表截取<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;L = [&apos;Google&apos;, &apos;Runoob&apos;, &apos;Taobao&apos;]</span><br><span class=\"line\">&gt;&gt;&gt; L[2]</span><br><span class=\"line\">&apos;Taobao&apos;</span><br><span class=\"line\">&gt;&gt;&gt; L[-2]</span><br><span class=\"line\">&apos;Runoob&apos;</span><br><span class=\"line\">&gt;&gt;&gt; L[1:]</span><br><span class=\"line\">[&apos;Runoob&apos;, &apos;Taobao&apos;]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2019/08/07/python基础3/11.png\" alt=\"11.png\"><br>Python列表函数&amp;方法<br><img src=\"/2019/08/07/python基础3/12.png\" alt=\"12.png\"><br><img src=\"/2019/08/07/python基础3/13.png\" alt=\"13.png\"></p>\n<h3 id=\"Python-元组\"><a href=\"#Python-元组\" class=\"headerlink\" title=\"Python 元组\"></a>Python 元组</h3><p>Python的元组与列表类似，不同之处在于元组的元素不能修改。<br>元组使用小括号，列表使用方括号。<br>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tup1 = (&apos;physics&apos;, &apos;chemistry&apos;, 1997, 2000)</span><br><span class=\"line\">tup2 = (1, 2, 3, 4, 5 )</span><br><span class=\"line\">tup3 = &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;</span><br></pre></td></tr></table></figure></p>\n<p>创建空元组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tup1 = ()</span><br></pre></td></tr></table></figure></p>\n<p>元组中只包含一个元素时，需要在元素后面添加逗号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tup1 = (50,)</span><br></pre></td></tr></table></figure></p>\n<p>访问元组<br>元组可以使用下标索引来访问元组中的值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"> </span><br><span class=\"line\">tup1 = (&apos;physics&apos;, &apos;chemistry&apos;, 1997, 2000)</span><br><span class=\"line\">tup2 = (1, 2, 3, 4, 5, 6, 7 )</span><br><span class=\"line\"> </span><br><span class=\"line\">print &quot;tup1[0]: &quot;, tup1[0]</span><br><span class=\"line\">print &quot;tup2[1:5]: &quot;, tup2[1:5]</span><br></pre></td></tr></table></figure></p>\n<p>修改元组<br>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">tup1 = (12, 34.56)</span><br><span class=\"line\">tup2 = (&apos;abc&apos;, &apos;xyz&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\"># 以下修改元组元素操作是非法的。</span><br><span class=\"line\"># tup1[0] = 100</span><br><span class=\"line\"> </span><br><span class=\"line\"># 创建一个新的元组</span><br><span class=\"line\">tup3 = tup1 + tup2</span><br><span class=\"line\">print tup3</span><br></pre></td></tr></table></figure></p>\n<p>以上实例输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(12, 34.56, &apos;abc&apos;, &apos;xyz&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>删除元组<br>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"> </span><br><span class=\"line\">tup = (&apos;physics&apos;, &apos;chemistry&apos;, 1997, 2000)</span><br><span class=\"line\"> </span><br><span class=\"line\">print tup</span><br><span class=\"line\">del tup</span><br><span class=\"line\">print &quot;After deleting tup : &quot;</span><br><span class=\"line\">print tup</span><br></pre></td></tr></table></figure></p>\n<p>元组运算符<br>与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组<br><img src=\"/2019/08/07/python基础3/14.png\" alt=\"14.png\"><br>元组索引，截取<br><img src=\"/2019/08/07/python基础3/15.png\" alt=\"15.png\"><br>无关闭分隔符<br>任意无符号的对象，以逗号隔开，默认为元组<br>元组内置函数<br><img src=\"/2019/08/07/python基础3/16.png\" alt=\"16.png\"></p>\n<h3 id=\"Python-字典-Dictionary\"><a href=\"#Python-字典-Dictionary\" class=\"headerlink\" title=\"Python 字典(Dictionary)\"></a>Python 字典(Dictionary)</h3><p>字典是另一种可变容器模型，且可存储任意类型对象。</p>\n<p>字典的每个键值 key=&gt;value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 {} 中 ,格式如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = &#123;key1 : value1, key2 : value2 &#125;</span><br></pre></td></tr></table></figure></p>\n<p>键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;dict = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;b&apos;: &apos;3&apos;&#125;</span><br><span class=\"line\">&gt;&gt;&gt; dict[&apos;b&apos;]</span><br><span class=\"line\">&apos;3&apos;</span><br><span class=\"line\">&gt;&gt;&gt; dict</span><br><span class=\"line\">&#123;&apos;a&apos;: 1, &apos;b&apos;: &apos;3&apos;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。</p>\n<p>一个简单的字典实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict = &#123;&apos;Alice&apos;: &apos;2341&apos;, &apos;Beth&apos;: &apos;9102&apos;, &apos;Cecil&apos;: &apos;3258&apos;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>访问字典里的值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"> </span><br><span class=\"line\">dict = &#123;&apos;Name&apos;: &apos;Zara&apos;, &apos;Age&apos;: 7, &apos;Class&apos;: &apos;First&apos;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">print &quot;dict[&apos;Name&apos;]: &quot;, dict[&apos;Name&apos;]</span><br><span class=\"line\">print &quot;dict[&apos;Age&apos;]: &quot;, dict[&apos;Age&apos;]</span><br></pre></td></tr></table></figure></p>\n<p>修改字典<br>向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"> </span><br><span class=\"line\">dict = &#123;&apos;Name&apos;: &apos;Zara&apos;, &apos;Age&apos;: 7, &apos;Class&apos;: &apos;First&apos;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">dict[&apos;Age&apos;] = 8 # 更新</span><br><span class=\"line\">dict[&apos;School&apos;] = &quot;RUNOOB&quot; # 添加</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">print &quot;dict[&apos;Age&apos;]: &quot;, dict[&apos;Age&apos;]</span><br><span class=\"line\">print &quot;dict[&apos;School&apos;]: &quot;, dict[&apos;School&apos;]</span><br></pre></td></tr></table></figure></p>\n<p>删除字典元素<br>能删单一的元素也能清空字典，清空只需一项操作。</p>\n<p>显示删除一个字典用del命令.</p>\n<h3 id=\"Python-日期和时间\"><a href=\"#Python-日期和时间\" class=\"headerlink\" title=\"Python 日期和时间\"></a>Python 日期和时间</h3><p>Python 程序能用很多方式处理日期和时间，转换日期格式是一个常见的功能。</p>\n<p>Python 提供了一个 time 和 calendar 模块可以用于格式化日期和时间。</p>\n<p>时间间隔是以秒为单位的浮点小数。</p>\n<p>每个时间戳都以自从1970年1月1日午夜（历元）经过了多长时间来表示。</p>\n<p>Python 的 time 模块下有很多函数可以转换常见日期格式。如函数time.time()用于获取当前时间戳<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">import time;  # 引入time模块</span><br><span class=\"line\"> </span><br><span class=\"line\">ticks = time.time()</span><br><span class=\"line\">print &quot;当前时间戳为:&quot;, ticks</span><br></pre></td></tr></table></figure></p>\n<p>以上实例输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前时间戳为: 1459994552.51</span><br></pre></td></tr></table></figure></p>\n<p>获取当前时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localtime = time.localtime(time.time())</span><br><span class=\"line\">print &quot;本地时间为 :&quot;, localtime</span><br></pre></td></tr></table></figure></p>\n<p>获取格式化的时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"> </span><br><span class=\"line\">localtime = time.asctime( time.localtime(time.time()) )</span><br><span class=\"line\">print &quot;本地时间为 :&quot;, localtime</span><br></pre></td></tr></table></figure></p>\n<p>格式化日期<br>我们可以使用 time 模块的 strftime 方法来格式化日期，：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time.strftime(format[, t])</span><br></pre></td></tr></table></figure></p>\n<p>获取某月日历<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import calendar</span><br><span class=\"line\"> </span><br><span class=\"line\">cal = calendar.month(2016, 1)</span><br><span class=\"line\">print &quot;以下输出2016年1月份的日历:&quot;</span><br><span class=\"line\">print cal</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Python-函数\"><a href=\"#Python-函数\" class=\"headerlink\" title=\"Python 函数\"></a>Python 函数</h3><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。</p>\n<p>函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数。</p>\n<h4 id=\"定义一个函数\"><a href=\"#定义一个函数\" class=\"headerlink\" title=\"定义一个函数\"></a>定义一个函数</h4><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p>\n<ul>\n<li>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。</li>\n<li>任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。</li>\n<li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li>\n<li>函数内容以冒号起始，并且缩进。</li>\n<li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li>\n</ul>\n<h4 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h4><p>定义一个函数只给了函数一个名称，指定了函数里包含的参数，和代码块结构。</p>\n<p>这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从Python提示符执行。</p>\n<p>如下实例调用了printme（）函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\"># 定义函数</span><br><span class=\"line\">def printme( str ):</span><br><span class=\"line\">   &quot;打印任何传入的字符串&quot;</span><br><span class=\"line\">   print str;</span><br><span class=\"line\">   return;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 调用函数</span><br><span class=\"line\">printme(&quot;我要调用用户自定义函数!&quot;);</span><br><span class=\"line\">printme(&quot;再次调用同一函数&quot;);</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Python-Number-数字\"><a href=\"#Python-Number-数字\" class=\"headerlink\" title=\"Python Number(数字)\"></a>Python Number(数字)</h3><p>Python Number 数据类型用于存储数值。</p>\n<p>数据类型是不允许改变的,这就意味着如果改变 Number 数据类型的值，将重新分配内存空间。</p>\n<p>以下实例在变量赋值时 Number 对象将被创建：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var1 = 1</span><br><span class=\"line\">var2 = 10</span><br></pre></td></tr></table></figure></p>\n<p>Python 支持四种不同的数值类型：</p>\n<ul>\n<li>整型(Int) - 通常被称为是整型或整数，是正或负整数，不带小数点。</li>\n<li>长整型(long integers) - 无限大小的整数，整数最后是一个大写或小写的L。</li>\n<li>浮点型(floating point real values) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）</li>\n<li>复数(complex numbers) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</li>\n</ul>\n<h4 id=\"Python-Number-类型转换\"><a href=\"#Python-Number-类型转换\" class=\"headerlink\" title=\"Python Number 类型转换\"></a>Python Number 类型转换</h4><p><img src=\"/2019/08/07/python基础3/01.png\" alt=\"01.png\"></p>\n<h4 id=\"Python-math-模块、cmath-模块\"><a href=\"#Python-math-模块、cmath-模块\" class=\"headerlink\" title=\"Python math 模块、cmath 模块\"></a>Python math 模块、cmath 模块</h4><p>Python 中数学运算常用的函数基本都在 math 模块、cmath 模块中。</p>\n<p>Python math 模块提供了许多对浮点数的数学运算函数。</p>\n<p>Python cmath 模块包含了一些用于复数运算的函数。</p>\n<p>cmath 模块的函数跟 math 模块函数基本一致，区别是 cmath 模块运算的是复数，math 模块运算的是数学运算。</p>\n<p>要使用 math 或 cmath 函数必须先导入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import math</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Python数学函数\"><a href=\"#Python数学函数\" class=\"headerlink\" title=\"Python数学函数\"></a>Python数学函数</h4><p><img src=\"/2019/08/07/python基础3/02.png\" alt=\"02.png\"></p>\n<h4 id=\"Python随机数函数\"><a href=\"#Python随机数函数\" class=\"headerlink\" title=\"Python随机数函数\"></a>Python随机数函数</h4><p><img src=\"/2019/08/07/python基础3/03.png\" alt=\"03.png\"></p>\n<h4 id=\"Python三角函数\"><a href=\"#Python三角函数\" class=\"headerlink\" title=\"Python三角函数\"></a>Python三角函数</h4><p><img src=\"/2019/08/07/python基础3/04.png\" alt=\"04.png\"></p>\n<h4 id=\"Python数学常量\"><a href=\"#Python数学常量\" class=\"headerlink\" title=\"Python数学常量\"></a>Python数学常量</h4><p><img src=\"/2019/08/07/python基础3/05.png\" alt=\"05.png\"></p>\n<h3 id=\"Python-字符串\"><a href=\"#Python-字符串\" class=\"headerlink\" title=\"Python 字符串\"></a>Python 字符串</h3><p>可以使用引号(‘或”)来创建字符串<br>Python访问字符串中的值<br>Python不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。</p>\n<p>Python访问子字符串，可以使用方括号来截取字符串，如下实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"> </span><br><span class=\"line\">var1 = &apos;Hello World!&apos;</span><br><span class=\"line\">var2 = &quot;Python Runoob&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">print &quot;var1[0]: &quot;, var1[0]</span><br><span class=\"line\">print &quot;var2[1:5]: &quot;, var2[1:5]</span><br></pre></td></tr></table></figure></p>\n<p>Python字符串更新<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\">var1 = &apos;Hello World!&apos;</span><br><span class=\"line\">print &quot;更新字符串 :- &quot;, var1[:6] + &apos;Runoob!&apos;</span><br></pre></td></tr></table></figure></p>\n<p>Python转义字符<br><img src=\"/2019/08/07/python基础3/06.png\" alt=\"06.png\"><br><img src=\"/2019/08/07/python基础3/07.png\" alt=\"07.png\"><br>Python字符串运算符<br><img src=\"/2019/08/07/python基础3/08.png\" alt=\"08.png\"><br>Python 字符串格式化<br><img src=\"/2019/08/07/python基础3/09.png\" alt=\"09.png\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"></span><br><span class=\"line\">print &quot;My name is %s and weight is %d kg!&quot; % (&apos;Zara&apos;, 21)</span><br></pre></td></tr></table></figure></p>\n<p>以上实例输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">My name is Zara and weight is 21 kg!</span><br></pre></td></tr></table></figure></p>\n<p>Python三引号（triple quotes）</p>\n<p>python中三引号可以将复杂的字符串进行复制:<br>python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。<br>三引号的语法是一对连续的单引号或者双引号（通常都是成对的用）。</p>\n<p>Unicode 字符串<br>引号前小写的”u”表示这里创建的是一个 Unicode 字符串。如果你想加入一个特殊字符，可以使用 Python 的 Unicode-Escape 编码。</p>\n<h3 id=\"Python-列表-List\"><a href=\"#Python-列表-List\" class=\"headerlink\" title=\"Python 列表(List)\"></a>Python 列表(List)</h3><p>序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。<br>Python有6个序列的内置类型，但最常见的是列表和元组。<br>序列都可以进行的操作包括索引，切片，加，乘，检查成员。<br>此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。<br>列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。<br>列表的数据项不需要具有相同的类型<br>创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list1 = [&apos;physics&apos;, &apos;chemistry&apos;, 1997, 2000]</span><br><span class=\"line\">list2 = [1, 2, 3, 4, 5 ]</span><br><span class=\"line\">list3 = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>访问列表中的值<br>使用下标索引来访问列表中的值，同样你也可以使用方括号的形式截取字符，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"> </span><br><span class=\"line\">list1 = [&apos;physics&apos;, &apos;chemistry&apos;, 1997, 2000]</span><br><span class=\"line\">list2 = [1, 2, 3, 4, 5, 6, 7 ]</span><br><span class=\"line\"> </span><br><span class=\"line\">print &quot;list1[0]: &quot;, list1[0]</span><br><span class=\"line\">print &quot;list2[1:5]: &quot;, list2[1:5]</span><br></pre></td></tr></table></figure></p>\n<p>更新列表<br>你可以对列表的数据项进行修改或更新，你也可以使用append()方法来添加列表项，如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">list = []          ## 空列表</span><br><span class=\"line\">list.append(&apos;Google&apos;)   ## 使用 append() 添加元素</span><br><span class=\"line\">list.append(&apos;Runoob&apos;)</span><br><span class=\"line\">print list</span><br></pre></td></tr></table></figure></p>\n<p>删除列表元素<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"> </span><br><span class=\"line\">list1 = [&apos;physics&apos;, &apos;chemistry&apos;, 1997, 2000]</span><br><span class=\"line\"> </span><br><span class=\"line\">print list1</span><br><span class=\"line\">del list1[2]</span><br><span class=\"line\">print &quot;After deleting value at index 2 : &quot;</span><br><span class=\"line\">print list1</span><br></pre></td></tr></table></figure></p>\n<p>Python列表脚本操作符<br>列表对 + 和 <em> 的操作符与字符串相似。+ 号用于组合列表，</em> 号用于重复列表。<br><img src=\"/2019/08/07/python基础3/10.png\" alt=\"10.png\"><br>Python列表截取<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;L = [&apos;Google&apos;, &apos;Runoob&apos;, &apos;Taobao&apos;]</span><br><span class=\"line\">&gt;&gt;&gt; L[2]</span><br><span class=\"line\">&apos;Taobao&apos;</span><br><span class=\"line\">&gt;&gt;&gt; L[-2]</span><br><span class=\"line\">&apos;Runoob&apos;</span><br><span class=\"line\">&gt;&gt;&gt; L[1:]</span><br><span class=\"line\">[&apos;Runoob&apos;, &apos;Taobao&apos;]</span><br><span class=\"line\">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/2019/08/07/python基础3/11.png\" alt=\"11.png\"><br>Python列表函数&amp;方法<br><img src=\"/2019/08/07/python基础3/12.png\" alt=\"12.png\"><br><img src=\"/2019/08/07/python基础3/13.png\" alt=\"13.png\"></p>\n<h3 id=\"Python-元组\"><a href=\"#Python-元组\" class=\"headerlink\" title=\"Python 元组\"></a>Python 元组</h3><p>Python的元组与列表类似，不同之处在于元组的元素不能修改。<br>元组使用小括号，列表使用方括号。<br>元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tup1 = (&apos;physics&apos;, &apos;chemistry&apos;, 1997, 2000)</span><br><span class=\"line\">tup2 = (1, 2, 3, 4, 5 )</span><br><span class=\"line\">tup3 = &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;</span><br></pre></td></tr></table></figure></p>\n<p>创建空元组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tup1 = ()</span><br></pre></td></tr></table></figure></p>\n<p>元组中只包含一个元素时，需要在元素后面添加逗号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tup1 = (50,)</span><br></pre></td></tr></table></figure></p>\n<p>访问元组<br>元组可以使用下标索引来访问元组中的值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"> </span><br><span class=\"line\">tup1 = (&apos;physics&apos;, &apos;chemistry&apos;, 1997, 2000)</span><br><span class=\"line\">tup2 = (1, 2, 3, 4, 5, 6, 7 )</span><br><span class=\"line\"> </span><br><span class=\"line\">print &quot;tup1[0]: &quot;, tup1[0]</span><br><span class=\"line\">print &quot;tup2[1:5]: &quot;, tup2[1:5]</span><br></pre></td></tr></table></figure></p>\n<p>修改元组<br>元组中的元素值是不允许修改的，但我们可以对元组进行连接组合<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">tup1 = (12, 34.56)</span><br><span class=\"line\">tup2 = (&apos;abc&apos;, &apos;xyz&apos;)</span><br><span class=\"line\"> </span><br><span class=\"line\"># 以下修改元组元素操作是非法的。</span><br><span class=\"line\"># tup1[0] = 100</span><br><span class=\"line\"> </span><br><span class=\"line\"># 创建一个新的元组</span><br><span class=\"line\">tup3 = tup1 + tup2</span><br><span class=\"line\">print tup3</span><br></pre></td></tr></table></figure></p>\n<p>以上实例输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(12, 34.56, &apos;abc&apos;, &apos;xyz&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>删除元组<br>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"> </span><br><span class=\"line\">tup = (&apos;physics&apos;, &apos;chemistry&apos;, 1997, 2000)</span><br><span class=\"line\"> </span><br><span class=\"line\">print tup</span><br><span class=\"line\">del tup</span><br><span class=\"line\">print &quot;After deleting tup : &quot;</span><br><span class=\"line\">print tup</span><br></pre></td></tr></table></figure></p>\n<p>元组运算符<br>与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组<br><img src=\"/2019/08/07/python基础3/14.png\" alt=\"14.png\"><br>元组索引，截取<br><img src=\"/2019/08/07/python基础3/15.png\" alt=\"15.png\"><br>无关闭分隔符<br>任意无符号的对象，以逗号隔开，默认为元组<br>元组内置函数<br><img src=\"/2019/08/07/python基础3/16.png\" alt=\"16.png\"></p>\n<h3 id=\"Python-字典-Dictionary\"><a href=\"#Python-字典-Dictionary\" class=\"headerlink\" title=\"Python 字典(Dictionary)\"></a>Python 字典(Dictionary)</h3><p>字典是另一种可变容器模型，且可存储任意类型对象。</p>\n<p>字典的每个键值 key=&gt;value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 {} 中 ,格式如下所示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = &#123;key1 : value1, key2 : value2 &#125;</span><br></pre></td></tr></table></figure></p>\n<p>键一般是唯一的，如果重复最后的一个键值对会替换前面的，值不需要唯一。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;dict = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;b&apos;: &apos;3&apos;&#125;</span><br><span class=\"line\">&gt;&gt;&gt; dict[&apos;b&apos;]</span><br><span class=\"line\">&apos;3&apos;</span><br><span class=\"line\">&gt;&gt;&gt; dict</span><br><span class=\"line\">&#123;&apos;a&apos;: 1, &apos;b&apos;: &apos;3&apos;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。</p>\n<p>一个简单的字典实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict = &#123;&apos;Alice&apos;: &apos;2341&apos;, &apos;Beth&apos;: &apos;9102&apos;, &apos;Cecil&apos;: &apos;3258&apos;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>访问字典里的值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"> </span><br><span class=\"line\">dict = &#123;&apos;Name&apos;: &apos;Zara&apos;, &apos;Age&apos;: 7, &apos;Class&apos;: &apos;First&apos;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">print &quot;dict[&apos;Name&apos;]: &quot;, dict[&apos;Name&apos;]</span><br><span class=\"line\">print &quot;dict[&apos;Age&apos;]: &quot;, dict[&apos;Age&apos;]</span><br></pre></td></tr></table></figure></p>\n<p>修改字典<br>向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"> </span><br><span class=\"line\">dict = &#123;&apos;Name&apos;: &apos;Zara&apos;, &apos;Age&apos;: 7, &apos;Class&apos;: &apos;First&apos;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">dict[&apos;Age&apos;] = 8 # 更新</span><br><span class=\"line\">dict[&apos;School&apos;] = &quot;RUNOOB&quot; # 添加</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">print &quot;dict[&apos;Age&apos;]: &quot;, dict[&apos;Age&apos;]</span><br><span class=\"line\">print &quot;dict[&apos;School&apos;]: &quot;, dict[&apos;School&apos;]</span><br></pre></td></tr></table></figure></p>\n<p>删除字典元素<br>能删单一的元素也能清空字典，清空只需一项操作。</p>\n<p>显示删除一个字典用del命令.</p>\n<h3 id=\"Python-日期和时间\"><a href=\"#Python-日期和时间\" class=\"headerlink\" title=\"Python 日期和时间\"></a>Python 日期和时间</h3><p>Python 程序能用很多方式处理日期和时间，转换日期格式是一个常见的功能。</p>\n<p>Python 提供了一个 time 和 calendar 模块可以用于格式化日期和时间。</p>\n<p>时间间隔是以秒为单位的浮点小数。</p>\n<p>每个时间戳都以自从1970年1月1日午夜（历元）经过了多长时间来表示。</p>\n<p>Python 的 time 模块下有很多函数可以转换常见日期格式。如函数time.time()用于获取当前时间戳<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\">import time;  # 引入time模块</span><br><span class=\"line\"> </span><br><span class=\"line\">ticks = time.time()</span><br><span class=\"line\">print &quot;当前时间戳为:&quot;, ticks</span><br></pre></td></tr></table></figure></p>\n<p>以上实例输出结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前时间戳为: 1459994552.51</span><br></pre></td></tr></table></figure></p>\n<p>获取当前时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localtime = time.localtime(time.time())</span><br><span class=\"line\">print &quot;本地时间为 :&quot;, localtime</span><br></pre></td></tr></table></figure></p>\n<p>获取格式化的时间<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"> </span><br><span class=\"line\">localtime = time.asctime( time.localtime(time.time()) )</span><br><span class=\"line\">print &quot;本地时间为 :&quot;, localtime</span><br></pre></td></tr></table></figure></p>\n<p>格式化日期<br>我们可以使用 time 模块的 strftime 方法来格式化日期，：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time.strftime(format[, t])</span><br></pre></td></tr></table></figure></p>\n<p>获取某月日历<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import calendar</span><br><span class=\"line\"> </span><br><span class=\"line\">cal = calendar.month(2016, 1)</span><br><span class=\"line\">print &quot;以下输出2016年1月份的日历:&quot;</span><br><span class=\"line\">print cal</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Python-函数\"><a href=\"#Python-函数\" class=\"headerlink\" title=\"Python 函数\"></a>Python 函数</h3><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。</p>\n<p>函数能提高应用的模块性，和代码的重复利用率。你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数。</p>\n<h4 id=\"定义一个函数\"><a href=\"#定义一个函数\" class=\"headerlink\" title=\"定义一个函数\"></a>定义一个函数</h4><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p>\n<ul>\n<li>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。</li>\n<li>任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。</li>\n<li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li>\n<li>函数内容以冒号起始，并且缩进。</li>\n<li>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li>\n</ul>\n<h4 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h4><p>定义一个函数只给了函数一个名称，指定了函数里包含的参数，和代码块结构。</p>\n<p>这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从Python提示符执行。</p>\n<p>如下实例调用了printme（）函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/python</span><br><span class=\"line\"># -*- coding: UTF-8 -*-</span><br><span class=\"line\"> </span><br><span class=\"line\"># 定义函数</span><br><span class=\"line\">def printme( str ):</span><br><span class=\"line\">   &quot;打印任何传入的字符串&quot;</span><br><span class=\"line\">   print str;</span><br><span class=\"line\">   return;</span><br><span class=\"line\"> </span><br><span class=\"line\"># 调用函数</span><br><span class=\"line\">printme(&quot;我要调用用户自定义函数!&quot;);</span><br><span class=\"line\">printme(&quot;再次调用同一函数&quot;);</span><br></pre></td></tr></table></figure></p>\n"},{"title":"CSS","date":"2018-12-26T09:28:15.000Z","_content":"## css中font-size为0的妙用(消除内联元素间的间隔)\n","source":"_posts/css..md","raw":"---\ntitle: CSS\ndate: 2018-12-26 17:28:15\ncategories: \n- 基础前端技术\ntags: [CSS]\n---\n## css中font-size为0的妙用(消除内联元素间的间隔)\n","slug":"css.","published":1,"updated":"2019-10-27T13:06:06.707Z","_id":"ck26411fr0000pk9zd8373teg","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"css中font-size为0的妙用-消除内联元素间的间隔\"><a href=\"#css中font-size为0的妙用-消除内联元素间的间隔\" class=\"headerlink\" title=\"css中font-size为0的妙用(消除内联元素间的间隔)\"></a>css中font-size为0的妙用(消除内联元素间的间隔)</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"css中font-size为0的妙用-消除内联元素间的间隔\"><a href=\"#css中font-size为0的妙用-消除内联元素间的间隔\" class=\"headerlink\" title=\"css中font-size为0的妙用(消除内联元素间的间隔)\"></a>css中font-size为0的妙用(消除内联元素间的间隔)</h2>"}],"PostAsset":[{"_id":"source/_posts/ArcGIS-API-for-JS04/06.png","slug":"06.png","post":"ck14n5co90005t09z08pmk116","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS05/11.png","slug":"11.png","post":"ck14n5cob0006t09zgks3mz65","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS07/07.png","slug":"07.png","post":"ck14n5crk000ct09zq3rih8t2","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS07/08.png","slug":"08.png","post":"ck14n5crk000ct09zq3rih8t2","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS04/02.png","slug":"02.png","post":"ck14n5co90005t09z08pmk116","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS07/02.png","slug":"02.png","post":"ck14n5crk000ct09zq3rih8t2","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS11/04.png","slug":"04.png","post":"ck14n5ct6000qt09zd3g8zpni","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS24/04.png","slug":"04.png","post":"ck14n5cuf001qt09zohzcuao7","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS05/10.png","slug":"10.png","post":"ck14n5cob0006t09zgks3mz65","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS07/04.png","slug":"04.png","post":"ck14n5crk000ct09zq3rih8t2","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS08/01.png","slug":"01.png","post":"ck14n5csv000kt09zwqgznosl","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS07/06.png","slug":"06.png","post":"ck14n5crk000ct09zq3rih8t2","modified":0,"renderable":0},{"_id":"source/_posts/node5/01.png","slug":"01.png","post":"ck14n5cvi0037t09zq593ufxj","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS09/01.png","slug":"01.png","post":"ck14n5crv000ht09zfcokg9tr","modified":0,"renderable":0},{"_id":"source/_posts/git/01.png","slug":"01.png","post":"ck14n5cur0029t09z49zahpj3","modified":0,"renderable":0},{"_id":"source/_posts/node2/event_loop.jpg","slug":"event_loop.jpg","post":"ck14n5cv6002pt09zrcurg61r","modified":0,"renderable":0},{"_id":"source/_posts/node4/01.png","slug":"01.png","post":"ck14n5cvg0033t09z2izzpju2","modified":0,"renderable":0},{"_id":"source/_posts/理解cookie、session、localStorage、sessionStorage之不同/http12.png","slug":"http12.png","post":"ck14n5cwx004nt09z6kjmup8b","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS20/01.png","slug":"01.png","post":"ck14n5cua001kt09z809cqhdn","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS20/02.png","slug":"02.png","post":"ck14n5cua001kt09z809cqhdn","modified":0,"renderable":0},{"_id":"source/_posts/python基础4/01.png","slug":"01.png","post":"ck14n5cwn0048t09zudc61cjc","modified":0,"renderable":0},{"_id":"source/_posts/python基础4/02.png","slug":"02.png","post":"ck14n5cwn0048t09zudc61cjc","modified":0,"renderable":0},{"_id":"source/_posts/时序动画/01.png","slug":"01.png","post":"ck14n5cws004ft09zbtkcbzfx","modified":0,"renderable":0},{"_id":"source/_posts/时序动画/02.png","slug":"02.png","post":"ck14n5cws004ft09zbtkcbzfx","modified":0,"renderable":0},{"_id":"source/_posts/盒模型/box1.png","slug":"box1.png","post":"ck14n5cwu004it09zty0rul9h","modified":0,"renderable":0},{"_id":"source/_posts/盒模型/box2.png","slug":"box2.png","post":"ck14n5cwu004it09zty0rul9h","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS01/01.png","slug":"01.png","post":"ck14n5co50004t09zptwturjw","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS01/02.png","slug":"02.png","post":"ck14n5co50004t09zptwturjw","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS01/03.png","slug":"03.png","post":"ck14n5co50004t09zptwturjw","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS17/01.png","slug":"01.png","post":"ck14n5ctq0012t09zli7fc7xx","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS17/02.png","slug":"02.png","post":"ck14n5ctq0012t09zli7fc7xx","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS17/03.png","slug":"03.png","post":"ck14n5ctq0012t09zli7fc7xx","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS21/01.png","slug":"01.png","post":"ck14n5cuc001nt09zqn06fsj0","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS21/02.png","slug":"02.png","post":"ck14n5cuc001nt09zqn06fsj0","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS21/03.png","slug":"03.png","post":"ck14n5cuc001nt09zqn06fsj0","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS02/01.png","slug":"01.png","post":"ck14n5cnp0000t09znzshtu00","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS02/02.png","slug":"02.png","post":"ck14n5cnp0000t09znzshtu00","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS02/03.png","slug":"03.png","post":"ck14n5cnp0000t09znzshtu00","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS02/04.png","slug":"04.png","post":"ck14n5cnp0000t09znzshtu00","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS15/01.png","slug":"01.png","post":"ck14n5ctk000wt09zfld3bd64","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS15/02.png","slug":"02.png","post":"ck14n5ctk000wt09zfld3bd64","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS15/03.png","slug":"03.png","post":"ck14n5ctk000wt09zfld3bd64","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS15/04.png","slug":"04.png","post":"ck14n5ctk000wt09zfld3bd64","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS16/01.png","slug":"01.png","post":"ck14n5cu20018t09zmoo3gp0s","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS16/02.png","slug":"02.png","post":"ck14n5cu20018t09zmoo3gp0s","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS16/03.png","slug":"03.png","post":"ck14n5cu20018t09zmoo3gp0s","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS16/04.png","slug":"04.png","post":"ck14n5cu20018t09zmoo3gp0s","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS23/01.png","slug":"01.png","post":"ck14n5cu6001et09zut3zoz8d","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS23/02.png","slug":"02.png","post":"ck14n5cu6001et09zut3zoz8d","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS23/03.png","slug":"03.png","post":"ck14n5cu6001et09zut3zoz8d","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS23/04.png","slug":"04.png","post":"ck14n5cu6001et09zut3zoz8d","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS24/01.png","slug":"01.png","post":"ck14n5cuf001qt09zohzcuao7","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS24/02.png","slug":"02.png","post":"ck14n5cuf001qt09zohzcuao7","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS24/03.png","slug":"03.png","post":"ck14n5cuf001qt09zohzcuao7","modified":0,"renderable":0},{"_id":"source/_posts/WebSocket/01.png","slug":"01.png","post":"ck14n5cup0026t09z17dupb8v","modified":0,"renderable":0},{"_id":"source/_posts/WebSocket/02.png","slug":"02.png","post":"ck14n5cup0026t09z17dupb8v","modified":0,"renderable":0},{"_id":"source/_posts/WebSocket/03.png","slug":"03.png","post":"ck14n5cup0026t09z17dupb8v","modified":0,"renderable":0},{"_id":"source/_posts/WebSocket/04.png","slug":"04.png","post":"ck14n5cup0026t09z17dupb8v","modified":0,"renderable":0},{"_id":"source/_posts/python基础2/01.gif","slug":"01.gif","post":"ck14n5cvw003ft09zidwsxysr","modified":0,"renderable":0},{"_id":"source/_posts/python基础2/01.png","slug":"01.png","post":"ck14n5cvw003ft09zidwsxysr","modified":0,"renderable":0},{"_id":"source/_posts/python基础2/02.gif","slug":"02.gif","post":"ck14n5cvw003ft09zidwsxysr","modified":0,"renderable":0},{"_id":"source/_posts/python基础2/02.png","slug":"02.png","post":"ck14n5cvw003ft09zidwsxysr","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS11/01.png","slug":"01.png","post":"ck14n5ct6000qt09zd3g8zpni","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS11/02.png","slug":"02.png","post":"ck14n5ct6000qt09zd3g8zpni","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS11/03.png","slug":"03.png","post":"ck14n5ct6000qt09zd3g8zpni","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS11/05.png","slug":"05.png","post":"ck14n5ct6000qt09zd3g8zpni","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS14/01.png","slug":"01.png","post":"ck14n5ctn000zt09zhydq53je","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS14/02.png","slug":"02.png","post":"ck14n5ctn000zt09zhydq53je","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS14/03.png","slug":"03.png","post":"ck14n5ctn000zt09zhydq53je","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS14/04.png","slug":"04.png","post":"ck14n5ctn000zt09zhydq53je","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS14/05.png","slug":"05.png","post":"ck14n5ctn000zt09zhydq53je","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS22/01.png","slug":"01.png","post":"ck14n5cul0020t09zfy3fqjgc","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS22/02.png","slug":"02.png","post":"ck14n5cul0020t09zfy3fqjgc","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS22/03.png","slug":"03.png","post":"ck14n5cul0020t09zfy3fqjgc","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS22/04.png","slug":"04.png","post":"ck14n5cul0020t09zfy3fqjgc","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS22/05.png","slug":"05.png","post":"ck14n5cul0020t09zfy3fqjgc","modified":0,"renderable":0},{"_id":"source/_posts/tcp/OSI.jpg","slug":"OSI.jpg","post":"ck14n5cw7003qt09zu4oftp1o","modified":0,"renderable":0},{"_id":"source/_posts/tcp/OSI01.jpg","slug":"OSI01.jpg","post":"ck14n5cw7003qt09zu4oftp1o","modified":0,"renderable":0},{"_id":"source/_posts/tcp/tcp01.jpg","slug":"tcp01.jpg","post":"ck14n5cw7003qt09zu4oftp1o","modified":0,"renderable":0},{"_id":"source/_posts/tcp/tcp02.jpg","slug":"tcp02.jpg","post":"ck14n5cw7003qt09zu4oftp1o","modified":0,"renderable":0},{"_id":"source/_posts/tcp/tcp03.jpg","slug":"tcp03.jpg","post":"ck14n5cw7003qt09zu4oftp1o","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS19/1.png","slug":"1.png","post":"ck14n5cu4001bt09z13cj7b0h","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS19/2.png","slug":"2.png","post":"ck14n5cu4001bt09z13cj7b0h","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS19/3.png","slug":"3.png","post":"ck14n5cu4001bt09z13cj7b0h","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS19/4.png","slug":"4.png","post":"ck14n5cu4001bt09z13cj7b0h","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS19/5.png","slug":"5.png","post":"ck14n5cu4001bt09z13cj7b0h","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS19/6.png","slug":"6.png","post":"ck14n5cu4001bt09z13cj7b0h","modified":0,"renderable":0},{"_id":"source/_posts/node5/02.png","slug":"02.png","post":"ck14n5cvi0037t09zq593ufxj","modified":0,"renderable":0},{"_id":"source/_posts/node5/03.png","slug":"03.png","post":"ck14n5cvi0037t09zq593ufxj","modified":0,"renderable":0},{"_id":"source/_posts/node5/04.png","slug":"04.png","post":"ck14n5cvi0037t09zq593ufxj","modified":0,"renderable":0},{"_id":"source/_posts/node5/05.png","slug":"05.png","post":"ck14n5cvi0037t09zq593ufxj","modified":0,"renderable":0},{"_id":"source/_posts/node5/06.png","slug":"06.png","post":"ck14n5cvi0037t09zq593ufxj","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS06/01.png","slug":"01.png","post":"ck14n5cr6000at09z8cnxzl3n","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS06/02.png","slug":"02.png","post":"ck14n5cr6000at09z8cnxzl3n","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS06/03.png","slug":"03.png","post":"ck14n5cr6000at09z8cnxzl3n","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS06/04.png","slug":"04.png","post":"ck14n5cr6000at09z8cnxzl3n","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS06/05.png","slug":"05.png","post":"ck14n5cr6000at09z8cnxzl3n","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS06/06.png","slug":"06.png","post":"ck14n5cr6000at09z8cnxzl3n","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS06/07.png","slug":"07.png","post":"ck14n5cr6000at09z8cnxzl3n","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS08/02.png","slug":"02.png","post":"ck14n5csv000kt09zwqgznosl","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS08/03.png","slug":"03.png","post":"ck14n5csv000kt09zwqgznosl","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS08/04.png","slug":"04.png","post":"ck14n5csv000kt09zwqgznosl","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS08/05.png","slug":"05.png","post":"ck14n5csv000kt09zwqgznosl","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS08/06.png","slug":"06.png","post":"ck14n5csv000kt09zwqgznosl","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS08/07.png","slug":"07.png","post":"ck14n5csv000kt09zwqgznosl","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS04/01.png","slug":"01.png","post":"ck14n5co90005t09z08pmk116","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS04/03.png","slug":"03.png","post":"ck14n5co90005t09z08pmk116","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS04/04.png","slug":"04.png","post":"ck14n5co90005t09z08pmk116","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS04/05.png","slug":"05.png","post":"ck14n5co90005t09z08pmk116","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS04/07.png","slug":"07.png","post":"ck14n5co90005t09z08pmk116","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS04/08.png","slug":"08.png","post":"ck14n5co90005t09z08pmk116","modified":0,"renderable":0},{"_id":"source/_posts/node6/01.png","slug":"01.png","post":"ck14n5cvk0039t09zkkj5q89v","modified":0,"renderable":0},{"_id":"source/_posts/node6/02.png","slug":"02.png","post":"ck14n5cvk0039t09zkkj5q89v","modified":0,"renderable":0},{"_id":"source/_posts/node6/03.png","slug":"03.png","post":"ck14n5cvk0039t09zkkj5q89v","modified":0,"renderable":0},{"_id":"source/_posts/node6/04.png","slug":"04.png","post":"ck14n5cvk0039t09zkkj5q89v","modified":0,"renderable":0},{"_id":"source/_posts/node6/05.png","slug":"05.png","post":"ck14n5cvk0039t09zkkj5q89v","modified":0,"renderable":0},{"_id":"source/_posts/node6/06.png","slug":"06.png","post":"ck14n5cvk0039t09zkkj5q89v","modified":0,"renderable":0},{"_id":"source/_posts/node6/07.png","slug":"07.png","post":"ck14n5cvk0039t09zkkj5q89v","modified":0,"renderable":0},{"_id":"source/_posts/node6/08.png","slug":"08.png","post":"ck14n5cvk0039t09zkkj5q89v","modified":0,"renderable":0},{"_id":"source/_posts/node6/09.png","slug":"09.png","post":"ck14n5cvk0039t09zkkj5q89v","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS03/01.png","slug":"01.png","post":"ck14n5cny0001t09zc9rw4o17","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS03/02.png","slug":"02.png","post":"ck14n5cny0001t09zc9rw4o17","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS03/03.png","slug":"03.png","post":"ck14n5cny0001t09zc9rw4o17","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS03/04.png","slug":"04.png","post":"ck14n5cny0001t09zc9rw4o17","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS03/05.png","slug":"05.png","post":"ck14n5cny0001t09zc9rw4o17","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS03/06.png","slug":"06.png","post":"ck14n5cny0001t09zc9rw4o17","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS03/07.png","slug":"07.png","post":"ck14n5cny0001t09zc9rw4o17","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS03/08.png","slug":"08.png","post":"ck14n5cny0001t09zc9rw4o17","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS03/09.png","slug":"09.png","post":"ck14n5cny0001t09zc9rw4o17","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS03/10.png","slug":"10.png","post":"ck14n5cny0001t09zc9rw4o17","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS07/01.png","slug":"01.png","post":"ck14n5crk000ct09zq3rih8t2","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS07/03.png","slug":"03.png","post":"ck14n5crk000ct09zq3rih8t2","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS07/05.png","slug":"05.png","post":"ck14n5crk000ct09zq3rih8t2","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS07/09.png","slug":"09.png","post":"ck14n5crk000ct09zq3rih8t2","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS07/10.png","slug":"10.png","post":"ck14n5crk000ct09zq3rih8t2","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS05/01.png","slug":"01.png","post":"ck14n5cob0006t09zgks3mz65","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS05/02.png","slug":"02.png","post":"ck14n5cob0006t09zgks3mz65","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS05/03.png","slug":"03.png","post":"ck14n5cob0006t09zgks3mz65","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS05/04.png","slug":"04.png","post":"ck14n5cob0006t09zgks3mz65","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS05/05.png","slug":"05.png","post":"ck14n5cob0006t09zgks3mz65","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS05/06.png","slug":"06.png","post":"ck14n5cob0006t09zgks3mz65","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS05/07.png","slug":"07.png","post":"ck14n5cob0006t09zgks3mz65","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS05/08.png","slug":"08.png","post":"ck14n5cob0006t09zgks3mz65","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS05/09.png","slug":"09.png","post":"ck14n5cob0006t09zgks3mz65","modified":0,"renderable":0},{"_id":"source/_posts/python基础1/01.png","slug":"01.png","post":"ck14n5cw0003jt09zx4w2yjn1","modified":0,"renderable":0},{"_id":"source/_posts/python基础1/02.png","slug":"02.png","post":"ck14n5cw0003jt09zx4w2yjn1","modified":0,"renderable":0},{"_id":"source/_posts/python基础1/03.png","slug":"03.png","post":"ck14n5cw0003jt09zx4w2yjn1","modified":0,"renderable":0},{"_id":"source/_posts/python基础1/04.png","slug":"04.png","post":"ck14n5cw0003jt09zx4w2yjn1","modified":0,"renderable":0},{"_id":"source/_posts/python基础1/05.png","slug":"05.png","post":"ck14n5cw0003jt09zx4w2yjn1","modified":0,"renderable":0},{"_id":"source/_posts/python基础1/06.png","slug":"06.png","post":"ck14n5cw0003jt09zx4w2yjn1","modified":0,"renderable":0},{"_id":"source/_posts/python基础1/07.png","slug":"07.png","post":"ck14n5cw0003jt09zx4w2yjn1","modified":0,"renderable":0},{"_id":"source/_posts/python基础1/08.png","slug":"08.png","post":"ck14n5cw0003jt09zx4w2yjn1","modified":0,"renderable":0},{"_id":"source/_posts/python基础1/09.png","slug":"09.png","post":"ck14n5cw0003jt09zx4w2yjn1","modified":0,"renderable":0},{"_id":"source/_posts/python基础1/10.png","slug":"10.png","post":"ck14n5cw0003jt09zx4w2yjn1","modified":0,"renderable":0},{"_id":"source/_posts/python基础1/11.png","slug":"11.png","post":"ck14n5cw0003jt09zx4w2yjn1","modified":0,"renderable":0},{"_id":"source/_posts/浏览器缓存/http01.png","slug":"http01.png","post":"ck14n5cwq004bt09zcltf4wyu","modified":0,"renderable":0},{"_id":"source/_posts/浏览器缓存/http02.png","slug":"http02.png","post":"ck14n5cwq004bt09zcltf4wyu","modified":0,"renderable":0},{"_id":"source/_posts/浏览器缓存/http03.png","slug":"http03.png","post":"ck14n5cwq004bt09zcltf4wyu","modified":0,"renderable":0},{"_id":"source/_posts/浏览器缓存/http04.png","slug":"http04.png","post":"ck14n5cwq004bt09zcltf4wyu","modified":0,"renderable":0},{"_id":"source/_posts/浏览器缓存/http05.png","slug":"http05.png","post":"ck14n5cwq004bt09zcltf4wyu","modified":0,"renderable":0},{"_id":"source/_posts/浏览器缓存/http06.png","slug":"http06.png","post":"ck14n5cwq004bt09zcltf4wyu","modified":0,"renderable":0},{"_id":"source/_posts/浏览器缓存/http07.png","slug":"http07.png","post":"ck14n5cwq004bt09zcltf4wyu","modified":0,"renderable":0},{"_id":"source/_posts/浏览器缓存/http08.png","slug":"http08.png","post":"ck14n5cwq004bt09zcltf4wyu","modified":0,"renderable":0},{"_id":"source/_posts/浏览器缓存/http09.png","slug":"http09.png","post":"ck14n5cwq004bt09zcltf4wyu","modified":0,"renderable":0},{"_id":"source/_posts/浏览器缓存/http10.png","slug":"http10.png","post":"ck14n5cwq004bt09zcltf4wyu","modified":0,"renderable":0},{"_id":"source/_posts/浏览器缓存/http11.png","slug":"http11.png","post":"ck14n5cwq004bt09zcltf4wyu","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS18/01.png","slug":"01.png","post":"ck14n5cu8001ht09zn4z91i0x","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS18/02.png","slug":"02.png","post":"ck14n5cu8001ht09zn4z91i0x","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS18/03.png","slug":"03.png","post":"ck14n5cu8001ht09zn4z91i0x","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS18/04.png","slug":"04.png","post":"ck14n5cu8001ht09zn4z91i0x","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS18/05.png","slug":"05.png","post":"ck14n5cu8001ht09zn4z91i0x","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS18/06.png","slug":"06.png","post":"ck14n5cu8001ht09zn4z91i0x","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS18/07.png","slug":"07.png","post":"ck14n5cu8001ht09zn4z91i0x","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS18/08.png","slug":"08.png","post":"ck14n5cu8001ht09zn4z91i0x","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS18/09.png","slug":"09.png","post":"ck14n5cu8001ht09zn4z91i0x","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS18/10.png","slug":"10.png","post":"ck14n5cu8001ht09zn4z91i0x","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS18/11.png","slug":"11.png","post":"ck14n5cu8001ht09zn4z91i0x","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS18/12.png","slug":"12.png","post":"ck14n5cu8001ht09zn4z91i0x","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS18/13.png","slug":"13.png","post":"ck14n5cu8001ht09zn4z91i0x","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS18/14.png","slug":"14.png","post":"ck14n5cu8001ht09zn4z91i0x","modified":0,"renderable":0},{"_id":"source/_posts/ArcGIS-API-for-JS18/15.png","slug":"15.png","post":"ck14n5cu8001ht09zn4z91i0x","modified":0,"renderable":0},{"_id":"source/_posts/遍历数组的常用方法/array01.png","slug":"array01.png","post":"ck14n5cy0005yt09zc9ldniu0","modified":0,"renderable":0},{"_id":"source/_posts/面试CSS/weilei01.png","slug":"weilei01.png","post":"ck14n5cy70065t09zkix92rau","modified":0,"renderable":0},{"_id":"source/_posts/面试CSS/weilei02.png","slug":"weilei02.png","post":"ck14n5cy70065t09zkix92rau","modified":0,"renderable":0},{"_id":"source/_posts/面试CSS/weilei03.png","slug":"weilei03.png","post":"ck14n5cy70065t09zkix92rau","modified":0,"renderable":0},{"_id":"source/_posts/闭包/1.png","slug":"1.png","post":"ck14n5cy20060t09z071kc5zb","modified":0,"renderable":0},{"_id":"source/_posts/闭包/2.png","slug":"2.png","post":"ck14n5cy20060t09z071kc5zb","modified":0,"renderable":0},{"_id":"source/_posts/闭包/3.png","slug":"3.png","post":"ck14n5cy20060t09z071kc5zb","modified":0,"renderable":0},{"_id":"source/_posts/闭包/4.png","slug":"4.png","post":"ck14n5cy20060t09z071kc5zb","modified":0,"renderable":0},{"_id":"source/_posts/闭包/5.png","slug":"5.png","post":"ck14n5cy20060t09z071kc5zb","modified":0,"renderable":0},{"_id":"source/_posts/原型/proto01.png","slug":"proto01.png","post":"ck14n5cyq0067t09zcugd995w","modified":0,"renderable":0},{"_id":"source/_posts/原型/proto02.png","slug":"proto02.png","post":"ck14n5cyq0067t09zcugd995w","modified":0,"renderable":0},{"_id":"source/_posts/原型/proto03.png","slug":"proto03.png","post":"ck14n5cyq0067t09zcugd995w","modified":0,"renderable":0},{"_id":"source/_posts/原型/proto04.png","slug":"proto04.png","post":"ck14n5cyq0067t09zcugd995w","modified":0,"renderable":0},{"_id":"source/_posts/原型/proto05.png","slug":"proto05.png","post":"ck14n5cyq0067t09zcugd995w","modified":0,"renderable":0},{"_id":"source/_posts/原型/proto06.png","slug":"proto06.png","post":"ck14n5cyq0067t09zcugd995w","modified":0,"renderable":0},{"_id":"source/_posts/python基础3/01.png","slug":"01.png","post":"ck14n5cyu006bt09zyrmq021m","modified":0,"renderable":0},{"_id":"source/_posts/python基础3/02.png","slug":"02.png","post":"ck14n5cyu006bt09zyrmq021m","modified":0,"renderable":0},{"_id":"source/_posts/python基础3/03.png","slug":"03.png","post":"ck14n5cyu006bt09zyrmq021m","modified":0,"renderable":0},{"_id":"source/_posts/python基础3/04.png","slug":"04.png","post":"ck14n5cyu006bt09zyrmq021m","modified":0,"renderable":0},{"_id":"source/_posts/python基础3/05.png","slug":"05.png","post":"ck14n5cyu006bt09zyrmq021m","modified":0,"renderable":0},{"_id":"source/_posts/python基础3/06.png","slug":"06.png","post":"ck14n5cyu006bt09zyrmq021m","modified":0,"renderable":0},{"_id":"source/_posts/python基础3/07.png","slug":"07.png","post":"ck14n5cyu006bt09zyrmq021m","modified":0,"renderable":0},{"_id":"source/_posts/python基础3/08.png","slug":"08.png","post":"ck14n5cyu006bt09zyrmq021m","modified":0,"renderable":0},{"_id":"source/_posts/python基础3/09.png","slug":"09.png","post":"ck14n5cyu006bt09zyrmq021m","modified":0,"renderable":0},{"_id":"source/_posts/python基础3/10.png","slug":"10.png","post":"ck14n5cyu006bt09zyrmq021m","modified":0,"renderable":0},{"_id":"source/_posts/python基础3/11.png","slug":"11.png","post":"ck14n5cyu006bt09zyrmq021m","modified":0,"renderable":0},{"_id":"source/_posts/python基础3/12.png","slug":"12.png","post":"ck14n5cyu006bt09zyrmq021m","modified":0,"renderable":0},{"_id":"source/_posts/python基础3/13.png","slug":"13.png","post":"ck14n5cyu006bt09zyrmq021m","modified":0,"renderable":0},{"_id":"source/_posts/python基础3/14.png","slug":"14.png","post":"ck14n5cyu006bt09zyrmq021m","modified":0,"renderable":0},{"_id":"source/_posts/python基础3/15.png","slug":"15.png","post":"ck14n5cyu006bt09zyrmq021m","modified":0,"renderable":0},{"_id":"source/_posts/python基础3/16.png","slug":"16.png","post":"ck14n5cyu006bt09zyrmq021m","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck14n5co90005t09z08pmk116","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5crn000dt09zfi2cd06j"},{"post_id":"ck14n5cnp0000t09znzshtu00","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cso000it09zgn53xjp6"},{"post_id":"ck14n5cob0006t09zgks3mz65","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5csw000lt09z6i1z04tv"},{"post_id":"ck14n5cr6000at09z8cnxzl3n","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5ct1000ot09znzfbfjun"},{"post_id":"ck14n5cny0001t09zc9rw4o17","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5ct7000rt09zixher5yw"},{"post_id":"ck14n5crk000ct09zq3rih8t2","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cte000ut09zexaho4zz"},{"post_id":"ck14n5crv000ht09zfcokg9tr","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5ctm000xt09zfr33nfk1"},{"post_id":"ck14n5co50004t09zptwturjw","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cto0010t09zr65jldzs"},{"post_id":"ck14n5csv000kt09zwqgznosl","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cty0013t09ze0jcc90s"},{"post_id":"ck14n5ct0000nt09znuk90bo8","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cu10016t09zrzegp47m"},{"post_id":"ck14n5ct6000qt09zd3g8zpni","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cu30019t09zcdiiv0r8"},{"post_id":"ck14n5ctd000tt09z5tm7vv51","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cu5001ct09zpiq55d2a"},{"post_id":"ck14n5ctk000wt09zfld3bd64","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cu7001ft09zl9g3spxf"},{"post_id":"ck14n5ctn000zt09zhydq53je","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cu9001it09z0kw0rhd2"},{"post_id":"ck14n5ctq0012t09zli7fc7xx","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cub001lt09zx30us9um"},{"post_id":"ck14n5cu00015t09ze53k773g","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cud001ot09zuslzx1gu"},{"post_id":"ck14n5cu20018t09zmoo3gp0s","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cug001rt09zz0ro14h3"},{"post_id":"ck14n5cu4001bt09z13cj7b0h","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cui001ut09z08sohhjt"},{"post_id":"ck14n5cu6001et09zut3zoz8d","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cuk001xt09zab7tpzw4"},{"post_id":"ck14n5cu8001ht09zn4z91i0x","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cun0021t09zaqo168m0"},{"post_id":"ck14n5cua001kt09z809cqhdn","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cuo0024t09zu5dciwtr"},{"post_id":"ck14n5cuc001nt09zqn06fsj0","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cuq0027t09zepiahv7e"},{"post_id":"ck14n5cuf001qt09zohzcuao7","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cus002at09z8vabb8s7"},{"post_id":"ck14n5cuh001tt09zcy417wb4","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cuw002ft09zd3vn64yb"},{"post_id":"ck14n5cul0020t09zfy3fqjgc","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cuy002it09z6fp8ejp2"},{"post_id":"ck14n5cun0023t09zjq818f39","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cv2002mt09zxtr98wjh"},{"post_id":"ck14n5cux002ht09z289axb1t","category_id":"ck14n5cut002bt09zsnp0zn3o","_id":"ck14n5cv7002qt09zukwhob9q"},{"post_id":"ck14n5cup0026t09z17dupb8v","category_id":"ck14n5cut002bt09zsnp0zn3o","_id":"ck14n5cva002ut09zg13jfag2"},{"post_id":"ck14n5cv4002ot09zdtstiwb0","category_id":"ck14n5cut002bt09zsnp0zn3o","_id":"ck14n5cvc002xt09zwftgvazo"},{"post_id":"ck14n5cur0029t09z49zahpj3","category_id":"ck14n5cv1002kt09zpj6x26yo","_id":"ck14n5cvf0031t09zyqhp3o6p"},{"post_id":"ck14n5cuu002et09z1irkebhe","category_id":"ck14n5cut002bt09zsnp0zn3o","_id":"ck14n5cvh0034t09zdg8n15jo"},{"post_id":"ck14n5cuz002jt09z5qrktq4z","category_id":"ck14n5cvd002yt09zhvzwfroc","_id":"ck14n5cvs003at09zcfyxjo4u"},{"post_id":"ck14n5cvi0037t09zq593ufxj","category_id":"ck14n5cvh0035t09zrfm8pli0","_id":"ck14n5cvy003gt09z4ckh6ofe"},{"post_id":"ck14n5cv6002pt09zrcurg61r","category_id":"ck14n5cvh0035t09zrfm8pli0","_id":"ck14n5cw1003kt09zy66yme63"},{"post_id":"ck14n5cvk0039t09zkkj5q89v","category_id":"ck14n5cvh0035t09zrfm8pli0","_id":"ck14n5cw6003nt09z40ykmlq9"},{"post_id":"ck14n5cvt003ct09zzidzjdpn","category_id":"ck14n5cvh0035t09zrfm8pli0","_id":"ck14n5cw8003rt09zbqmrhsha"},{"post_id":"ck14n5cv9002tt09zu5i2slra","category_id":"ck14n5cvh0035t09zrfm8pli0","_id":"ck14n5cwb003vt09z9v4ks07e"},{"post_id":"ck14n5cvb002wt09zcnhnwhsh","category_id":"ck14n5cvh0035t09zrfm8pli0","_id":"ck14n5cwe003yt09z0n848rk0"},{"post_id":"ck14n5cw7003qt09zu4oftp1o","category_id":"ck14n5cut002bt09zsnp0zn3o","_id":"ck14n5cwi0042t09zjg27oq6j"},{"post_id":"ck14n5cwa003ut09zobj6h13n","category_id":"ck14n5cvd002yt09zhvzwfroc","_id":"ck14n5cwl0045t09z4uwdgeeg"},{"post_id":"ck14n5cve0030t09zwo65q47y","category_id":"ck14n5cw7003pt09zpriwg5zy","_id":"ck14n5cwp0049t09zlu6pjvf1"},{"post_id":"ck14n5cwb003xt09z4vmnk0bz","category_id":"ck14n5cvd002yt09zhvzwfroc","_id":"ck14n5cwr004ct09z7g0yqk2g"},{"post_id":"ck14n5cvg0033t09z2izzpju2","category_id":"ck14n5cvh0035t09zrfm8pli0","_id":"ck14n5cwt004gt09zj1gvioju"},{"post_id":"ck14n5cwj0044t09zyo7ecip9","category_id":"ck14n5cut002bt09zsnp0zn3o","_id":"ck14n5cwv004jt09z6tj9uybq"},{"post_id":"ck14n5cwn0048t09zudc61cjc","category_id":"ck14n5cwl0046t09zs438ujzk","_id":"ck14n5cwy004ot09zl7kk8jbk"},{"post_id":"ck14n5cvw003ft09zidwsxysr","category_id":"ck14n5cwl0046t09zs438ujzk","_id":"ck14n5cx0004rt09z110hor10"},{"post_id":"ck14n5cwq004bt09zcltf4wyu","category_id":"ck14n5cut002bt09zsnp0zn3o","_id":"ck14n5cx2004vt09zcltepkkj"},{"post_id":"ck14n5cws004ft09zbtkcbzfx","category_id":"ck14n5co10002t09zr2fzqdsb","_id":"ck14n5cx3004xt09zxxv87qxo"},{"post_id":"ck14n5cw0003jt09zx4w2yjn1","category_id":"ck14n5cwl0046t09zs438ujzk","_id":"ck14n5cx4004zt09z9jcq4jgb"},{"post_id":"ck14n5cwu004it09zty0rul9h","category_id":"ck14n5cut002bt09zsnp0zn3o","_id":"ck14n5cx40051t09z0zqa7qz2"},{"post_id":"ck14n5cwx004nt09z6kjmup8b","category_id":"ck14n5cut002bt09zsnp0zn3o","_id":"ck14n5cx50052t09zy2d6uwwn"},{"post_id":"ck14n5cw4003mt09zrjgxfga0","category_id":"ck14n5cww004kt09z8mpzybzq","_id":"ck14n5cx60055t09zk5g1xsqz"},{"post_id":"ck14n5cx1004ut09zlr87ih5a","category_id":"ck14n5cut002bt09zsnp0zn3o","_id":"ck14n5cx60056t09zrgaq24al"},{"post_id":"ck14n5cwg0041t09zlqpy7yw3","category_id":"ck14n5cx0004st09zxbxf46sa","_id":"ck14n5cx70059t09z1aqy78s3"},{"post_id":"ck14n5cy0005yt09zc9ldniu0","category_id":"ck14n5cut002bt09zsnp0zn3o","_id":"ck14n5cy80066t09zf6dweotc"},{"post_id":"ck14n5cy20060t09z071kc5zb","category_id":"ck14n5cut002bt09zsnp0zn3o","_id":"ck14n5cyr0068t09zecwdrscx"},{"post_id":"ck14n5cy50063t09zr6tspfym","category_id":"ck14n5cut002bt09zsnp0zn3o","_id":"ck14n5cyx006ct09z4phshpag"},{"post_id":"ck14n5cy70065t09zkix92rau","category_id":"ck14n5cut002bt09zsnp0zn3o","_id":"ck14n5czh006et09zmjdmjn13"},{"post_id":"ck14n5cyq0067t09zcugd995w","category_id":"ck14n5cut002bt09zsnp0zn3o","_id":"ck14n5d00006ht09zkg9ki41w"},{"post_id":"ck14n5cyu006bt09zyrmq021m","category_id":"ck14n5cwl0046t09zs438ujzk","_id":"ck14n5d0k006jt09z7zpxyusr"},{"post_id":"ck26411fr0000pk9zd8373teg","category_id":"ck14n5cut002bt09zsnp0zn3o","_id":"ck26411pi0002pk9zwuvdt8kp"}],"PostTag":[{"post_id":"ck14n5co90005t09z08pmk116","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5cr20009t09zpppntn9w"},{"post_id":"ck14n5cnp0000t09znzshtu00","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5crh000bt09zf6ooy09x"},{"post_id":"ck14n5cob0006t09zgks3mz65","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5cru000gt09zqjt3k3zr"},{"post_id":"ck14n5cr6000at09z8cnxzl3n","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5csu000jt09za3f4tjbz"},{"post_id":"ck14n5cny0001t09zc9rw4o17","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5ct0000mt09z0djlxju2"},{"post_id":"ck14n5crk000ct09zq3rih8t2","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5ct6000pt09z4ierx2ed"},{"post_id":"ck14n5crv000ht09zfcokg9tr","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5ctd000st09zvlo60nq8"},{"post_id":"ck14n5co50004t09zptwturjw","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5ctk000vt09z896nuvsg"},{"post_id":"ck14n5csv000kt09zwqgznosl","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5ctn000yt09z6o0yvvl2"},{"post_id":"ck14n5ct0000nt09znuk90bo8","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5ctp0011t09zbfk71y7k"},{"post_id":"ck14n5ct6000qt09zd3g8zpni","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5ctz0014t09zjmq5e7hi"},{"post_id":"ck14n5ctd000tt09z5tm7vv51","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5cu20017t09zqex3zk9f"},{"post_id":"ck14n5ctk000wt09zfld3bd64","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5cu4001at09z0uk5dmwg"},{"post_id":"ck14n5ctn000zt09zhydq53je","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5cu6001dt09z63benrkp"},{"post_id":"ck14n5ctq0012t09zli7fc7xx","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5cu7001gt09zbvx8h96l"},{"post_id":"ck14n5cu00015t09ze53k773g","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5cua001jt09z8zm3h5us"},{"post_id":"ck14n5cu20018t09zmoo3gp0s","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5cuc001mt09zs4lij4gl"},{"post_id":"ck14n5cu4001bt09z13cj7b0h","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5cue001pt09z0qq0a9px"},{"post_id":"ck14n5cu6001et09zut3zoz8d","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5cug001st09z5vij21ki"},{"post_id":"ck14n5cu8001ht09zn4z91i0x","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5cuj001vt09zhyrepu3g"},{"post_id":"ck14n5cua001kt09z809cqhdn","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5cul001zt09z7nxz1gk7"},{"post_id":"ck14n5cuc001nt09zqn06fsj0","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5cun0022t09zdk9tqdje"},{"post_id":"ck14n5cuf001qt09zohzcuao7","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5cup0025t09z9wmk2r60"},{"post_id":"ck14n5cul0020t09zfy3fqjgc","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5cur0028t09zlg75ys2z"},{"post_id":"ck14n5cun0023t09zjq818f39","tag_id":"ck14n5co40003t09zscrz0x43","_id":"ck14n5cuu002dt09zd81hzben"},{"post_id":"ck14n5cuh001tt09zcy417wb4","tag_id":"ck14n5cul001yt09zckoz7wfp","_id":"ck14n5cuw002gt09z7x07nfgj"},{"post_id":"ck14n5cup0026t09z17dupb8v","tag_id":"ck14n5cut002ct09zxcurqe8s","_id":"ck14n5cv3002nt09zdo02xkns"},{"post_id":"ck14n5cur0029t09z49zahpj3","tag_id":"ck14n5cv2002lt09zp5nhhzji","_id":"ck14n5cva002vt09zekr6oap2"},{"post_id":"ck14n5cuu002et09z1irkebhe","tag_id":"ck14n5cv8002st09zrf37ify7","_id":"ck14n5cvg0032t09zpdgh7rcz"},{"post_id":"ck14n5cux002ht09z289axb1t","tag_id":"ck14n5cvd002zt09zo1xyix7w","_id":"ck14n5cvj0038t09z1t9m3wxb"},{"post_id":"ck14n5cvk0039t09zkkj5q89v","tag_id":"ck14n5cvi0036t09z6smnqggy","_id":"ck14n5cvw003et09zhete45gz"},{"post_id":"ck14n5cvt003ct09zzidzjdpn","tag_id":"ck14n5cvi0036t09z6smnqggy","_id":"ck14n5cvy003ht09zr099h9jh"},{"post_id":"ck14n5cuz002jt09z5qrktq4z","tag_id":"ck14n5cvi0036t09z6smnqggy","_id":"ck14n5cw6003ot09z8i82v9us"},{"post_id":"ck14n5cuz002jt09z5qrktq4z","tag_id":"ck14n5cvv003dt09zzbbrki4c","_id":"ck14n5cw8003st09zv1r6cvns"},{"post_id":"ck14n5cv4002ot09zdtstiwb0","tag_id":"ck14n5cw2003lt09zhzjs4wbr","_id":"ck14n5cwb003wt09zn0ksbte7"},{"post_id":"ck14n5cv6002pt09zrcurg61r","tag_id":"ck14n5cvi0036t09z6smnqggy","_id":"ck14n5cwi0043t09zasnltimz"},{"post_id":"ck14n5cv9002tt09zu5i2slra","tag_id":"ck14n5cvi0036t09z6smnqggy","_id":"ck14n5cwp004at09zr4nt8p88"},{"post_id":"ck14n5cvb002wt09zcnhnwhsh","tag_id":"ck14n5cvi0036t09z6smnqggy","_id":"ck14n5cwu004ht09zu3b7uxnu"},{"post_id":"ck14n5cws004ft09zbtkcbzfx","tag_id":"ck14n5cul001yt09zckoz7wfp","_id":"ck14n5cww004lt09zg2hxzrhk"},{"post_id":"ck14n5cve0030t09zwo65q47y","tag_id":"ck14n5cws004et09zkz7o9mmk","_id":"ck14n5cwy004pt09zjwcpoeq3"},{"post_id":"ck14n5cvg0033t09z2izzpju2","tag_id":"ck14n5cvi0036t09z6smnqggy","_id":"ck14n5cx3004wt09z3dpv3ipt"},{"post_id":"ck14n5cvi0037t09zq593ufxj","tag_id":"ck14n5cvi0036t09z6smnqggy","_id":"ck14n5cx40050t09z4lo9dlvi"},{"post_id":"ck14n5cvw003ft09zidwsxysr","tag_id":"ck14n5cx4004yt09zlnuuqanf","_id":"ck14n5cx60054t09zcl8k3hi7"},{"post_id":"ck14n5cw0003jt09zx4w2yjn1","tag_id":"ck14n5cx4004yt09zlnuuqanf","_id":"ck14n5cx70058t09zqxwhurjn"},{"post_id":"ck14n5cw4003mt09zrjgxfga0","tag_id":"ck14n5cx60057t09z1bl7iqqe","_id":"ck14n5cx7005bt09z8w0wl06f"},{"post_id":"ck14n5cw7003qt09zu4oftp1o","tag_id":"ck14n5cx7005at09zl75xm93g","_id":"ck14n5cx8005dt09zqa9rmmul"},{"post_id":"ck14n5cwa003ut09zobj6h13n","tag_id":"ck14n5cx8005ct09z3ch1fv6c","_id":"ck14n5cx9005ft09zk6ahhk10"},{"post_id":"ck14n5cwb003xt09z4vmnk0bz","tag_id":"ck14n5cx8005ct09z3ch1fv6c","_id":"ck14n5cx9005ht09z1avgm1ih"},{"post_id":"ck14n5cwg0041t09zlqpy7yw3","tag_id":"ck14n5cx9005gt09zbqodlpon","_id":"ck14n5cxa005jt09zaxyi5amj"},{"post_id":"ck14n5cwj0044t09zyo7ecip9","tag_id":"ck14n5cxa005it09zyl01x536","_id":"ck14n5cxb005mt09zzwetggng"},{"post_id":"ck14n5cwj0044t09zyo7ecip9","tag_id":"ck14n5cxa005kt09z354jxrh3","_id":"ck14n5cxb005nt09zjh1j0j1q"},{"post_id":"ck14n5cwn0048t09zudc61cjc","tag_id":"ck14n5cx4004yt09zlnuuqanf","_id":"ck14n5cxc005pt09z8hjzgj4o"},{"post_id":"ck14n5cwq004bt09zcltf4wyu","tag_id":"ck14n5cvd002zt09zo1xyix7w","_id":"ck14n5cxd005rt09zmfsrnyq7"},{"post_id":"ck14n5cwq004bt09zcltf4wyu","tag_id":"ck14n5cxc005ot09z6uzinjd0","_id":"ck14n5cxd005st09zbvjpheih"},{"post_id":"ck14n5cwu004it09zty0rul9h","tag_id":"ck14n5cxc005qt09z0ull63qk","_id":"ck14n5cxd005ut09zg2lir7g2"},{"post_id":"ck14n5cwx004nt09z6kjmup8b","tag_id":"ck14n5cxd005tt09zyoptdm4q","_id":"ck14n5cxe005wt09zcxlmv2ri"},{"post_id":"ck14n5cx1004ut09zlr87ih5a","tag_id":"ck14n5cxe005vt09zb4y92g75","_id":"ck14n5cxe005xt09zrg9bgbko"},{"post_id":"ck14n5cy70065t09zkix92rau","tag_id":"ck14n5cxa005it09zyl01x536","_id":"ck14n5cyt006at09zd5qh819v"},{"post_id":"ck14n5cy0005yt09zc9ldniu0","tag_id":"ck14n5cy40062t09zk1l58bb1","_id":"ck14n5czf006dt09zm3blnlq6"},{"post_id":"ck14n5cyu006bt09zyrmq021m","tag_id":"ck14n5cx4004yt09zlnuuqanf","_id":"ck14n5czz006gt09zhx5kh4tp"},{"post_id":"ck14n5cy20060t09z071kc5zb","tag_id":"ck14n5cys0069t09z1axm0rio","_id":"ck14n5d0g006it09z7mx5bymr"},{"post_id":"ck14n5cy50063t09zr6tspfym","tag_id":"ck14n5czh006ft09z9zzml9m5","_id":"ck14n5d0m006lt09zdrzhgim4"},{"post_id":"ck14n5cyq0067t09zcugd995w","tag_id":"ck14n5d0l006kt09zgj6tf888","_id":"ck14n5d0m006mt09zycw5ne3q"},{"post_id":"ck26411fr0000pk9zd8373teg","tag_id":"ck14n5cxa005it09zyl01x536","_id":"ck26411pf0001pk9ztta2wyre"}],"Tag":[{"name":"ArcGIS API for JS","_id":"ck14n5co40003t09zscrz0x43"},{"name":"ArcGIS","_id":"ck14n5cul001yt09zckoz7wfp"},{"name":"WebSocket","_id":"ck14n5cut002ct09zxcurqe8s"},{"name":"git","_id":"ck14n5cv2002lt09zp5nhhzji"},{"name":"js","_id":"ck14n5cv8002st09zrf37ify7"},{"name":"http","_id":"ck14n5cvd002zt09zo1xyix7w"},{"name":"Node.js","_id":"ck14n5cvi0036t09z6smnqggy"},{"name":"vue","_id":"ck14n5cvv003dt09zzbbrki4c"},{"name":"Promise","_id":"ck14n5cw2003lt09zhzjs4wbr"},{"name":"hexo","_id":"ck14n5cws004et09zkz7o9mmk"},{"name":"python基础","_id":"ck14n5cx4004yt09zlnuuqanf"},{"name":"React","_id":"ck14n5cx60057t09z1bl7iqqe"},{"name":"tcp","_id":"ck14n5cx7005at09zl75xm93g"},{"name":"VUE","_id":"ck14n5cx8005ct09z3ch1fv6c"},{"name":"前端工作流","_id":"ck14n5cx9005gt09zbqodlpon"},{"name":"CSS","_id":"ck14n5cxa005it09zyl01x536"},{"name":"居中","_id":"ck14n5cxa005kt09z354jxrh3"},{"name":"缓存","_id":"ck14n5cxc005ot09z6uzinjd0"},{"name":"盒模型","_id":"ck14n5cxc005qt09z0ull63qk"},{"name":"cookie","_id":"ck14n5cxd005tt09zyoptdm4q"},{"name":"跨域","_id":"ck14n5cxe005vt09zb4y92g75"},{"name":"数组","_id":"ck14n5cy40062t09zk1l58bb1"},{"name":"闭包","_id":"ck14n5cys0069t09z1axm0rio"},{"name":"JS","_id":"ck14n5czh006ft09z9zzml9m5"},{"name":"原型，继承","_id":"ck14n5d0l006kt09zgj6tf888"}]}}